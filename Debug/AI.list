
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  000401f8  2**0
                  CONTENTS
  2 .text         0000c5fc  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004498  0801c5fc  0801c5fc  0002c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08020a94  08020a94  00030a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08020a9c  08020a9c  00030a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08020aa0  08020aa0  00030aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001f8  20000000  08020aa4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000401f8  2**0
                  CONTENTS
  9 .bss          0000bb90  200001f8  200001f8  000401f8  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  2000bd88  2000bd88  000401f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005aefd  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b624  00000000  00000000  0009b125  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018c81  00000000  00000000  000a6749  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d08  00000000  00000000  000bf3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002960  00000000  00000000  000c10d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016398  00000000  00000000  000c3a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a0d5  00000000  00000000  000d9dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  000e3ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005704  00000000  00000000  000e3f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	200001f8 	.word	0x200001f8
 801001c:	00000000 	.word	0x00000000
 8010020:	0801c5e4 	.word	0x0801c5e4

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	200001fc 	.word	0x200001fc
 801003c:	0801c5e4 	.word	0x0801c5e4

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr

08010064 <__aeabi_uldivmod>:
 8010064:	b953      	cbnz	r3, 801007c <__aeabi_uldivmod+0x18>
 8010066:	b94a      	cbnz	r2, 801007c <__aeabi_uldivmod+0x18>
 8010068:	2900      	cmp	r1, #0
 801006a:	bf08      	it	eq
 801006c:	2800      	cmpeq	r0, #0
 801006e:	bf1c      	itt	ne
 8010070:	f04f 31ff 	movne.w	r1, #4294967295
 8010074:	f04f 30ff 	movne.w	r0, #4294967295
 8010078:	f000 b97a 	b.w	8010370 <__aeabi_idiv0>
 801007c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010084:	f000 f806 	bl	8010094 <__udivmoddi4>
 8010088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010090:	b004      	add	sp, #16
 8010092:	4770      	bx	lr

08010094 <__udivmoddi4>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	468c      	mov	ip, r1
 801009a:	460d      	mov	r5, r1
 801009c:	4604      	mov	r4, r0
 801009e:	9e08      	ldr	r6, [sp, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d151      	bne.n	8010148 <__udivmoddi4+0xb4>
 80100a4:	428a      	cmp	r2, r1
 80100a6:	4617      	mov	r7, r2
 80100a8:	d96d      	bls.n	8010186 <__udivmoddi4+0xf2>
 80100aa:	fab2 fe82 	clz	lr, r2
 80100ae:	f1be 0f00 	cmp.w	lr, #0
 80100b2:	d00b      	beq.n	80100cc <__udivmoddi4+0x38>
 80100b4:	f1ce 0c20 	rsb	ip, lr, #32
 80100b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80100bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80100c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80100c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80100cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100d0:	0c25      	lsrs	r5, r4, #16
 80100d2:	fbbc f8fa 	udiv	r8, ip, sl
 80100d6:	fa1f f987 	uxth.w	r9, r7
 80100da:	fb0a cc18 	mls	ip, sl, r8, ip
 80100de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100e2:	fb08 f309 	mul.w	r3, r8, r9
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d90a      	bls.n	8010100 <__udivmoddi4+0x6c>
 80100ea:	19ed      	adds	r5, r5, r7
 80100ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80100f0:	f080 8123 	bcs.w	801033a <__udivmoddi4+0x2a6>
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	f240 8120 	bls.w	801033a <__udivmoddi4+0x2a6>
 80100fa:	f1a8 0802 	sub.w	r8, r8, #2
 80100fe:	443d      	add	r5, r7
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	b2a4      	uxth	r4, r4
 8010104:	fbb5 f0fa 	udiv	r0, r5, sl
 8010108:	fb0a 5510 	mls	r5, sl, r0, r5
 801010c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010110:	fb00 f909 	mul.w	r9, r0, r9
 8010114:	45a1      	cmp	r9, r4
 8010116:	d909      	bls.n	801012c <__udivmoddi4+0x98>
 8010118:	19e4      	adds	r4, r4, r7
 801011a:	f100 33ff 	add.w	r3, r0, #4294967295
 801011e:	f080 810a 	bcs.w	8010336 <__udivmoddi4+0x2a2>
 8010122:	45a1      	cmp	r9, r4
 8010124:	f240 8107 	bls.w	8010336 <__udivmoddi4+0x2a2>
 8010128:	3802      	subs	r0, #2
 801012a:	443c      	add	r4, r7
 801012c:	eba4 0409 	sub.w	r4, r4, r9
 8010130:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010134:	2100      	movs	r1, #0
 8010136:	2e00      	cmp	r6, #0
 8010138:	d061      	beq.n	80101fe <__udivmoddi4+0x16a>
 801013a:	fa24 f40e 	lsr.w	r4, r4, lr
 801013e:	2300      	movs	r3, #0
 8010140:	6034      	str	r4, [r6, #0]
 8010142:	6073      	str	r3, [r6, #4]
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	428b      	cmp	r3, r1
 801014a:	d907      	bls.n	801015c <__udivmoddi4+0xc8>
 801014c:	2e00      	cmp	r6, #0
 801014e:	d054      	beq.n	80101fa <__udivmoddi4+0x166>
 8010150:	2100      	movs	r1, #0
 8010152:	e886 0021 	stmia.w	r6, {r0, r5}
 8010156:	4608      	mov	r0, r1
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	fab3 f183 	clz	r1, r3
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 808e 	bne.w	8010282 <__udivmoddi4+0x1ee>
 8010166:	42ab      	cmp	r3, r5
 8010168:	d302      	bcc.n	8010170 <__udivmoddi4+0xdc>
 801016a:	4282      	cmp	r2, r0
 801016c:	f200 80fa 	bhi.w	8010364 <__udivmoddi4+0x2d0>
 8010170:	1a84      	subs	r4, r0, r2
 8010172:	eb65 0503 	sbc.w	r5, r5, r3
 8010176:	2001      	movs	r0, #1
 8010178:	46ac      	mov	ip, r5
 801017a:	2e00      	cmp	r6, #0
 801017c:	d03f      	beq.n	80101fe <__udivmoddi4+0x16a>
 801017e:	e886 1010 	stmia.w	r6, {r4, ip}
 8010182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010186:	b912      	cbnz	r2, 801018e <__udivmoddi4+0xfa>
 8010188:	2701      	movs	r7, #1
 801018a:	fbb7 f7f2 	udiv	r7, r7, r2
 801018e:	fab7 fe87 	clz	lr, r7
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	d134      	bne.n	8010202 <__udivmoddi4+0x16e>
 8010198:	1beb      	subs	r3, r5, r7
 801019a:	0c3a      	lsrs	r2, r7, #16
 801019c:	fa1f fc87 	uxth.w	ip, r7
 80101a0:	2101      	movs	r1, #1
 80101a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80101a6:	0c25      	lsrs	r5, r4, #16
 80101a8:	fb02 3318 	mls	r3, r2, r8, r3
 80101ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101b0:	fb0c f308 	mul.w	r3, ip, r8
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d907      	bls.n	80101c8 <__udivmoddi4+0x134>
 80101b8:	19ed      	adds	r5, r5, r7
 80101ba:	f108 30ff 	add.w	r0, r8, #4294967295
 80101be:	d202      	bcs.n	80101c6 <__udivmoddi4+0x132>
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	f200 80d1 	bhi.w	8010368 <__udivmoddi4+0x2d4>
 80101c6:	4680      	mov	r8, r0
 80101c8:	1aed      	subs	r5, r5, r3
 80101ca:	b2a3      	uxth	r3, r4
 80101cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80101d0:	fb02 5510 	mls	r5, r2, r0, r5
 80101d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101d8:	fb0c fc00 	mul.w	ip, ip, r0
 80101dc:	45a4      	cmp	ip, r4
 80101de:	d907      	bls.n	80101f0 <__udivmoddi4+0x15c>
 80101e0:	19e4      	adds	r4, r4, r7
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d202      	bcs.n	80101ee <__udivmoddi4+0x15a>
 80101e8:	45a4      	cmp	ip, r4
 80101ea:	f200 80b8 	bhi.w	801035e <__udivmoddi4+0x2ca>
 80101ee:	4618      	mov	r0, r3
 80101f0:	eba4 040c 	sub.w	r4, r4, ip
 80101f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101f8:	e79d      	b.n	8010136 <__udivmoddi4+0xa2>
 80101fa:	4631      	mov	r1, r6
 80101fc:	4630      	mov	r0, r6
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f1ce 0420 	rsb	r4, lr, #32
 8010206:	fa05 f30e 	lsl.w	r3, r5, lr
 801020a:	fa07 f70e 	lsl.w	r7, r7, lr
 801020e:	fa20 f804 	lsr.w	r8, r0, r4
 8010212:	0c3a      	lsrs	r2, r7, #16
 8010214:	fa25 f404 	lsr.w	r4, r5, r4
 8010218:	ea48 0803 	orr.w	r8, r8, r3
 801021c:	fbb4 f1f2 	udiv	r1, r4, r2
 8010220:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010224:	fb02 4411 	mls	r4, r2, r1, r4
 8010228:	fa1f fc87 	uxth.w	ip, r7
 801022c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8010230:	fb01 f30c 	mul.w	r3, r1, ip
 8010234:	42ab      	cmp	r3, r5
 8010236:	fa00 f40e 	lsl.w	r4, r0, lr
 801023a:	d909      	bls.n	8010250 <__udivmoddi4+0x1bc>
 801023c:	19ed      	adds	r5, r5, r7
 801023e:	f101 30ff 	add.w	r0, r1, #4294967295
 8010242:	f080 808a 	bcs.w	801035a <__udivmoddi4+0x2c6>
 8010246:	42ab      	cmp	r3, r5
 8010248:	f240 8087 	bls.w	801035a <__udivmoddi4+0x2c6>
 801024c:	3902      	subs	r1, #2
 801024e:	443d      	add	r5, r7
 8010250:	1aeb      	subs	r3, r5, r3
 8010252:	fa1f f588 	uxth.w	r5, r8
 8010256:	fbb3 f0f2 	udiv	r0, r3, r2
 801025a:	fb02 3310 	mls	r3, r2, r0, r3
 801025e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010262:	fb00 f30c 	mul.w	r3, r0, ip
 8010266:	42ab      	cmp	r3, r5
 8010268:	d907      	bls.n	801027a <__udivmoddi4+0x1e6>
 801026a:	19ed      	adds	r5, r5, r7
 801026c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010270:	d26f      	bcs.n	8010352 <__udivmoddi4+0x2be>
 8010272:	42ab      	cmp	r3, r5
 8010274:	d96d      	bls.n	8010352 <__udivmoddi4+0x2be>
 8010276:	3802      	subs	r0, #2
 8010278:	443d      	add	r5, r7
 801027a:	1aeb      	subs	r3, r5, r3
 801027c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010280:	e78f      	b.n	80101a2 <__udivmoddi4+0x10e>
 8010282:	f1c1 0720 	rsb	r7, r1, #32
 8010286:	fa22 f807 	lsr.w	r8, r2, r7
 801028a:	408b      	lsls	r3, r1
 801028c:	fa05 f401 	lsl.w	r4, r5, r1
 8010290:	ea48 0303 	orr.w	r3, r8, r3
 8010294:	fa20 fe07 	lsr.w	lr, r0, r7
 8010298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801029c:	40fd      	lsrs	r5, r7
 801029e:	ea4e 0e04 	orr.w	lr, lr, r4
 80102a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80102a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ae:	fa1f f883 	uxth.w	r8, r3
 80102b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102b6:	fb09 f408 	mul.w	r4, r9, r8
 80102ba:	42ac      	cmp	r4, r5
 80102bc:	fa02 f201 	lsl.w	r2, r2, r1
 80102c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80102c4:	d908      	bls.n	80102d8 <__udivmoddi4+0x244>
 80102c6:	18ed      	adds	r5, r5, r3
 80102c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80102cc:	d243      	bcs.n	8010356 <__udivmoddi4+0x2c2>
 80102ce:	42ac      	cmp	r4, r5
 80102d0:	d941      	bls.n	8010356 <__udivmoddi4+0x2c2>
 80102d2:	f1a9 0902 	sub.w	r9, r9, #2
 80102d6:	441d      	add	r5, r3
 80102d8:	1b2d      	subs	r5, r5, r4
 80102da:	fa1f fe8e 	uxth.w	lr, lr
 80102de:	fbb5 f0fc 	udiv	r0, r5, ip
 80102e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80102e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80102ea:	fb00 f808 	mul.w	r8, r0, r8
 80102ee:	45a0      	cmp	r8, r4
 80102f0:	d907      	bls.n	8010302 <__udivmoddi4+0x26e>
 80102f2:	18e4      	adds	r4, r4, r3
 80102f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80102f8:	d229      	bcs.n	801034e <__udivmoddi4+0x2ba>
 80102fa:	45a0      	cmp	r8, r4
 80102fc:	d927      	bls.n	801034e <__udivmoddi4+0x2ba>
 80102fe:	3802      	subs	r0, #2
 8010300:	441c      	add	r4, r3
 8010302:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010306:	eba4 0408 	sub.w	r4, r4, r8
 801030a:	fba0 8902 	umull	r8, r9, r0, r2
 801030e:	454c      	cmp	r4, r9
 8010310:	46c6      	mov	lr, r8
 8010312:	464d      	mov	r5, r9
 8010314:	d315      	bcc.n	8010342 <__udivmoddi4+0x2ae>
 8010316:	d012      	beq.n	801033e <__udivmoddi4+0x2aa>
 8010318:	b156      	cbz	r6, 8010330 <__udivmoddi4+0x29c>
 801031a:	ebba 030e 	subs.w	r3, sl, lr
 801031e:	eb64 0405 	sbc.w	r4, r4, r5
 8010322:	fa04 f707 	lsl.w	r7, r4, r7
 8010326:	40cb      	lsrs	r3, r1
 8010328:	431f      	orrs	r7, r3
 801032a:	40cc      	lsrs	r4, r1
 801032c:	6037      	str	r7, [r6, #0]
 801032e:	6074      	str	r4, [r6, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	4618      	mov	r0, r3
 8010338:	e6f8      	b.n	801012c <__udivmoddi4+0x98>
 801033a:	4690      	mov	r8, r2
 801033c:	e6e0      	b.n	8010100 <__udivmoddi4+0x6c>
 801033e:	45c2      	cmp	sl, r8
 8010340:	d2ea      	bcs.n	8010318 <__udivmoddi4+0x284>
 8010342:	ebb8 0e02 	subs.w	lr, r8, r2
 8010346:	eb69 0503 	sbc.w	r5, r9, r3
 801034a:	3801      	subs	r0, #1
 801034c:	e7e4      	b.n	8010318 <__udivmoddi4+0x284>
 801034e:	4628      	mov	r0, r5
 8010350:	e7d7      	b.n	8010302 <__udivmoddi4+0x26e>
 8010352:	4640      	mov	r0, r8
 8010354:	e791      	b.n	801027a <__udivmoddi4+0x1e6>
 8010356:	4681      	mov	r9, r0
 8010358:	e7be      	b.n	80102d8 <__udivmoddi4+0x244>
 801035a:	4601      	mov	r1, r0
 801035c:	e778      	b.n	8010250 <__udivmoddi4+0x1bc>
 801035e:	3802      	subs	r0, #2
 8010360:	443c      	add	r4, r7
 8010362:	e745      	b.n	80101f0 <__udivmoddi4+0x15c>
 8010364:	4608      	mov	r0, r1
 8010366:	e708      	b.n	801017a <__udivmoddi4+0xe6>
 8010368:	f1a8 0802 	sub.w	r8, r8, #2
 801036c:	443d      	add	r5, r7
 801036e:	e72b      	b.n	80101c8 <__udivmoddi4+0x134>

08010370 <__aeabi_idiv0>:
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010374:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010376:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <HAL_Init+0x30>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801037e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010386:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801038e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010390:	2003      	movs	r0, #3
 8010392:	f000 f82f 	bl	80103f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010396:	2000      	movs	r0, #0
 8010398:	f00b fb64 	bl	801ba64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801039c:	f00b fb40 	bl	801ba20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80103a0:	2000      	movs	r0, #0
 80103a2:	bd08      	pop	{r3, pc}
 80103a4:	40023c00 	.word	0x40023c00

080103a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80103a8:	4a03      	ldr	r2, [pc, #12]	; (80103b8 <HAL_IncTick+0x10>)
 80103aa:	4b04      	ldr	r3, [pc, #16]	; (80103bc <HAL_IncTick+0x14>)
 80103ac:	6811      	ldr	r1, [r2, #0]
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	440b      	add	r3, r1
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	20004414 	.word	0x20004414
 80103bc:	20000000 	.word	0x20000000

080103c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80103c0:	4b01      	ldr	r3, [pc, #4]	; (80103c8 <HAL_GetTick+0x8>)
 80103c2:	6818      	ldr	r0, [r3, #0]
}
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	20004414 	.word	0x20004414

080103cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80103d0:	f7ff fff6 	bl	80103c0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80103d4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80103d6:	bf1c      	itt	ne
 80103d8:	4b05      	ldrne	r3, [pc, #20]	; (80103f0 <HAL_Delay+0x24>)
 80103da:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80103dc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80103de:	bf18      	it	ne
 80103e0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80103e2:	f7ff ffed 	bl	80103c0 <HAL_GetTick>
 80103e6:	1b40      	subs	r0, r0, r5
 80103e8:	4284      	cmp	r4, r0
 80103ea:	d8fa      	bhi.n	80103e2 <HAL_Delay+0x16>
  {
  }
}
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
 80103ee:	bf00      	nop
 80103f0:	20000000 	.word	0x20000000

080103f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80103f4:	4a07      	ldr	r2, [pc, #28]	; (8010414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80103f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80103f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80103fc:	041b      	lsls	r3, r3, #16
 80103fe:	0c1b      	lsrs	r3, r3, #16
 8010400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8010404:	0200      	lsls	r0, r0, #8
 8010406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801040a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 801040e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8010410:	60d3      	str	r3, [r2, #12]
 8010412:	4770      	bx	lr
 8010414:	e000ed00 	.word	0xe000ed00

08010418 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010418:	4b17      	ldr	r3, [pc, #92]	; (8010478 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801041a:	b530      	push	{r4, r5, lr}
 801041c:	68dc      	ldr	r4, [r3, #12]
 801041e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010422:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010426:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010428:	2b04      	cmp	r3, #4
 801042a:	bf28      	it	cs
 801042c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801042e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010430:	f04f 0501 	mov.w	r5, #1
 8010434:	fa05 f303 	lsl.w	r3, r5, r3
 8010438:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801043c:	bf8c      	ite	hi
 801043e:	3c03      	subhi	r4, #3
 8010440:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010442:	4019      	ands	r1, r3
 8010444:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010446:	fa05 f404 	lsl.w	r4, r5, r4
 801044a:	3c01      	subs	r4, #1
 801044c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 801044e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010450:	ea42 0201 	orr.w	r2, r2, r1
 8010454:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010458:	bfaf      	iteee	ge
 801045a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801045e:	f000 000f 	andlt.w	r0, r0, #15
 8010462:	4b06      	ldrlt	r3, [pc, #24]	; (801047c <HAL_NVIC_SetPriority+0x64>)
 8010464:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010466:	bfa5      	ittet	ge
 8010468:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 801046c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801046e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010470:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	bf00      	nop
 8010478:	e000ed00 	.word	0xe000ed00
 801047c:	e000ed14 	.word	0xe000ed14

08010480 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010480:	0942      	lsrs	r2, r0, #5
 8010482:	2301      	movs	r3, #1
 8010484:	f000 001f 	and.w	r0, r0, #31
 8010488:	fa03 f000 	lsl.w	r0, r3, r0
 801048c:	4b01      	ldr	r3, [pc, #4]	; (8010494 <HAL_NVIC_EnableIRQ+0x14>)
 801048e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010492:	4770      	bx	lr
 8010494:	e000e100 	.word	0xe000e100

08010498 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010498:	0943      	lsrs	r3, r0, #5
 801049a:	2201      	movs	r2, #1
 801049c:	f000 001f 	and.w	r0, r0, #31
 80104a0:	fa02 f000 	lsl.w	r0, r2, r0
 80104a4:	3320      	adds	r3, #32
 80104a6:	4a02      	ldr	r2, [pc, #8]	; (80104b0 <HAL_NVIC_DisableIRQ+0x18>)
 80104a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	e000e100 	.word	0xe000e100

080104b4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80104b4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80104b8:	2b02      	cmp	r3, #2
 80104ba:	d003      	beq.n	80104c4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80104bc:	2380      	movs	r3, #128	; 0x80
 80104be:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80104c0:	2001      	movs	r0, #1
 80104c2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80104c4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80104c6:	2305      	movs	r3, #5
 80104c8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80104cc:	6813      	ldr	r3, [r2, #0]
 80104ce:	f023 0301 	bic.w	r3, r3, #1
 80104d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80104d4:	2000      	movs	r0, #0
}
 80104d6:	4770      	bx	lr

080104d8 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 80104d8:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80104da:	4b07      	ldr	r3, [pc, #28]	; (80104f8 <ETH_Delay.constprop.4+0x20>)
 80104dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80104e6:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80104e8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80104ea:	9b01      	ldr	r3, [sp, #4]
 80104ec:	1e5a      	subs	r2, r3, #1
 80104ee:	9201      	str	r2, [sp, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1f9      	bne.n	80104e8 <ETH_Delay.constprop.4+0x10>
}
 80104f4:	b002      	add	sp, #8
 80104f6:	4770      	bx	lr
 80104f8:	20000024 	.word	0x20000024

080104fc <ETH_FlushTransmitFIFO>:
{
 80104fc:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 80104fe:	2300      	movs	r3, #0
 8010500:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8010502:	f241 0118 	movw	r1, #4120	; 0x1018
 8010506:	6803      	ldr	r3, [r0, #0]
 8010508:	585a      	ldr	r2, [r3, r1]
 801050a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801050e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8010510:	585b      	ldr	r3, [r3, r1]
 8010512:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010514:	f7ff ffe0 	bl	80104d8 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8010518:	9a01      	ldr	r2, [sp, #4]
 801051a:	6803      	ldr	r3, [r0, #0]
 801051c:	505a      	str	r2, [r3, r1]
}
 801051e:	b003      	add	sp, #12
 8010520:	f85d fb04 	ldr.w	pc, [sp], #4

08010524 <ETH_MACDMAConfig>:
{
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8010528:	b129      	cbz	r1, 8010536 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 801052a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801052e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8010530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010534:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010536:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8010538:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 801053a:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 801053c:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 801053e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8010540:	68a3      	ldr	r3, [r4, #8]
 8010542:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8010546:	4830      	ldr	r0, [pc, #192]	; (8010608 <ETH_MACDMAConfig+0xe4>)
 8010548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801054c:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8010550:	bf0c      	ite	eq
 8010552:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8010556:	2100      	movne	r1, #0
 8010558:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 801055a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801055c:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801055e:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8010560:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8010562:	f7ff ff33 	bl	80103cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8010566:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8010568:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 801056a:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 801056c:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 801056e:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8010570:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010572:	f7ff ff2b 	bl	80103cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 801057a:	2500      	movs	r5, #0
 801057c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 801057e:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010580:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8010582:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8010586:	0412      	lsls	r2, r2, #16
 8010588:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 801058a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801058e:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010590:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8010592:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010594:	f7ff ff1a 	bl	80103cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8010598:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801059a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 801059c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 801059e:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80105a0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80105a2:	f7ff ff13 	bl	80103cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80105a6:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80105a8:	4b18      	ldr	r3, [pc, #96]	; (801060c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80105aa:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80105ac:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80105b0:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80105b2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80105b4:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80105b6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80105ba:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80105be:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80105c0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80105c2:	f7ff ff03 	bl	80103cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80105c6:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80105c8:	4a11      	ldr	r2, [pc, #68]	; (8010610 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80105ca:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80105cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80105d0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80105d2:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80105d4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80105d6:	f7ff fef9 	bl	80103cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80105da:	6822      	ldr	r2, [r4, #0]
 80105dc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80105e0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80105e2:	69a3      	ldr	r3, [r4, #24]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d107      	bne.n	80105f8 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80105e8:	f241 011c 	movw	r1, #4124	; 0x101c
 80105ec:	5853      	ldr	r3, [r2, r1]
 80105ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105f6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80105f8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80105fa:	4a06      	ldr	r2, [pc, #24]	; (8010614 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80105fc:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80105fe:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8010600:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8010602:	4b05      	ldr	r3, [pc, #20]	; (8010618 <ETH_MACDMAConfig+0xf4>)
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	bd70      	pop	{r4, r5, r6, pc}
 8010608:	ff20810f 	.word	0xff20810f
 801060c:	f8de3f23 	.word	0xf8de3f23
 8010610:	02c12080 	.word	0x02c12080
 8010614:	40028040 	.word	0x40028040
 8010618:	40028044 	.word	0x40028044

0801061c <HAL_ETH_DMATxDescListInit>:
{
 801061c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 801061e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010622:	2c01      	cmp	r4, #1
 8010624:	f04f 0402 	mov.w	r4, #2
 8010628:	d033      	beq.n	8010692 <HAL_ETH_DMATxDescListInit+0x76>
 801062a:	2501      	movs	r5, #1
 801062c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010630:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8010634:	62c1      	str	r1, [r0, #44]	; 0x2c
 8010636:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 801063a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 801063c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010640:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8010644:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8010648:	429d      	cmp	r5, r3
 801064a:	d10b      	bne.n	8010664 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 801064c:	6802      	ldr	r2, [r0, #0]
 801064e:	f241 0310 	movw	r3, #4112	; 0x1010
 8010652:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010654:	2301      	movs	r3, #1
 8010656:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801065a:	2300      	movs	r3, #0
 801065c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010660:	4618      	mov	r0, r3
 8010662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010664:	fb0e 2605 	mla	r6, lr, r5, r2
 8010668:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 801066c:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 801066e:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010672:	b92e      	cbnz	r6, 8010680 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010674:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8010678:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 801067c:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8010680:	4565      	cmp	r5, ip
 8010682:	bf2c      	ite	cs
 8010684:	460e      	movcs	r6, r1
 8010686:	4626      	movcc	r6, r4
 8010688:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 801068c:	3501      	adds	r5, #1
 801068e:	3420      	adds	r4, #32
 8010690:	e7da      	b.n	8010648 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8010692:	4620      	mov	r0, r4
}
 8010694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010696 <HAL_ETH_DMARxDescListInit>:
{
 8010696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 801069a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 801069e:	2c01      	cmp	r4, #1
 80106a0:	f04f 0402 	mov.w	r4, #2
 80106a4:	d030      	beq.n	8010708 <HAL_ETH_DMARxDescListInit+0x72>
 80106a6:	2501      	movs	r5, #1
 80106a8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80106ac:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80106b0:	6281      	str	r1, [r0, #40]	; 0x28
 80106b2:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 80106b6:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80106b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80106bc:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80106c0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 80106c4:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 80106c8:	429d      	cmp	r5, r3
 80106ca:	d10c      	bne.n	80106e6 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80106cc:	6802      	ldr	r2, [r0, #0]
 80106ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80106d2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80106d4:	2301      	movs	r3, #1
 80106d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80106da:	2300      	movs	r3, #0
 80106dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80106e0:	4618      	mov	r0, r3
 80106e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80106e6:	fb0e 2805 	mla	r8, lr, r5, r2
 80106ea:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80106ee:	4565      	cmp	r5, ip
 80106f0:	bf2c      	ite	cs
 80106f2:	4688      	movcs	r8, r1
 80106f4:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80106f6:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80106fa:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80106fe:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8010702:	3501      	adds	r5, #1
 8010704:	3420      	adds	r4, #32
 8010706:	e7df      	b.n	80106c8 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8010708:	4620      	mov	r0, r4
}
 801070a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010710 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8010710:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010714:	2b01      	cmp	r3, #1
{
 8010716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010718:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 801071c:	d068      	beq.n	80107f0 <HAL_ETH_TransmitFrame+0xe0>
 801071e:	2201      	movs	r2, #1
 8010720:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010724:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8010728:	b929      	cbnz	r1, 8010736 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 801072a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 801072e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8010732:	4610      	mov	r0, r2
 8010734:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010738:	681c      	ldr	r4, [r3, #0]
 801073a:	2c00      	cmp	r4, #0
 801073c:	da06      	bge.n	801074c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 801073e:	2312      	movs	r3, #18
 8010740:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010744:	2300      	movs	r3, #0
 8010746:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 801074a:	e7f2      	b.n	8010732 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 801074c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8010750:	42a1      	cmp	r1, r4
 8010752:	d92e      	bls.n	80107b2 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8010754:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8010758:	fb04 1412 	mls	r4, r4, r2, r1
 801075c:	b33c      	cbz	r4, 80107ae <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 801075e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8010760:	4c24      	ldr	r4, [pc, #144]	; (80107f4 <HAL_ETH_TransmitFrame+0xe4>)
 8010762:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8010766:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 801076a:	f3c1 010c 	ubfx	r1, r1, #0, #13
 801076e:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8010770:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8010774:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8010776:	681d      	ldr	r5, [r3, #0]
 8010778:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 801077c:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 801077e:	b91c      	cbnz	r4, 8010788 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8010780:	681d      	ldr	r5, [r3, #0]
 8010782:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8010786:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8010788:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 801078a:	bf08      	it	eq
 801078c:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 801078e:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8010790:	bf04      	itt	eq
 8010792:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8010796:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010798:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 801079a:	bf08      	it	eq
 801079c:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 801079e:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80107a0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80107a4:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80107a6:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80107a8:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80107aa:	d1e4      	bne.n	8010776 <HAL_ETH_TransmitFrame+0x66>
 80107ac:	e00d      	b.n	80107ca <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80107ae:	2a01      	cmp	r2, #1
 80107b0:	d1d6      	bne.n	8010760 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80107b8:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80107ba:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80107bc:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80107c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80107c4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80107c6:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80107cc:	f241 0214 	movw	r2, #4116	; 0x1014
 80107d0:	6803      	ldr	r3, [r0, #0]
 80107d2:	5899      	ldr	r1, [r3, r2]
 80107d4:	0749      	lsls	r1, r1, #29
 80107d6:	d505      	bpl.n	80107e4 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80107d8:	2104      	movs	r1, #4
 80107da:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80107dc:	f241 0204 	movw	r2, #4100	; 0x1004
 80107e0:	2100      	movs	r1, #0
 80107e2:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80107e4:	2301      	movs	r3, #1
 80107e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80107ea:	2300      	movs	r3, #0
 80107ec:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80107f0:	4618      	mov	r0, r3
}
 80107f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107f4:	fffffa0c 	.word	0xfffffa0c

080107f8 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80107f8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80107fc:	2b01      	cmp	r3, #1
{
 80107fe:	b530      	push	{r4, r5, lr}
 8010800:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8010804:	d03b      	beq.n	801087e <HAL_ETH_GetReceivedFrame_IT+0x86>
 8010806:	2201      	movs	r2, #1
 8010808:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 801080c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010810:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8010812:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	2a00      	cmp	r2, #0
 801081a:	db01      	blt.n	8010820 <HAL_ETH_GetReceivedFrame_IT+0x28>
 801081c:	3c01      	subs	r4, #1
 801081e:	d106      	bne.n	801082e <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8010820:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8010822:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8010824:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010828:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 801082c:	e027      	b.n	801087e <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	68dd      	ldr	r5, [r3, #12]
 8010832:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010836:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801083a:	d103      	bne.n	8010844 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 801083c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 801083e:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8010840:	6285      	str	r5, [r0, #40]	; 0x28
 8010842:	e7e7      	b.n	8010814 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	f412 7f40 	tst.w	r2, #768	; 0x300
 801084a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801084c:	d102      	bne.n	8010854 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 801084e:	3201      	adds	r2, #1
 8010850:	6382      	str	r2, [r0, #56]	; 0x38
 8010852:	e7f5      	b.n	8010840 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8010854:	3201      	adds	r2, #1
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8010856:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010858:	bf08      	it	eq
 801085a:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 801085c:	6343      	str	r3, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801085e:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 8010860:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8010862:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8010866:	3b04      	subs	r3, #4
 8010868:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 801086a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8010870:	2301      	movs	r3, #1
 8010872:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010876:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010878:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 801087a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 801087e:	4618      	mov	r0, r3
 8010880:	bd30      	pop	{r4, r5, pc}

08010882 <HAL_ETH_TxCpltCallback>:
 8010882:	4770      	bx	lr

08010884 <HAL_ETH_ErrorCallback>:
{
 8010884:	4770      	bx	lr

08010886 <HAL_ETH_IRQHandler>:
{
 8010886:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8010888:	6802      	ldr	r2, [r0, #0]
 801088a:	f241 0614 	movw	r6, #4116	; 0x1014
{
 801088e:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8010890:	5995      	ldr	r5, [r2, r6]
 8010892:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8010896:	d021      	beq.n	80108dc <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8010898:	f00a fd92 	bl	801b3c0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 801089c:	6823      	ldr	r3, [r4, #0]
 801089e:	2240      	movs	r2, #64	; 0x40
 80108a0:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80108a2:	2301      	movs	r3, #1
 80108a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80108a8:	2300      	movs	r3, #0
 80108aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	f241 0514 	movw	r5, #4116	; 0x1014
 80108b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80108b8:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80108ba:	595b      	ldr	r3, [r3, r5]
 80108bc:	041b      	lsls	r3, r3, #16
 80108be:	d50c      	bpl.n	80108da <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80108c0:	4620      	mov	r0, r4
 80108c2:	f7ff ffdf 	bl	8010884 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80108cc:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80108ce:	2301      	movs	r3, #1
 80108d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80108d4:	2300      	movs	r3, #0
 80108d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108da:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80108dc:	5993      	ldr	r3, [r2, r6]
 80108de:	07da      	lsls	r2, r3, #31
 80108e0:	d5e5      	bpl.n	80108ae <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80108e2:	f7ff ffce 	bl	8010882 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80108e6:	6822      	ldr	r2, [r4, #0]
 80108e8:	2301      	movs	r3, #1
 80108ea:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80108ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80108f0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80108f4:	e7db      	b.n	80108ae <HAL_ETH_IRQHandler+0x28>

080108f6 <HAL_ETH_ReadPHYRegister>:
{
 80108f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80108f8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80108fc:	2b82      	cmp	r3, #130	; 0x82
{
 80108fe:	4605      	mov	r5, r0
 8010900:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8010902:	d030      	beq.n	8010966 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8010904:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8010906:	2382      	movs	r3, #130	; 0x82
 8010908:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 801090c:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 801090e:	0189      	lsls	r1, r1, #6
 8010910:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010914:	f003 011c 	and.w	r1, r3, #28
 8010918:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801091a:	8a04      	ldrh	r4, [r0, #16]
 801091c:	02e4      	lsls	r4, r4, #11
 801091e:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8010920:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8010922:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8010926:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8010928:	f7ff fd4a 	bl	80103c0 <HAL_GetTick>
 801092c:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801092e:	f014 0001 	ands.w	r0, r4, #1
 8010932:	d107      	bne.n	8010944 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8010934:	682b      	ldr	r3, [r5, #0]
 8010936:	695b      	ldr	r3, [r3, #20]
 8010938:	b29b      	uxth	r3, r3
 801093a:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 801093c:	2301      	movs	r3, #1
 801093e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8010942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8010944:	f7ff fd3c 	bl	80103c0 <HAL_GetTick>
 8010948:	1bc0      	subs	r0, r0, r7
 801094a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801094e:	d307      	bcc.n	8010960 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8010950:	2301      	movs	r3, #1
 8010952:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010956:	2300      	movs	r3, #0
 8010958:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 801095c:	2003      	movs	r0, #3
 801095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8010960:	682b      	ldr	r3, [r5, #0]
 8010962:	691c      	ldr	r4, [r3, #16]
 8010964:	e7e3      	b.n	801092e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8010966:	2002      	movs	r0, #2
}
 8010968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801096a <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 801096a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801096e:	2b42      	cmp	r3, #66	; 0x42
{
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8010974:	d02e      	beq.n	80109d4 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8010976:	2342      	movs	r3, #66	; 0x42
 8010978:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 801097c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 801097e:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8010980:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8010982:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8010986:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801098a:	f000 001c 	and.w	r0, r0, #28
 801098e:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8010990:	8a2c      	ldrh	r4, [r5, #16]
 8010992:	02e4      	lsls	r4, r4, #11
 8010994:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8010996:	4304      	orrs	r4, r0
 8010998:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801099a:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 801099c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 801099e:	f7ff fd0f 	bl	80103c0 <HAL_GetTick>
 80109a2:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80109a4:	f014 0001 	ands.w	r0, r4, #1
 80109a8:	d103      	bne.n	80109b2 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 80109aa:	2301      	movs	r3, #1
 80109ac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80109b0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80109b2:	f7ff fd05 	bl	80103c0 <HAL_GetTick>
 80109b6:	1b80      	subs	r0, r0, r6
 80109b8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80109bc:	d307      	bcc.n	80109ce <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80109be:	2301      	movs	r3, #1
 80109c0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80109c4:	2300      	movs	r3, #0
 80109c6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80109ca:	2003      	movs	r0, #3
 80109cc:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80109ce:	682b      	ldr	r3, [r5, #0]
 80109d0:	691c      	ldr	r4, [r3, #16]
 80109d2:	e7e7      	b.n	80109a4 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80109d4:	2002      	movs	r0, #2
}
 80109d6:	bd70      	pop	{r4, r5, r6, pc}

080109d8 <HAL_ETH_Init>:
{
 80109d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80109da:	2300      	movs	r3, #0
 80109dc:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 80109de:	4604      	mov	r4, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f000 80de 	beq.w	8010ba2 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 80109e6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80109ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80109ee:	b91b      	cbnz	r3, 80109f8 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80109f0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80109f4:	f00a fc88 	bl	801b308 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80109f8:	2300      	movs	r3, #0
 80109fa:	9301      	str	r3, [sp, #4]
 80109fc:	4b6a      	ldr	r3, [pc, #424]	; (8010ba8 <HAL_ETH_Init+0x1d0>)
 80109fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010a04:	645a      	str	r2, [r3, #68]	; 0x44
 8010a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010a10:	4b66      	ldr	r3, [pc, #408]	; (8010bac <HAL_ETH_Init+0x1d4>)
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010a18:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010a1a:	685a      	ldr	r2, [r3, #4]
 8010a1c:	6a21      	ldr	r1, [r4, #32]
 8010a1e:	430a      	orrs	r2, r1
 8010a20:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	f042 0201 	orr.w	r2, r2, #1
 8010a2e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010a30:	f7ff fcc6 	bl	80103c0 <HAL_GetTick>
 8010a34:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8010a3c:	6812      	ldr	r2, [r2, #0]
 8010a3e:	07d0      	lsls	r0, r2, #31
 8010a40:	d41d      	bmi.n	8010a7e <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010a42:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8010a44:	f000 fe74 	bl	8011730 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010a48:	4b59      	ldr	r3, [pc, #356]	; (8010bb0 <HAL_ETH_Init+0x1d8>)
 8010a4a:	4a5a      	ldr	r2, [pc, #360]	; (8010bb4 <HAL_ETH_Init+0x1dc>)
 8010a4c:	4403      	add	r3, r0
 8010a4e:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010a50:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010a54:	d822      	bhi.n	8010a9c <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010a56:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010a5a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010a5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010a60:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010a62:	2100      	movs	r1, #0
 8010a64:	4620      	mov	r0, r4
 8010a66:	f7ff ff80 	bl	801096a <HAL_ETH_WritePHYRegister>
 8010a6a:	4605      	mov	r5, r0
 8010a6c:	b368      	cbz	r0, 8010aca <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8010a6e:	2101      	movs	r1, #1
 8010a70:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8010a72:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8010a74:	f7ff fd56 	bl	8010524 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8010a78:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8010a7c:	e00b      	b.n	8010a96 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010a7e:	f7ff fc9f 	bl	80103c0 <HAL_GetTick>
 8010a82:	1b40      	subs	r0, r0, r5
 8010a84:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010a88:	d9d5      	bls.n	8010a36 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010a8a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8010a8c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010a8e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010a96:	4628      	mov	r0, r5
 8010a98:	b003      	add	sp, #12
 8010a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8010a9c:	4b46      	ldr	r3, [pc, #280]	; (8010bb8 <HAL_ETH_Init+0x1e0>)
 8010a9e:	4a47      	ldr	r2, [pc, #284]	; (8010bbc <HAL_ETH_Init+0x1e4>)
 8010aa0:	4403      	add	r3, r0
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d802      	bhi.n	8010aac <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8010aa6:	f045 050c 	orr.w	r5, r5, #12
 8010aaa:	e7d6      	b.n	8010a5a <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8010aac:	4b44      	ldr	r3, [pc, #272]	; (8010bc0 <HAL_ETH_Init+0x1e8>)
 8010aae:	4a45      	ldr	r2, [pc, #276]	; (8010bc4 <HAL_ETH_Init+0x1ec>)
 8010ab0:	4403      	add	r3, r0
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d9d1      	bls.n	8010a5a <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8010ab6:	4b44      	ldr	r3, [pc, #272]	; (8010bc8 <HAL_ETH_Init+0x1f0>)
 8010ab8:	4a44      	ldr	r2, [pc, #272]	; (8010bcc <HAL_ETH_Init+0x1f4>)
 8010aba:	4403      	add	r3, r0
 8010abc:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8010abe:	bf94      	ite	ls
 8010ac0:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8010ac4:	f045 0510 	orrhi.w	r5, r5, #16
 8010ac8:	e7c7      	b.n	8010a5a <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8010aca:	20ff      	movs	r0, #255	; 0xff
 8010acc:	f7ff fc7e 	bl	80103cc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d053      	beq.n	8010b7e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8010ad6:	f7ff fc73 	bl	80103c0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010ada:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8010ade:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010ae0:	466a      	mov	r2, sp
 8010ae2:	2101      	movs	r1, #1
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f7ff ff06 	bl	80108f6 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010aea:	f7ff fc69 	bl	80103c0 <HAL_GetTick>
 8010aee:	1b80      	subs	r0, r0, r6
 8010af0:	42b8      	cmp	r0, r7
 8010af2:	d90b      	bls.n	8010b0c <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8010af4:	2101      	movs	r1, #1
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7ff fd14 	bl	8010524 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8010afc:	2301      	movs	r3, #1
 8010afe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8010b02:	2300      	movs	r3, #0
 8010b04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8010b08:	2503      	movs	r5, #3
 8010b0a:	e7c4      	b.n	8010a96 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8010b0c:	9b00      	ldr	r3, [sp, #0]
 8010b0e:	0759      	lsls	r1, r3, #29
 8010b10:	d5e6      	bpl.n	8010ae0 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8010b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010b16:	2100      	movs	r1, #0
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f7ff ff26 	bl	801096a <HAL_ETH_WritePHYRegister>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	d1a5      	bne.n	8010a6e <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8010b22:	f7ff fc4d 	bl	80103c0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8010b26:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8010b2a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010b2c:	466a      	mov	r2, sp
 8010b2e:	2101      	movs	r1, #1
 8010b30:	4620      	mov	r0, r4
 8010b32:	f7ff fee0 	bl	80108f6 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8010b36:	f7ff fc43 	bl	80103c0 <HAL_GetTick>
 8010b3a:	1b80      	subs	r0, r0, r6
 8010b3c:	42b8      	cmp	r0, r7
 8010b3e:	d8d9      	bhi.n	8010af4 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8010b40:	9b00      	ldr	r3, [sp, #0]
 8010b42:	069a      	lsls	r2, r3, #26
 8010b44:	d5f2      	bpl.n	8010b2c <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8010b46:	466a      	mov	r2, sp
 8010b48:	2110      	movs	r1, #16
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7ff fed3 	bl	80108f6 <HAL_ETH_ReadPHYRegister>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d18c      	bne.n	8010a6e <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8010b54:	9b00      	ldr	r3, [sp, #0]
 8010b56:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8010b5a:	bf18      	it	ne
 8010b5c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8010b60:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8010b62:	bf4c      	ite	mi
 8010b64:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8010b66:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8010b6a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8010b6c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8010b6e:	2100      	movs	r1, #0
 8010b70:	4620      	mov	r0, r4
 8010b72:	f7ff fcd7 	bl	8010524 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8010b76:	2301      	movs	r3, #1
 8010b78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8010b7c:	e78b      	b.n	8010a96 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8010b7e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8010b80:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8010b82:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8010b84:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8010b88:	b292      	uxth	r2, r2
 8010b8a:	4629      	mov	r1, r5
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7ff feec 	bl	801096a <HAL_ETH_WritePHYRegister>
 8010b92:	2800      	cmp	r0, #0
 8010b94:	f47f af6b 	bne.w	8010a6e <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8010b98:	f640 70ff 	movw	r0, #4095	; 0xfff
 8010b9c:	f7ff fc16 	bl	80103cc <HAL_Delay>
 8010ba0:	e7e5      	b.n	8010b6e <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8010ba2:	2501      	movs	r5, #1
 8010ba4:	e777      	b.n	8010a96 <HAL_ETH_Init+0xbe>
 8010ba6:	bf00      	nop
 8010ba8:	40023800 	.word	0x40023800
 8010bac:	40013800 	.word	0x40013800
 8010bb0:	feced300 	.word	0xfeced300
 8010bb4:	00e4e1bf 	.word	0x00e4e1bf
 8010bb8:	fde9f140 	.word	0xfde9f140
 8010bbc:	017d783f 	.word	0x017d783f
 8010bc0:	fc6c7900 	.word	0xfc6c7900
 8010bc4:	026259ff 	.word	0x026259ff
 8010bc8:	fa0a1f00 	.word	0xfa0a1f00
 8010bcc:	02faf07f 	.word	0x02faf07f

08010bd0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8010bd0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010bd4:	2b01      	cmp	r3, #1
{  
 8010bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bd8:	4605      	mov	r5, r0
 8010bda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8010bde:	d031      	beq.n	8010c44 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8010be0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010be2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8010be4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8010be8:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010bea:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8010bec:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010bee:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8010bf2:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010bf6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010bfc:	f7ff fc6c 	bl	80104d8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8010c00:	682b      	ldr	r3, [r5, #0]
 8010c02:	9a01      	ldr	r2, [sp, #4]
 8010c04:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8010c06:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	f042 0204 	orr.w	r2, r2, #4
 8010c0e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010c14:	f7ff fc60 	bl	80104d8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	9a00      	ldr	r2, [sp, #0]
 8010c1c:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f7ff fc6c 	bl	80104fc <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010c24:	682a      	ldr	r2, [r5, #0]
 8010c26:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8010c2a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010c2c:	58d1      	ldr	r1, [r2, r3]
 8010c2e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8010c32:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8010c34:	58d1      	ldr	r1, [r2, r3]
 8010c36:	f041 0102 	orr.w	r1, r1, #2
 8010c3a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010c3c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010c40:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8010c44:	b002      	add	sp, #8
 8010c46:	bd70      	pop	{r4, r5, r6, pc}

08010c48 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c48:	4908      	ldr	r1, [pc, #32]	; (8010c6c <FLASH_Program_DoubleWord+0x24>)
{
 8010c4a:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c4c:	690c      	ldr	r4, [r1, #16]
 8010c4e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8010c52:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8010c54:	690c      	ldr	r4, [r1, #16]
 8010c56:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8010c5a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010c5c:	690c      	ldr	r4, [r1, #16]
 8010c5e:	f044 0401 	orr.w	r4, r4, #1
 8010c62:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8010c64:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8010c66:	6043      	str	r3, [r0, #4]
 8010c68:	bd10      	pop	{r4, pc}
 8010c6a:	bf00      	nop
 8010c6c:	40023c00 	.word	0x40023c00

08010c70 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c70:	4b07      	ldr	r3, [pc, #28]	; (8010c90 <FLASH_Program_Word+0x20>)
 8010c72:	691a      	ldr	r2, [r3, #16]
 8010c74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010c78:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8010c7a:	691a      	ldr	r2, [r3, #16]
 8010c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c80:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010c82:	691a      	ldr	r2, [r3, #16]
 8010c84:	f042 0201 	orr.w	r2, r2, #1
 8010c88:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8010c8a:	6001      	str	r1, [r0, #0]
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	40023c00 	.word	0x40023c00

08010c94 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c94:	4b07      	ldr	r3, [pc, #28]	; (8010cb4 <FLASH_Program_HalfWord+0x20>)
 8010c96:	691a      	ldr	r2, [r3, #16]
 8010c98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010c9c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8010c9e:	691a      	ldr	r2, [r3, #16]
 8010ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ca4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010ca6:	691a      	ldr	r2, [r3, #16]
 8010ca8:	f042 0201 	orr.w	r2, r2, #1
 8010cac:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8010cae:	8001      	strh	r1, [r0, #0]
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	40023c00 	.word	0x40023c00

08010cb8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010cb8:	4b1a      	ldr	r3, [pc, #104]	; (8010d24 <FLASH_SetErrorCode+0x6c>)
 8010cba:	68da      	ldr	r2, [r3, #12]
 8010cbc:	06d2      	lsls	r2, r2, #27
 8010cbe:	d506      	bpl.n	8010cce <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010cc0:	4919      	ldr	r1, [pc, #100]	; (8010d28 <FLASH_SetErrorCode+0x70>)
 8010cc2:	69ca      	ldr	r2, [r1, #28]
 8010cc4:	f042 0210 	orr.w	r2, r2, #16
 8010cc8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010cca:	2210      	movs	r2, #16
 8010ccc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010cce:	68da      	ldr	r2, [r3, #12]
 8010cd0:	0690      	lsls	r0, r2, #26
 8010cd2:	d506      	bpl.n	8010ce2 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010cd4:	4914      	ldr	r1, [pc, #80]	; (8010d28 <FLASH_SetErrorCode+0x70>)
 8010cd6:	69ca      	ldr	r2, [r1, #28]
 8010cd8:	f042 0208 	orr.w	r2, r2, #8
 8010cdc:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010cde:	2220      	movs	r2, #32
 8010ce0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010ce2:	4b10      	ldr	r3, [pc, #64]	; (8010d24 <FLASH_SetErrorCode+0x6c>)
 8010ce4:	68da      	ldr	r2, [r3, #12]
 8010ce6:	0651      	lsls	r1, r2, #25
 8010ce8:	d506      	bpl.n	8010cf8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010cea:	490f      	ldr	r1, [pc, #60]	; (8010d28 <FLASH_SetErrorCode+0x70>)
 8010cec:	69ca      	ldr	r2, [r1, #28]
 8010cee:	f042 0204 	orr.w	r2, r2, #4
 8010cf2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010cf4:	2240      	movs	r2, #64	; 0x40
 8010cf6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010cf8:	68da      	ldr	r2, [r3, #12]
 8010cfa:	0612      	lsls	r2, r2, #24
 8010cfc:	d506      	bpl.n	8010d0c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010cfe:	490a      	ldr	r1, [pc, #40]	; (8010d28 <FLASH_SetErrorCode+0x70>)
 8010d00:	69ca      	ldr	r2, [r1, #28]
 8010d02:	f042 0202 	orr.w	r2, r2, #2
 8010d06:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010d08:	2280      	movs	r2, #128	; 0x80
 8010d0a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010d0c:	4a05      	ldr	r2, [pc, #20]	; (8010d24 <FLASH_SetErrorCode+0x6c>)
 8010d0e:	68d3      	ldr	r3, [r2, #12]
 8010d10:	079b      	lsls	r3, r3, #30
 8010d12:	d506      	bpl.n	8010d22 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010d14:	4904      	ldr	r1, [pc, #16]	; (8010d28 <FLASH_SetErrorCode+0x70>)
 8010d16:	69cb      	ldr	r3, [r1, #28]
 8010d18:	f043 0320 	orr.w	r3, r3, #32
 8010d1c:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010d1e:	2302      	movs	r3, #2
 8010d20:	60d3      	str	r3, [r2, #12]
 8010d22:	4770      	bx	lr
 8010d24:	40023c00 	.word	0x40023c00
 8010d28:	20004418 	.word	0x20004418

08010d2c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010d2c:	4b06      	ldr	r3, [pc, #24]	; (8010d48 <HAL_FLASH_Unlock+0x1c>)
 8010d2e:	691a      	ldr	r2, [r3, #16]
 8010d30:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010d32:	bfbf      	itttt	lt
 8010d34:	4a05      	ldrlt	r2, [pc, #20]	; (8010d4c <HAL_FLASH_Unlock+0x20>)
 8010d36:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010d38:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8010d3c:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010d3e:	bfba      	itte	lt
 8010d40:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8010d42:	0fc0      	lsrlt	r0, r0, #31
 8010d44:	2000      	movge	r0, #0
}
 8010d46:	4770      	bx	lr
 8010d48:	40023c00 	.word	0x40023c00
 8010d4c:	45670123 	.word	0x45670123

08010d50 <FLASH_WaitForLastOperation>:
{ 
 8010d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010d52:	4b12      	ldr	r3, [pc, #72]	; (8010d9c <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010d54:	4c12      	ldr	r4, [pc, #72]	; (8010da0 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010d56:	2200      	movs	r2, #0
{ 
 8010d58:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010d5a:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8010d5c:	f7ff fb30 	bl	80103c0 <HAL_GetTick>
 8010d60:	4626      	mov	r6, r4
 8010d62:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010d64:	68e3      	ldr	r3, [r4, #12]
 8010d66:	03da      	lsls	r2, r3, #15
 8010d68:	d40c      	bmi.n	8010d84 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010d6a:	68e3      	ldr	r3, [r4, #12]
 8010d6c:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010d6e:	bf44      	itt	mi
 8010d70:	2301      	movmi	r3, #1
 8010d72:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010d74:	68f0      	ldr	r0, [r6, #12]
 8010d76:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8010d7a:	d002      	beq.n	8010d82 <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8010d7c:	f7ff ff9c 	bl	8010cb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010d80:	2001      	movs	r0, #1
}  
 8010d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8010d84:	1c69      	adds	r1, r5, #1
 8010d86:	d0ed      	beq.n	8010d64 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010d88:	b90d      	cbnz	r5, 8010d8e <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8010d8a:	2003      	movs	r0, #3
 8010d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010d8e:	f7ff fb17 	bl	80103c0 <HAL_GetTick>
 8010d92:	1bc0      	subs	r0, r0, r7
 8010d94:	4285      	cmp	r5, r0
 8010d96:	d2e5      	bcs.n	8010d64 <FLASH_WaitForLastOperation+0x14>
 8010d98:	e7f7      	b.n	8010d8a <FLASH_WaitForLastOperation+0x3a>
 8010d9a:	bf00      	nop
 8010d9c:	20004418 	.word	0x20004418
 8010da0:	40023c00 	.word	0x40023c00

08010da4 <HAL_FLASH_Program>:
{
 8010da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8010da8:	4d20      	ldr	r5, [pc, #128]	; (8010e2c <HAL_FLASH_Program+0x88>)
{
 8010daa:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8010dac:	7e2b      	ldrb	r3, [r5, #24]
 8010dae:	2b01      	cmp	r3, #1
{
 8010db0:	4607      	mov	r7, r0
 8010db2:	460e      	mov	r6, r1
 8010db4:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8010db6:	d035      	beq.n	8010e24 <HAL_FLASH_Program+0x80>
 8010db8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010dba:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8010dbe:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010dc0:	f7ff ffc6 	bl	8010d50 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010dc4:	b9b0      	cbnz	r0, 8010df4 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8010dc6:	b9cf      	cbnz	r7, 8010dfc <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010dc8:	4b19      	ldr	r3, [pc, #100]	; (8010e30 <HAL_FLASH_Program+0x8c>)
 8010dca:	691a      	ldr	r2, [r3, #16]
 8010dcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010dd0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8010dd2:	691a      	ldr	r2, [r3, #16]
 8010dd4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010dd6:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010dd8:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8010dda:	f042 0201 	orr.w	r2, r2, #1
 8010dde:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8010de0:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010de6:	f7ff ffb3 	bl	8010d50 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8010dea:	4a11      	ldr	r2, [pc, #68]	; (8010e30 <HAL_FLASH_Program+0x8c>)
 8010dec:	6913      	ldr	r3, [r2, #16]
 8010dee:	f023 0301 	bic.w	r3, r3, #1
 8010df2:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8010df4:	2300      	movs	r3, #0
 8010df6:	762b      	strb	r3, [r5, #24]
  return status;
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010dfc:	2f01      	cmp	r7, #1
 8010dfe:	d104      	bne.n	8010e0a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8010e00:	b2a1      	uxth	r1, r4
 8010e02:	4630      	mov	r0, r6
 8010e04:	f7ff ff46 	bl	8010c94 <FLASH_Program_HalfWord>
 8010e08:	e7eb      	b.n	8010de2 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010e0a:	2f02      	cmp	r7, #2
 8010e0c:	d104      	bne.n	8010e18 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4630      	mov	r0, r6
 8010e12:	f7ff ff2d 	bl	8010c70 <FLASH_Program_Word>
 8010e16:	e7e4      	b.n	8010de2 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8010e18:	4622      	mov	r2, r4
 8010e1a:	4643      	mov	r3, r8
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f7ff ff13 	bl	8010c48 <FLASH_Program_DoubleWord>
 8010e22:	e7de      	b.n	8010de2 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8010e24:	2002      	movs	r0, #2
}
 8010e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e2a:	bf00      	nop
 8010e2c:	20004418 	.word	0x20004418
 8010e30:	40023c00 	.word	0x40023c00

08010e34 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <FLASH_MassErase.isra.0+0x20>)
 8010e36:	691a      	ldr	r2, [r3, #16]
 8010e38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010e3c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010e3e:	691a      	ldr	r2, [r3, #16]
 8010e40:	f042 0204 	orr.w	r2, r2, #4
 8010e44:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8010e46:	691a      	ldr	r2, [r3, #16]
 8010e48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010e4c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8010e50:	6118      	str	r0, [r3, #16]
 8010e52:	4770      	bx	lr
 8010e54:	40023c00 	.word	0x40023c00

08010e58 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8010e58:	b139      	cbz	r1, 8010e6a <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010e5a:	2901      	cmp	r1, #1
 8010e5c:	d01c      	beq.n	8010e98 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8010e5e:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010e60:	bf0c      	ite	eq
 8010e62:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8010e66:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010e6a:	4b0d      	ldr	r3, [pc, #52]	; (8010ea0 <FLASH_Erase_Sector+0x48>)
 8010e6c:	691a      	ldr	r2, [r3, #16]
 8010e6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010e72:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8010e74:	691a      	ldr	r2, [r3, #16]
 8010e76:	4311      	orrs	r1, r2
 8010e78:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010e7a:	691a      	ldr	r2, [r3, #16]
 8010e7c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8010e80:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8010e82:	691a      	ldr	r2, [r3, #16]
 8010e84:	f042 0202 	orr.w	r2, r2, #2
 8010e88:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8010e8c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010e8e:	691a      	ldr	r2, [r3, #16]
 8010e90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010e94:	611a      	str	r2, [r3, #16]
 8010e96:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8010e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e9c:	e7e5      	b.n	8010e6a <FLASH_Erase_Sector+0x12>
 8010e9e:	bf00      	nop
 8010ea0:	40023c00 	.word	0x40023c00

08010ea4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8010ea4:	4b14      	ldr	r3, [pc, #80]	; (8010ef8 <FLASH_FlushCaches+0x54>)
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	0591      	lsls	r1, r2, #22
 8010eaa:	d50f      	bpl.n	8010ecc <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010eb2:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010eba:	601a      	str	r2, [r3, #0]
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010ec2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010eca:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010ecc:	4b0a      	ldr	r3, [pc, #40]	; (8010ef8 <FLASH_FlushCaches+0x54>)
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	0552      	lsls	r2, r2, #21
 8010ed2:	d50f      	bpl.n	8010ef4 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010eda:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010eea:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ef2:	601a      	str	r2, [r3, #0]
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop
 8010ef8:	40023c00 	.word	0x40023c00

08010efc <HAL_FLASHEx_Erase>:
{
 8010efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8010f00:	4e23      	ldr	r6, [pc, #140]	; (8010f90 <HAL_FLASHEx_Erase+0x94>)
 8010f02:	7e33      	ldrb	r3, [r6, #24]
 8010f04:	2b01      	cmp	r3, #1
{
 8010f06:	4604      	mov	r4, r0
 8010f08:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010f0a:	d03f      	beq.n	8010f8c <HAL_FLASHEx_Erase+0x90>
 8010f0c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f0e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8010f12:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f14:	f7ff ff1c 	bl	8010d50 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010f18:	4605      	mov	r5, r0
 8010f1a:	b9a8      	cbnz	r0, 8010f48 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8010f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f20:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d113      	bne.n	8010f52 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010f2a:	7c20      	ldrb	r0, [r4, #16]
 8010f2c:	f7ff ff82 	bl	8010e34 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f34:	f7ff ff0c 	bl	8010d50 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8010f38:	4a16      	ldr	r2, [pc, #88]	; (8010f94 <HAL_FLASHEx_Erase+0x98>)
 8010f3a:	6913      	ldr	r3, [r2, #16]
 8010f3c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f40:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8010f42:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8010f44:	f7ff ffae 	bl	8010ea4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8010f48:	2300      	movs	r3, #0
 8010f4a:	7633      	strb	r3, [r6, #24]
}
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f52:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010f54:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8010f94 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f58:	68e3      	ldr	r3, [r4, #12]
 8010f5a:	68a2      	ldr	r2, [r4, #8]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	429f      	cmp	r7, r3
 8010f60:	d2f0      	bcs.n	8010f44 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010f62:	7c21      	ldrb	r1, [r4, #16]
 8010f64:	4638      	mov	r0, r7
 8010f66:	f7ff ff77 	bl	8010e58 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f6e:	f7ff feef 	bl	8010d50 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010f72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f76:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010f7a:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8010f7e:	b118      	cbz	r0, 8010f88 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8010f80:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f84:	4605      	mov	r5, r0
          break;
 8010f86:	e7dd      	b.n	8010f44 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f88:	3701      	adds	r7, #1
 8010f8a:	e7e5      	b.n	8010f58 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8010f8c:	2502      	movs	r5, #2
 8010f8e:	e7dd      	b.n	8010f4c <HAL_FLASHEx_Erase+0x50>
 8010f90:	20004418 	.word	0x20004418
 8010f94:	40023c00 	.word	0x40023c00

08010f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010f9e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010fa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8011150 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010fa4:	4a68      	ldr	r2, [pc, #416]	; (8011148 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010fa6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8011154 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010faa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010fac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8010fae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010fb2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8010fb4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010fb8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8010fbc:	45b6      	cmp	lr, r6
 8010fbe:	f040 80ae 	bne.w	801111e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010fc2:	684c      	ldr	r4, [r1, #4]
 8010fc4:	f024 0710 	bic.w	r7, r4, #16
 8010fc8:	2f02      	cmp	r7, #2
 8010fca:	d116      	bne.n	8010ffa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8010fcc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8010fd0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010fd4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8010fd8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010fdc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8010fe0:	f04f 0c0f 	mov.w	ip, #15
 8010fe4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8010fe8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010fec:	690d      	ldr	r5, [r1, #16]
 8010fee:	fa05 f50b 	lsl.w	r5, r5, fp
 8010ff2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8010ff6:	f8ca 5020 	str.w	r5, [sl, #32]
 8010ffa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010ffe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8011000:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011004:	fa05 f50a 	lsl.w	r5, r5, sl
 8011008:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801100a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801100e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011012:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011016:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011018:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801101c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 801101e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011022:	d811      	bhi.n	8011048 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8011024:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011026:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 801102a:	68cf      	ldr	r7, [r1, #12]
 801102c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8011030:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8011034:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8011036:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011038:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801103c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8011040:	409f      	lsls	r7, r3
 8011042:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8011046:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8011048:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801104a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801104c:	688f      	ldr	r7, [r1, #8]
 801104e:	fa07 f70a 	lsl.w	r7, r7, sl
 8011052:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8011054:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011056:	00e5      	lsls	r5, r4, #3
 8011058:	d561      	bpl.n	801111e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801105a:	f04f 0b00 	mov.w	fp, #0
 801105e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011062:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011066:	4d39      	ldr	r5, [pc, #228]	; (801114c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011068:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 801106c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8011070:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8011074:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8011078:	9703      	str	r7, [sp, #12]
 801107a:	9f03      	ldr	r7, [sp, #12]
 801107c:	f023 0703 	bic.w	r7, r3, #3
 8011080:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8011084:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011088:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 801108c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011090:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8011094:	f04f 0e0f 	mov.w	lr, #15
 8011098:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801109c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801109e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80110a2:	d043      	beq.n	801112c <HAL_GPIO_Init+0x194>
 80110a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80110a8:	42a8      	cmp	r0, r5
 80110aa:	d041      	beq.n	8011130 <HAL_GPIO_Init+0x198>
 80110ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80110b0:	42a8      	cmp	r0, r5
 80110b2:	d03f      	beq.n	8011134 <HAL_GPIO_Init+0x19c>
 80110b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80110b8:	42a8      	cmp	r0, r5
 80110ba:	d03d      	beq.n	8011138 <HAL_GPIO_Init+0x1a0>
 80110bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80110c0:	42a8      	cmp	r0, r5
 80110c2:	d03b      	beq.n	801113c <HAL_GPIO_Init+0x1a4>
 80110c4:	4548      	cmp	r0, r9
 80110c6:	d03b      	beq.n	8011140 <HAL_GPIO_Init+0x1a8>
 80110c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80110cc:	42a8      	cmp	r0, r5
 80110ce:	d039      	beq.n	8011144 <HAL_GPIO_Init+0x1ac>
 80110d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80110d4:	42a8      	cmp	r0, r5
 80110d6:	bf14      	ite	ne
 80110d8:	2508      	movne	r5, #8
 80110da:	2507      	moveq	r5, #7
 80110dc:	fa05 f50c 	lsl.w	r5, r5, ip
 80110e0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80110e4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80110e6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80110e8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80110ea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80110ee:	bf0c      	ite	eq
 80110f0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80110f2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80110f4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80110f6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80110f8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80110fc:	bf0c      	ite	eq
 80110fe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8011100:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8011102:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011104:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011106:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 801110a:	bf0c      	ite	eq
 801110c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 801110e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8011110:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8011112:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011114:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8011116:	bf54      	ite	pl
 8011118:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 801111a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 801111c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801111e:	3301      	adds	r3, #1
 8011120:	2b10      	cmp	r3, #16
 8011122:	f47f af44 	bne.w	8010fae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8011126:	b005      	add	sp, #20
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801112c:	465d      	mov	r5, fp
 801112e:	e7d5      	b.n	80110dc <HAL_GPIO_Init+0x144>
 8011130:	2501      	movs	r5, #1
 8011132:	e7d3      	b.n	80110dc <HAL_GPIO_Init+0x144>
 8011134:	2502      	movs	r5, #2
 8011136:	e7d1      	b.n	80110dc <HAL_GPIO_Init+0x144>
 8011138:	2503      	movs	r5, #3
 801113a:	e7cf      	b.n	80110dc <HAL_GPIO_Init+0x144>
 801113c:	2504      	movs	r5, #4
 801113e:	e7cd      	b.n	80110dc <HAL_GPIO_Init+0x144>
 8011140:	2505      	movs	r5, #5
 8011142:	e7cb      	b.n	80110dc <HAL_GPIO_Init+0x144>
 8011144:	2506      	movs	r5, #6
 8011146:	e7c9      	b.n	80110dc <HAL_GPIO_Init+0x144>
 8011148:	40013c00 	.word	0x40013c00
 801114c:	40020000 	.word	0x40020000
 8011150:	40023800 	.word	0x40023800
 8011154:	40021400 	.word	0x40021400

08011158 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801115c:	4e46      	ldr	r6, [pc, #280]	; (8011278 <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801115e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8011280 <HAL_GPIO_DeInit+0x128>
 8011162:	f8df b120 	ldr.w	fp, [pc, #288]	; 8011284 <HAL_GPIO_DeInit+0x12c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011166:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 8011168:	f04f 0901 	mov.w	r9, #1
 801116c:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 8011170:	ea32 0301 	bics.w	r3, r2, r1
 8011174:	d16c      	bne.n	8011250 <HAL_GPIO_DeInit+0xf8>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011176:	2303      	movs	r3, #3
 8011178:	fa04 f509 	lsl.w	r5, r4, r9
 801117c:	6807      	ldr	r7, [r0, #0]
 801117e:	fa03 f505 	lsl.w	r5, r3, r5
 8011182:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011184:	fa24 fc03 	lsr.w	ip, r4, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011188:	402f      	ands	r7, r5
 801118a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801118e:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011190:	f004 0e07 	and.w	lr, r4, #7
 8011194:	f8dc 8020 	ldr.w	r8, [ip, #32]
 8011198:	270f      	movs	r7, #15
 801119a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801119e:	fa07 fe0e 	lsl.w	lr, r7, lr
 80111a2:	ea28 0e0e 	bic.w	lr, r8, lr
 80111a6:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80111aa:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80111ae:	ea05 0e0e 	and.w	lr, r5, lr
 80111b2:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80111b6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80111ba:	43d2      	mvns	r2, r2
 80111bc:	ea02 0e0e 	and.w	lr, r2, lr
 80111c0:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80111c4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80111c8:	ea05 050e 	and.w	r5, r5, lr
 80111cc:	60c5      	str	r5, [r0, #12]
 80111ce:	f024 0503 	bic.w	r5, r4, #3
 80111d2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80111d6:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80111da:	ea04 0e03 	and.w	lr, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80111de:	4b27      	ldr	r3, [pc, #156]	; (801127c <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80111e0:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80111e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80111e8:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80111ec:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80111ee:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80111f2:	d032      	beq.n	801125a <HAL_GPIO_DeInit+0x102>
 80111f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111f8:	4298      	cmp	r0, r3
 80111fa:	d030      	beq.n	801125e <HAL_GPIO_DeInit+0x106>
 80111fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011200:	4298      	cmp	r0, r3
 8011202:	d02e      	beq.n	8011262 <HAL_GPIO_DeInit+0x10a>
 8011204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011208:	4298      	cmp	r0, r3
 801120a:	d02c      	beq.n	8011266 <HAL_GPIO_DeInit+0x10e>
 801120c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011210:	4298      	cmp	r0, r3
 8011212:	d02a      	beq.n	801126a <HAL_GPIO_DeInit+0x112>
 8011214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011218:	4298      	cmp	r0, r3
 801121a:	d028      	beq.n	801126e <HAL_GPIO_DeInit+0x116>
 801121c:	4550      	cmp	r0, sl
 801121e:	d028      	beq.n	8011272 <HAL_GPIO_DeInit+0x11a>
 8011220:	4558      	cmp	r0, fp
 8011222:	bf0c      	ite	eq
 8011224:	2307      	moveq	r3, #7
 8011226:	2308      	movne	r3, #8
 8011228:	fa03 f30e 	lsl.w	r3, r3, lr
 801122c:	459c      	cmp	ip, r3
 801122e:	d10f      	bne.n	8011250 <HAL_GPIO_DeInit+0xf8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011230:	68ab      	ldr	r3, [r5, #8]
 8011232:	ea23 0707 	bic.w	r7, r3, r7
 8011236:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8011238:	6833      	ldr	r3, [r6, #0]
 801123a:	4013      	ands	r3, r2
 801123c:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801123e:	6873      	ldr	r3, [r6, #4]
 8011240:	4013      	ands	r3, r2
 8011242:	6073      	str	r3, [r6, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011244:	68b3      	ldr	r3, [r6, #8]
 8011246:	4013      	ands	r3, r2
 8011248:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801124a:	68f3      	ldr	r3, [r6, #12]
 801124c:	401a      	ands	r2, r3
 801124e:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011250:	3401      	adds	r4, #1
 8011252:	2c10      	cmp	r4, #16
 8011254:	d188      	bne.n	8011168 <HAL_GPIO_DeInit+0x10>
      }
    }
  }
}
 8011256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801125a:	2300      	movs	r3, #0
 801125c:	e7e4      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 801125e:	464b      	mov	r3, r9
 8011260:	e7e2      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 8011262:	2302      	movs	r3, #2
 8011264:	e7e0      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 8011266:	2303      	movs	r3, #3
 8011268:	e7de      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 801126a:	2304      	movs	r3, #4
 801126c:	e7dc      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 801126e:	2305      	movs	r3, #5
 8011270:	e7da      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 8011272:	2306      	movs	r3, #6
 8011274:	e7d8      	b.n	8011228 <HAL_GPIO_DeInit+0xd0>
 8011276:	bf00      	nop
 8011278:	40013c00 	.word	0x40013c00
 801127c:	40020000 	.word	0x40020000
 8011280:	40021800 	.word	0x40021800
 8011284:	40021c00 	.word	0x40021c00

08011288 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011288:	b10a      	cbz	r2, 801128e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801128a:	6181      	str	r1, [r0, #24]
 801128c:	4770      	bx	lr
 801128e:	0409      	lsls	r1, r1, #16
 8011290:	e7fb      	b.n	801128a <HAL_GPIO_WritePin+0x2>

08011292 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011292:	6943      	ldr	r3, [r0, #20]
 8011294:	4059      	eors	r1, r3
 8011296:	6141      	str	r1, [r0, #20]
 8011298:	4770      	bx	lr
	...

0801129c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801129c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80112a0:	4604      	mov	r4, r0
 80112a2:	b918      	cbnz	r0, 80112ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80112a4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80112a6:	b002      	add	sp, #8
 80112a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80112ac:	6803      	ldr	r3, [r0, #0]
 80112ae:	07dd      	lsls	r5, r3, #31
 80112b0:	d410      	bmi.n	80112d4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112b2:	6823      	ldr	r3, [r4, #0]
 80112b4:	0798      	lsls	r0, r3, #30
 80112b6:	d458      	bmi.n	801136a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	071a      	lsls	r2, r3, #28
 80112bc:	f100 809a 	bmi.w	80113f4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80112c0:	6823      	ldr	r3, [r4, #0]
 80112c2:	075b      	lsls	r3, r3, #29
 80112c4:	f100 80b8 	bmi.w	8011438 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80112c8:	69a2      	ldr	r2, [r4, #24]
 80112ca:	2a00      	cmp	r2, #0
 80112cc:	f040 8119 	bne.w	8011502 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80112d0:	2000      	movs	r0, #0
 80112d2:	e7e8      	b.n	80112a6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80112d4:	4ba6      	ldr	r3, [pc, #664]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 80112d6:	689a      	ldr	r2, [r3, #8]
 80112d8:	f002 020c 	and.w	r2, r2, #12
 80112dc:	2a04      	cmp	r2, #4
 80112de:	d007      	beq.n	80112f0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80112e0:	689a      	ldr	r2, [r3, #8]
 80112e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80112e6:	2a08      	cmp	r2, #8
 80112e8:	d10a      	bne.n	8011300 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	0259      	lsls	r1, r3, #9
 80112ee:	d507      	bpl.n	8011300 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112f0:	4b9f      	ldr	r3, [pc, #636]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	039a      	lsls	r2, r3, #14
 80112f6:	d5dc      	bpl.n	80112b2 <HAL_RCC_OscConfig+0x16>
 80112f8:	6863      	ldr	r3, [r4, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1d9      	bne.n	80112b2 <HAL_RCC_OscConfig+0x16>
 80112fe:	e7d1      	b.n	80112a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011300:	6863      	ldr	r3, [r4, #4]
 8011302:	4d9b      	ldr	r5, [pc, #620]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 8011304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011308:	d111      	bne.n	801132e <HAL_RCC_OscConfig+0x92>
 801130a:	682b      	ldr	r3, [r5, #0]
 801130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011310:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011312:	f7ff f855 	bl	80103c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011316:	4d96      	ldr	r5, [pc, #600]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8011318:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801131a:	682b      	ldr	r3, [r5, #0]
 801131c:	039b      	lsls	r3, r3, #14
 801131e:	d4c8      	bmi.n	80112b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011320:	f7ff f84e 	bl	80103c0 <HAL_GetTick>
 8011324:	1b80      	subs	r0, r0, r6
 8011326:	2864      	cmp	r0, #100	; 0x64
 8011328:	d9f7      	bls.n	801131a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 801132a:	2003      	movs	r0, #3
 801132c:	e7bb      	b.n	80112a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801132e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011332:	d104      	bne.n	801133e <HAL_RCC_OscConfig+0xa2>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801133a:	602b      	str	r3, [r5, #0]
 801133c:	e7e5      	b.n	801130a <HAL_RCC_OscConfig+0x6e>
 801133e:	682a      	ldr	r2, [r5, #0]
 8011340:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011344:	602a      	str	r2, [r5, #0]
 8011346:	682a      	ldr	r2, [r5, #0]
 8011348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801134c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801134e:	2b00      	cmp	r3, #0
 8011350:	d1df      	bne.n	8011312 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8011352:	f7ff f835 	bl	80103c0 <HAL_GetTick>
 8011356:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011358:	682b      	ldr	r3, [r5, #0]
 801135a:	039f      	lsls	r7, r3, #14
 801135c:	d5a9      	bpl.n	80112b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801135e:	f7ff f82f 	bl	80103c0 <HAL_GetTick>
 8011362:	1b80      	subs	r0, r0, r6
 8011364:	2864      	cmp	r0, #100	; 0x64
 8011366:	d9f7      	bls.n	8011358 <HAL_RCC_OscConfig+0xbc>
 8011368:	e7df      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801136a:	4b81      	ldr	r3, [pc, #516]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 801136c:	689a      	ldr	r2, [r3, #8]
 801136e:	f012 0f0c 	tst.w	r2, #12
 8011372:	d007      	beq.n	8011384 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011374:	689a      	ldr	r2, [r3, #8]
 8011376:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801137a:	2a08      	cmp	r2, #8
 801137c:	d111      	bne.n	80113a2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	025e      	lsls	r6, r3, #9
 8011382:	d40e      	bmi.n	80113a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011384:	4b7a      	ldr	r3, [pc, #488]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	0795      	lsls	r5, r2, #30
 801138a:	d502      	bpl.n	8011392 <HAL_RCC_OscConfig+0xf6>
 801138c:	68e2      	ldr	r2, [r4, #12]
 801138e:	2a01      	cmp	r2, #1
 8011390:	d188      	bne.n	80112a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	6921      	ldr	r1, [r4, #16]
 8011396:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 801139a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 801139e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80113a0:	e78a      	b.n	80112b8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80113a2:	68e2      	ldr	r2, [r4, #12]
 80113a4:	4b73      	ldr	r3, [pc, #460]	; (8011574 <HAL_RCC_OscConfig+0x2d8>)
 80113a6:	b1b2      	cbz	r2, 80113d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80113a8:	2201      	movs	r2, #1
 80113aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80113ac:	f7ff f808 	bl	80103c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113b0:	4d6f      	ldr	r5, [pc, #444]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80113b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113b4:	682b      	ldr	r3, [r5, #0]
 80113b6:	0798      	lsls	r0, r3, #30
 80113b8:	d507      	bpl.n	80113ca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113ba:	682b      	ldr	r3, [r5, #0]
 80113bc:	6922      	ldr	r2, [r4, #16]
 80113be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80113c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80113c6:	602b      	str	r3, [r5, #0]
 80113c8:	e776      	b.n	80112b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80113ca:	f7fe fff9 	bl	80103c0 <HAL_GetTick>
 80113ce:	1b80      	subs	r0, r0, r6
 80113d0:	2802      	cmp	r0, #2
 80113d2:	d9ef      	bls.n	80113b4 <HAL_RCC_OscConfig+0x118>
 80113d4:	e7a9      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80113d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80113d8:	f7fe fff2 	bl	80103c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113dc:	4d64      	ldr	r5, [pc, #400]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80113de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113e0:	682b      	ldr	r3, [r5, #0]
 80113e2:	0799      	lsls	r1, r3, #30
 80113e4:	f57f af68 	bpl.w	80112b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80113e8:	f7fe ffea 	bl	80103c0 <HAL_GetTick>
 80113ec:	1b80      	subs	r0, r0, r6
 80113ee:	2802      	cmp	r0, #2
 80113f0:	d9f6      	bls.n	80113e0 <HAL_RCC_OscConfig+0x144>
 80113f2:	e79a      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80113f4:	6962      	ldr	r2, [r4, #20]
 80113f6:	4b60      	ldr	r3, [pc, #384]	; (8011578 <HAL_RCC_OscConfig+0x2dc>)
 80113f8:	b17a      	cbz	r2, 801141a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80113fa:	2201      	movs	r2, #1
 80113fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80113fe:	f7fe ffdf 	bl	80103c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011402:	4d5b      	ldr	r5, [pc, #364]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8011404:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011406:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011408:	079f      	lsls	r7, r3, #30
 801140a:	f53f af59 	bmi.w	80112c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801140e:	f7fe ffd7 	bl	80103c0 <HAL_GetTick>
 8011412:	1b80      	subs	r0, r0, r6
 8011414:	2802      	cmp	r0, #2
 8011416:	d9f6      	bls.n	8011406 <HAL_RCC_OscConfig+0x16a>
 8011418:	e787      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 801141a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 801141c:	f7fe ffd0 	bl	80103c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011420:	4d53      	ldr	r5, [pc, #332]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8011422:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011424:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011426:	0798      	lsls	r0, r3, #30
 8011428:	f57f af4a 	bpl.w	80112c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801142c:	f7fe ffc8 	bl	80103c0 <HAL_GetTick>
 8011430:	1b80      	subs	r0, r0, r6
 8011432:	2802      	cmp	r0, #2
 8011434:	d9f6      	bls.n	8011424 <HAL_RCC_OscConfig+0x188>
 8011436:	e778      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011438:	4b4d      	ldr	r3, [pc, #308]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 801143a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801143c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8011440:	d128      	bne.n	8011494 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8011442:	9201      	str	r2, [sp, #4]
 8011444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011446:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801144a:	641a      	str	r2, [r3, #64]	; 0x40
 801144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8011456:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011458:	4d48      	ldr	r5, [pc, #288]	; (801157c <HAL_RCC_OscConfig+0x2e0>)
 801145a:	682b      	ldr	r3, [r5, #0]
 801145c:	05d9      	lsls	r1, r3, #23
 801145e:	d51b      	bpl.n	8011498 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011460:	68a3      	ldr	r3, [r4, #8]
 8011462:	4d43      	ldr	r5, [pc, #268]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 8011464:	2b01      	cmp	r3, #1
 8011466:	d127      	bne.n	80114b8 <HAL_RCC_OscConfig+0x21c>
 8011468:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801146a:	f043 0301 	orr.w	r3, r3, #1
 801146e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8011470:	f7fe ffa6 	bl	80103c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011474:	4d3e      	ldr	r5, [pc, #248]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8011476:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011478:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801147c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801147e:	079b      	lsls	r3, r3, #30
 8011480:	d539      	bpl.n	80114f6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8011482:	2e00      	cmp	r6, #0
 8011484:	f43f af20 	beq.w	80112c8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011488:	4a39      	ldr	r2, [pc, #228]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 801148a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801148c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011490:	6413      	str	r3, [r2, #64]	; 0x40
 8011492:	e719      	b.n	80112c8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8011494:	2600      	movs	r6, #0
 8011496:	e7df      	b.n	8011458 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011498:	682b      	ldr	r3, [r5, #0]
 801149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801149e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80114a0:	f7fe ff8e 	bl	80103c0 <HAL_GetTick>
 80114a4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80114a6:	682b      	ldr	r3, [r5, #0]
 80114a8:	05da      	lsls	r2, r3, #23
 80114aa:	d4d9      	bmi.n	8011460 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114ac:	f7fe ff88 	bl	80103c0 <HAL_GetTick>
 80114b0:	1bc0      	subs	r0, r0, r7
 80114b2:	2802      	cmp	r0, #2
 80114b4:	d9f7      	bls.n	80114a6 <HAL_RCC_OscConfig+0x20a>
 80114b6:	e738      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114b8:	2b05      	cmp	r3, #5
 80114ba:	d104      	bne.n	80114c6 <HAL_RCC_OscConfig+0x22a>
 80114bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80114be:	f043 0304 	orr.w	r3, r3, #4
 80114c2:	672b      	str	r3, [r5, #112]	; 0x70
 80114c4:	e7d0      	b.n	8011468 <HAL_RCC_OscConfig+0x1cc>
 80114c6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80114c8:	f022 0201 	bic.w	r2, r2, #1
 80114cc:	672a      	str	r2, [r5, #112]	; 0x70
 80114ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80114d0:	f022 0204 	bic.w	r2, r2, #4
 80114d4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1ca      	bne.n	8011470 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80114da:	f7fe ff71 	bl	80103c0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80114e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80114e6:	0798      	lsls	r0, r3, #30
 80114e8:	d5cb      	bpl.n	8011482 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114ea:	f7fe ff69 	bl	80103c0 <HAL_GetTick>
 80114ee:	1bc0      	subs	r0, r0, r7
 80114f0:	4540      	cmp	r0, r8
 80114f2:	d9f7      	bls.n	80114e4 <HAL_RCC_OscConfig+0x248>
 80114f4:	e719      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114f6:	f7fe ff63 	bl	80103c0 <HAL_GetTick>
 80114fa:	1bc0      	subs	r0, r0, r7
 80114fc:	4540      	cmp	r0, r8
 80114fe:	d9bd      	bls.n	801147c <HAL_RCC_OscConfig+0x1e0>
 8011500:	e713      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011502:	4d1b      	ldr	r5, [pc, #108]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
 8011504:	68ab      	ldr	r3, [r5, #8]
 8011506:	f003 030c 	and.w	r3, r3, #12
 801150a:	2b08      	cmp	r3, #8
 801150c:	f43f aeca 	beq.w	80112a4 <HAL_RCC_OscConfig+0x8>
 8011510:	4e1b      	ldr	r6, [pc, #108]	; (8011580 <HAL_RCC_OscConfig+0x2e4>)
 8011512:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011514:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8011516:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011518:	d134      	bne.n	8011584 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 801151a:	f7fe ff51 	bl	80103c0 <HAL_GetTick>
 801151e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011520:	682b      	ldr	r3, [r5, #0]
 8011522:	0199      	lsls	r1, r3, #6
 8011524:	d41e      	bmi.n	8011564 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011526:	6a22      	ldr	r2, [r4, #32]
 8011528:	69e3      	ldr	r3, [r4, #28]
 801152a:	4313      	orrs	r3, r2
 801152c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801152e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011532:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011534:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011538:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801153a:	4c0d      	ldr	r4, [pc, #52]	; (8011570 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801153c:	0852      	lsrs	r2, r2, #1
 801153e:	3a01      	subs	r2, #1
 8011540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011544:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011546:	2301      	movs	r3, #1
 8011548:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 801154a:	f7fe ff39 	bl	80103c0 <HAL_GetTick>
 801154e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	019a      	lsls	r2, r3, #6
 8011554:	f53f aebc 	bmi.w	80112d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011558:	f7fe ff32 	bl	80103c0 <HAL_GetTick>
 801155c:	1b40      	subs	r0, r0, r5
 801155e:	2802      	cmp	r0, #2
 8011560:	d9f6      	bls.n	8011550 <HAL_RCC_OscConfig+0x2b4>
 8011562:	e6e2      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011564:	f7fe ff2c 	bl	80103c0 <HAL_GetTick>
 8011568:	1bc0      	subs	r0, r0, r7
 801156a:	2802      	cmp	r0, #2
 801156c:	d9d8      	bls.n	8011520 <HAL_RCC_OscConfig+0x284>
 801156e:	e6dc      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
 8011570:	40023800 	.word	0x40023800
 8011574:	42470000 	.word	0x42470000
 8011578:	42470e80 	.word	0x42470e80
 801157c:	40007000 	.word	0x40007000
 8011580:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8011584:	f7fe ff1c 	bl	80103c0 <HAL_GetTick>
 8011588:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801158a:	682b      	ldr	r3, [r5, #0]
 801158c:	019b      	lsls	r3, r3, #6
 801158e:	f57f ae9f 	bpl.w	80112d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011592:	f7fe ff15 	bl	80103c0 <HAL_GetTick>
 8011596:	1b00      	subs	r0, r0, r4
 8011598:	2802      	cmp	r0, #2
 801159a:	d9f6      	bls.n	801158a <HAL_RCC_OscConfig+0x2ee>
 801159c:	e6c5      	b.n	801132a <HAL_RCC_OscConfig+0x8e>
 801159e:	bf00      	nop

080115a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80115a0:	4913      	ldr	r1, [pc, #76]	; (80115f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80115a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80115a4:	688b      	ldr	r3, [r1, #8]
 80115a6:	f003 030c 	and.w	r3, r3, #12
 80115aa:	2b04      	cmp	r3, #4
 80115ac:	d003      	beq.n	80115b6 <HAL_RCC_GetSysClockFreq+0x16>
 80115ae:	2b08      	cmp	r3, #8
 80115b0:	d003      	beq.n	80115ba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80115b2:	4810      	ldr	r0, [pc, #64]	; (80115f4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80115b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80115b6:	4810      	ldr	r0, [pc, #64]	; (80115f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80115b8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80115ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80115bc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80115c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115c4:	bf14      	ite	ne
 80115c6:	480c      	ldrne	r0, [pc, #48]	; (80115f8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115c8:	480a      	ldreq	r0, [pc, #40]	; (80115f4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80115ce:	bf18      	it	ne
 80115d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80115d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115d6:	fba1 0100 	umull	r0, r1, r1, r0
 80115da:	f7fe fd43 	bl	8010064 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80115de:	4b04      	ldr	r3, [pc, #16]	; (80115f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80115e6:	3301      	adds	r3, #1
 80115e8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80115ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80115ee:	bd08      	pop	{r3, pc}
 80115f0:	40023800 	.word	0x40023800
 80115f4:	00f42400 	.word	0x00f42400
 80115f8:	017d7840 	.word	0x017d7840

080115fc <HAL_RCC_ClockConfig>:
{
 80115fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011600:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8011602:	4604      	mov	r4, r0
 8011604:	b910      	cbnz	r0, 801160c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8011606:	2001      	movs	r0, #1
 8011608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801160c:	4b44      	ldr	r3, [pc, #272]	; (8011720 <HAL_RCC_ClockConfig+0x124>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	f002 020f 	and.w	r2, r2, #15
 8011614:	428a      	cmp	r2, r1
 8011616:	d328      	bcc.n	801166a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011618:	6821      	ldr	r1, [r4, #0]
 801161a:	078f      	lsls	r7, r1, #30
 801161c:	d42d      	bmi.n	801167a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801161e:	07c8      	lsls	r0, r1, #31
 8011620:	d440      	bmi.n	80116a4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011622:	4b3f      	ldr	r3, [pc, #252]	; (8011720 <HAL_RCC_ClockConfig+0x124>)
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	f002 020f 	and.w	r2, r2, #15
 801162a:	4295      	cmp	r5, r2
 801162c:	d366      	bcc.n	80116fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801162e:	6822      	ldr	r2, [r4, #0]
 8011630:	0751      	lsls	r1, r2, #29
 8011632:	d46c      	bmi.n	801170e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011634:	0713      	lsls	r3, r2, #28
 8011636:	d507      	bpl.n	8011648 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011638:	4a3a      	ldr	r2, [pc, #232]	; (8011724 <HAL_RCC_ClockConfig+0x128>)
 801163a:	6921      	ldr	r1, [r4, #16]
 801163c:	6893      	ldr	r3, [r2, #8]
 801163e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011642:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011646:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011648:	f7ff ffaa 	bl	80115a0 <HAL_RCC_GetSysClockFreq>
 801164c:	4b35      	ldr	r3, [pc, #212]	; (8011724 <HAL_RCC_ClockConfig+0x128>)
 801164e:	4a36      	ldr	r2, [pc, #216]	; (8011728 <HAL_RCC_ClockConfig+0x12c>)
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011656:	5cd3      	ldrb	r3, [r2, r3]
 8011658:	40d8      	lsrs	r0, r3
 801165a:	4b34      	ldr	r3, [pc, #208]	; (801172c <HAL_RCC_ClockConfig+0x130>)
 801165c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 801165e:	2000      	movs	r0, #0
 8011660:	f00a fa00 	bl	801ba64 <HAL_InitTick>
  return HAL_OK;
 8011664:	2000      	movs	r0, #0
 8011666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 801166a:	b2ca      	uxtb	r2, r1
 801166c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f003 030f 	and.w	r3, r3, #15
 8011674:	4299      	cmp	r1, r3
 8011676:	d1c6      	bne.n	8011606 <HAL_RCC_ClockConfig+0xa>
 8011678:	e7ce      	b.n	8011618 <HAL_RCC_ClockConfig+0x1c>
 801167a:	4b2a      	ldr	r3, [pc, #168]	; (8011724 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801167c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011680:	bf1e      	ittt	ne
 8011682:	689a      	ldrne	r2, [r3, #8]
 8011684:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8011688:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801168a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801168c:	bf42      	ittt	mi
 801168e:	689a      	ldrmi	r2, [r3, #8]
 8011690:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8011694:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011696:	689a      	ldr	r2, [r3, #8]
 8011698:	68a0      	ldr	r0, [r4, #8]
 801169a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801169e:	4302      	orrs	r2, r0
 80116a0:	609a      	str	r2, [r3, #8]
 80116a2:	e7bc      	b.n	801161e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116a4:	6862      	ldr	r2, [r4, #4]
 80116a6:	4b1f      	ldr	r3, [pc, #124]	; (8011724 <HAL_RCC_ClockConfig+0x128>)
 80116a8:	2a01      	cmp	r2, #1
 80116aa:	d11d      	bne.n	80116e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116b2:	d0a8      	beq.n	8011606 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80116b4:	4e1b      	ldr	r6, [pc, #108]	; (8011724 <HAL_RCC_ClockConfig+0x128>)
 80116b6:	68b3      	ldr	r3, [r6, #8]
 80116b8:	f023 0303 	bic.w	r3, r3, #3
 80116bc:	4313      	orrs	r3, r2
 80116be:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80116c0:	f7fe fe7e 	bl	80103c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116c4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80116c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80116ca:	68b3      	ldr	r3, [r6, #8]
 80116cc:	6862      	ldr	r2, [r4, #4]
 80116ce:	f003 030c 	and.w	r3, r3, #12
 80116d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80116d6:	d0a4      	beq.n	8011622 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116d8:	f7fe fe72 	bl	80103c0 <HAL_GetTick>
 80116dc:	1bc0      	subs	r0, r0, r7
 80116de:	4540      	cmp	r0, r8
 80116e0:	d9f3      	bls.n	80116ca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80116e2:	2003      	movs	r0, #3
}
 80116e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80116e8:	1e91      	subs	r1, r2, #2
 80116ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80116ee:	d802      	bhi.n	80116f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80116f4:	e7dd      	b.n	80116b2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116f6:	f013 0f02 	tst.w	r3, #2
 80116fa:	e7da      	b.n	80116b2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116fc:	b2ea      	uxtb	r2, r5
 80116fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f003 030f 	and.w	r3, r3, #15
 8011706:	429d      	cmp	r5, r3
 8011708:	f47f af7d 	bne.w	8011606 <HAL_RCC_ClockConfig+0xa>
 801170c:	e78f      	b.n	801162e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801170e:	4905      	ldr	r1, [pc, #20]	; (8011724 <HAL_RCC_ClockConfig+0x128>)
 8011710:	68e0      	ldr	r0, [r4, #12]
 8011712:	688b      	ldr	r3, [r1, #8]
 8011714:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8011718:	4303      	orrs	r3, r0
 801171a:	608b      	str	r3, [r1, #8]
 801171c:	e78a      	b.n	8011634 <HAL_RCC_ClockConfig+0x38>
 801171e:	bf00      	nop
 8011720:	40023c00 	.word	0x40023c00
 8011724:	40023800 	.word	0x40023800
 8011728:	08020865 	.word	0x08020865
 801172c:	20000024 	.word	0x20000024

08011730 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011730:	4b01      	ldr	r3, [pc, #4]	; (8011738 <HAL_RCC_GetHCLKFreq+0x8>)
 8011732:	6818      	ldr	r0, [r3, #0]
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	20000024 	.word	0x20000024

0801173c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801173c:	4b04      	ldr	r3, [pc, #16]	; (8011750 <HAL_RCC_GetPCLK1Freq+0x14>)
 801173e:	4a05      	ldr	r2, [pc, #20]	; (8011754 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8011746:	5cd3      	ldrb	r3, [r2, r3]
 8011748:	4a03      	ldr	r2, [pc, #12]	; (8011758 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801174a:	6810      	ldr	r0, [r2, #0]
}
 801174c:	40d8      	lsrs	r0, r3
 801174e:	4770      	bx	lr
 8011750:	40023800 	.word	0x40023800
 8011754:	08020875 	.word	0x08020875
 8011758:	20000024 	.word	0x20000024

0801175c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801175c:	4b04      	ldr	r3, [pc, #16]	; (8011770 <HAL_RCC_GetPCLK2Freq+0x14>)
 801175e:	4a05      	ldr	r2, [pc, #20]	; (8011774 <HAL_RCC_GetPCLK2Freq+0x18>)
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011766:	5cd3      	ldrb	r3, [r2, r3]
 8011768:	4a03      	ldr	r2, [pc, #12]	; (8011778 <HAL_RCC_GetPCLK2Freq+0x1c>)
 801176a:	6810      	ldr	r0, [r2, #0]
}
 801176c:	40d8      	lsrs	r0, r3
 801176e:	4770      	bx	lr
 8011770:	40023800 	.word	0x40023800
 8011774:	08020875 	.word	0x08020875
 8011778:	20000024 	.word	0x20000024

0801177c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801177c:	230f      	movs	r3, #15
 801177e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011780:	4b0b      	ldr	r3, [pc, #44]	; (80117b0 <HAL_RCC_GetClockConfig+0x34>)
 8011782:	689a      	ldr	r2, [r3, #8]
 8011784:	f002 0203 	and.w	r2, r2, #3
 8011788:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801178a:	689a      	ldr	r2, [r3, #8]
 801178c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8011790:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011792:	689a      	ldr	r2, [r3, #8]
 8011794:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8011798:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	08db      	lsrs	r3, r3, #3
 801179e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80117a2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80117a4:	4b03      	ldr	r3, [pc, #12]	; (80117b4 <HAL_RCC_GetClockConfig+0x38>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f003 030f 	and.w	r3, r3, #15
 80117ac:	600b      	str	r3, [r1, #0]
 80117ae:	4770      	bx	lr
 80117b0:	40023800 	.word	0x40023800
 80117b4:	40023c00 	.word	0x40023c00

080117b8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80117b8:	6803      	ldr	r3, [r0, #0]
 80117ba:	68da      	ldr	r2, [r3, #12]
 80117bc:	f042 0201 	orr.w	r2, r2, #1
 80117c0:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	f042 0201 	orr.w	r2, r2, #1
 80117c8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80117ca:	2000      	movs	r0, #0
 80117cc:	4770      	bx	lr

080117ce <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80117ce:	6803      	ldr	r3, [r0, #0]
 80117d0:	68da      	ldr	r2, [r3, #12]
 80117d2:	f022 0201 	bic.w	r2, r2, #1
 80117d6:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80117d8:	6a19      	ldr	r1, [r3, #32]
 80117da:	f241 1211 	movw	r2, #4369	; 0x1111
 80117de:	4211      	tst	r1, r2
 80117e0:	d108      	bne.n	80117f4 <HAL_TIM_Base_Stop_IT+0x26>
 80117e2:	6a19      	ldr	r1, [r3, #32]
 80117e4:	f240 4244 	movw	r2, #1092	; 0x444
 80117e8:	4211      	tst	r1, r2
 80117ea:	bf02      	ittt	eq
 80117ec:	681a      	ldreq	r2, [r3, #0]
 80117ee:	f022 0201 	biceq.w	r2, r2, #1
 80117f2:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 80117f4:	2000      	movs	r0, #0
 80117f6:	4770      	bx	lr

080117f8 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80117f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80117fc:	2b01      	cmp	r3, #1
{
 80117fe:	b570      	push	{r4, r5, r6, lr}
 8011800:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8011804:	d01c      	beq.n	8011840 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8011806:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801180a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 801180c:	2201      	movs	r2, #1
 801180e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8011812:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011814:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8011818:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 801181c:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 801181e:	680a      	ldr	r2, [r1, #0]
 8011820:	2a40      	cmp	r2, #64	; 0x40
 8011822:	d079      	beq.n	8011918 <HAL_TIM_ConfigClockSource+0x120>
 8011824:	d819      	bhi.n	801185a <HAL_TIM_ConfigClockSource+0x62>
 8011826:	2a10      	cmp	r2, #16
 8011828:	f000 8093 	beq.w	8011952 <HAL_TIM_ConfigClockSource+0x15a>
 801182c:	d80a      	bhi.n	8011844 <HAL_TIM_ConfigClockSource+0x4c>
 801182e:	2a00      	cmp	r2, #0
 8011830:	f000 8089 	beq.w	8011946 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8011834:	2301      	movs	r3, #1
 8011836:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 801183a:	2300      	movs	r3, #0
 801183c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8011840:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8011842:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8011844:	2a20      	cmp	r2, #32
 8011846:	f000 808a 	beq.w	801195e <HAL_TIM_ConfigClockSource+0x166>
 801184a:	2a30      	cmp	r2, #48	; 0x30
 801184c:	d1f2      	bne.n	8011834 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 801184e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8011850:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011854:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8011858:	e036      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 801185a:	2a70      	cmp	r2, #112	; 0x70
 801185c:	d036      	beq.n	80118cc <HAL_TIM_ConfigClockSource+0xd4>
 801185e:	d81b      	bhi.n	8011898 <HAL_TIM_ConfigClockSource+0xa0>
 8011860:	2a50      	cmp	r2, #80	; 0x50
 8011862:	d042      	beq.n	80118ea <HAL_TIM_ConfigClockSource+0xf2>
 8011864:	2a60      	cmp	r2, #96	; 0x60
 8011866:	d1e5      	bne.n	8011834 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011868:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 801186a:	684d      	ldr	r5, [r1, #4]
 801186c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801186e:	f024 0410 	bic.w	r4, r4, #16
 8011872:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011874:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8011876:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011878:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801187c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8011880:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011884:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8011888:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 801188a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 801188c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801188e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011892:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8011896:	e017      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8011898:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801189c:	d011      	beq.n	80118c2 <HAL_TIM_ConfigClockSource+0xca>
 801189e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80118a2:	d1c7      	bne.n	8011834 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118a4:	688a      	ldr	r2, [r1, #8]
 80118a6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80118a8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118aa:	68c9      	ldr	r1, [r1, #12]
 80118ac:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80118ae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80118b6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80118b8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80118ba:	689a      	ldr	r2, [r3, #8]
 80118bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80118c0:	e002      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80118c2:	689a      	ldr	r2, [r3, #8]
 80118c4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80118c8:	609a      	str	r2, [r3, #8]
 80118ca:	e7b3      	b.n	8011834 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118cc:	688a      	ldr	r2, [r1, #8]
 80118ce:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80118d0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118d2:	68c9      	ldr	r1, [r1, #12]
 80118d4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80118d6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80118da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80118de:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80118e0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80118e2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80118e4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80118e8:	e7ee      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80118ea:	684c      	ldr	r4, [r1, #4]
 80118ec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80118ee:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80118f0:	6a1d      	ldr	r5, [r3, #32]
 80118f2:	f025 0501 	bic.w	r5, r5, #1
 80118f6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80118f8:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80118fa:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011902:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8011906:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8011908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801190a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 801190c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801190e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011912:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8011916:	e7d7      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8011918:	684c      	ldr	r4, [r1, #4]
 801191a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 801191c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801191e:	6a1d      	ldr	r5, [r3, #32]
 8011920:	f025 0501 	bic.w	r5, r5, #1
 8011924:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8011926:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011928:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801192c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011930:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8011934:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8011936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011938:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 801193a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 801193c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011940:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8011944:	e7c0      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8011946:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011948:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 801194c:	f042 0207 	orr.w	r2, r2, #7
 8011950:	e7ba      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8011952:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011958:	f042 0217 	orr.w	r2, r2, #23
 801195c:	e7b4      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 801195e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8011960:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011964:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8011968:	e7ae      	b.n	80118c8 <HAL_TIM_ConfigClockSource+0xd0>

0801196a <HAL_TIM_OC_DelayElapsedCallback>:
 801196a:	4770      	bx	lr

0801196c <HAL_TIM_IC_CaptureCallback>:
 801196c:	4770      	bx	lr

0801196e <HAL_TIM_PWM_PulseFinishedCallback>:
 801196e:	4770      	bx	lr

08011970 <HAL_TIM_TriggerCallback>:
 8011970:	4770      	bx	lr

08011972 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011972:	6803      	ldr	r3, [r0, #0]
 8011974:	691a      	ldr	r2, [r3, #16]
 8011976:	0791      	lsls	r1, r2, #30
{
 8011978:	b510      	push	{r4, lr}
 801197a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801197c:	d50e      	bpl.n	801199c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 801197e:	68da      	ldr	r2, [r3, #12]
 8011980:	0792      	lsls	r2, r2, #30
 8011982:	d50b      	bpl.n	801199c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011984:	f06f 0202 	mvn.w	r2, #2
 8011988:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801198a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801198c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801198e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011990:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011992:	d077      	beq.n	8011a84 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8011994:	f7ff ffea 	bl	801196c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011998:	2300      	movs	r3, #0
 801199a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801199c:	6823      	ldr	r3, [r4, #0]
 801199e:	691a      	ldr	r2, [r3, #16]
 80119a0:	0750      	lsls	r0, r2, #29
 80119a2:	d510      	bpl.n	80119c6 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80119a4:	68da      	ldr	r2, [r3, #12]
 80119a6:	0751      	lsls	r1, r2, #29
 80119a8:	d50d      	bpl.n	80119c6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80119aa:	f06f 0204 	mvn.w	r2, #4
 80119ae:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80119b0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80119b2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80119b4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80119b8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80119ba:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80119bc:	d068      	beq.n	8011a90 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80119be:	f7ff ffd5 	bl	801196c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80119c2:	2300      	movs	r3, #0
 80119c4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80119c6:	6823      	ldr	r3, [r4, #0]
 80119c8:	691a      	ldr	r2, [r3, #16]
 80119ca:	0712      	lsls	r2, r2, #28
 80119cc:	d50f      	bpl.n	80119ee <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80119ce:	68da      	ldr	r2, [r3, #12]
 80119d0:	0710      	lsls	r0, r2, #28
 80119d2:	d50c      	bpl.n	80119ee <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80119d4:	f06f 0208 	mvn.w	r2, #8
 80119d8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80119da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80119dc:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80119de:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80119e0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80119e2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80119e4:	d05a      	beq.n	8011a9c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80119e6:	f7ff ffc1 	bl	801196c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80119ea:	2300      	movs	r3, #0
 80119ec:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80119ee:	6823      	ldr	r3, [r4, #0]
 80119f0:	691a      	ldr	r2, [r3, #16]
 80119f2:	06d2      	lsls	r2, r2, #27
 80119f4:	d510      	bpl.n	8011a18 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80119f6:	68da      	ldr	r2, [r3, #12]
 80119f8:	06d0      	lsls	r0, r2, #27
 80119fa:	d50d      	bpl.n	8011a18 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80119fc:	f06f 0210 	mvn.w	r2, #16
 8011a00:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011a02:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011a04:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011a06:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011a0a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8011a0c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011a0e:	d04b      	beq.n	8011aa8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8011a10:	f7ff ffac 	bl	801196c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011a14:	2300      	movs	r3, #0
 8011a16:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	691a      	ldr	r2, [r3, #16]
 8011a1c:	07d1      	lsls	r1, r2, #31
 8011a1e:	d508      	bpl.n	8011a32 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8011a20:	68da      	ldr	r2, [r3, #12]
 8011a22:	07d2      	lsls	r2, r2, #31
 8011a24:	d505      	bpl.n	8011a32 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011a26:	f06f 0201 	mvn.w	r2, #1
 8011a2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f009 ff4f 	bl	801b8d0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011a32:	6823      	ldr	r3, [r4, #0]
 8011a34:	691a      	ldr	r2, [r3, #16]
 8011a36:	0610      	lsls	r0, r2, #24
 8011a38:	d508      	bpl.n	8011a4c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8011a3a:	68da      	ldr	r2, [r3, #12]
 8011a3c:	0611      	lsls	r1, r2, #24
 8011a3e:	d505      	bpl.n	8011a4c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011a44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8011a46:	4620      	mov	r0, r4
 8011a48:	f000 f8d7 	bl	8011bfa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	691a      	ldr	r2, [r3, #16]
 8011a50:	0652      	lsls	r2, r2, #25
 8011a52:	d508      	bpl.n	8011a66 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8011a54:	68da      	ldr	r2, [r3, #12]
 8011a56:	0650      	lsls	r0, r2, #25
 8011a58:	d505      	bpl.n	8011a66 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011a5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011a5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff ff85 	bl	8011970 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	691a      	ldr	r2, [r3, #16]
 8011a6a:	0691      	lsls	r1, r2, #26
 8011a6c:	d522      	bpl.n	8011ab4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8011a6e:	68da      	ldr	r2, [r3, #12]
 8011a70:	0692      	lsls	r2, r2, #26
 8011a72:	d51f      	bpl.n	8011ab4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011a74:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8011a78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011a7a:	611a      	str	r2, [r3, #16]
}
 8011a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8011a80:	f000 b8ba 	b.w	8011bf8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a84:	f7ff ff71 	bl	801196a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff ff70 	bl	801196e <HAL_TIM_PWM_PulseFinishedCallback>
 8011a8e:	e783      	b.n	8011998 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a90:	f7ff ff6b 	bl	801196a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff ff6a 	bl	801196e <HAL_TIM_PWM_PulseFinishedCallback>
 8011a9a:	e792      	b.n	80119c2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a9c:	f7ff ff65 	bl	801196a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f7ff ff64 	bl	801196e <HAL_TIM_PWM_PulseFinishedCallback>
 8011aa6:	e7a0      	b.n	80119ea <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011aa8:	f7ff ff5f 	bl	801196a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011aac:	4620      	mov	r0, r4
 8011aae:	f7ff ff5e 	bl	801196e <HAL_TIM_PWM_PulseFinishedCallback>
 8011ab2:	e7af      	b.n	8011a14 <HAL_TIM_IRQHandler+0xa2>
 8011ab4:	bd10      	pop	{r4, pc}
	...

08011ab8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8011ab8:	4a2e      	ldr	r2, [pc, #184]	; (8011b74 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8011aba:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8011abc:	4290      	cmp	r0, r2
 8011abe:	d012      	beq.n	8011ae6 <TIM_Base_SetConfig+0x2e>
 8011ac0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011ac4:	d00f      	beq.n	8011ae6 <TIM_Base_SetConfig+0x2e>
 8011ac6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8011aca:	4290      	cmp	r0, r2
 8011acc:	d00b      	beq.n	8011ae6 <TIM_Base_SetConfig+0x2e>
 8011ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011ad2:	4290      	cmp	r0, r2
 8011ad4:	d007      	beq.n	8011ae6 <TIM_Base_SetConfig+0x2e>
 8011ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011ada:	4290      	cmp	r0, r2
 8011adc:	d003      	beq.n	8011ae6 <TIM_Base_SetConfig+0x2e>
 8011ade:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011ae2:	4290      	cmp	r0, r2
 8011ae4:	d11d      	bne.n	8011b22 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8011ae6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8011aec:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8011aee:	4a21      	ldr	r2, [pc, #132]	; (8011b74 <TIM_Base_SetConfig+0xbc>)
 8011af0:	4290      	cmp	r0, r2
 8011af2:	d104      	bne.n	8011afe <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011af4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8011af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011afa:	4313      	orrs	r3, r2
 8011afc:	e028      	b.n	8011b50 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8011afe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011b02:	d0f7      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b04:	4a1c      	ldr	r2, [pc, #112]	; (8011b78 <TIM_Base_SetConfig+0xc0>)
 8011b06:	4290      	cmp	r0, r2
 8011b08:	d0f4      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b0e:	4290      	cmp	r0, r2
 8011b10:	d0f0      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b16:	4290      	cmp	r0, r2
 8011b18:	d0ec      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011b1e:	4290      	cmp	r0, r2
 8011b20:	d0e8      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b22:	4a16      	ldr	r2, [pc, #88]	; (8011b7c <TIM_Base_SetConfig+0xc4>)
 8011b24:	4290      	cmp	r0, r2
 8011b26:	d0e5      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b2c:	4290      	cmp	r0, r2
 8011b2e:	d0e1      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b34:	4290      	cmp	r0, r2
 8011b36:	d0dd      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b38:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011b3c:	4290      	cmp	r0, r2
 8011b3e:	d0d9      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b44:	4290      	cmp	r0, r2
 8011b46:	d0d5      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
 8011b48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b4c:	4290      	cmp	r0, r2
 8011b4e:	d0d1      	beq.n	8011af4 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8011b50:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011b52:	688b      	ldr	r3, [r1, #8]
 8011b54:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011b56:	680b      	ldr	r3, [r1, #0]
 8011b58:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8011b5a:	4b06      	ldr	r3, [pc, #24]	; (8011b74 <TIM_Base_SetConfig+0xbc>)
 8011b5c:	4298      	cmp	r0, r3
 8011b5e:	d006      	beq.n	8011b6e <TIM_Base_SetConfig+0xb6>
 8011b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b64:	4298      	cmp	r0, r3
 8011b66:	d002      	beq.n	8011b6e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	6143      	str	r3, [r0, #20]
}
 8011b6c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8011b6e:	690b      	ldr	r3, [r1, #16]
 8011b70:	6303      	str	r3, [r0, #48]	; 0x30
 8011b72:	e7f9      	b.n	8011b68 <TIM_Base_SetConfig+0xb0>
 8011b74:	40010000 	.word	0x40010000
 8011b78:	40000400 	.word	0x40000400
 8011b7c:	40014000 	.word	0x40014000

08011b80 <HAL_TIM_Base_Init>:
{ 
 8011b80:	b510      	push	{r4, lr}
  if(htim == NULL)
 8011b82:	4604      	mov	r4, r0
 8011b84:	b1a0      	cbz	r0, 8011bb0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011b86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8011b8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011b8e:	b91b      	cbnz	r3, 8011b98 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8011b90:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8011b94:	f00a f85c 	bl	801bc50 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8011b98:	2302      	movs	r3, #2
 8011b9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8011b9e:	6820      	ldr	r0, [r4, #0]
 8011ba0:	1d21      	adds	r1, r4, #4
 8011ba2:	f7ff ff89 	bl	8011ab8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8011bac:	2000      	movs	r0, #0
 8011bae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8011bb0:	2001      	movs	r0, #1
}
 8011bb2:	bd10      	pop	{r4, pc}

08011bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8011bb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011bb8:	2b01      	cmp	r3, #1
{
 8011bba:	b510      	push	{r4, lr}
 8011bbc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8011bc0:	d018      	beq.n	8011bf4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8011bc2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011bc6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8011bc8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011bca:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011bcc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011bce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011bd2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8011bd4:	685a      	ldr	r2, [r3, #4]
 8011bd6:	4322      	orrs	r2, r4
 8011bd8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011bda:	689a      	ldr	r2, [r3, #8]
 8011bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011be0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011be2:	689a      	ldr	r2, [r3, #8]
 8011be4:	430a      	orrs	r2, r1
 8011be6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8011be8:	2301      	movs	r3, #1
 8011bea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8011bee:	2300      	movs	r3, #0
 8011bf0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8011bf4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8011bf6:	bd10      	pop	{r4, pc}

08011bf8 <HAL_TIMEx_CommutationCallback>:
 8011bf8:	4770      	bx	lr

08011bfa <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bfa:	4770      	bx	lr

08011bfc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011bfc:	6803      	ldr	r3, [r0, #0]
 8011bfe:	68da      	ldr	r2, [r3, #12]
 8011c00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011c04:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c06:	695a      	ldr	r2, [r3, #20]
 8011c08:	f022 0201 	bic.w	r2, r2, #1
 8011c0c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c0e:	2320      	movs	r3, #32
 8011c10:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8011c14:	4770      	bx	lr
	...

08011c18 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8011c1c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8011c1e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8011c20:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011c22:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8011c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8011c28:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8011c2a:	6133      	str	r3, [r6, #16]
{
 8011c2c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011c2e:	6883      	ldr	r3, [r0, #8]
 8011c30:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8011c32:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011c34:	4303      	orrs	r3, r0
 8011c36:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8011c38:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011c3c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8011c3e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011c42:	430b      	orrs	r3, r1
 8011c44:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8011c46:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8011c48:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8011c4a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8011c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8011c50:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c52:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8011c56:	6173      	str	r3, [r6, #20]
 8011c58:	4b7a      	ldr	r3, [pc, #488]	; (8011e44 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c5a:	d17c      	bne.n	8011d56 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8011c5c:	429e      	cmp	r6, r3
 8011c5e:	d003      	beq.n	8011c68 <UART_SetConfig+0x50>
 8011c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011c64:	429e      	cmp	r6, r3
 8011c66:	d144      	bne.n	8011cf2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8011c68:	f7ff fd78 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011c6c:	2519      	movs	r5, #25
 8011c6e:	fb05 f300 	mul.w	r3, r5, r0
 8011c72:	6860      	ldr	r0, [r4, #4]
 8011c74:	f04f 0964 	mov.w	r9, #100	; 0x64
 8011c78:	0040      	lsls	r0, r0, #1
 8011c7a:	fbb3 f3f0 	udiv	r3, r3, r0
 8011c7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8011c82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011c86:	f7ff fd69 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011c8a:	6863      	ldr	r3, [r4, #4]
 8011c8c:	4368      	muls	r0, r5
 8011c8e:	005b      	lsls	r3, r3, #1
 8011c90:	fbb0 f7f3 	udiv	r7, r0, r3
 8011c94:	f7ff fd62 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011c98:	6863      	ldr	r3, [r4, #4]
 8011c9a:	4368      	muls	r0, r5
 8011c9c:	005b      	lsls	r3, r3, #1
 8011c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8011ca2:	fbb3 f3f9 	udiv	r3, r3, r9
 8011ca6:	fb09 7313 	mls	r3, r9, r3, r7
 8011caa:	00db      	lsls	r3, r3, #3
 8011cac:	3332      	adds	r3, #50	; 0x32
 8011cae:	fbb3 f3f9 	udiv	r3, r3, r9
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8011cb8:	f7ff fd50 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011cbc:	6862      	ldr	r2, [r4, #4]
 8011cbe:	4368      	muls	r0, r5
 8011cc0:	0052      	lsls	r2, r2, #1
 8011cc2:	fbb0 faf2 	udiv	sl, r0, r2
 8011cc6:	f7ff fd49 	bl	801175c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	4368      	muls	r0, r5
 8011cce:	005b      	lsls	r3, r3, #1
 8011cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8011cd4:	fbb3 f3f9 	udiv	r3, r3, r9
 8011cd8:	fb09 a313 	mls	r3, r9, r3, sl
 8011cdc:	00db      	lsls	r3, r3, #3
 8011cde:	3332      	adds	r3, #50	; 0x32
 8011ce0:	fbb3 f3f9 	udiv	r3, r3, r9
 8011ce4:	f003 0307 	and.w	r3, r3, #7
 8011ce8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8011cea:	443b      	add	r3, r7
 8011cec:	60b3      	str	r3, [r6, #8]
 8011cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8011cf2:	f7ff fd23 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011cf6:	2519      	movs	r5, #25
 8011cf8:	fb05 f300 	mul.w	r3, r5, r0
 8011cfc:	6860      	ldr	r0, [r4, #4]
 8011cfe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8011d02:	0040      	lsls	r0, r0, #1
 8011d04:	fbb3 f3f0 	udiv	r3, r3, r0
 8011d08:	fbb3 f3f9 	udiv	r3, r3, r9
 8011d0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011d10:	f7ff fd14 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011d14:	6863      	ldr	r3, [r4, #4]
 8011d16:	4368      	muls	r0, r5
 8011d18:	005b      	lsls	r3, r3, #1
 8011d1a:	fbb0 f7f3 	udiv	r7, r0, r3
 8011d1e:	f7ff fd0d 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011d22:	6863      	ldr	r3, [r4, #4]
 8011d24:	4368      	muls	r0, r5
 8011d26:	005b      	lsls	r3, r3, #1
 8011d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8011d2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8011d30:	fb09 7313 	mls	r3, r9, r3, r7
 8011d34:	00db      	lsls	r3, r3, #3
 8011d36:	3332      	adds	r3, #50	; 0x32
 8011d38:	fbb3 f3f9 	udiv	r3, r3, r9
 8011d3c:	005b      	lsls	r3, r3, #1
 8011d3e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8011d42:	f7ff fcfb 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011d46:	6862      	ldr	r2, [r4, #4]
 8011d48:	4368      	muls	r0, r5
 8011d4a:	0052      	lsls	r2, r2, #1
 8011d4c:	fbb0 faf2 	udiv	sl, r0, r2
 8011d50:	f7ff fcf4 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011d54:	e7b9      	b.n	8011cca <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8011d56:	429e      	cmp	r6, r3
 8011d58:	d002      	beq.n	8011d60 <UART_SetConfig+0x148>
 8011d5a:	4b3b      	ldr	r3, [pc, #236]	; (8011e48 <UART_SetConfig+0x230>)
 8011d5c:	429e      	cmp	r6, r3
 8011d5e:	d140      	bne.n	8011de2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8011d60:	f7ff fcfc 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011d64:	6867      	ldr	r7, [r4, #4]
 8011d66:	2519      	movs	r5, #25
 8011d68:	f04f 0964 	mov.w	r9, #100	; 0x64
 8011d6c:	fb05 f300 	mul.w	r3, r5, r0
 8011d70:	00bf      	lsls	r7, r7, #2
 8011d72:	fbb3 f3f7 	udiv	r3, r3, r7
 8011d76:	fbb3 f3f9 	udiv	r3, r3, r9
 8011d7a:	011f      	lsls	r7, r3, #4
 8011d7c:	f7ff fcee 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011d80:	6863      	ldr	r3, [r4, #4]
 8011d82:	4368      	muls	r0, r5
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	fbb0 f8f3 	udiv	r8, r0, r3
 8011d8a:	f7ff fce7 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011d8e:	6863      	ldr	r3, [r4, #4]
 8011d90:	4368      	muls	r0, r5
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8011d98:	fbb3 f3f9 	udiv	r3, r3, r9
 8011d9c:	fb09 8313 	mls	r3, r9, r3, r8
 8011da0:	011b      	lsls	r3, r3, #4
 8011da2:	3332      	adds	r3, #50	; 0x32
 8011da4:	fbb3 f3f9 	udiv	r3, r3, r9
 8011da8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8011dac:	f7ff fcd6 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 8011db0:	6862      	ldr	r2, [r4, #4]
 8011db2:	4368      	muls	r0, r5
 8011db4:	0092      	lsls	r2, r2, #2
 8011db6:	fbb0 faf2 	udiv	sl, r0, r2
 8011dba:	f7ff fccf 	bl	801175c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8011dbe:	6863      	ldr	r3, [r4, #4]
 8011dc0:	4368      	muls	r0, r5
 8011dc2:	009b      	lsls	r3, r3, #2
 8011dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8011dc8:	fbb3 f3f9 	udiv	r3, r3, r9
 8011dcc:	fb09 a313 	mls	r3, r9, r3, sl
 8011dd0:	011b      	lsls	r3, r3, #4
 8011dd2:	3332      	adds	r3, #50	; 0x32
 8011dd4:	fbb3 f3f9 	udiv	r3, r3, r9
 8011dd8:	f003 030f 	and.w	r3, r3, #15
 8011ddc:	ea43 0308 	orr.w	r3, r3, r8
 8011de0:	e783      	b.n	8011cea <UART_SetConfig+0xd2>
 8011de2:	f7ff fcab 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011de6:	6867      	ldr	r7, [r4, #4]
 8011de8:	2519      	movs	r5, #25
 8011dea:	f04f 0964 	mov.w	r9, #100	; 0x64
 8011dee:	fb05 f300 	mul.w	r3, r5, r0
 8011df2:	00bf      	lsls	r7, r7, #2
 8011df4:	fbb3 f3f7 	udiv	r3, r3, r7
 8011df8:	fbb3 f3f9 	udiv	r3, r3, r9
 8011dfc:	011f      	lsls	r7, r3, #4
 8011dfe:	f7ff fc9d 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011e02:	6863      	ldr	r3, [r4, #4]
 8011e04:	4368      	muls	r0, r5
 8011e06:	009b      	lsls	r3, r3, #2
 8011e08:	fbb0 f8f3 	udiv	r8, r0, r3
 8011e0c:	f7ff fc96 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011e10:	6863      	ldr	r3, [r4, #4]
 8011e12:	4368      	muls	r0, r5
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8011e1a:	fbb3 f3f9 	udiv	r3, r3, r9
 8011e1e:	fb09 8313 	mls	r3, r9, r3, r8
 8011e22:	011b      	lsls	r3, r3, #4
 8011e24:	3332      	adds	r3, #50	; 0x32
 8011e26:	fbb3 f3f9 	udiv	r3, r3, r9
 8011e2a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8011e2e:	f7ff fc85 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011e32:	6862      	ldr	r2, [r4, #4]
 8011e34:	4368      	muls	r0, r5
 8011e36:	0092      	lsls	r2, r2, #2
 8011e38:	fbb0 faf2 	udiv	sl, r0, r2
 8011e3c:	f7ff fc7e 	bl	801173c <HAL_RCC_GetPCLK1Freq>
 8011e40:	e7bd      	b.n	8011dbe <UART_SetConfig+0x1a6>
 8011e42:	bf00      	nop
 8011e44:	40011000 	.word	0x40011000
 8011e48:	40011400 	.word	0x40011400

08011e4c <HAL_UART_Init>:
{
 8011e4c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8011e4e:	4604      	mov	r4, r0
 8011e50:	b340      	cbz	r0, 8011ea4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8011e52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8011e56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011e5a:	b91b      	cbnz	r3, 8011e64 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8011e5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8011e60:	f00a f862 	bl	801bf28 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8011e64:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011e66:	2324      	movs	r3, #36	; 0x24
 8011e68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8011e6c:	68d3      	ldr	r3, [r2, #12]
 8011e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011e72:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8011e74:	4620      	mov	r0, r4
 8011e76:	f7ff fecf 	bl	8011c18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011e7a:	6823      	ldr	r3, [r4, #0]
 8011e7c:	691a      	ldr	r2, [r3, #16]
 8011e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011e82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011e84:	695a      	ldr	r2, [r3, #20]
 8011e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011e8a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8011e8c:	68da      	ldr	r2, [r3, #12]
 8011e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011e92:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e94:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8011e96:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e98:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8011e9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8011e9e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8011ea2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8011ea4:	2001      	movs	r0, #1
}
 8011ea6:	bd10      	pop	{r4, pc}

08011ea8 <HAL_UART_DeInit>:
{
 8011ea8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8011eaa:	4604      	mov	r4, r0
 8011eac:	b168      	cbz	r0, 8011eca <HAL_UART_DeInit+0x22>
  huart->gState = HAL_UART_STATE_BUSY;
 8011eae:	2324      	movs	r3, #36	; 0x24
 8011eb0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 8011eb4:	f00a f8c2 	bl	801c03c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eb8:	2000      	movs	r0, #0
 8011eba:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8011ebc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8011ec0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8011ec4:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  return HAL_OK;
 8011ec8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8011eca:	2001      	movs	r0, #1
}
 8011ecc:	bd10      	pop	{r4, pc}

08011ece <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8011ece:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011ed2:	2b20      	cmp	r3, #32
 8011ed4:	d11c      	bne.n	8011f10 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8011ed6:	b1c9      	cbz	r1, 8011f0c <HAL_UART_Receive_IT+0x3e>
 8011ed8:	b1c2      	cbz	r2, 8011f0c <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8011eda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d016      	beq.n	8011f10 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 8011ee2:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8011ee4:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ee6:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011ee8:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eea:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011eec:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ef0:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8011ef2:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ef4:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8011ef6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011efa:	f041 0101 	orr.w	r1, r1, #1
 8011efe:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8011f00:	68d1      	ldr	r1, [r2, #12]
 8011f02:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8011f06:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8011f08:	4618      	mov	r0, r3
 8011f0a:	4770      	bx	lr
      return HAL_ERROR;
 8011f0c:	2001      	movs	r0, #1
 8011f0e:	4770      	bx	lr
    return HAL_BUSY; 
 8011f10:	2002      	movs	r0, #2
}
 8011f12:	4770      	bx	lr

08011f14 <HAL_UART_TxCpltCallback>:
 8011f14:	4770      	bx	lr

08011f16 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8011f16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8011f1a:	2b22      	cmp	r3, #34	; 0x22
{
 8011f1c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8011f1e:	d132      	bne.n	8011f86 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011f20:	6883      	ldr	r3, [r0, #8]
 8011f22:	6901      	ldr	r1, [r0, #16]
 8011f24:	6802      	ldr	r2, [r0, #0]
 8011f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011f2c:	d11f      	bne.n	8011f6e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011f2e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8011f30:	b9c9      	cbnz	r1, 8011f66 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011f36:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8011f3a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8011f3c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8011f3e:	3c01      	subs	r4, #1
 8011f40:	b2a4      	uxth	r4, r4
 8011f42:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8011f44:	b96c      	cbnz	r4, 8011f62 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011f46:	6803      	ldr	r3, [r0, #0]
 8011f48:	68da      	ldr	r2, [r3, #12]
 8011f4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011f4e:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f50:	695a      	ldr	r2, [r3, #20]
 8011f52:	f022 0201 	bic.w	r2, r2, #1
 8011f56:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8011f58:	2320      	movs	r3, #32
 8011f5a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8011f5e:	f009 fcf9 	bl	801b954 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8011f62:	2000      	movs	r0, #0
}
 8011f64:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011f66:	b2d2      	uxtb	r2, r2
 8011f68:	f823 2b01 	strh.w	r2, [r3], #1
 8011f6c:	e7e5      	b.n	8011f3a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8011f6e:	b921      	cbnz	r1, 8011f7a <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011f70:	1c59      	adds	r1, r3, #1
 8011f72:	6852      	ldr	r2, [r2, #4]
 8011f74:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011f76:	701a      	strb	r2, [r3, #0]
 8011f78:	e7e0      	b.n	8011f3c <UART_Receive_IT+0x26>
 8011f7a:	6852      	ldr	r2, [r2, #4]
 8011f7c:	1c59      	adds	r1, r3, #1
 8011f7e:	6281      	str	r1, [r0, #40]	; 0x28
 8011f80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011f84:	e7f7      	b.n	8011f76 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8011f86:	2002      	movs	r0, #2
 8011f88:	bd10      	pop	{r4, pc}

08011f8a <HAL_UART_ErrorCallback>:
 8011f8a:	4770      	bx	lr

08011f8c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011f8c:	6803      	ldr	r3, [r0, #0]
 8011f8e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011f90:	68d9      	ldr	r1, [r3, #12]
{
 8011f92:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8011f94:	0716      	lsls	r6, r2, #28
{
 8011f96:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011f98:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8011f9a:	d107      	bne.n	8011fac <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011f9c:	0696      	lsls	r6, r2, #26
 8011f9e:	d55a      	bpl.n	8012056 <HAL_UART_IRQHandler+0xca>
 8011fa0:	068d      	lsls	r5, r1, #26
 8011fa2:	d558      	bpl.n	8012056 <HAL_UART_IRQHandler+0xca>
}
 8011fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8011fa8:	f7ff bfb5 	b.w	8011f16 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011fac:	f015 0501 	ands.w	r5, r5, #1
 8011fb0:	d102      	bne.n	8011fb8 <HAL_UART_IRQHandler+0x2c>
 8011fb2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8011fb6:	d04e      	beq.n	8012056 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011fb8:	07d3      	lsls	r3, r2, #31
 8011fba:	d505      	bpl.n	8011fc8 <HAL_UART_IRQHandler+0x3c>
 8011fbc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011fbe:	bf42      	ittt	mi
 8011fc0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8011fc2:	f043 0301 	orrmi.w	r3, r3, #1
 8011fc6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011fc8:	0750      	lsls	r0, r2, #29
 8011fca:	d504      	bpl.n	8011fd6 <HAL_UART_IRQHandler+0x4a>
 8011fcc:	b11d      	cbz	r5, 8011fd6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011fd0:	f043 0302 	orr.w	r3, r3, #2
 8011fd4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011fd6:	0793      	lsls	r3, r2, #30
 8011fd8:	d504      	bpl.n	8011fe4 <HAL_UART_IRQHandler+0x58>
 8011fda:	b11d      	cbz	r5, 8011fe4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011fde:	f043 0304 	orr.w	r3, r3, #4
 8011fe2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011fe4:	0716      	lsls	r6, r2, #28
 8011fe6:	d504      	bpl.n	8011ff2 <HAL_UART_IRQHandler+0x66>
 8011fe8:	b11d      	cbz	r5, 8011ff2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011fea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011fec:	f043 0308 	orr.w	r3, r3, #8
 8011ff0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011ff2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d066      	beq.n	80120c6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011ff8:	0695      	lsls	r5, r2, #26
 8011ffa:	d504      	bpl.n	8012006 <HAL_UART_IRQHandler+0x7a>
 8011ffc:	0688      	lsls	r0, r1, #26
 8011ffe:	d502      	bpl.n	8012006 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8012000:	4620      	mov	r0, r4
 8012002:	f7ff ff88 	bl	8011f16 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012006:	6823      	ldr	r3, [r4, #0]
 8012008:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801200a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801200c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 801200e:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012010:	d402      	bmi.n	8012018 <HAL_UART_IRQHandler+0x8c>
 8012012:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8012016:	d01a      	beq.n	801204e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8012018:	f7ff fdf0 	bl	8011bfc <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801201c:	6823      	ldr	r3, [r4, #0]
 801201e:	695a      	ldr	r2, [r3, #20]
 8012020:	0652      	lsls	r2, r2, #25
 8012022:	d510      	bpl.n	8012046 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012024:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8012026:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801202c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 801202e:	b150      	cbz	r0, 8012046 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012030:	4b25      	ldr	r3, [pc, #148]	; (80120c8 <HAL_UART_IRQHandler+0x13c>)
 8012032:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012034:	f7fe fa3e 	bl	80104b4 <HAL_DMA_Abort_IT>
 8012038:	2800      	cmp	r0, #0
 801203a:	d044      	beq.n	80120c6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801203c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 801203e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012042:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012044:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8012046:	4620      	mov	r0, r4
 8012048:	f7ff ff9f 	bl	8011f8a <HAL_UART_ErrorCallback>
 801204c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 801204e:	f7ff ff9c 	bl	8011f8a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012052:	63e5      	str	r5, [r4, #60]	; 0x3c
 8012054:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012056:	0616      	lsls	r6, r2, #24
 8012058:	d527      	bpl.n	80120aa <HAL_UART_IRQHandler+0x11e>
 801205a:	060d      	lsls	r5, r1, #24
 801205c:	d525      	bpl.n	80120aa <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 801205e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8012062:	2a21      	cmp	r2, #33	; 0x21
 8012064:	d12f      	bne.n	80120c6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012066:	68a2      	ldr	r2, [r4, #8]
 8012068:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801206c:	6a22      	ldr	r2, [r4, #32]
 801206e:	d117      	bne.n	80120a0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012070:	8811      	ldrh	r1, [r2, #0]
 8012072:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8012076:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012078:	6921      	ldr	r1, [r4, #16]
 801207a:	b979      	cbnz	r1, 801209c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 801207c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 801207e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8012080:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8012082:	3a01      	subs	r2, #1
 8012084:	b292      	uxth	r2, r2
 8012086:	84e2      	strh	r2, [r4, #38]	; 0x26
 8012088:	b9ea      	cbnz	r2, 80120c6 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801208a:	68da      	ldr	r2, [r3, #12]
 801208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012090:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012092:	68da      	ldr	r2, [r3, #12]
 8012094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012098:	60da      	str	r2, [r3, #12]
 801209a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 801209c:	3201      	adds	r2, #1
 801209e:	e7ee      	b.n	801207e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80120a0:	1c51      	adds	r1, r2, #1
 80120a2:	6221      	str	r1, [r4, #32]
 80120a4:	7812      	ldrb	r2, [r2, #0]
 80120a6:	605a      	str	r2, [r3, #4]
 80120a8:	e7ea      	b.n	8012080 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80120aa:	0650      	lsls	r0, r2, #25
 80120ac:	d50b      	bpl.n	80120c6 <HAL_UART_IRQHandler+0x13a>
 80120ae:	064a      	lsls	r2, r1, #25
 80120b0:	d509      	bpl.n	80120c6 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80120b2:	68da      	ldr	r2, [r3, #12]
 80120b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80120b8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80120ba:	2320      	movs	r3, #32
 80120bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80120c0:	4620      	mov	r0, r4
 80120c2:	f7ff ff27 	bl	8011f14 <HAL_UART_TxCpltCallback>
 80120c6:	bd70      	pop	{r4, r5, r6, pc}
 80120c8:	080120cd 	.word	0x080120cd

080120cc <UART_DMAAbortOnError>:
{
 80120cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80120ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80120d0:	2300      	movs	r3, #0
 80120d2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80120d4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80120d6:	f7ff ff58 	bl	8011f8a <HAL_UART_ErrorCallback>
 80120da:	bd08      	pop	{r3, pc}

080120dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80120dc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80120de:	f001 f8df 	bl	80132a0 <vTaskStartScheduler>
  
  return osOK;
}
 80120e2:	2000      	movs	r0, #0
 80120e4:	bd08      	pop	{r3, pc}

080120e6 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120e6:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80120ea:	b10b      	cbz	r3, 80120f0 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80120ec:	f001 b922 	b.w	8013334 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80120f0:	f001 b91a 	b.w	8013328 <xTaskGetTickCount>

080120f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80120f4:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80120f6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80120fa:	8a02      	ldrh	r2, [r0, #16]
{
 80120fc:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80120fe:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8012102:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8012104:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8012106:	bf14      	ite	ne
 8012108:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801210a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801210c:	a803      	add	r0, sp, #12
 801210e:	9001      	str	r0, [sp, #4]
 8012110:	9400      	str	r4, [sp, #0]
 8012112:	4628      	mov	r0, r5
 8012114:	f000 fff4 	bl	8013100 <xTaskCreate>
 8012118:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801211a:	bf0c      	ite	eq
 801211c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 801211e:	2000      	movne	r0, #0
}
 8012120:	b005      	add	sp, #20
 8012122:	bd30      	pop	{r4, r5, pc}

08012124 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012124:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012126:	2800      	cmp	r0, #0
 8012128:	bf08      	it	eq
 801212a:	2001      	moveq	r0, #1
 801212c:	f001 fa14 	bl	8013558 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012130:	2000      	movs	r0, #0
 8012132:	bd08      	pop	{r3, pc}

08012134 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8012134:	2001      	movs	r0, #1
 8012136:	f000 bd5d 	b.w	8012bf4 <xQueueCreateMutex>
	...

0801213c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801213c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801213e:	2400      	movs	r4, #0
{
 8012140:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 8012142:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8012144:	b1e8      	cbz	r0, 8012182 <osMutexWait+0x46>
 8012146:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801214a:	b1a3      	cbz	r3, 8012176 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801214c:	aa01      	add	r2, sp, #4
 801214e:	4621      	mov	r1, r4
 8012150:	f000 fedc 	bl	8012f0c <xQueueReceiveFromISR>
 8012154:	2801      	cmp	r0, #1
 8012156:	d002      	beq.n	801215e <osMutexWait+0x22>
      return osErrorOS;
 8012158:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 801215a:	b002      	add	sp, #8
 801215c:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 801215e:	9b01      	ldr	r3, [sp, #4]
 8012160:	b13b      	cbz	r3, 8012172 <osMutexWait+0x36>
 8012162:	4b09      	ldr	r3, [pc, #36]	; (8012188 <osMutexWait+0x4c>)
 8012164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012168:	601a      	str	r2, [r3, #0]
 801216a:	f3bf 8f4f 	dsb	sy
 801216e:	f3bf 8f6f 	isb	sy
  return osOK;
 8012172:	2000      	movs	r0, #0
 8012174:	e7f1      	b.n	801215a <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012176:	4619      	mov	r1, r3
 8012178:	f000 fe04 	bl	8012d84 <xQueueGenericReceive>
 801217c:	2801      	cmp	r0, #1
 801217e:	d1eb      	bne.n	8012158 <osMutexWait+0x1c>
 8012180:	e7f7      	b.n	8012172 <osMutexWait+0x36>
    return osErrorParameter;
 8012182:	2080      	movs	r0, #128	; 0x80
 8012184:	e7e9      	b.n	801215a <osMutexWait+0x1e>
 8012186:	bf00      	nop
 8012188:	e000ed04 	.word	0xe000ed04

0801218c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801218c:	2901      	cmp	r1, #1
{ 
 801218e:	b510      	push	{r4, lr}
 8012190:	4608      	mov	r0, r1
  if (count == 1) {
 8012192:	d10c      	bne.n	80121ae <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8012194:	2203      	movs	r2, #3
 8012196:	2100      	movs	r1, #0
 8012198:	f000 fc54 	bl	8012a44 <xQueueGenericCreate>
 801219c:	4604      	mov	r4, r0
 801219e:	b120      	cbz	r0, 80121aa <osSemaphoreCreate+0x1e>
 80121a0:	2300      	movs	r3, #0
 80121a2:	461a      	mov	r2, r3
 80121a4:	4619      	mov	r1, r3
 80121a6:	f000 fc6f 	bl	8012a88 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80121aa:	4620      	mov	r0, r4
 80121ac:	bd10      	pop	{r4, pc}
    return NULL;
 80121ae:	2400      	movs	r4, #0
 80121b0:	e7fb      	b.n	80121aa <osSemaphoreCreate+0x1e>
	...

080121b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80121b4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80121b6:	2400      	movs	r4, #0
{
 80121b8:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80121ba:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80121bc:	b1e8      	cbz	r0, 80121fa <osSemaphoreWait+0x46>
 80121be:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80121c2:	b1a3      	cbz	r3, 80121ee <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80121c4:	aa01      	add	r2, sp, #4
 80121c6:	4621      	mov	r1, r4
 80121c8:	f000 fea0 	bl	8012f0c <xQueueReceiveFromISR>
 80121cc:	2801      	cmp	r0, #1
 80121ce:	d002      	beq.n	80121d6 <osSemaphoreWait+0x22>
      return osErrorOS;
 80121d0:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80121d2:	b002      	add	sp, #8
 80121d4:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80121d6:	9b01      	ldr	r3, [sp, #4]
 80121d8:	b13b      	cbz	r3, 80121ea <osSemaphoreWait+0x36>
 80121da:	4b09      	ldr	r3, [pc, #36]	; (8012200 <osSemaphoreWait+0x4c>)
 80121dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e0:	601a      	str	r2, [r3, #0]
 80121e2:	f3bf 8f4f 	dsb	sy
 80121e6:	f3bf 8f6f 	isb	sy
  return osOK;
 80121ea:	2000      	movs	r0, #0
 80121ec:	e7f1      	b.n	80121d2 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80121ee:	4619      	mov	r1, r3
 80121f0:	f000 fdc8 	bl	8012d84 <xQueueGenericReceive>
 80121f4:	2801      	cmp	r0, #1
 80121f6:	d1eb      	bne.n	80121d0 <osSemaphoreWait+0x1c>
 80121f8:	e7f7      	b.n	80121ea <osSemaphoreWait+0x36>
    return osErrorParameter;
 80121fa:	2080      	movs	r0, #128	; 0x80
 80121fc:	e7e9      	b.n	80121d2 <osSemaphoreWait+0x1e>
 80121fe:	bf00      	nop
 8012200:	e000ed04 	.word	0xe000ed04

08012204 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012204:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012206:	2400      	movs	r4, #0
 8012208:	9401      	str	r4, [sp, #4]
 801220a:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 801220e:	b193      	cbz	r3, 8012236 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012210:	a901      	add	r1, sp, #4
 8012212:	f000 fd63 	bl	8012cdc <xQueueGiveFromISR>
 8012216:	2801      	cmp	r0, #1
 8012218:	d113      	bne.n	8012242 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801221a:	9b01      	ldr	r3, [sp, #4]
 801221c:	b913      	cbnz	r3, 8012224 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 801221e:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8012220:	b002      	add	sp, #8
 8012222:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012224:	4b08      	ldr	r3, [pc, #32]	; (8012248 <osSemaphoreRelease+0x44>)
 8012226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801222a:	601a      	str	r2, [r3, #0]
 801222c:	f3bf 8f4f 	dsb	sy
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	e7f3      	b.n	801221e <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012236:	461a      	mov	r2, r3
 8012238:	4619      	mov	r1, r3
 801223a:	f000 fc25 	bl	8012a88 <xQueueGenericSend>
 801223e:	2801      	cmp	r0, #1
 8012240:	d0ed      	beq.n	801221e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8012242:	20ff      	movs	r0, #255	; 0xff
 8012244:	e7ec      	b.n	8012220 <osSemaphoreRelease+0x1c>
 8012246:	bf00      	nop
 8012248:	e000ed04 	.word	0xe000ed04

0801224c <osMutexRelease>:
 801224c:	f7ff bfda 	b.w	8012204 <osSemaphoreRelease>

08012250 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012250:	2200      	movs	r2, #0
 8012252:	c803      	ldmia	r0, {r0, r1}
 8012254:	f000 bbf6 	b.w	8012a44 <xQueueGenericCreate>

08012258 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 801225a:	2400      	movs	r4, #0
{
 801225c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801225e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8012260:	42a2      	cmp	r2, r4
 8012262:	bf08      	it	eq
 8012264:	2201      	moveq	r2, #1
 8012266:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 801226a:	b1ab      	cbz	r3, 8012298 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801226c:	4623      	mov	r3, r4
 801226e:	aa03      	add	r2, sp, #12
 8012270:	a901      	add	r1, sp, #4
 8012272:	f000 fcd1 	bl	8012c18 <xQueueGenericSendFromISR>
 8012276:	2801      	cmp	r0, #1
 8012278:	d002      	beq.n	8012280 <osMessagePut+0x28>
      return osErrorOS;
 801227a:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 801227c:	b004      	add	sp, #16
 801227e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012280:	9b03      	ldr	r3, [sp, #12]
 8012282:	b13b      	cbz	r3, 8012294 <osMessagePut+0x3c>
 8012284:	4b07      	ldr	r3, [pc, #28]	; (80122a4 <osMessagePut+0x4c>)
 8012286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801228a:	601a      	str	r2, [r3, #0]
 801228c:	f3bf 8f4f 	dsb	sy
 8012290:	f3bf 8f6f 	isb	sy
  return osOK;
 8012294:	2000      	movs	r0, #0
 8012296:	e7f1      	b.n	801227c <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012298:	a901      	add	r1, sp, #4
 801229a:	f000 fbf5 	bl	8012a88 <xQueueGenericSend>
 801229e:	2801      	cmp	r0, #1
 80122a0:	d1eb      	bne.n	801227a <osMessagePut+0x22>
 80122a2:	e7f7      	b.n	8012294 <osMessagePut+0x3c>
 80122a4:	e000ed04 	.word	0xe000ed04

080122a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80122a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122aa:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80122ac:	2600      	movs	r6, #0
{
 80122ae:	4604      	mov	r4, r0
 80122b0:	4617      	mov	r7, r2
 80122b2:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80122b4:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80122b6:	9602      	str	r6, [sp, #8]
 80122b8:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80122ba:	b911      	cbnz	r1, 80122c2 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80122bc:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80122be:	9301      	str	r3, [sp, #4]
 80122c0:	e017      	b.n	80122f2 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80122c2:	9600      	str	r6, [sp, #0]
 80122c4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80122c8:	b1d3      	cbz	r3, 8012300 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80122ca:	466a      	mov	r2, sp
 80122cc:	a902      	add	r1, sp, #8
 80122ce:	f000 fe1d 	bl	8012f0c <xQueueReceiveFromISR>
 80122d2:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 80122d4:	bf04      	itt	eq
 80122d6:	2310      	moveq	r3, #16
 80122d8:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80122da:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80122dc:	bf18      	it	ne
 80122de:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80122e0:	b13b      	cbz	r3, 80122f2 <osMessageGet+0x4a>
 80122e2:	4b0d      	ldr	r3, [pc, #52]	; (8012318 <osMessageGet+0x70>)
 80122e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122e8:	601a      	str	r2, [r3, #0]
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80122f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80122f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80122fa:	4620      	mov	r0, r4
 80122fc:	b005      	add	sp, #20
 80122fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012300:	a902      	add	r1, sp, #8
 8012302:	f000 fd3f 	bl	8012d84 <xQueueGenericReceive>
 8012306:	2801      	cmp	r0, #1
 8012308:	d101      	bne.n	801230e <osMessageGet+0x66>
      event.status = osEventMessage;
 801230a:	2310      	movs	r3, #16
 801230c:	e7d7      	b.n	80122be <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801230e:	2f00      	cmp	r7, #0
 8012310:	bf0c      	ite	eq
 8012312:	2300      	moveq	r3, #0
 8012314:	2340      	movne	r3, #64	; 0x40
 8012316:	e7d2      	b.n	80122be <osMessageGet+0x16>
 8012318:	e000ed04 	.word	0xe000ed04

0801231c <osMessageWaiting>:
 801231c:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8012320:	b10b      	cbz	r3, 8012326 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012322:	f000 be56 	b.w	8012fd2 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012326:	f000 be41 	b.w	8012fac <uxQueueMessagesWaiting>

0801232a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 801232a:	b510      	push	{r4, lr}
 801232c:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8012330:	b91c      	cbnz	r4, 801233a <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 8012332:	f000 fe6f 	bl	8013014 <vQueueDelete>

  return osOK; 
 8012336:	4620      	mov	r0, r4
 8012338:	bd10      	pop	{r4, pc}
    return osErrorISR;
 801233a:	2082      	movs	r0, #130	; 0x82
}
 801233c:	bd10      	pop	{r4, pc}

0801233e <osSemaphoreDelete>:
 801233e:	f7ff bff4 	b.w	801232a <osMessageDelete>

08012342 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012342:	f100 0308 	add.w	r3, r0, #8
 8012346:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012348:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801234c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801234e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012350:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012352:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012354:	6003      	str	r3, [r0, #0]
 8012356:	4770      	bx	lr

08012358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012358:	2300      	movs	r3, #0
 801235a:	6103      	str	r3, [r0, #16]
 801235c:	4770      	bx	lr

0801235e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 801235e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012360:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012362:	689a      	ldr	r2, [r3, #8]
 8012364:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012366:	689a      	ldr	r2, [r3, #8]
 8012368:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801236a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 801236c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 801236e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8012370:	3301      	adds	r3, #1
 8012372:	6003      	str	r3, [r0, #0]
 8012374:	4770      	bx	lr

08012376 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012376:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012378:	1c53      	adds	r3, r2, #1
{
 801237a:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 801237c:	d10a      	bne.n	8012394 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801237e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012384:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012386:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012388:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 801238a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 801238c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801238e:	3301      	adds	r3, #1
 8012390:	6003      	str	r3, [r0, #0]
 8012392:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012394:	f100 0308 	add.w	r3, r0, #8
 8012398:	685c      	ldr	r4, [r3, #4]
 801239a:	6825      	ldr	r5, [r4, #0]
 801239c:	42aa      	cmp	r2, r5
 801239e:	d3ef      	bcc.n	8012380 <vListInsert+0xa>
 80123a0:	4623      	mov	r3, r4
 80123a2:	e7f9      	b.n	8012398 <vListInsert+0x22>

080123a4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80123a4:	6841      	ldr	r1, [r0, #4]
 80123a6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80123a8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80123aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80123ac:	6882      	ldr	r2, [r0, #8]
 80123ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80123b0:	6859      	ldr	r1, [r3, #4]
 80123b2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80123b4:	bf08      	it	eq
 80123b6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80123b8:	2200      	movs	r2, #0
 80123ba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80123bc:	6818      	ldr	r0, [r3, #0]
 80123be:	3801      	subs	r0, #1
 80123c0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80123c2:	4770      	bx	lr

080123c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80123c4:	4b0a      	ldr	r3, [pc, #40]	; (80123f0 <prvTaskExitError+0x2c>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	3301      	adds	r3, #1
 80123ca:	d008      	beq.n	80123de <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80123cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d0:	f383 8811 	msr	BASEPRI, r3
 80123d4:	f3bf 8f6f 	isb	sy
 80123d8:	f3bf 8f4f 	dsb	sy
 80123dc:	e7fe      	b.n	80123dc <prvTaskExitError+0x18>
 80123de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e2:	f383 8811 	msr	BASEPRI, r3
 80123e6:	f3bf 8f6f 	isb	sy
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	e7fe      	b.n	80123ee <prvTaskExitError+0x2a>
 80123f0:	20000004 	.word	0x20000004

080123f4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80123f4:	4806      	ldr	r0, [pc, #24]	; (8012410 <prvPortStartFirstTask+0x1c>)
 80123f6:	6800      	ldr	r0, [r0, #0]
 80123f8:	6800      	ldr	r0, [r0, #0]
 80123fa:	f380 8808 	msr	MSP, r0
 80123fe:	b662      	cpsie	i
 8012400:	b661      	cpsie	f
 8012402:	f3bf 8f4f 	dsb	sy
 8012406:	f3bf 8f6f 	isb	sy
 801240a:	df00      	svc	0
 801240c:	bf00      	nop
 801240e:	0000      	.short	0x0000
 8012410:	e000ed08 	.word	0xe000ed08

08012414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012424 <vPortEnableVFP+0x10>
 8012418:	6801      	ldr	r1, [r0, #0]
 801241a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801241e:	6001      	str	r1, [r0, #0]
 8012420:	4770      	bx	lr
 8012422:	0000      	.short	0x0000
 8012424:	e000ed88 	.word	0xe000ed88

08012428 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801242c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012430:	4b07      	ldr	r3, [pc, #28]	; (8012450 <pxPortInitialiseStack+0x28>)
 8012432:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012436:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 801243a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801243e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012442:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8012446:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801244a:	3844      	subs	r0, #68	; 0x44
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	080123c5 	.word	0x080123c5
	...

08012460 <SVC_Handler>:
	__asm volatile (
 8012460:	4b07      	ldr	r3, [pc, #28]	; (8012480 <pxCurrentTCBConst2>)
 8012462:	6819      	ldr	r1, [r3, #0]
 8012464:	6808      	ldr	r0, [r1, #0]
 8012466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246a:	f380 8809 	msr	PSP, r0
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f04f 0000 	mov.w	r0, #0
 8012476:	f380 8811 	msr	BASEPRI, r0
 801247a:	4770      	bx	lr
 801247c:	f3af 8000 	nop.w

08012480 <pxCurrentTCBConst2>:
 8012480:	20003e34 	.word	0x20003e34

08012484 <vPortEnterCritical>:
 8012484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012488:	f383 8811 	msr	BASEPRI, r3
 801248c:	f3bf 8f6f 	isb	sy
 8012490:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012494:	4a0a      	ldr	r2, [pc, #40]	; (80124c0 <vPortEnterCritical+0x3c>)
 8012496:	6813      	ldr	r3, [r2, #0]
 8012498:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801249a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801249c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801249e:	d10d      	bne.n	80124bc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80124a0:	4b08      	ldr	r3, [pc, #32]	; (80124c4 <vPortEnterCritical+0x40>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80124a8:	d008      	beq.n	80124bc <vPortEnterCritical+0x38>
 80124aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ae:	f383 8811 	msr	BASEPRI, r3
 80124b2:	f3bf 8f6f 	isb	sy
 80124b6:	f3bf 8f4f 	dsb	sy
 80124ba:	e7fe      	b.n	80124ba <vPortEnterCritical+0x36>
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop
 80124c0:	20000004 	.word	0x20000004
 80124c4:	e000ed04 	.word	0xe000ed04

080124c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80124c8:	4a08      	ldr	r2, [pc, #32]	; (80124ec <vPortExitCritical+0x24>)
 80124ca:	6813      	ldr	r3, [r2, #0]
 80124cc:	b943      	cbnz	r3, 80124e0 <vPortExitCritical+0x18>
 80124ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d2:	f383 8811 	msr	BASEPRI, r3
 80124d6:	f3bf 8f6f 	isb	sy
 80124da:	f3bf 8f4f 	dsb	sy
 80124de:	e7fe      	b.n	80124de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80124e0:	3b01      	subs	r3, #1
 80124e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80124e4:	b90b      	cbnz	r3, 80124ea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80124e6:	f383 8811 	msr	BASEPRI, r3
 80124ea:	4770      	bx	lr
 80124ec:	20000004 	.word	0x20000004

080124f0 <PendSV_Handler>:
	__asm volatile
 80124f0:	f3ef 8009 	mrs	r0, PSP
 80124f4:	f3bf 8f6f 	isb	sy
 80124f8:	4b15      	ldr	r3, [pc, #84]	; (8012550 <pxCurrentTCBConst>)
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	f01e 0f10 	tst.w	lr, #16
 8012500:	bf08      	it	eq
 8012502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801250a:	6010      	str	r0, [r2, #0]
 801250c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8012510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012514:	f380 8811 	msr	BASEPRI, r0
 8012518:	f3bf 8f4f 	dsb	sy
 801251c:	f3bf 8f6f 	isb	sy
 8012520:	f001 f878 	bl	8013614 <vTaskSwitchContext>
 8012524:	f04f 0000 	mov.w	r0, #0
 8012528:	f380 8811 	msr	BASEPRI, r0
 801252c:	bc08      	pop	{r3}
 801252e:	6819      	ldr	r1, [r3, #0]
 8012530:	6808      	ldr	r0, [r1, #0]
 8012532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012536:	f01e 0f10 	tst.w	lr, #16
 801253a:	bf08      	it	eq
 801253c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012540:	f380 8809 	msr	PSP, r0
 8012544:	f3bf 8f6f 	isb	sy
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop
 801254c:	f3af 8000 	nop.w

08012550 <pxCurrentTCBConst>:
 8012550:	20003e34 	.word	0x20003e34

08012554 <SysTick_Handler>:
{
 8012554:	b508      	push	{r3, lr}
	__asm volatile
 8012556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255a:	f383 8811 	msr	BASEPRI, r3
 801255e:	f3bf 8f6f 	isb	sy
 8012562:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012566:	f000 feed 	bl	8013344 <xTaskIncrementTick>
 801256a:	b118      	cbz	r0, 8012574 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801256c:	4b03      	ldr	r3, [pc, #12]	; (801257c <SysTick_Handler+0x28>)
 801256e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012572:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012574:	2300      	movs	r3, #0
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	bd08      	pop	{r3, pc}
 801257c:	e000ed04 	.word	0xe000ed04

08012580 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012580:	4b06      	ldr	r3, [pc, #24]	; (801259c <vPortSetupTimerInterrupt+0x1c>)
 8012582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	fbb3 f3f2 	udiv	r3, r3, r2
 801258c:	4a04      	ldr	r2, [pc, #16]	; (80125a0 <vPortSetupTimerInterrupt+0x20>)
 801258e:	3b01      	subs	r3, #1
 8012590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012592:	4b04      	ldr	r3, [pc, #16]	; (80125a4 <vPortSetupTimerInterrupt+0x24>)
 8012594:	2207      	movs	r2, #7
 8012596:	601a      	str	r2, [r3, #0]
 8012598:	4770      	bx	lr
 801259a:	bf00      	nop
 801259c:	20000024 	.word	0x20000024
 80125a0:	e000e014 	.word	0xe000e014
 80125a4:	e000e010 	.word	0xe000e010

080125a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80125a8:	4b31      	ldr	r3, [pc, #196]	; (8012670 <xPortStartScheduler+0xc8>)
 80125aa:	4a32      	ldr	r2, [pc, #200]	; (8012674 <xPortStartScheduler+0xcc>)
{
 80125ac:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80125ae:	6819      	ldr	r1, [r3, #0]
 80125b0:	4291      	cmp	r1, r2
 80125b2:	d108      	bne.n	80125c6 <xPortStartScheduler+0x1e>
	__asm volatile
 80125b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b8:	f383 8811 	msr	BASEPRI, r3
 80125bc:	f3bf 8f6f 	isb	sy
 80125c0:	f3bf 8f4f 	dsb	sy
 80125c4:	e7fe      	b.n	80125c4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	4b2b      	ldr	r3, [pc, #172]	; (8012678 <xPortStartScheduler+0xd0>)
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d108      	bne.n	80125e0 <xPortStartScheduler+0x38>
 80125ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d2:	f383 8811 	msr	BASEPRI, r3
 80125d6:	f3bf 8f6f 	isb	sy
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	e7fe      	b.n	80125de <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80125e0:	4b26      	ldr	r3, [pc, #152]	; (801267c <xPortStartScheduler+0xd4>)
 80125e2:	781a      	ldrb	r2, [r3, #0]
 80125e4:	b2d2      	uxtb	r2, r2
 80125e6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80125e8:	22ff      	movs	r2, #255	; 0xff
 80125ea:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80125ec:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80125ee:	4a24      	ldr	r2, [pc, #144]	; (8012680 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80125f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80125fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80125fe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012600:	4b20      	ldr	r3, [pc, #128]	; (8012684 <xPortStartScheduler+0xdc>)
 8012602:	2207      	movs	r2, #7
 8012604:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012606:	2100      	movs	r1, #0
 8012608:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801260c:	0600      	lsls	r0, r0, #24
 801260e:	f102 34ff 	add.w	r4, r2, #4294967295
 8012612:	d423      	bmi.n	801265c <xPortStartScheduler+0xb4>
 8012614:	b101      	cbz	r1, 8012618 <xPortStartScheduler+0x70>
 8012616:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801261c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8012620:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012622:	9b01      	ldr	r3, [sp, #4]
 8012624:	4a15      	ldr	r2, [pc, #84]	; (801267c <xPortStartScheduler+0xd4>)
 8012626:	b2db      	uxtb	r3, r3
 8012628:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801262a:	4b17      	ldr	r3, [pc, #92]	; (8012688 <xPortStartScheduler+0xe0>)
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8012632:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 801263a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 801263c:	f7ff ffa0 	bl	8012580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012640:	4b12      	ldr	r3, [pc, #72]	; (801268c <xPortStartScheduler+0xe4>)
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8012646:	f7ff fee5 	bl	8012414 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801264a:	4a11      	ldr	r2, [pc, #68]	; (8012690 <xPortStartScheduler+0xe8>)
 801264c:	6813      	ldr	r3, [r2, #0]
 801264e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012652:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8012654:	f7ff fece 	bl	80123f4 <prvPortStartFirstTask>
	prvTaskExitError();
 8012658:	f7ff feb4 	bl	80123c4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801265c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012660:	0052      	lsls	r2, r2, #1
 8012662:	b2d2      	uxtb	r2, r2
 8012664:	f88d 2003 	strb.w	r2, [sp, #3]
 8012668:	2101      	movs	r1, #1
 801266a:	4622      	mov	r2, r4
 801266c:	e7cc      	b.n	8012608 <xPortStartScheduler+0x60>
 801266e:	bf00      	nop
 8012670:	e000ed00 	.word	0xe000ed00
 8012674:	410fc271 	.word	0x410fc271
 8012678:	410fc270 	.word	0x410fc270
 801267c:	e000e400 	.word	0xe000e400
 8012680:	20000214 	.word	0x20000214
 8012684:	20000218 	.word	0x20000218
 8012688:	e000ed20 	.word	0xe000ed20
 801268c:	20000004 	.word	0x20000004
 8012690:	e000ef34 	.word	0xe000ef34

08012694 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8012694:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012698:	2b0f      	cmp	r3, #15
 801269a:	d90e      	bls.n	80126ba <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801269c:	4a10      	ldr	r2, [pc, #64]	; (80126e0 <vPortValidateInterruptPriority+0x4c>)
 801269e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80126a0:	4a10      	ldr	r2, [pc, #64]	; (80126e4 <vPortValidateInterruptPriority+0x50>)
 80126a2:	7812      	ldrb	r2, [r2, #0]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d908      	bls.n	80126ba <vPortValidateInterruptPriority+0x26>
 80126a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ac:	f383 8811 	msr	BASEPRI, r3
 80126b0:	f3bf 8f6f 	isb	sy
 80126b4:	f3bf 8f4f 	dsb	sy
 80126b8:	e7fe      	b.n	80126b8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80126ba:	4b0b      	ldr	r3, [pc, #44]	; (80126e8 <vPortValidateInterruptPriority+0x54>)
 80126bc:	4a0b      	ldr	r2, [pc, #44]	; (80126ec <vPortValidateInterruptPriority+0x58>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	6812      	ldr	r2, [r2, #0]
 80126c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80126c6:	4293      	cmp	r3, r2
 80126c8:	d908      	bls.n	80126dc <vPortValidateInterruptPriority+0x48>
 80126ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ce:	f383 8811 	msr	BASEPRI, r3
 80126d2:	f3bf 8f6f 	isb	sy
 80126d6:	f3bf 8f4f 	dsb	sy
 80126da:	e7fe      	b.n	80126da <vPortValidateInterruptPriority+0x46>
 80126dc:	4770      	bx	lr
 80126de:	bf00      	nop
 80126e0:	e000e3f0 	.word	0xe000e3f0
 80126e4:	20000214 	.word	0x20000214
 80126e8:	e000ed0c 	.word	0xe000ed0c
 80126ec:	20000218 	.word	0x20000218

080126f0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126f0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126f2:	4b0f      	ldr	r3, [pc, #60]	; (8012730 <prvInsertBlockIntoFreeList+0x40>)
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	4282      	cmp	r2, r0
 80126f8:	d318      	bcc.n	801272c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126fa:	685c      	ldr	r4, [r3, #4]
 80126fc:	1919      	adds	r1, r3, r4
 80126fe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012700:	bf01      	itttt	eq
 8012702:	6841      	ldreq	r1, [r0, #4]
 8012704:	4618      	moveq	r0, r3
 8012706:	1909      	addeq	r1, r1, r4
 8012708:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801270a:	6844      	ldr	r4, [r0, #4]
 801270c:	1901      	adds	r1, r0, r4
 801270e:	428a      	cmp	r2, r1
 8012710:	d107      	bne.n	8012722 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012712:	4908      	ldr	r1, [pc, #32]	; (8012734 <prvInsertBlockIntoFreeList+0x44>)
 8012714:	6809      	ldr	r1, [r1, #0]
 8012716:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012718:	bf1f      	itttt	ne
 801271a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801271c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801271e:	1909      	addne	r1, r1, r4
 8012720:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012722:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012724:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012726:	bf18      	it	ne
 8012728:	6018      	strne	r0, [r3, #0]
 801272a:	bd10      	pop	{r4, pc}
 801272c:	4613      	mov	r3, r2
 801272e:	e7e1      	b.n	80126f4 <prvInsertBlockIntoFreeList+0x4>
 8012730:	20003e2c 	.word	0x20003e2c
 8012734:	2000021c 	.word	0x2000021c

08012738 <pvPortMalloc>:
{
 8012738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801273e:	f000 fdeb 	bl	8013318 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012742:	493e      	ldr	r1, [pc, #248]	; (801283c <pvPortMalloc+0x104>)
 8012744:	4d3e      	ldr	r5, [pc, #248]	; (8012840 <pvPortMalloc+0x108>)
 8012746:	680b      	ldr	r3, [r1, #0]
 8012748:	bb0b      	cbnz	r3, 801278e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 801274a:	4a3e      	ldr	r2, [pc, #248]	; (8012844 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801274c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801274e:	bf1f      	itttt	ne
 8012750:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012752:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012756:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 801275a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801275c:	bf14      	ite	ne
 801275e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012760:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012764:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8012766:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012768:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801276c:	4e36      	ldr	r6, [pc, #216]	; (8012848 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 801276e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012770:	2000      	movs	r0, #0
 8012772:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012774:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8012776:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012778:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801277a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801277c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801277e:	4b33      	ldr	r3, [pc, #204]	; (801284c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012780:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012782:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012784:	4b32      	ldr	r3, [pc, #200]	; (8012850 <pvPortMalloc+0x118>)
 8012786:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801278c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801278e:	682f      	ldr	r7, [r5, #0]
 8012790:	4227      	tst	r7, r4
 8012792:	d116      	bne.n	80127c2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8012794:	2c00      	cmp	r4, #0
 8012796:	d041      	beq.n	801281c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8012798:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801279c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801279e:	bf1c      	itt	ne
 80127a0:	f023 0307 	bicne.w	r3, r3, #7
 80127a4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80127a6:	b163      	cbz	r3, 80127c2 <pvPortMalloc+0x8a>
 80127a8:	4a29      	ldr	r2, [pc, #164]	; (8012850 <pvPortMalloc+0x118>)
 80127aa:	6816      	ldr	r6, [r2, #0]
 80127ac:	42b3      	cmp	r3, r6
 80127ae:	4690      	mov	r8, r2
 80127b0:	d807      	bhi.n	80127c2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80127b2:	4a25      	ldr	r2, [pc, #148]	; (8012848 <pvPortMalloc+0x110>)
 80127b4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127b6:	6868      	ldr	r0, [r5, #4]
 80127b8:	4283      	cmp	r3, r0
 80127ba:	d804      	bhi.n	80127c6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80127bc:	6809      	ldr	r1, [r1, #0]
 80127be:	428d      	cmp	r5, r1
 80127c0:	d107      	bne.n	80127d2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80127c2:	2400      	movs	r4, #0
 80127c4:	e02a      	b.n	801281c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127c6:	682c      	ldr	r4, [r5, #0]
 80127c8:	2c00      	cmp	r4, #0
 80127ca:	d0f7      	beq.n	80127bc <pvPortMalloc+0x84>
 80127cc:	462a      	mov	r2, r5
 80127ce:	4625      	mov	r5, r4
 80127d0:	e7f1      	b.n	80127b6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80127d2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80127d4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80127d6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80127d8:	1ac2      	subs	r2, r0, r3
 80127da:	2a10      	cmp	r2, #16
 80127dc:	d90f      	bls.n	80127fe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80127de:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127e0:	0741      	lsls	r1, r0, #29
 80127e2:	d008      	beq.n	80127f6 <pvPortMalloc+0xbe>
 80127e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e8:	f383 8811 	msr	BASEPRI, r3
 80127ec:	f3bf 8f6f 	isb	sy
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	e7fe      	b.n	80127f4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80127f6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80127f8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80127fa:	f7ff ff79 	bl	80126f0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80127fe:	4913      	ldr	r1, [pc, #76]	; (801284c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012800:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012802:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012804:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012806:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012808:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 801280a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801280e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012812:	bf38      	it	cc
 8012814:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012816:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012818:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801281a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 801281c:	f000 fe24 	bl	8013468 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012820:	0763      	lsls	r3, r4, #29
 8012822:	d008      	beq.n	8012836 <pvPortMalloc+0xfe>
 8012824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012828:	f383 8811 	msr	BASEPRI, r3
 801282c:	f3bf 8f6f 	isb	sy
 8012830:	f3bf 8f4f 	dsb	sy
 8012834:	e7fe      	b.n	8012834 <pvPortMalloc+0xfc>
}
 8012836:	4620      	mov	r0, r4
 8012838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801283c:	2000021c 	.word	0x2000021c
 8012840:	20003e20 	.word	0x20003e20
 8012844:	20000220 	.word	0x20000220
 8012848:	20003e2c 	.word	0x20003e2c
 801284c:	20003e28 	.word	0x20003e28
 8012850:	20003e24 	.word	0x20003e24

08012854 <vPortFree>:
{
 8012854:	b510      	push	{r4, lr}
	if( pv != NULL )
 8012856:	4604      	mov	r4, r0
 8012858:	b370      	cbz	r0, 80128b8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801285a:	4a18      	ldr	r2, [pc, #96]	; (80128bc <vPortFree+0x68>)
 801285c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012860:	6812      	ldr	r2, [r2, #0]
 8012862:	4213      	tst	r3, r2
 8012864:	d108      	bne.n	8012878 <vPortFree+0x24>
 8012866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286a:	f383 8811 	msr	BASEPRI, r3
 801286e:	f3bf 8f6f 	isb	sy
 8012872:	f3bf 8f4f 	dsb	sy
 8012876:	e7fe      	b.n	8012876 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012878:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801287c:	b141      	cbz	r1, 8012890 <vPortFree+0x3c>
 801287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012882:	f383 8811 	msr	BASEPRI, r3
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	e7fe      	b.n	801288e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012890:	ea23 0302 	bic.w	r3, r3, r2
 8012894:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8012898:	f000 fd3e 	bl	8013318 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801289c:	4a08      	ldr	r2, [pc, #32]	; (80128c0 <vPortFree+0x6c>)
 801289e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80128a2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80128a4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80128a8:	440b      	add	r3, r1
 80128aa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80128ac:	f7ff ff20 	bl	80126f0 <prvInsertBlockIntoFreeList>
}
 80128b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80128b4:	f000 bdd8 	b.w	8013468 <xTaskResumeAll>
 80128b8:	bd10      	pop	{r4, pc}
 80128ba:	bf00      	nop
 80128bc:	20003e20 	.word	0x20003e20
 80128c0:	20003e24 	.word	0x20003e24

080128c4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80128c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128ca:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80128cc:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80128ce:	b942      	cbnz	r2, 80128e2 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128d0:	6805      	ldr	r5, [r0, #0]
 80128d2:	b99d      	cbnz	r5, 80128fc <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80128d4:	6840      	ldr	r0, [r0, #4]
 80128d6:	f000 ffd9 	bl	801388c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80128da:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80128dc:	3601      	adds	r6, #1
 80128de:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80128e0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80128e2:	b96d      	cbnz	r5, 8012900 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80128e4:	6880      	ldr	r0, [r0, #8]
 80128e6:	f009 fda0 	bl	801c42a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80128ea:	68a3      	ldr	r3, [r4, #8]
 80128ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80128ee:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128f0:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80128f2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128f4:	4293      	cmp	r3, r2
 80128f6:	d301      	bcc.n	80128fc <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80128f8:	6823      	ldr	r3, [r4, #0]
 80128fa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80128fc:	2000      	movs	r0, #0
 80128fe:	e7ed      	b.n	80128dc <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012900:	68c0      	ldr	r0, [r0, #12]
 8012902:	f009 fd92 	bl	801c42a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012908:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801290a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801290c:	425b      	negs	r3, r3
 801290e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012910:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012912:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012914:	bf3e      	ittt	cc
 8012916:	6862      	ldrcc	r2, [r4, #4]
 8012918:	189b      	addcc	r3, r3, r2
 801291a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801291c:	2d02      	cmp	r5, #2
 801291e:	d1ed      	bne.n	80128fc <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012920:	b10e      	cbz	r6, 8012926 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8012922:	3e01      	subs	r6, #1
 8012924:	e7ea      	b.n	80128fc <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8012926:	4630      	mov	r0, r6
 8012928:	e7d8      	b.n	80128dc <prvCopyDataToQueue+0x18>

0801292a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801292a:	4603      	mov	r3, r0
 801292c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801292e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8012930:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012932:	b162      	cbz	r2, 801294e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012934:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012936:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012938:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801293a:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801293c:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801293e:	bf24      	itt	cs
 8012940:	6819      	ldrcs	r1, [r3, #0]
 8012942:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012944:	68d9      	ldr	r1, [r3, #12]
	}
}
 8012946:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801294a:	f009 bd6e 	b.w	801c42a <memcpy>
}
 801294e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012952:	4770      	bx	lr

08012954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012954:	b570      	push	{r4, r5, r6, lr}
 8012956:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012958:	f7ff fd94 	bl	8012484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801295c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012960:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8012964:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012966:	2d00      	cmp	r5, #0
 8012968:	dc14      	bgt.n	8012994 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801296a:	23ff      	movs	r3, #255	; 0xff
 801296c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012970:	f7ff fdaa 	bl	80124c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012974:	f7ff fd86 	bl	8012484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012978:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801297c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8012980:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012982:	2d00      	cmp	r5, #0
 8012984:	dc12      	bgt.n	80129ac <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012986:	23ff      	movs	r3, #255	; 0xff
 8012988:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 801298c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8012990:	f7ff bd9a 	b.w	80124c8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012996:	2b00      	cmp	r3, #0
 8012998:	d0e7      	beq.n	801296a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801299a:	4630      	mov	r0, r6
 801299c:	f000 fe8e 	bl	80136bc <xTaskRemoveFromEventList>
 80129a0:	b108      	cbz	r0, 80129a6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80129a2:	f000 ff17 	bl	80137d4 <vTaskMissedYield>
 80129a6:	3d01      	subs	r5, #1
 80129a8:	b26d      	sxtb	r5, r5
 80129aa:	e7dc      	b.n	8012966 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129ac:	6923      	ldr	r3, [r4, #16]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d0e9      	beq.n	8012986 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129b2:	4630      	mov	r0, r6
 80129b4:	f000 fe82 	bl	80136bc <xTaskRemoveFromEventList>
 80129b8:	b108      	cbz	r0, 80129be <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80129ba:	f000 ff0b 	bl	80137d4 <vTaskMissedYield>
 80129be:	3d01      	subs	r5, #1
 80129c0:	b26d      	sxtb	r5, r5
 80129c2:	e7de      	b.n	8012982 <prvUnlockQueue+0x2e>

080129c4 <xQueueGenericReset>:
{
 80129c4:	b538      	push	{r3, r4, r5, lr}
 80129c6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80129c8:	4604      	mov	r4, r0
 80129ca:	b940      	cbnz	r0, 80129de <xQueueGenericReset+0x1a>
 80129cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d0:	f383 8811 	msr	BASEPRI, r3
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	e7fe      	b.n	80129dc <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80129de:	f7ff fd51 	bl	8012484 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80129e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80129e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80129e6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80129e8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80129ea:	4343      	muls	r3, r0
 80129ec:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80129ee:	1a1b      	subs	r3, r3, r0
 80129f0:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80129f2:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80129f4:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80129f6:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80129f8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80129fa:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80129fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012a00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8012a04:	b995      	cbnz	r5, 8012a2c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a06:	6923      	ldr	r3, [r4, #16]
 8012a08:	b163      	cbz	r3, 8012a24 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a0a:	f104 0010 	add.w	r0, r4, #16
 8012a0e:	f000 fe55 	bl	80136bc <xTaskRemoveFromEventList>
 8012a12:	b138      	cbz	r0, 8012a24 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8012a14:	4b0a      	ldr	r3, [pc, #40]	; (8012a40 <xQueueGenericReset+0x7c>)
 8012a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a1a:	601a      	str	r2, [r3, #0]
 8012a1c:	f3bf 8f4f 	dsb	sy
 8012a20:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8012a24:	f7ff fd50 	bl	80124c8 <vPortExitCritical>
}
 8012a28:	2001      	movs	r0, #1
 8012a2a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012a2c:	f104 0010 	add.w	r0, r4, #16
 8012a30:	f7ff fc87 	bl	8012342 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012a34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012a38:	f7ff fc83 	bl	8012342 <vListInitialise>
 8012a3c:	e7f2      	b.n	8012a24 <xQueueGenericReset+0x60>
 8012a3e:	bf00      	nop
 8012a40:	e000ed04 	.word	0xe000ed04

08012a44 <xQueueGenericCreate>:
	{
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012a48:	4606      	mov	r6, r0
 8012a4a:	b940      	cbnz	r0, 8012a5e <xQueueGenericCreate+0x1a>
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	f383 8811 	msr	BASEPRI, r3
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	e7fe      	b.n	8012a5c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a5e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8012a60:	3048      	adds	r0, #72	; 0x48
 8012a62:	f7ff fe69 	bl	8012738 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012a66:	4604      	mov	r4, r0
 8012a68:	b138      	cbz	r0, 8012a7a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8012a6a:	b945      	cbnz	r5, 8012a7e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012a6c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8012a6e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012a70:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012a72:	2101      	movs	r1, #1
 8012a74:	4620      	mov	r0, r4
 8012a76:	f7ff ffa5 	bl	80129c4 <xQueueGenericReset>
	}
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012a7e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012a82:	6003      	str	r3, [r0, #0]
 8012a84:	e7f3      	b.n	8012a6e <xQueueGenericCreate+0x2a>
	...

08012a88 <xQueueGenericSend>:
{
 8012a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a8c:	4689      	mov	r9, r1
 8012a8e:	9201      	str	r2, [sp, #4]
 8012a90:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8012a92:	4604      	mov	r4, r0
 8012a94:	b940      	cbnz	r0, 8012aa8 <xQueueGenericSend+0x20>
 8012a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9a:	f383 8811 	msr	BASEPRI, r3
 8012a9e:	f3bf 8f6f 	isb	sy
 8012aa2:	f3bf 8f4f 	dsb	sy
 8012aa6:	e7fe      	b.n	8012aa6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012aa8:	2900      	cmp	r1, #0
 8012aaa:	f040 8088 	bne.w	8012bbe <xQueueGenericSend+0x136>
 8012aae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f000 8084 	beq.w	8012bbe <xQueueGenericSend+0x136>
 8012ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aba:	f383 8811 	msr	BASEPRI, r3
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	e7fe      	b.n	8012ac6 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ac8:	9e01      	ldr	r6, [sp, #4]
 8012aca:	2e00      	cmp	r6, #0
 8012acc:	f000 8082 	beq.w	8012bd4 <xQueueGenericSend+0x14c>
 8012ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad4:	f383 8811 	msr	BASEPRI, r3
 8012ad8:	f3bf 8f6f 	isb	sy
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	e7fe      	b.n	8012ae0 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012ae2:	9d01      	ldr	r5, [sp, #4]
 8012ae4:	b91d      	cbnz	r5, 8012aee <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8012ae6:	f7ff fcef 	bl	80124c8 <vPortExitCritical>
			return errQUEUE_FULL;
 8012aea:	2000      	movs	r0, #0
 8012aec:	e058      	b.n	8012ba0 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8012aee:	b916      	cbnz	r6, 8012af6 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8012af0:	a802      	add	r0, sp, #8
 8012af2:	f000 fe25 	bl	8013740 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8012af6:	f7ff fce7 	bl	80124c8 <vPortExitCritical>
		vTaskSuspendAll();
 8012afa:	f000 fc0d 	bl	8013318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012afe:	f7ff fcc1 	bl	8012484 <vPortEnterCritical>
 8012b02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012b06:	2bff      	cmp	r3, #255	; 0xff
 8012b08:	bf08      	it	eq
 8012b0a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8012b0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012b12:	2bff      	cmp	r3, #255	; 0xff
 8012b14:	bf08      	it	eq
 8012b16:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8012b1a:	f7ff fcd5 	bl	80124c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b1e:	a901      	add	r1, sp, #4
 8012b20:	a802      	add	r0, sp, #8
 8012b22:	f000 fe1d 	bl	8013760 <xTaskCheckForTimeOut>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d143      	bne.n	8012bb2 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012b2a:	f7ff fcab 	bl	8012484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012b2e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012b30:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8012b32:	f7ff fcc9 	bl	80124c8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012b36:	42ae      	cmp	r6, r5
 8012b38:	d135      	bne.n	8012ba6 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012b3a:	9901      	ldr	r1, [sp, #4]
 8012b3c:	f104 0010 	add.w	r0, r4, #16
 8012b40:	f000 fda2 	bl	8013688 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7ff ff05 	bl	8012954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b4a:	f000 fc8d 	bl	8013468 <xTaskResumeAll>
 8012b4e:	b938      	cbnz	r0, 8012b60 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8012b50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012b54:	f8ca 3000 	str.w	r3, [sl]
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	f3bf 8f6f 	isb	sy
 8012b60:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8012b62:	f7ff fc8f 	bl	8012484 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d301      	bcc.n	8012b72 <xQueueGenericSend+0xea>
 8012b6e:	2f02      	cmp	r7, #2
 8012b70:	d1b7      	bne.n	8012ae2 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b72:	463a      	mov	r2, r7
 8012b74:	4649      	mov	r1, r9
 8012b76:	4620      	mov	r0, r4
 8012b78:	f7ff fea4 	bl	80128c4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b7e:	b11b      	cbz	r3, 8012b88 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012b84:	f000 fd9a 	bl	80136bc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8012b88:	b138      	cbz	r0, 8012b9a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8012b8a:	4b19      	ldr	r3, [pc, #100]	; (8012bf0 <xQueueGenericSend+0x168>)
 8012b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b90:	601a      	str	r2, [r3, #0]
 8012b92:	f3bf 8f4f 	dsb	sy
 8012b96:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8012b9a:	f7ff fc95 	bl	80124c8 <vPortExitCritical>
				return pdPASS;
 8012b9e:	2001      	movs	r0, #1
}
 8012ba0:	b004      	add	sp, #16
 8012ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f7ff fed4 	bl	8012954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bac:	f000 fc5c 	bl	8013468 <xTaskResumeAll>
 8012bb0:	e7d6      	b.n	8012b60 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f7ff fece 	bl	8012954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012bb8:	f000 fc56 	bl	8013468 <xTaskResumeAll>
 8012bbc:	e795      	b.n	8012aea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012bbe:	2f02      	cmp	r7, #2
 8012bc0:	d102      	bne.n	8012bc8 <xQueueGenericSend+0x140>
 8012bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d10a      	bne.n	8012bde <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012bc8:	f000 fe0a 	bl	80137e0 <xTaskGetSchedulerState>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	f43f af7b 	beq.w	8012ac8 <xQueueGenericSend+0x40>
 8012bd2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8012bd4:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8012bd8:	f8df a014 	ldr.w	sl, [pc, #20]	; 8012bf0 <xQueueGenericSend+0x168>
 8012bdc:	e7c1      	b.n	8012b62 <xQueueGenericSend+0xda>
 8012bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be2:	f383 8811 	msr	BASEPRI, r3
 8012be6:	f3bf 8f6f 	isb	sy
 8012bea:	f3bf 8f4f 	dsb	sy
 8012bee:	e7fe      	b.n	8012bee <xQueueGenericSend+0x166>
 8012bf0:	e000ed04 	.word	0xe000ed04

08012bf4 <xQueueCreateMutex>:
	{
 8012bf4:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	2001      	movs	r0, #1
 8012bfc:	f7ff ff22 	bl	8012a44 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8012c00:	4604      	mov	r4, r0
 8012c02:	b138      	cbz	r0, 8012c14 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8012c04:	2300      	movs	r3, #0
 8012c06:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012c08:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8012c0a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	4619      	mov	r1, r3
 8012c10:	f7ff ff3a 	bl	8012a88 <xQueueGenericSend>
	}
 8012c14:	4620      	mov	r0, r4
 8012c16:	bd10      	pop	{r4, pc}

08012c18 <xQueueGenericSendFromISR>:
{
 8012c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	4688      	mov	r8, r1
 8012c1e:	4691      	mov	r9, r2
 8012c20:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8012c22:	4604      	mov	r4, r0
 8012c24:	b940      	cbnz	r0, 8012c38 <xQueueGenericSendFromISR+0x20>
 8012c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2a:	f383 8811 	msr	BASEPRI, r3
 8012c2e:	f3bf 8f6f 	isb	sy
 8012c32:	f3bf 8f4f 	dsb	sy
 8012c36:	e7fe      	b.n	8012c36 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c38:	bb09      	cbnz	r1, 8012c7e <xQueueGenericSendFromISR+0x66>
 8012c3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012c3c:	b1fb      	cbz	r3, 8012c7e <xQueueGenericSendFromISR+0x66>
 8012c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c42:	f383 8811 	msr	BASEPRI, r3
 8012c46:	f3bf 8f6f 	isb	sy
 8012c4a:	f3bf 8f4f 	dsb	sy
 8012c4e:	e7fe      	b.n	8012c4e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012c54:	f000 fd32 	bl	80136bc <xTaskRemoveFromEventList>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d034      	beq.n	8012cc6 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8012c5c:	f1b9 0f00 	cmp.w	r9, #0
 8012c60:	d031      	beq.n	8012cc6 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c62:	2001      	movs	r0, #1
 8012c64:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8012c68:	f386 8811 	msr	BASEPRI, r6
}
 8012c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c70:	3501      	adds	r5, #1
 8012c72:	b26d      	sxtb	r5, r5
 8012c74:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8012c78:	e025      	b.n	8012cc6 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8012c7a:	2000      	movs	r0, #0
 8012c7c:	e7f4      	b.n	8012c68 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012c7e:	2f02      	cmp	r7, #2
 8012c80:	d102      	bne.n	8012c88 <xQueueGenericSendFromISR+0x70>
 8012c82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d120      	bne.n	8012cca <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c88:	f7ff fd04 	bl	8012694 <vPortValidateInterruptPriority>
	__asm volatile
 8012c8c:	f3ef 8611 	mrs	r6, BASEPRI
 8012c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ca0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012ca2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d301      	bcc.n	8012cac <xQueueGenericSendFromISR+0x94>
 8012ca8:	2f02      	cmp	r7, #2
 8012caa:	d1e6      	bne.n	8012c7a <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8012cac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012cb0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8012cb2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012cb4:	4641      	mov	r1, r8
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7ff fe04 	bl	80128c4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8012cbc:	1c6b      	adds	r3, r5, #1
 8012cbe:	d1d7      	bne.n	8012c70 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d1c4      	bne.n	8012c50 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8012cc6:	2001      	movs	r0, #1
 8012cc8:	e7ce      	b.n	8012c68 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8012cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cce:	f383 8811 	msr	BASEPRI, r3
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	f3bf 8f4f 	dsb	sy
 8012cda:	e7fe      	b.n	8012cda <xQueueGenericSendFromISR+0xc2>

08012cdc <xQueueGiveFromISR>:
{
 8012cdc:	b570      	push	{r4, r5, r6, lr}
 8012cde:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	b940      	cbnz	r0, 8012cf6 <xQueueGiveFromISR+0x1a>
 8012ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce8:	f383 8811 	msr	BASEPRI, r3
 8012cec:	f3bf 8f6f 	isb	sy
 8012cf0:	f3bf 8f4f 	dsb	sy
 8012cf4:	e7fe      	b.n	8012cf4 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8012cf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012cf8:	b143      	cbz	r3, 8012d0c <xQueueGiveFromISR+0x30>
 8012cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfe:	f383 8811 	msr	BASEPRI, r3
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	f3bf 8f4f 	dsb	sy
 8012d0a:	e7fe      	b.n	8012d0a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012d0c:	6803      	ldr	r3, [r0, #0]
 8012d0e:	b90b      	cbnz	r3, 8012d14 <xQueueGiveFromISR+0x38>
 8012d10:	6843      	ldr	r3, [r0, #4]
 8012d12:	bb73      	cbnz	r3, 8012d72 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d14:	f7ff fcbe 	bl	8012694 <vPortValidateInterruptPriority>
	__asm volatile
 8012d18:	f3ef 8611 	mrs	r6, BASEPRI
 8012d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d20:	f383 8811 	msr	BASEPRI, r3
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012d2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d301      	bcc.n	8012d38 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8012d34:	2000      	movs	r0, #0
 8012d36:	e014      	b.n	8012d62 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8012d3c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d3e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8012d40:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8012d42:	1c5a      	adds	r2, r3, #1
 8012d44:	d110      	bne.n	8012d68 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d48:	b90b      	cbnz	r3, 8012d4e <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8012d4a:	2001      	movs	r0, #1
 8012d4c:	e009      	b.n	8012d62 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012d52:	f000 fcb3 	bl	80136bc <xTaskRemoveFromEventList>
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d0f7      	beq.n	8012d4a <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8012d5a:	2d00      	cmp	r5, #0
 8012d5c:	d0f5      	beq.n	8012d4a <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d5e:	2001      	movs	r0, #1
 8012d60:	6028      	str	r0, [r5, #0]
	__asm volatile
 8012d62:	f386 8811 	msr	BASEPRI, r6
}
 8012d66:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d68:	3301      	adds	r3, #1
 8012d6a:	b25b      	sxtb	r3, r3
 8012d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d70:	e7eb      	b.n	8012d4a <xQueueGiveFromISR+0x6e>
	__asm volatile
 8012d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	e7fe      	b.n	8012d82 <xQueueGiveFromISR+0xa6>

08012d84 <xQueueGenericReceive>:
{
 8012d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d88:	4688      	mov	r8, r1
 8012d8a:	9201      	str	r2, [sp, #4]
 8012d8c:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8012d8e:	4604      	mov	r4, r0
 8012d90:	b940      	cbnz	r0, 8012da4 <xQueueGenericReceive+0x20>
 8012d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d96:	f383 8811 	msr	BASEPRI, r3
 8012d9a:	f3bf 8f6f 	isb	sy
 8012d9e:	f3bf 8f4f 	dsb	sy
 8012da2:	e7fe      	b.n	8012da2 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012da4:	2900      	cmp	r1, #0
 8012da6:	f040 80a5 	bne.w	8012ef4 <xQueueGenericReceive+0x170>
 8012daa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	f000 80a1 	beq.w	8012ef4 <xQueueGenericReceive+0x170>
 8012db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	e7fe      	b.n	8012dc2 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012dc4:	9e01      	ldr	r6, [sp, #4]
 8012dc6:	2e00      	cmp	r6, #0
 8012dc8:	f000 809a 	beq.w	8012f00 <xQueueGenericReceive+0x17c>
 8012dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	e7fe      	b.n	8012ddc <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8012de0:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d06d      	beq.n	8012ec2 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012de6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012dea:	e05f      	b.n	8012eac <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012dec:	9d01      	ldr	r5, [sp, #4]
 8012dee:	b91d      	cbnz	r5, 8012df8 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8012df0:	f7ff fb6a 	bl	80124c8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8012df4:	4628      	mov	r0, r5
 8012df6:	e067      	b.n	8012ec8 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8012df8:	b916      	cbnz	r6, 8012e00 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8012dfa:	a802      	add	r0, sp, #8
 8012dfc:	f000 fca0 	bl	8013740 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8012e00:	f7ff fb62 	bl	80124c8 <vPortExitCritical>
		vTaskSuspendAll();
 8012e04:	f000 fa88 	bl	8013318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e08:	f7ff fb3c 	bl	8012484 <vPortEnterCritical>
 8012e0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012e10:	2bff      	cmp	r3, #255	; 0xff
 8012e12:	bf08      	it	eq
 8012e14:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8012e18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012e1c:	2bff      	cmp	r3, #255	; 0xff
 8012e1e:	bf08      	it	eq
 8012e20:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8012e24:	f7ff fb50 	bl	80124c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e28:	a901      	add	r1, sp, #4
 8012e2a:	a802      	add	r0, sp, #8
 8012e2c:	f000 fc98 	bl	8013760 <xTaskCheckForTimeOut>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	d152      	bne.n	8012eda <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8012e34:	f7ff fb26 	bl	8012484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012e38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8012e3a:	f7ff fb45 	bl	80124c8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e3e:	2d00      	cmp	r5, #0
 8012e40:	d145      	bne.n	8012ece <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e42:	6823      	ldr	r3, [r4, #0]
 8012e44:	b933      	cbnz	r3, 8012e54 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8012e46:	f7ff fb1d 	bl	8012484 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012e4a:	6860      	ldr	r0, [r4, #4]
 8012e4c:	f000 fcd8 	bl	8013800 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8012e50:	f7ff fb3a 	bl	80124c8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012e54:	9901      	ldr	r1, [sp, #4]
 8012e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012e5a:	f000 fc15 	bl	8013688 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f7ff fd78 	bl	8012954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e64:	f000 fb00 	bl	8013468 <xTaskResumeAll>
 8012e68:	b938      	cbnz	r0, 8012e7a <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8012e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012e6e:	f8ca 3000 	str.w	r3, [sl]
 8012e72:	f3bf 8f4f 	dsb	sy
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8012e7c:	f7ff fb02 	bl	8012484 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e80:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e82:	2d00      	cmp	r5, #0
 8012e84:	d0b2      	beq.n	8012dec <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e86:	4641      	mov	r1, r8
 8012e88:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8012e8a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e8c:	f7ff fd4d 	bl	801292a <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8012e90:	f1b9 0f00 	cmp.w	r9, #0
 8012e94:	d1a3      	bne.n	8012dde <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e96:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8012e98:	3d01      	subs	r5, #1
 8012e9a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e9c:	b913      	cbnz	r3, 8012ea4 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012e9e:	f000 fd45 	bl	801392c <pvTaskIncrementMutexHeldCount>
 8012ea2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ea4:	6923      	ldr	r3, [r4, #16]
 8012ea6:	b163      	cbz	r3, 8012ec2 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ea8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012eac:	f000 fc06 	bl	80136bc <xTaskRemoveFromEventList>
 8012eb0:	b138      	cbz	r0, 8012ec2 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8012eb2:	4b15      	ldr	r3, [pc, #84]	; (8012f08 <xQueueGenericReceive+0x184>)
 8012eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8012ec2:	f7ff fb01 	bl	80124c8 <vPortExitCritical>
				return pdPASS;
 8012ec6:	2001      	movs	r0, #1
}
 8012ec8:	b004      	add	sp, #16
 8012eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f7ff fd40 	bl	8012954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012ed4:	f000 fac8 	bl	8013468 <xTaskResumeAll>
 8012ed8:	e7cf      	b.n	8012e7a <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8012eda:	4620      	mov	r0, r4
 8012edc:	f7ff fd3a 	bl	8012954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ee0:	f000 fac2 	bl	8013468 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8012ee4:	f7ff face 	bl	8012484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012ee8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8012eea:	f7ff faed 	bl	80124c8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012eee:	2d00      	cmp	r5, #0
 8012ef0:	d1c3      	bne.n	8012e7a <xQueueGenericReceive+0xf6>
 8012ef2:	e77f      	b.n	8012df4 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ef4:	f000 fc74 	bl	80137e0 <xTaskGetSchedulerState>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	f43f af63 	beq.w	8012dc4 <xQueueGenericReceive+0x40>
 8012efe:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8012f00:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8012f02:	f8df a004 	ldr.w	sl, [pc, #4]	; 8012f08 <xQueueGenericReceive+0x184>
 8012f06:	e7b9      	b.n	8012e7c <xQueueGenericReceive+0xf8>
 8012f08:	e000ed04 	.word	0xe000ed04

08012f0c <xQueueReceiveFromISR>:
{
 8012f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f10:	4689      	mov	r9, r1
 8012f12:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8012f14:	4605      	mov	r5, r0
 8012f16:	b940      	cbnz	r0, 8012f2a <xQueueReceiveFromISR+0x1e>
 8012f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f1c:	f383 8811 	msr	BASEPRI, r3
 8012f20:	f3bf 8f6f 	isb	sy
 8012f24:	f3bf 8f4f 	dsb	sy
 8012f28:	e7fe      	b.n	8012f28 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f2a:	bb71      	cbnz	r1, 8012f8a <xQueueReceiveFromISR+0x7e>
 8012f2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012f2e:	b363      	cbz	r3, 8012f8a <xQueueReceiveFromISR+0x7e>
 8012f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f34:	f383 8811 	msr	BASEPRI, r3
 8012f38:	f3bf 8f6f 	isb	sy
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	e7fe      	b.n	8012f40 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8012f42:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012f46:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8012f48:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	f7ff fced 	bl	801292a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8012f50:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8012f52:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8012f54:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8012f56:	d113      	bne.n	8012f80 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f58:	692b      	ldr	r3, [r5, #16]
 8012f5a:	b90b      	cbnz	r3, 8012f60 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8012f5c:	2001      	movs	r0, #1
 8012f5e:	e00b      	b.n	8012f78 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f60:	f105 0010 	add.w	r0, r5, #16
 8012f64:	f000 fbaa 	bl	80136bc <xTaskRemoveFromEventList>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d0f7      	beq.n	8012f5c <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8012f6c:	f1b8 0f00 	cmp.w	r8, #0
 8012f70:	d0f4      	beq.n	8012f5c <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012f72:	2001      	movs	r0, #1
 8012f74:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8012f78:	f387 8811 	msr	BASEPRI, r7
}
 8012f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012f80:	3601      	adds	r6, #1
 8012f82:	b276      	sxtb	r6, r6
 8012f84:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8012f88:	e7e8      	b.n	8012f5c <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f8a:	f7ff fb83 	bl	8012694 <vPortValidateInterruptPriority>
	__asm volatile
 8012f8e:	f3ef 8711 	mrs	r7, BASEPRI
 8012f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f96:	f383 8811 	msr	BASEPRI, r3
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fa2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012fa4:	2c00      	cmp	r4, #0
 8012fa6:	d1cc      	bne.n	8012f42 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8012fa8:	4620      	mov	r0, r4
 8012faa:	e7e5      	b.n	8012f78 <xQueueReceiveFromISR+0x6c>

08012fac <uxQueueMessagesWaiting>:
{
 8012fac:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8012fae:	4604      	mov	r4, r0
 8012fb0:	b940      	cbnz	r0, 8012fc4 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8012fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb6:	f383 8811 	msr	BASEPRI, r3
 8012fba:	f3bf 8f6f 	isb	sy
 8012fbe:	f3bf 8f4f 	dsb	sy
 8012fc2:	e7fe      	b.n	8012fc2 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8012fc4:	f7ff fa5e 	bl	8012484 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012fc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8012fca:	f7ff fa7d 	bl	80124c8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012fce:	4620      	mov	r0, r4
 8012fd0:	bd10      	pop	{r4, pc}

08012fd2 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8012fd2:	b940      	cbnz	r0, 8012fe6 <uxQueueMessagesWaitingFromISR+0x14>
 8012fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd8:	f383 8811 	msr	BASEPRI, r3
 8012fdc:	f3bf 8f6f 	isb	sy
 8012fe0:	f3bf 8f4f 	dsb	sy
 8012fe4:	e7fe      	b.n	8012fe4 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012fe6:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012fe8:	4770      	bx	lr
	...

08012fec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012fec:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012fee:	4a08      	ldr	r2, [pc, #32]	; (8013010 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ff0:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012ff2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012ff6:	684c      	ldr	r4, [r1, #4]
 8012ff8:	4284      	cmp	r4, r0
 8012ffa:	d104      	bne.n	8013006 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013002:	6048      	str	r0, [r1, #4]
				break;
 8013004:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013006:	3301      	adds	r3, #1
 8013008:	2b10      	cmp	r3, #16
 801300a:	d1f2      	bne.n	8012ff2 <vQueueUnregisterQueue+0x6>
 801300c:	bd10      	pop	{r4, pc}
 801300e:	bf00      	nop
 8013010:	20004438 	.word	0x20004438

08013014 <vQueueDelete>:
{
 8013014:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8013016:	4604      	mov	r4, r0
 8013018:	b940      	cbnz	r0, 801302c <vQueueDelete+0x18>
 801301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301e:	f383 8811 	msr	BASEPRI, r3
 8013022:	f3bf 8f6f 	isb	sy
 8013026:	f3bf 8f4f 	dsb	sy
 801302a:	e7fe      	b.n	801302a <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 801302c:	f7ff ffde 	bl	8012fec <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8013030:	4620      	mov	r0, r4
}
 8013032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8013036:	f7ff bc0d 	b.w	8012854 <vPortFree>
	...

0801303c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801303c:	4a06      	ldr	r2, [pc, #24]	; (8013058 <prvResetNextTaskUnblockTime+0x1c>)
 801303e:	6813      	ldr	r3, [r2, #0]
 8013040:	6819      	ldr	r1, [r3, #0]
 8013042:	4b06      	ldr	r3, [pc, #24]	; (801305c <prvResetNextTaskUnblockTime+0x20>)
 8013044:	b919      	cbnz	r1, 801304e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013046:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801304a:	601a      	str	r2, [r3, #0]
 801304c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801304e:	6812      	ldr	r2, [r2, #0]
 8013050:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013052:	68d2      	ldr	r2, [r2, #12]
 8013054:	6852      	ldr	r2, [r2, #4]
 8013056:	e7f8      	b.n	801304a <prvResetNextTaskUnblockTime+0xe>
 8013058:	20003e38 	.word	0x20003e38
 801305c:	20003f10 	.word	0x20003f10

08013060 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013062:	4b1b      	ldr	r3, [pc, #108]	; (80130d0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013064:	4e1b      	ldr	r6, [pc, #108]	; (80130d4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8013066:	681d      	ldr	r5, [r3, #0]
{
 8013068:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801306a:	6830      	ldr	r0, [r6, #0]
 801306c:	3004      	adds	r0, #4
{
 801306e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013070:	f7ff f998 	bl	80123a4 <uxListRemove>
 8013074:	4633      	mov	r3, r6
 8013076:	b940      	cbnz	r0, 801308a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013078:	6831      	ldr	r1, [r6, #0]
 801307a:	4e17      	ldr	r6, [pc, #92]	; (80130d8 <prvAddCurrentTaskToDelayedList+0x78>)
 801307c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801307e:	6832      	ldr	r2, [r6, #0]
 8013080:	2001      	movs	r0, #1
 8013082:	4088      	lsls	r0, r1
 8013084:	ea22 0200 	bic.w	r2, r2, r0
 8013088:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801308a:	1c62      	adds	r2, r4, #1
 801308c:	d107      	bne.n	801309e <prvAddCurrentTaskToDelayedList+0x3e>
 801308e:	b137      	cbz	r7, 801309e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013090:	6819      	ldr	r1, [r3, #0]
 8013092:	4812      	ldr	r0, [pc, #72]	; (80130dc <prvAddCurrentTaskToDelayedList+0x7c>)
 8013094:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801309a:	f7ff b960 	b.w	801235e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801309e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80130a0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80130a2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80130a4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80130a6:	d907      	bls.n	80130b8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80130a8:	4a0d      	ldr	r2, [pc, #52]	; (80130e0 <prvAddCurrentTaskToDelayedList+0x80>)
 80130aa:	6810      	ldr	r0, [r2, #0]
 80130ac:	6819      	ldr	r1, [r3, #0]
}
 80130ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80130b2:	3104      	adds	r1, #4
 80130b4:	f7ff b95f 	b.w	8012376 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80130b8:	4a0a      	ldr	r2, [pc, #40]	; (80130e4 <prvAddCurrentTaskToDelayedList+0x84>)
 80130ba:	6810      	ldr	r0, [r2, #0]
 80130bc:	6819      	ldr	r1, [r3, #0]
 80130be:	3104      	adds	r1, #4
 80130c0:	f7ff f959 	bl	8012376 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80130c4:	4b08      	ldr	r3, [pc, #32]	; (80130e8 <prvAddCurrentTaskToDelayedList+0x88>)
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80130ca:	bf38      	it	cc
 80130cc:	601c      	strcc	r4, [r3, #0]
 80130ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130d0:	20003f58 	.word	0x20003f58
 80130d4:	20003e34 	.word	0x20003e34
 80130d8:	20003ee0 	.word	0x20003ee0
 80130dc:	20003f30 	.word	0x20003f30
 80130e0:	20003e3c 	.word	0x20003e3c
 80130e4:	20003e38 	.word	0x20003e38
 80130e8:	20003f10 	.word	0x20003f10

080130ec <prvTaskIsTaskSuspended.part.0>:
 80130ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f0:	f383 8811 	msr	BASEPRI, r3
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	f3bf 8f4f 	dsb	sy
 80130fc:	e7fe      	b.n	80130fc <prvTaskIsTaskSuspended.part.0+0x10>
	...

08013100 <xTaskCreate>:
	{
 8013100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013104:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8013108:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801310a:	4650      	mov	r0, sl
	{
 801310c:	460f      	mov	r7, r1
 801310e:	4699      	mov	r9, r3
 8013110:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013112:	f7ff fb11 	bl	8012738 <pvPortMalloc>
			if( pxStack != NULL )
 8013116:	4605      	mov	r5, r0
 8013118:	2800      	cmp	r0, #0
 801311a:	f000 8096 	beq.w	801324a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801311e:	2054      	movs	r0, #84	; 0x54
 8013120:	f7ff fb0a 	bl	8012738 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8013124:	4604      	mov	r4, r0
 8013126:	2800      	cmp	r0, #0
 8013128:	f000 808c 	beq.w	8013244 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801312c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8013130:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013132:	4455      	add	r5, sl
 8013134:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013136:	f025 0a07 	bic.w	sl, r5, #7
 801313a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 801313e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013140:	7859      	ldrb	r1, [r3, #1]
 8013142:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8013146:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801314a:	b109      	cbz	r1, 8013150 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801314c:	42bb      	cmp	r3, r7
 801314e:	d1f7      	bne.n	8013140 <xTaskCreate+0x40>
 8013150:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013152:	2d06      	cmp	r5, #6
 8013154:	bf28      	it	cs
 8013156:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013158:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801315c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 801315e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8013160:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013162:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013164:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8013168:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801316c:	f7ff f8f4 	bl	8012358 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013170:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013174:	f104 0018 	add.w	r0, r4, #24
 8013178:	f7ff f8ee 	bl	8012358 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801317c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013180:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013182:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013184:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013186:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801318a:	464a      	mov	r2, r9
 801318c:	4641      	mov	r1, r8
 801318e:	4650      	mov	r0, sl
 8013190:	f7ff f94a 	bl	8012428 <pxPortInitialiseStack>
 8013194:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8013196:	b106      	cbz	r6, 801319a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013198:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 801319a:	f7ff f973 	bl	8012484 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801319e:	4b32      	ldr	r3, [pc, #200]	; (8013268 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80131a0:	4e32      	ldr	r6, [pc, #200]	; (801326c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8013298 <xTaskCreate+0x198>
 80131a8:	3201      	adds	r2, #1
 80131aa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80131ac:	6835      	ldr	r5, [r6, #0]
 80131ae:	2d00      	cmp	r5, #0
 80131b0:	d14e      	bne.n	8013250 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80131b2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d11d      	bne.n	80131f6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80131ba:	eb08 0005 	add.w	r0, r8, r5
 80131be:	3514      	adds	r5, #20
 80131c0:	f7ff f8bf 	bl	8012342 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131c4:	2d8c      	cmp	r5, #140	; 0x8c
 80131c6:	d1f8      	bne.n	80131ba <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80131c8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 801329c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80131cc:	4d28      	ldr	r5, [pc, #160]	; (8013270 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80131ce:	4648      	mov	r0, r9
 80131d0:	f7ff f8b7 	bl	8012342 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80131d4:	4628      	mov	r0, r5
 80131d6:	f7ff f8b4 	bl	8012342 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80131da:	4826      	ldr	r0, [pc, #152]	; (8013274 <xTaskCreate+0x174>)
 80131dc:	f7ff f8b1 	bl	8012342 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80131e0:	4825      	ldr	r0, [pc, #148]	; (8013278 <xTaskCreate+0x178>)
 80131e2:	f7ff f8ae 	bl	8012342 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80131e6:	4825      	ldr	r0, [pc, #148]	; (801327c <xTaskCreate+0x17c>)
 80131e8:	f7ff f8ab 	bl	8012342 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80131ec:	4b24      	ldr	r3, [pc, #144]	; (8013280 <xTaskCreate+0x180>)
 80131ee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80131f2:	4b24      	ldr	r3, [pc, #144]	; (8013284 <xTaskCreate+0x184>)
 80131f4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80131f6:	4a24      	ldr	r2, [pc, #144]	; (8013288 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80131f8:	4924      	ldr	r1, [pc, #144]	; (801328c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80131fa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80131fc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80131fe:	3301      	adds	r3, #1
 8013200:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8013202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013204:	2501      	movs	r5, #1
 8013206:	fa05 f302 	lsl.w	r3, r5, r2
 801320a:	4303      	orrs	r3, r0
 801320c:	2014      	movs	r0, #20
 801320e:	600b      	str	r3, [r1, #0]
 8013210:	fb00 8002 	mla	r0, r0, r2, r8
 8013214:	4639      	mov	r1, r7
 8013216:	f7ff f8a2 	bl	801235e <vListInsertEnd>
	taskEXIT_CRITICAL();
 801321a:	f7ff f955 	bl	80124c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801321e:	4b1c      	ldr	r3, [pc, #112]	; (8013290 <xTaskCreate+0x190>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	b163      	cbz	r3, 801323e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013224:	6833      	ldr	r3, [r6, #0]
 8013226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013228:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801322a:	429a      	cmp	r2, r3
 801322c:	d207      	bcs.n	801323e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 801322e:	4b19      	ldr	r3, [pc, #100]	; (8013294 <xTaskCreate+0x194>)
 8013230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	f3bf 8f4f 	dsb	sy
 801323a:	f3bf 8f6f 	isb	sy
	}
 801323e:	4628      	mov	r0, r5
 8013240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8013244:	4628      	mov	r0, r5
 8013246:	f7ff fb05 	bl	8012854 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801324a:	f04f 35ff 	mov.w	r5, #4294967295
 801324e:	e7f6      	b.n	801323e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8013250:	4b0f      	ldr	r3, [pc, #60]	; (8013290 <xTaskCreate+0x190>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d1ce      	bne.n	80131f6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013258:	6833      	ldr	r3, [r6, #0]
 801325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801325e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8013260:	bf98      	it	ls
 8013262:	6034      	strls	r4, [r6, #0]
 8013264:	e7c7      	b.n	80131f6 <xTaskCreate+0xf6>
 8013266:	bf00      	nop
 8013268:	20003ecc 	.word	0x20003ecc
 801326c:	20003e34 	.word	0x20003e34
 8013270:	20003ef8 	.word	0x20003ef8
 8013274:	20003f18 	.word	0x20003f18
 8013278:	20003f44 	.word	0x20003f44
 801327c:	20003f30 	.word	0x20003f30
 8013280:	20003e38 	.word	0x20003e38
 8013284:	20003e3c 	.word	0x20003e3c
 8013288:	20003edc 	.word	0x20003edc
 801328c:	20003ee0 	.word	0x20003ee0
 8013290:	20003f2c 	.word	0x20003f2c
 8013294:	e000ed04 	.word	0xe000ed04
 8013298:	20003e40 	.word	0x20003e40
 801329c:	20003ee4 	.word	0x20003ee4

080132a0 <vTaskStartScheduler>:
{
 80132a0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80132a2:	4b17      	ldr	r3, [pc, #92]	; (8013300 <vTaskStartScheduler+0x60>)
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	2400      	movs	r4, #0
 80132a8:	9400      	str	r4, [sp, #0]
 80132aa:	4623      	mov	r3, r4
 80132ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132b0:	4914      	ldr	r1, [pc, #80]	; (8013304 <vTaskStartScheduler+0x64>)
 80132b2:	4815      	ldr	r0, [pc, #84]	; (8013308 <vTaskStartScheduler+0x68>)
 80132b4:	f7ff ff24 	bl	8013100 <xTaskCreate>
	if( xReturn == pdPASS )
 80132b8:	2801      	cmp	r0, #1
 80132ba:	d114      	bne.n	80132e6 <vTaskStartScheduler+0x46>
 80132bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c0:	f383 8811 	msr	BASEPRI, r3
 80132c4:	f3bf 8f6f 	isb	sy
 80132c8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80132cc:	4b0f      	ldr	r3, [pc, #60]	; (801330c <vTaskStartScheduler+0x6c>)
 80132ce:	f04f 32ff 	mov.w	r2, #4294967295
 80132d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80132d4:	4b0e      	ldr	r3, [pc, #56]	; (8013310 <vTaskStartScheduler+0x70>)
 80132d6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80132d8:	4b0e      	ldr	r3, [pc, #56]	; (8013314 <vTaskStartScheduler+0x74>)
 80132da:	601c      	str	r4, [r3, #0]
}
 80132dc:	b002      	add	sp, #8
 80132de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80132e2:	f7ff b961 	b.w	80125a8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80132e6:	3001      	adds	r0, #1
 80132e8:	d108      	bne.n	80132fc <vTaskStartScheduler+0x5c>
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	f383 8811 	msr	BASEPRI, r3
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f3bf 8f4f 	dsb	sy
 80132fa:	e7fe      	b.n	80132fa <vTaskStartScheduler+0x5a>
}
 80132fc:	b002      	add	sp, #8
 80132fe:	bd10      	pop	{r4, pc}
 8013300:	20003f0c 	.word	0x20003f0c
 8013304:	0801c638 	.word	0x0801c638
 8013308:	080135a1 	.word	0x080135a1
 801330c:	20003f10 	.word	0x20003f10
 8013310:	20003f2c 	.word	0x20003f2c
 8013314:	20003f58 	.word	0x20003f58

08013318 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8013318:	4a02      	ldr	r2, [pc, #8]	; (8013324 <vTaskSuspendAll+0xc>)
 801331a:	6813      	ldr	r3, [r2, #0]
 801331c:	3301      	adds	r3, #1
 801331e:	6013      	str	r3, [r2, #0]
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	20003ed8 	.word	0x20003ed8

08013328 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8013328:	4b01      	ldr	r3, [pc, #4]	; (8013330 <xTaskGetTickCount+0x8>)
 801332a:	6818      	ldr	r0, [r3, #0]
}
 801332c:	4770      	bx	lr
 801332e:	bf00      	nop
 8013330:	20003f58 	.word	0x20003f58

08013334 <xTaskGetTickCountFromISR>:
{
 8013334:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013336:	f7ff f9ad 	bl	8012694 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801333a:	4b01      	ldr	r3, [pc, #4]	; (8013340 <xTaskGetTickCountFromISR+0xc>)
 801333c:	6818      	ldr	r0, [r3, #0]
}
 801333e:	bd08      	pop	{r3, pc}
 8013340:	20003f58 	.word	0x20003f58

08013344 <xTaskIncrementTick>:
{
 8013344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013348:	4b3c      	ldr	r3, [pc, #240]	; (801343c <xTaskIncrementTick+0xf8>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d153      	bne.n	80133f8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8013350:	4b3b      	ldr	r3, [pc, #236]	; (8013440 <xTaskIncrementTick+0xfc>)
 8013352:	681c      	ldr	r4, [r3, #0]
 8013354:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8013356:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8013358:	b9bc      	cbnz	r4, 801338a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801335a:	4b3a      	ldr	r3, [pc, #232]	; (8013444 <xTaskIncrementTick+0x100>)
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	6812      	ldr	r2, [r2, #0]
 8013360:	b142      	cbz	r2, 8013374 <xTaskIncrementTick+0x30>
 8013362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013366:	f383 8811 	msr	BASEPRI, r3
 801336a:	f3bf 8f6f 	isb	sy
 801336e:	f3bf 8f4f 	dsb	sy
 8013372:	e7fe      	b.n	8013372 <xTaskIncrementTick+0x2e>
 8013374:	4a34      	ldr	r2, [pc, #208]	; (8013448 <xTaskIncrementTick+0x104>)
 8013376:	6819      	ldr	r1, [r3, #0]
 8013378:	6810      	ldr	r0, [r2, #0]
 801337a:	6018      	str	r0, [r3, #0]
 801337c:	6011      	str	r1, [r2, #0]
 801337e:	4a33      	ldr	r2, [pc, #204]	; (801344c <xTaskIncrementTick+0x108>)
 8013380:	6813      	ldr	r3, [r2, #0]
 8013382:	3301      	adds	r3, #1
 8013384:	6013      	str	r3, [r2, #0]
 8013386:	f7ff fe59 	bl	801303c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801338a:	4d31      	ldr	r5, [pc, #196]	; (8013450 <xTaskIncrementTick+0x10c>)
 801338c:	4f31      	ldr	r7, [pc, #196]	; (8013454 <xTaskIncrementTick+0x110>)
 801338e:	682b      	ldr	r3, [r5, #0]
 8013390:	429c      	cmp	r4, r3
 8013392:	f04f 0b00 	mov.w	fp, #0
 8013396:	d33e      	bcc.n	8013416 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013398:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8013444 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 801339c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8013464 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133a0:	f8d8 2000 	ldr.w	r2, [r8]
 80133a4:	6812      	ldr	r2, [r2, #0]
 80133a6:	bb72      	cbnz	r2, 8013406 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133a8:	f04f 32ff 	mov.w	r2, #4294967295
 80133ac:	602a      	str	r2, [r5, #0]
					break;
 80133ae:	e032      	b.n	8013416 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133b0:	f106 0a04 	add.w	sl, r6, #4
 80133b4:	4650      	mov	r0, sl
 80133b6:	f7fe fff5 	bl	80123a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80133ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80133bc:	b119      	cbz	r1, 80133c6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80133be:	f106 0018 	add.w	r0, r6, #24
 80133c2:	f7fe ffef 	bl	80123a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80133c6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80133c8:	f8d9 3000 	ldr.w	r3, [r9]
 80133cc:	2201      	movs	r2, #1
 80133ce:	fa02 f100 	lsl.w	r1, r2, r0
 80133d2:	4319      	orrs	r1, r3
 80133d4:	4b20      	ldr	r3, [pc, #128]	; (8013458 <xTaskIncrementTick+0x114>)
 80133d6:	f8c9 1000 	str.w	r1, [r9]
 80133da:	f04f 0e14 	mov.w	lr, #20
 80133de:	4651      	mov	r1, sl
 80133e0:	fb0e 3000 	mla	r0, lr, r0, r3
 80133e4:	f7fe ffbb 	bl	801235e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80133e8:	6838      	ldr	r0, [r7, #0]
 80133ea:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80133ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80133ee:	4291      	cmp	r1, r2
 80133f0:	bf28      	it	cs
 80133f2:	f04f 0b01 	movcs.w	fp, #1
 80133f6:	e7d3      	b.n	80133a0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80133f8:	4a18      	ldr	r2, [pc, #96]	; (801345c <xTaskIncrementTick+0x118>)
 80133fa:	6813      	ldr	r3, [r2, #0]
 80133fc:	3301      	adds	r3, #1
 80133fe:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8013400:	f04f 0b00 	mov.w	fp, #0
 8013404:	e011      	b.n	801342a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013406:	f8d8 2000 	ldr.w	r2, [r8]
 801340a:	68d2      	ldr	r2, [r2, #12]
 801340c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801340e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8013410:	428c      	cmp	r4, r1
 8013412:	d2cd      	bcs.n	80133b0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8013414:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013416:	683a      	ldr	r2, [r7, #0]
 8013418:	4b0f      	ldr	r3, [pc, #60]	; (8013458 <xTaskIncrementTick+0x114>)
 801341a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801341c:	2214      	movs	r2, #20
 801341e:	434a      	muls	r2, r1
 8013420:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8013422:	2a02      	cmp	r2, #2
 8013424:	bf28      	it	cs
 8013426:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 801342a:	4a0d      	ldr	r2, [pc, #52]	; (8013460 <xTaskIncrementTick+0x11c>)
 801342c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 801342e:	2a00      	cmp	r2, #0
 8013430:	bf18      	it	ne
 8013432:	f04f 0b01 	movne.w	fp, #1
}
 8013436:	4658      	mov	r0, fp
 8013438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801343c:	20003ed8 	.word	0x20003ed8
 8013440:	20003f58 	.word	0x20003f58
 8013444:	20003e38 	.word	0x20003e38
 8013448:	20003e3c 	.word	0x20003e3c
 801344c:	20003f14 	.word	0x20003f14
 8013450:	20003f10 	.word	0x20003f10
 8013454:	20003e34 	.word	0x20003e34
 8013458:	20003e40 	.word	0x20003e40
 801345c:	20003ed4 	.word	0x20003ed4
 8013460:	20003f5c 	.word	0x20003f5c
 8013464:	20003ee0 	.word	0x20003ee0

08013468 <xTaskResumeAll>:
{
 8013468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 801346c:	4c31      	ldr	r4, [pc, #196]	; (8013534 <xTaskResumeAll+0xcc>)
 801346e:	6823      	ldr	r3, [r4, #0]
 8013470:	b943      	cbnz	r3, 8013484 <xTaskResumeAll+0x1c>
 8013472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013476:	f383 8811 	msr	BASEPRI, r3
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	f3bf 8f4f 	dsb	sy
 8013482:	e7fe      	b.n	8013482 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8013484:	f7fe fffe 	bl	8012484 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	3b01      	subs	r3, #1
 801348c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801348e:	6824      	ldr	r4, [r4, #0]
 8013490:	b12c      	cbz	r4, 801349e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8013492:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8013494:	f7ff f818 	bl	80124c8 <vPortExitCritical>
}
 8013498:	4620      	mov	r0, r4
 801349a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801349e:	4b26      	ldr	r3, [pc, #152]	; (8013538 <xTaskResumeAll+0xd0>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d0f5      	beq.n	8013492 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80134a6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8013550 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80134aa:	4f24      	ldr	r7, [pc, #144]	; (801353c <xTaskResumeAll+0xd4>)
 80134ac:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8013554 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80134b0:	f8d9 3000 	ldr.w	r3, [r9]
 80134b4:	b9e3      	cbnz	r3, 80134f0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80134b6:	b10c      	cbz	r4, 80134bc <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80134b8:	f7ff fdc0 	bl	801303c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80134bc:	4d20      	ldr	r5, [pc, #128]	; (8013540 <xTaskResumeAll+0xd8>)
 80134be:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80134c0:	b144      	cbz	r4, 80134d4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80134c2:	4e20      	ldr	r6, [pc, #128]	; (8013544 <xTaskResumeAll+0xdc>)
 80134c4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80134c6:	f7ff ff3d 	bl	8013344 <xTaskIncrementTick>
 80134ca:	b100      	cbz	r0, 80134ce <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80134cc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80134ce:	3c01      	subs	r4, #1
 80134d0:	d1f9      	bne.n	80134c6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80134d2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80134d4:	4b1b      	ldr	r3, [pc, #108]	; (8013544 <xTaskResumeAll+0xdc>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d0da      	beq.n	8013492 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80134dc:	4b1a      	ldr	r3, [pc, #104]	; (8013548 <xTaskResumeAll+0xe0>)
 80134de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	f3bf 8f4f 	dsb	sy
 80134e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80134ec:	2401      	movs	r4, #1
 80134ee:	e7d1      	b.n	8013494 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80134f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80134f4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80134f6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134f8:	f104 0018 	add.w	r0, r4, #24
 80134fc:	f7fe ff52 	bl	80123a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013500:	4630      	mov	r0, r6
 8013502:	f7fe ff4f 	bl	80123a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013508:	6839      	ldr	r1, [r7, #0]
 801350a:	2501      	movs	r5, #1
 801350c:	fa05 f302 	lsl.w	r3, r5, r2
 8013510:	2014      	movs	r0, #20
 8013512:	430b      	orrs	r3, r1
 8013514:	fb00 8002 	mla	r0, r0, r2, r8
 8013518:	4631      	mov	r1, r6
 801351a:	603b      	str	r3, [r7, #0]
 801351c:	f7fe ff1f 	bl	801235e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013520:	4b0a      	ldr	r3, [pc, #40]	; (801354c <xTaskResumeAll+0xe4>)
 8013522:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013528:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 801352a:	bf24      	itt	cs
 801352c:	4b05      	ldrcs	r3, [pc, #20]	; (8013544 <xTaskResumeAll+0xdc>)
 801352e:	601d      	strcs	r5, [r3, #0]
 8013530:	e7be      	b.n	80134b0 <xTaskResumeAll+0x48>
 8013532:	bf00      	nop
 8013534:	20003ed8 	.word	0x20003ed8
 8013538:	20003ecc 	.word	0x20003ecc
 801353c:	20003ee0 	.word	0x20003ee0
 8013540:	20003ed4 	.word	0x20003ed4
 8013544:	20003f5c 	.word	0x20003f5c
 8013548:	e000ed04 	.word	0xe000ed04
 801354c:	20003e34 	.word	0x20003e34
 8013550:	20003f18 	.word	0x20003f18
 8013554:	20003e40 	.word	0x20003e40

08013558 <vTaskDelay>:
	{
 8013558:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801355a:	b940      	cbnz	r0, 801356e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 801355c:	4b0e      	ldr	r3, [pc, #56]	; (8013598 <vTaskDelay+0x40>)
 801355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013562:	601a      	str	r2, [r3, #0]
 8013564:	f3bf 8f4f 	dsb	sy
 8013568:	f3bf 8f6f 	isb	sy
 801356c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 801356e:	4b0b      	ldr	r3, [pc, #44]	; (801359c <vTaskDelay+0x44>)
 8013570:	6819      	ldr	r1, [r3, #0]
 8013572:	b141      	cbz	r1, 8013586 <vTaskDelay+0x2e>
 8013574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013578:	f383 8811 	msr	BASEPRI, r3
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	e7fe      	b.n	8013584 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013586:	f7ff fec7 	bl	8013318 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801358a:	f7ff fd69 	bl	8013060 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801358e:	f7ff ff6b 	bl	8013468 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8013592:	2800      	cmp	r0, #0
 8013594:	d0e2      	beq.n	801355c <vTaskDelay+0x4>
 8013596:	bd08      	pop	{r3, pc}
 8013598:	e000ed04 	.word	0xe000ed04
 801359c:	20003ed8 	.word	0x20003ed8

080135a0 <prvIdleTask>:
{
 80135a0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80135a2:	4e17      	ldr	r6, [pc, #92]	; (8013600 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80135a4:	4c17      	ldr	r4, [pc, #92]	; (8013604 <prvIdleTask+0x64>)
 80135a6:	6823      	ldr	r3, [r4, #0]
 80135a8:	b963      	cbnz	r3, 80135c4 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80135aa:	4b17      	ldr	r3, [pc, #92]	; (8013608 <prvIdleTask+0x68>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	d9f8      	bls.n	80135a4 <prvIdleTask+0x4>
				taskYIELD();
 80135b2:	4b16      	ldr	r3, [pc, #88]	; (801360c <prvIdleTask+0x6c>)
 80135b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135b8:	601a      	str	r2, [r3, #0]
 80135ba:	f3bf 8f4f 	dsb	sy
 80135be:	f3bf 8f6f 	isb	sy
 80135c2:	e7ef      	b.n	80135a4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80135c4:	f7ff fea8 	bl	8013318 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80135c8:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80135ca:	f7ff ff4d 	bl	8013468 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80135ce:	2d00      	cmp	r5, #0
 80135d0:	d0e9      	beq.n	80135a6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80135d2:	f7fe ff57 	bl	8012484 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80135d6:	68f3      	ldr	r3, [r6, #12]
 80135d8:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135da:	1d28      	adds	r0, r5, #4
 80135dc:	f7fe fee2 	bl	80123a4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80135e0:	4a0b      	ldr	r2, [pc, #44]	; (8013610 <prvIdleTask+0x70>)
 80135e2:	6813      	ldr	r3, [r2, #0]
 80135e4:	3b01      	subs	r3, #1
 80135e6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	3b01      	subs	r3, #1
 80135ec:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80135ee:	f7fe ff6b 	bl	80124c8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80135f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80135f4:	f7ff f92e 	bl	8012854 <vPortFree>
			vPortFree( pxTCB );
 80135f8:	4628      	mov	r0, r5
 80135fa:	f7ff f92b 	bl	8012854 <vPortFree>
 80135fe:	e7d2      	b.n	80135a6 <prvIdleTask+0x6>
 8013600:	20003f44 	.word	0x20003f44
 8013604:	20003ed0 	.word	0x20003ed0
 8013608:	20003e40 	.word	0x20003e40
 801360c:	e000ed04 	.word	0xe000ed04
 8013610:	20003ecc 	.word	0x20003ecc

08013614 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013614:	4b17      	ldr	r3, [pc, #92]	; (8013674 <vTaskSwitchContext+0x60>)
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	4b17      	ldr	r3, [pc, #92]	; (8013678 <vTaskSwitchContext+0x64>)
{
 801361a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801361c:	b112      	cbz	r2, 8013624 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 801361e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8013624:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013626:	4b15      	ldr	r3, [pc, #84]	; (801367c <vTaskSwitchContext+0x68>)
 8013628:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 801362a:	fab3 f383 	clz	r3, r3
 801362e:	b2db      	uxtb	r3, r3
 8013630:	f1c3 031f 	rsb	r3, r3, #31
 8013634:	2214      	movs	r2, #20
 8013636:	4912      	ldr	r1, [pc, #72]	; (8013680 <vTaskSwitchContext+0x6c>)
 8013638:	435a      	muls	r2, r3
 801363a:	1888      	adds	r0, r1, r2
 801363c:	588c      	ldr	r4, [r1, r2]
 801363e:	b944      	cbnz	r4, 8013652 <vTaskSwitchContext+0x3e>
	__asm volatile
 8013640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013644:	f383 8811 	msr	BASEPRI, r3
 8013648:	f3bf 8f6f 	isb	sy
 801364c:	f3bf 8f4f 	dsb	sy
 8013650:	e7fe      	b.n	8013650 <vTaskSwitchContext+0x3c>
 8013652:	6844      	ldr	r4, [r0, #4]
 8013654:	3208      	adds	r2, #8
 8013656:	6864      	ldr	r4, [r4, #4]
 8013658:	6044      	str	r4, [r0, #4]
 801365a:	440a      	add	r2, r1
 801365c:	4294      	cmp	r4, r2
 801365e:	bf04      	itt	eq
 8013660:	6862      	ldreq	r2, [r4, #4]
 8013662:	6042      	streq	r2, [r0, #4]
 8013664:	2214      	movs	r2, #20
 8013666:	fb02 1303 	mla	r3, r2, r3, r1
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	68da      	ldr	r2, [r3, #12]
 801366e:	4b05      	ldr	r3, [pc, #20]	; (8013684 <vTaskSwitchContext+0x70>)
 8013670:	e7d6      	b.n	8013620 <vTaskSwitchContext+0xc>
 8013672:	bf00      	nop
 8013674:	20003ed8 	.word	0x20003ed8
 8013678:	20003f5c 	.word	0x20003f5c
 801367c:	20003ee0 	.word	0x20003ee0
 8013680:	20003e40 	.word	0x20003e40
 8013684:	20003e34 	.word	0x20003e34

08013688 <vTaskPlaceOnEventList>:
{
 8013688:	b510      	push	{r4, lr}
 801368a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 801368c:	b940      	cbnz	r0, 80136a0 <vTaskPlaceOnEventList+0x18>
 801368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	e7fe      	b.n	801369e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136a0:	4b05      	ldr	r3, [pc, #20]	; (80136b8 <vTaskPlaceOnEventList+0x30>)
 80136a2:	6819      	ldr	r1, [r3, #0]
 80136a4:	3118      	adds	r1, #24
 80136a6:	f7fe fe66 	bl	8012376 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80136aa:	4620      	mov	r0, r4
 80136ac:	2101      	movs	r1, #1
}
 80136ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80136b2:	f7ff bcd5 	b.w	8013060 <prvAddCurrentTaskToDelayedList>
 80136b6:	bf00      	nop
 80136b8:	20003e34 	.word	0x20003e34

080136bc <xTaskRemoveFromEventList>:
{
 80136bc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80136be:	68c3      	ldr	r3, [r0, #12]
 80136c0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80136c2:	b944      	cbnz	r4, 80136d6 <xTaskRemoveFromEventList+0x1a>
 80136c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	e7fe      	b.n	80136d4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80136d6:	f104 0518 	add.w	r5, r4, #24
 80136da:	4628      	mov	r0, r5
 80136dc:	f7fe fe62 	bl	80123a4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80136e0:	4b11      	ldr	r3, [pc, #68]	; (8013728 <xTaskRemoveFromEventList+0x6c>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	b9e3      	cbnz	r3, 8013720 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80136e6:	1d25      	adds	r5, r4, #4
 80136e8:	4628      	mov	r0, r5
 80136ea:	f7fe fe5b 	bl	80123a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80136ee:	490f      	ldr	r1, [pc, #60]	; (801372c <xTaskRemoveFromEventList+0x70>)
 80136f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80136f2:	6808      	ldr	r0, [r1, #0]
 80136f4:	2301      	movs	r3, #1
 80136f6:	4093      	lsls	r3, r2
 80136f8:	4303      	orrs	r3, r0
 80136fa:	600b      	str	r3, [r1, #0]
 80136fc:	4b0c      	ldr	r3, [pc, #48]	; (8013730 <xTaskRemoveFromEventList+0x74>)
 80136fe:	2014      	movs	r0, #20
 8013700:	4629      	mov	r1, r5
 8013702:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013706:	f7fe fe2a 	bl	801235e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801370a:	4b0a      	ldr	r3, [pc, #40]	; (8013734 <xTaskRemoveFromEventList+0x78>)
 801370c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013712:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8013714:	bf83      	ittte	hi
 8013716:	4b08      	ldrhi	r3, [pc, #32]	; (8013738 <xTaskRemoveFromEventList+0x7c>)
 8013718:	2001      	movhi	r0, #1
 801371a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 801371c:	2000      	movls	r0, #0
}
 801371e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013720:	4629      	mov	r1, r5
 8013722:	4806      	ldr	r0, [pc, #24]	; (801373c <xTaskRemoveFromEventList+0x80>)
 8013724:	e7ef      	b.n	8013706 <xTaskRemoveFromEventList+0x4a>
 8013726:	bf00      	nop
 8013728:	20003ed8 	.word	0x20003ed8
 801372c:	20003ee0 	.word	0x20003ee0
 8013730:	20003e40 	.word	0x20003e40
 8013734:	20003e34 	.word	0x20003e34
 8013738:	20003f5c 	.word	0x20003f5c
 801373c:	20003f18 	.word	0x20003f18

08013740 <vTaskSetTimeOutState>:
{
 8013740:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8013742:	b908      	cbnz	r0, 8013748 <vTaskSetTimeOutState+0x8>
 8013744:	f7ff fcd2 	bl	80130ec <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013748:	4b03      	ldr	r3, [pc, #12]	; (8013758 <vTaskSetTimeOutState+0x18>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801374e:	4b03      	ldr	r3, [pc, #12]	; (801375c <vTaskSetTimeOutState+0x1c>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	6043      	str	r3, [r0, #4]
 8013754:	bd08      	pop	{r3, pc}
 8013756:	bf00      	nop
 8013758:	20003f14 	.word	0x20003f14
 801375c:	20003f58 	.word	0x20003f58

08013760 <xTaskCheckForTimeOut>:
{
 8013760:	b538      	push	{r3, r4, r5, lr}
 8013762:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8013764:	4604      	mov	r4, r0
 8013766:	b940      	cbnz	r0, 801377a <xTaskCheckForTimeOut+0x1a>
 8013768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801376c:	f383 8811 	msr	BASEPRI, r3
 8013770:	f3bf 8f6f 	isb	sy
 8013774:	f3bf 8f4f 	dsb	sy
 8013778:	e7fe      	b.n	8013778 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801377a:	b941      	cbnz	r1, 801378e <xTaskCheckForTimeOut+0x2e>
 801377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013780:	f383 8811 	msr	BASEPRI, r3
 8013784:	f3bf 8f6f 	isb	sy
 8013788:	f3bf 8f4f 	dsb	sy
 801378c:	e7fe      	b.n	801378c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 801378e:	f7fe fe79 	bl	8012484 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8013792:	4b0e      	ldr	r3, [pc, #56]	; (80137cc <xTaskCheckForTimeOut+0x6c>)
 8013794:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8013796:	682b      	ldr	r3, [r5, #0]
 8013798:	1c5a      	adds	r2, r3, #1
 801379a:	d010      	beq.n	80137be <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801379c:	4a0c      	ldr	r2, [pc, #48]	; (80137d0 <xTaskCheckForTimeOut+0x70>)
 801379e:	6820      	ldr	r0, [r4, #0]
 80137a0:	6812      	ldr	r2, [r2, #0]
 80137a2:	4290      	cmp	r0, r2
 80137a4:	6862      	ldr	r2, [r4, #4]
 80137a6:	d001      	beq.n	80137ac <xTaskCheckForTimeOut+0x4c>
 80137a8:	4291      	cmp	r1, r2
 80137aa:	d20d      	bcs.n	80137c8 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80137ac:	1a88      	subs	r0, r1, r2
 80137ae:	4283      	cmp	r3, r0
 80137b0:	d90a      	bls.n	80137c8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80137b2:	1a5b      	subs	r3, r3, r1
 80137b4:	4413      	add	r3, r2
 80137b6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80137b8:	4620      	mov	r0, r4
 80137ba:	f7ff ffc1 	bl	8013740 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80137be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80137c0:	f7fe fe82 	bl	80124c8 <vPortExitCritical>
}
 80137c4:	4620      	mov	r0, r4
 80137c6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80137c8:	2401      	movs	r4, #1
 80137ca:	e7f9      	b.n	80137c0 <xTaskCheckForTimeOut+0x60>
 80137cc:	20003f58 	.word	0x20003f58
 80137d0:	20003f14 	.word	0x20003f14

080137d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80137d4:	4b01      	ldr	r3, [pc, #4]	; (80137dc <vTaskMissedYield+0x8>)
 80137d6:	2201      	movs	r2, #1
 80137d8:	601a      	str	r2, [r3, #0]
 80137da:	4770      	bx	lr
 80137dc:	20003f5c 	.word	0x20003f5c

080137e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80137e0:	4b05      	ldr	r3, [pc, #20]	; (80137f8 <xTaskGetSchedulerState+0x18>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	b133      	cbz	r3, 80137f4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137e6:	4b05      	ldr	r3, [pc, #20]	; (80137fc <xTaskGetSchedulerState+0x1c>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80137ec:	bf0c      	ite	eq
 80137ee:	2002      	moveq	r0, #2
 80137f0:	2000      	movne	r0, #0
 80137f2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80137f4:	2001      	movs	r0, #1
	}
 80137f6:	4770      	bx	lr
 80137f8:	20003f2c 	.word	0x20003f2c
 80137fc:	20003ed8 	.word	0x20003ed8

08013800 <vTaskPriorityInherit>:
	{
 8013800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8013804:	4604      	mov	r4, r0
 8013806:	2800      	cmp	r0, #0
 8013808:	d038      	beq.n	801387c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 801380a:	4d1d      	ldr	r5, [pc, #116]	; (8013880 <vTaskPriorityInherit+0x80>)
 801380c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801380e:	682a      	ldr	r2, [r5, #0]
 8013810:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013812:	4293      	cmp	r3, r2
 8013814:	d232      	bcs.n	801387c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013816:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013818:	4e1a      	ldr	r6, [pc, #104]	; (8013884 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801381a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801381c:	bfa1      	itttt	ge
 801381e:	682a      	ldrge	r2, [r5, #0]
 8013820:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8013822:	f1c2 0207 	rsbge	r2, r2, #7
 8013826:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013828:	2714      	movs	r7, #20
 801382a:	6942      	ldr	r2, [r0, #20]
 801382c:	fb07 6303 	mla	r3, r7, r3, r6
 8013830:	429a      	cmp	r2, r3
 8013832:	d120      	bne.n	8013876 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013834:	f100 0804 	add.w	r8, r0, #4
 8013838:	4640      	mov	r0, r8
 801383a:	f7fe fdb3 	bl	80123a4 <uxListRemove>
 801383e:	4a12      	ldr	r2, [pc, #72]	; (8013888 <vTaskPriorityInherit+0x88>)
 8013840:	b948      	cbnz	r0, 8013856 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013844:	4347      	muls	r7, r0
 8013846:	59f3      	ldr	r3, [r6, r7]
 8013848:	b92b      	cbnz	r3, 8013856 <vTaskPriorityInherit+0x56>
 801384a:	6813      	ldr	r3, [r2, #0]
 801384c:	2101      	movs	r1, #1
 801384e:	4081      	lsls	r1, r0
 8013850:	ea23 0301 	bic.w	r3, r3, r1
 8013854:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013856:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8013858:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801385a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801385c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801385e:	2301      	movs	r3, #1
 8013860:	4083      	lsls	r3, r0
 8013862:	430b      	orrs	r3, r1
 8013864:	6013      	str	r3, [r2, #0]
 8013866:	2314      	movs	r3, #20
 8013868:	4641      	mov	r1, r8
 801386a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 801386e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8013872:	f7fe bd74 	b.w	801235e <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013876:	682b      	ldr	r3, [r5, #0]
 8013878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801387a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013880:	20003e34 	.word	0x20003e34
 8013884:	20003e40 	.word	0x20003e40
 8013888:	20003ee0 	.word	0x20003ee0

0801388c <xTaskPriorityDisinherit>:
	{
 801388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801388e:	4604      	mov	r4, r0
 8013890:	b908      	cbnz	r0, 8013896 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8013892:	2000      	movs	r0, #0
 8013894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8013896:	4b22      	ldr	r3, [pc, #136]	; (8013920 <xTaskPriorityDisinherit+0x94>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	4298      	cmp	r0, r3
 801389c:	d008      	beq.n	80138b0 <xTaskPriorityDisinherit+0x24>
 801389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a2:	f383 8811 	msr	BASEPRI, r3
 80138a6:	f3bf 8f6f 	isb	sy
 80138aa:	f3bf 8f4f 	dsb	sy
 80138ae:	e7fe      	b.n	80138ae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80138b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80138b2:	b943      	cbnz	r3, 80138c6 <xTaskPriorityDisinherit+0x3a>
 80138b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138b8:	f383 8811 	msr	BASEPRI, r3
 80138bc:	f3bf 8f6f 	isb	sy
 80138c0:	f3bf 8f4f 	dsb	sy
 80138c4:	e7fe      	b.n	80138c4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80138c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80138ca:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138cc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80138ce:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138d0:	d0df      	beq.n	8013892 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1dd      	bne.n	8013892 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138d6:	1d05      	adds	r5, r0, #4
 80138d8:	4628      	mov	r0, r5
 80138da:	f7fe fd63 	bl	80123a4 <uxListRemove>
 80138de:	4e11      	ldr	r6, [pc, #68]	; (8013924 <xTaskPriorityDisinherit+0x98>)
 80138e0:	4a11      	ldr	r2, [pc, #68]	; (8013928 <xTaskPriorityDisinherit+0x9c>)
 80138e2:	b950      	cbnz	r0, 80138fa <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80138e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80138e6:	2114      	movs	r1, #20
 80138e8:	4379      	muls	r1, r7
 80138ea:	5873      	ldr	r3, [r6, r1]
 80138ec:	b92b      	cbnz	r3, 80138fa <xTaskPriorityDisinherit+0x6e>
 80138ee:	6813      	ldr	r3, [r2, #0]
 80138f0:	2001      	movs	r0, #1
 80138f2:	40b8      	lsls	r0, r7
 80138f4:	ea23 0300 	bic.w	r3, r3, r0
 80138f8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80138fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80138fc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138fe:	f1c3 0107 	rsb	r1, r3, #7
 8013902:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8013904:	6811      	ldr	r1, [r2, #0]
 8013906:	2401      	movs	r4, #1
 8013908:	fa04 f003 	lsl.w	r0, r4, r3
 801390c:	4308      	orrs	r0, r1
 801390e:	6010      	str	r0, [r2, #0]
 8013910:	2014      	movs	r0, #20
 8013912:	fb00 6003 	mla	r0, r0, r3, r6
 8013916:	4629      	mov	r1, r5
 8013918:	f7fe fd21 	bl	801235e <vListInsertEnd>
					xReturn = pdTRUE;
 801391c:	4620      	mov	r0, r4
	}
 801391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013920:	20003e34 	.word	0x20003e34
 8013924:	20003e40 	.word	0x20003e40
 8013928:	20003ee0 	.word	0x20003ee0

0801392c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801392c:	4b04      	ldr	r3, [pc, #16]	; (8013940 <pvTaskIncrementMutexHeldCount+0x14>)
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	b11a      	cbz	r2, 801393a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8013932:	6819      	ldr	r1, [r3, #0]
 8013934:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8013936:	3201      	adds	r2, #1
 8013938:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 801393a:	6818      	ldr	r0, [r3, #0]
	}
 801393c:	4770      	bx	lr
 801393e:	bf00      	nop
 8013940:	20003e34 	.word	0x20003e34

08013944 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8013944:	680a      	ldr	r2, [r1, #0]
{
 8013946:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8013948:	320c      	adds	r2, #12
{
 801394a:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801394c:	f001 faf0 	bl	8014f30 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8013950:	b908      	cbnz	r0, 8013956 <netconn_apimsg+0x12>
    return apimsg->err;
 8013952:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8013956:	bd10      	pop	{r4, pc}

08013958 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8013958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801395a:	b958      	cbnz	r0, 8013974 <netconn_close_shutdown+0x1c>
 801395c:	4b0b      	ldr	r3, [pc, #44]	; (801398c <netconn_close_shutdown+0x34>)
 801395e:	490c      	ldr	r1, [pc, #48]	; (8013990 <netconn_close_shutdown+0x38>)
 8013960:	480c      	ldr	r0, [pc, #48]	; (8013994 <netconn_close_shutdown+0x3c>)
 8013962:	f44f 724a 	mov.w	r2, #808	; 0x328
 8013966:	f008 fa65 	bl	801be34 <iprintf>
 801396a:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 801396e:	b007      	add	sp, #28
 8013970:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8013974:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8013976:	f88d 100c 	strb.w	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801397a:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801397c:	a901      	add	r1, sp, #4
 801397e:	4806      	ldr	r0, [pc, #24]	; (8013998 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8013980:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8013984:	f7ff ffde 	bl	8013944 <netconn_apimsg>
  return err;
 8013988:	e7f1      	b.n	801396e <netconn_close_shutdown+0x16>
 801398a:	bf00      	nop
 801398c:	0801c695 	.word	0x0801c695
 8013990:	0801c6c7 	.word	0x0801c6c7
 8013994:	0801c6e3 	.word	0x0801c6e3
 8013998:	08014c79 	.word	0x08014c79

0801399c <netconn_recv_data>:
{
 801399c:	b570      	push	{r4, r5, r6, lr}
 801399e:	b086      	sub	sp, #24
  void *buf = NULL;
 80139a0:	2300      	movs	r3, #0
{
 80139a2:	4604      	mov	r4, r0
  void *buf = NULL;
 80139a4:	9300      	str	r3, [sp, #0]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80139a6:	460e      	mov	r6, r1
 80139a8:	b951      	cbnz	r1, 80139c0 <netconn_recv_data+0x24>
 80139aa:	4b3e      	ldr	r3, [pc, #248]	; (8013aa4 <netconn_recv_data+0x108>)
 80139ac:	493e      	ldr	r1, [pc, #248]	; (8013aa8 <netconn_recv_data+0x10c>)
 80139ae:	f240 12e7 	movw	r2, #487	; 0x1e7
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80139b2:	483e      	ldr	r0, [pc, #248]	; (8013aac <netconn_recv_data+0x110>)
 80139b4:	f008 fa3e 	bl	801be34 <iprintf>
 80139b8:	f06f 000f 	mvn.w	r0, #15
}
 80139bc:	b006      	add	sp, #24
 80139be:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 80139c0:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80139c2:	b920      	cbnz	r0, 80139ce <netconn_recv_data+0x32>
 80139c4:	4b37      	ldr	r3, [pc, #220]	; (8013aa4 <netconn_recv_data+0x108>)
 80139c6:	493a      	ldr	r1, [pc, #232]	; (8013ab0 <netconn_recv_data+0x114>)
 80139c8:	f240 12e9 	movw	r2, #489	; 0x1e9
 80139cc:	e7f1      	b.n	80139b2 <netconn_recv_data+0x16>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80139ce:	4605      	mov	r5, r0
 80139d0:	f815 3b10 	ldrb.w	r3, [r5], #16
 80139d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80139d8:	2b10      	cmp	r3, #16
 80139da:	d10e      	bne.n	80139fa <netconn_recv_data+0x5e>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80139dc:	4628      	mov	r0, r5
 80139de:	f007 f8d8 	bl	801ab92 <sys_mbox_valid>
 80139e2:	b950      	cbnz	r0, 80139fa <netconn_recv_data+0x5e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80139e4:	f104 0014 	add.w	r0, r4, #20
 80139e8:	f007 f8d3 	bl	801ab92 <sys_mbox_valid>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	bf14      	ite	ne
 80139f0:	f06f 000a 	mvnne.w	r0, #10
 80139f4:	f06f 000e 	mvneq.w	r0, #14
 80139f8:	e7e0      	b.n	80139bc <netconn_recv_data+0x20>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80139fa:	4628      	mov	r0, r5
 80139fc:	f007 f8c9 	bl	801ab92 <sys_mbox_valid>
 8013a00:	b948      	cbnz	r0, 8013a16 <netconn_recv_data+0x7a>
 8013a02:	4b28      	ldr	r3, [pc, #160]	; (8013aa4 <netconn_recv_data+0x108>)
 8013a04:	492b      	ldr	r1, [pc, #172]	; (8013ab4 <netconn_recv_data+0x118>)
 8013a06:	4829      	ldr	r0, [pc, #164]	; (8013aac <netconn_recv_data+0x110>)
 8013a08:	f240 12f5 	movw	r2, #501	; 0x1f5
 8013a0c:	f008 fa12 	bl	801be34 <iprintf>
 8013a10:	f06f 000a 	mvn.w	r0, #10
 8013a14:	e7d2      	b.n	80139bc <netconn_recv_data+0x20>
  if (ERR_IS_FATAL(conn->last_err)) {
 8013a16:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8013a1a:	f110 0f0c 	cmn.w	r0, #12
 8013a1e:	dbcd      	blt.n	80139bc <netconn_recv_data+0x20>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8013a20:	2200      	movs	r2, #0
 8013a22:	4669      	mov	r1, sp
 8013a24:	4628      	mov	r0, r5
 8013a26:	f007 f881 	bl	801ab2c <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8013a2a:	7823      	ldrb	r3, [r4, #0]
 8013a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013a30:	2b10      	cmp	r3, #16
 8013a32:	9b00      	ldr	r3, [sp, #0]
 8013a34:	d12a      	bne.n	8013a8c <netconn_recv_data+0xf0>
    API_MSG_VAR_REF(msg).conn = conn;
 8013a36:	9401      	str	r4, [sp, #4]
    if (buf != NULL) {
 8013a38:	b1ab      	cbz	r3, 8013a66 <netconn_recv_data+0xca>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8013a3a:	891b      	ldrh	r3, [r3, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8013a3c:	481e      	ldr	r0, [pc, #120]	; (8013ab8 <netconn_recv_data+0x11c>)
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8013a3e:	9303      	str	r3, [sp, #12]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8013a40:	a901      	add	r1, sp, #4
 8013a42:	f7ff ff7f 	bl	8013944 <netconn_apimsg>
    if (buf == NULL) {
 8013a46:	9a00      	ldr	r2, [sp, #0]
 8013a48:	b9b2      	cbnz	r2, 8013a78 <netconn_recv_data+0xdc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8013a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013a4c:	b113      	cbz	r3, 8013a54 <netconn_recv_data+0xb8>
 8013a4e:	2101      	movs	r1, #1
 8013a50:	4620      	mov	r0, r4
 8013a52:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8013a54:	6863      	ldr	r3, [r4, #4]
 8013a56:	b943      	cbnz	r3, 8013a6a <netconn_recv_data+0xce>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8013a58:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	bf08      	it	eq
 8013a60:	f06f 000d 	mvneq.w	r0, #13
 8013a64:	e7aa      	b.n	80139bc <netconn_recv_data+0x20>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8013a66:	2301      	movs	r3, #1
 8013a68:	e7e8      	b.n	8013a3c <netconn_recv_data+0xa0>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8013a6a:	2101      	movs	r1, #1
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f7ff ff73 	bl	8013958 <netconn_close_shutdown>
      return ERR_CLSD;
 8013a72:	f06f 000e 	mvn.w	r0, #14
 8013a76:	e7a1      	b.n	80139bc <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8013a78:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8013a7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013a7c:	b113      	cbz	r3, 8013a84 <netconn_recv_data+0xe8>
 8013a7e:	2101      	movs	r1, #1
 8013a80:	4620      	mov	r0, r4
 8013a82:	4798      	blx	r3
  *new_buf = buf;
 8013a84:	9b00      	ldr	r3, [sp, #0]
 8013a86:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8013a88:	2000      	movs	r0, #0
 8013a8a:	e797      	b.n	80139bc <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8013a8c:	b933      	cbnz	r3, 8013a9c <netconn_recv_data+0x100>
 8013a8e:	4b05      	ldr	r3, [pc, #20]	; (8013aa4 <netconn_recv_data+0x108>)
 8013a90:	490a      	ldr	r1, [pc, #40]	; (8013abc <netconn_recv_data+0x120>)
 8013a92:	4806      	ldr	r0, [pc, #24]	; (8013aac <netconn_recv_data+0x110>)
 8013a94:	f240 223e 	movw	r2, #574	; 0x23e
 8013a98:	f008 f9cc 	bl	801be34 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8013a9c:	9b00      	ldr	r3, [sp, #0]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	891a      	ldrh	r2, [r3, #8]
 8013aa2:	e7ea      	b.n	8013a7a <netconn_recv_data+0xde>
 8013aa4:	0801c695 	.word	0x0801c695
 8013aa8:	0801c798 	.word	0x0801c798
 8013aac:	0801c6e3 	.word	0x0801c6e3
 8013ab0:	0801c7b6 	.word	0x0801c7b6
 8013ab4:	0801c7d1 	.word	0x0801c7d1
 8013ab8:	08014b39 	.word	0x08014b39
 8013abc:	0801c7f0 	.word	0x0801c7f0

08013ac0 <netconn_new_with_proto_and_callback>:
{
 8013ac0:	b570      	push	{r4, r5, r6, lr}
 8013ac2:	460d      	mov	r5, r1
 8013ac4:	b086      	sub	sp, #24
  conn = netconn_alloc(t, callback);
 8013ac6:	4611      	mov	r1, r2
 8013ac8:	f000 fdc0 	bl	801464c <netconn_alloc>
  if (conn != NULL) {
 8013acc:	4604      	mov	r4, r0
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d03f      	beq.n	8013b52 <netconn_new_with_proto_and_callback+0x92>
    API_MSG_VAR_REF(msg).conn = conn;
 8013ad2:	a906      	add	r1, sp, #24
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8013ad4:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8013ad8:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8013adc:	481e      	ldr	r0, [pc, #120]	; (8013b58 <netconn_new_with_proto_and_callback+0x98>)
 8013ade:	f7ff ff31 	bl	8013944 <netconn_apimsg>
    if (err != ERR_OK) {
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d035      	beq.n	8013b52 <netconn_new_with_proto_and_callback+0x92>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8013ae6:	6863      	ldr	r3, [r4, #4]
 8013ae8:	b12b      	cbz	r3, 8013af6 <netconn_new_with_proto_and_callback+0x36>
 8013aea:	4b1c      	ldr	r3, [pc, #112]	; (8013b5c <netconn_new_with_proto_and_callback+0x9c>)
 8013aec:	491c      	ldr	r1, [pc, #112]	; (8013b60 <netconn_new_with_proto_and_callback+0xa0>)
 8013aee:	481d      	ldr	r0, [pc, #116]	; (8013b64 <netconn_new_with_proto_and_callback+0xa4>)
 8013af0:	2289      	movs	r2, #137	; 0x89
 8013af2:	f008 f99f 	bl	801be34 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8013af6:	f104 0510 	add.w	r5, r4, #16
 8013afa:	4628      	mov	r0, r5
 8013afc:	f007 f849 	bl	801ab92 <sys_mbox_valid>
 8013b00:	b928      	cbnz	r0, 8013b0e <netconn_new_with_proto_and_callback+0x4e>
 8013b02:	4b16      	ldr	r3, [pc, #88]	; (8013b5c <netconn_new_with_proto_and_callback+0x9c>)
 8013b04:	4918      	ldr	r1, [pc, #96]	; (8013b68 <netconn_new_with_proto_and_callback+0xa8>)
 8013b06:	4817      	ldr	r0, [pc, #92]	; (8013b64 <netconn_new_with_proto_and_callback+0xa4>)
 8013b08:	228a      	movs	r2, #138	; 0x8a
 8013b0a:	f008 f993 	bl	801be34 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8013b0e:	f104 0014 	add.w	r0, r4, #20
 8013b12:	f007 f83e 	bl	801ab92 <sys_mbox_valid>
 8013b16:	b128      	cbz	r0, 8013b24 <netconn_new_with_proto_and_callback+0x64>
 8013b18:	4b10      	ldr	r3, [pc, #64]	; (8013b5c <netconn_new_with_proto_and_callback+0x9c>)
 8013b1a:	4914      	ldr	r1, [pc, #80]	; (8013b6c <netconn_new_with_proto_and_callback+0xac>)
 8013b1c:	4811      	ldr	r0, [pc, #68]	; (8013b64 <netconn_new_with_proto_and_callback+0xa4>)
 8013b1e:	228c      	movs	r2, #140	; 0x8c
 8013b20:	f008 f988 	bl	801be34 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8013b24:	f104 060c 	add.w	r6, r4, #12
 8013b28:	4630      	mov	r0, r6
 8013b2a:	f007 f873 	bl	801ac14 <sys_sem_valid>
 8013b2e:	b928      	cbnz	r0, 8013b3c <netconn_new_with_proto_and_callback+0x7c>
 8013b30:	4b0a      	ldr	r3, [pc, #40]	; (8013b5c <netconn_new_with_proto_and_callback+0x9c>)
 8013b32:	490f      	ldr	r1, [pc, #60]	; (8013b70 <netconn_new_with_proto_and_callback+0xb0>)
 8013b34:	480b      	ldr	r0, [pc, #44]	; (8013b64 <netconn_new_with_proto_and_callback+0xa4>)
 8013b36:	228f      	movs	r2, #143	; 0x8f
 8013b38:	f008 f97c 	bl	801be34 <iprintf>
      sys_sem_free(&conn->op_completed);
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f007 f866 	bl	801ac0e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8013b42:	4628      	mov	r0, r5
 8013b44:	f006 ffd2 	bl	801aaec <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8013b48:	4621      	mov	r1, r4
 8013b4a:	2007      	movs	r0, #7
 8013b4c:	f002 ff9e 	bl	8016a8c <memp_free>
      return NULL;
 8013b50:	2400      	movs	r4, #0
}
 8013b52:	4620      	mov	r0, r4
 8013b54:	b006      	add	sp, #24
 8013b56:	bd70      	pop	{r4, r5, r6, pc}
 8013b58:	080145cd 	.word	0x080145cd
 8013b5c:	0801c695 	.word	0x0801c695
 8013b60:	0801c728 	.word	0x0801c728
 8013b64:	0801c6e3 	.word	0x0801c6e3
 8013b68:	0801c749 	.word	0x0801c749
 8013b6c:	0801c75e 	.word	0x0801c75e
 8013b70:	0801c77f 	.word	0x0801c77f

08013b74 <netconn_delete>:
{
 8013b74:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 8013b76:	4604      	mov	r4, r0
{
 8013b78:	b087      	sub	sp, #28
  if (conn == NULL) {
 8013b7a:	b178      	cbz	r0, 8013b9c <netconn_delete+0x28>
  API_MSG_VAR_REF(msg).conn = conn;
 8013b7c:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8013b7e:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8013b80:	a901      	add	r1, sp, #4
 8013b82:	4807      	ldr	r0, [pc, #28]	; (8013ba0 <netconn_delete+0x2c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8013b84:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8013b88:	f7ff fedc 	bl	8013944 <netconn_apimsg>
  if (err != ERR_OK) {
 8013b8c:	4605      	mov	r5, r0
 8013b8e:	b910      	cbnz	r0, 8013b96 <netconn_delete+0x22>
  netconn_free(conn);
 8013b90:	4620      	mov	r0, r4
 8013b92:	f000 fda1 	bl	80146d8 <netconn_free>
}
 8013b96:	4628      	mov	r0, r5
 8013b98:	b007      	add	sp, #28
 8013b9a:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	e7fa      	b.n	8013b96 <netconn_delete+0x22>
 8013ba0:	080148cd 	.word	0x080148cd

08013ba4 <netconn_bind>:
{
 8013ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8013ba6:	b950      	cbnz	r0, 8013bbe <netconn_bind+0x1a>
 8013ba8:	4b0b      	ldr	r3, [pc, #44]	; (8013bd8 <netconn_bind+0x34>)
 8013baa:	490c      	ldr	r1, [pc, #48]	; (8013bdc <netconn_bind+0x38>)
 8013bac:	480c      	ldr	r0, [pc, #48]	; (8013be0 <netconn_bind+0x3c>)
 8013bae:	22ff      	movs	r2, #255	; 0xff
 8013bb0:	f008 f940 	bl	801be34 <iprintf>
 8013bb4:	f06f 000f 	mvn.w	r0, #15
}
 8013bb8:	b007      	add	sp, #28
 8013bba:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8013bbe:	4b09      	ldr	r3, [pc, #36]	; (8013be4 <netconn_bind+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 8013bc0:	9001      	str	r0, [sp, #4]
    addr = IP4_ADDR_ANY;
 8013bc2:	2900      	cmp	r1, #0
 8013bc4:	bf08      	it	eq
 8013bc6:	4619      	moveq	r1, r3
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8013bc8:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8013bca:	4807      	ldr	r0, [pc, #28]	; (8013be8 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8013bcc:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8013bd0:	a901      	add	r1, sp, #4
 8013bd2:	f7ff feb7 	bl	8013944 <netconn_apimsg>
  return err;
 8013bd6:	e7ef      	b.n	8013bb8 <netconn_bind+0x14>
 8013bd8:	0801c695 	.word	0x0801c695
 8013bdc:	0801c67a 	.word	0x0801c67a
 8013be0:	0801c6e3 	.word	0x0801c6e3
 8013be4:	0801f2e4 	.word	0x0801f2e4
 8013be8:	080149fd 	.word	0x080149fd

08013bec <netconn_listen_with_backlog>:
{
 8013bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8013bee:	b958      	cbnz	r0, 8013c08 <netconn_listen_with_backlog+0x1c>
 8013bf0:	4b09      	ldr	r3, [pc, #36]	; (8013c18 <netconn_listen_with_backlog+0x2c>)
 8013bf2:	490a      	ldr	r1, [pc, #40]	; (8013c1c <netconn_listen_with_backlog+0x30>)
 8013bf4:	480a      	ldr	r0, [pc, #40]	; (8013c20 <netconn_listen_with_backlog+0x34>)
 8013bf6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013bfa:	f008 f91b 	bl	801be34 <iprintf>
 8013bfe:	f06f 000f 	mvn.w	r0, #15
}
 8013c02:	b007      	add	sp, #28
 8013c04:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8013c08:	a906      	add	r1, sp, #24
 8013c0a:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8013c0e:	4805      	ldr	r0, [pc, #20]	; (8013c24 <netconn_listen_with_backlog+0x38>)
 8013c10:	f7ff fe98 	bl	8013944 <netconn_apimsg>
  return err;
 8013c14:	e7f5      	b.n	8013c02 <netconn_listen_with_backlog+0x16>
 8013c16:	bf00      	nop
 8013c18:	0801c695 	.word	0x0801c695
 8013c1c:	0801c70b 	.word	0x0801c70b
 8013c20:	0801c6e3 	.word	0x0801c6e3
 8013c24:	08014a5d 	.word	0x08014a5d

08013c28 <netconn_accept>:
{
 8013c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c2a:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8013c2c:	460d      	mov	r5, r1
 8013c2e:	b951      	cbnz	r1, 8013c46 <netconn_accept+0x1e>
 8013c30:	4b20      	ldr	r3, [pc, #128]	; (8013cb4 <netconn_accept+0x8c>)
 8013c32:	4921      	ldr	r1, [pc, #132]	; (8013cb8 <netconn_accept+0x90>)
 8013c34:	f240 128d 	movw	r2, #397	; 0x18d
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8013c38:	4820      	ldr	r0, [pc, #128]	; (8013cbc <netconn_accept+0x94>)
 8013c3a:	f008 f8fb 	bl	801be34 <iprintf>
 8013c3e:	f06f 000f 	mvn.w	r0, #15
}
 8013c42:	b003      	add	sp, #12
 8013c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8013c46:	2600      	movs	r6, #0
 8013c48:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8013c4a:	b920      	cbnz	r0, 8013c56 <netconn_accept+0x2e>
 8013c4c:	4b19      	ldr	r3, [pc, #100]	; (8013cb4 <netconn_accept+0x8c>)
 8013c4e:	491c      	ldr	r1, [pc, #112]	; (8013cc0 <netconn_accept+0x98>)
 8013c50:	f240 128f 	movw	r2, #399	; 0x18f
 8013c54:	e7f0      	b.n	8013c38 <netconn_accept+0x10>
  if (ERR_IS_FATAL(conn->last_err)) {
 8013c56:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8013c5a:	f110 0f0c 	cmn.w	r0, #12
 8013c5e:	dbf0      	blt.n	8013c42 <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8013c60:	f104 0714 	add.w	r7, r4, #20
 8013c64:	4638      	mov	r0, r7
 8013c66:	f006 ff94 	bl	801ab92 <sys_mbox_valid>
 8013c6a:	b1d0      	cbz	r0, 8013ca2 <netconn_accept+0x7a>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	4632      	mov	r2, r6
 8013c70:	a901      	add	r1, sp, #4
 8013c72:	f006 ff5b 	bl	801ab2c <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8013c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  newconn = (struct netconn *)accept_ptr;
 8013c78:	9f01      	ldr	r7, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8013c7a:	b11b      	cbz	r3, 8013c84 <netconn_accept+0x5c>
 8013c7c:	4632      	mov	r2, r6
 8013c7e:	2101      	movs	r1, #1
 8013c80:	4620      	mov	r0, r4
 8013c82:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8013c84:	9a01      	ldr	r2, [sp, #4]
 8013c86:	4b0f      	ldr	r3, [pc, #60]	; (8013cc4 <netconn_accept+0x9c>)
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d010      	beq.n	8013cae <netconn_accept+0x86>
  if (newconn == NULL) {
 8013c8c:	b967      	cbnz	r7, 8013ca8 <netconn_accept+0x80>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8013c8e:	f006 fffd 	bl	801ac8c <sys_arch_protect>
 8013c92:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8013c96:	330c      	adds	r3, #12
 8013c98:	bfa4      	itt	ge
 8013c9a:	23f1      	movge	r3, #241	; 0xf1
 8013c9c:	7223      	strbge	r3, [r4, #8]
 8013c9e:	f007 f801 	bl	801aca4 <sys_arch_unprotect>
    return ERR_CLSD;
 8013ca2:	f06f 000e 	mvn.w	r0, #14
 8013ca6:	e7cc      	b.n	8013c42 <netconn_accept+0x1a>
  *new_conn = newconn;
 8013ca8:	602f      	str	r7, [r5, #0]
  return ERR_OK;
 8013caa:	2000      	movs	r0, #0
 8013cac:	e7c9      	b.n	8013c42 <netconn_accept+0x1a>
    return ERR_ABRT;
 8013cae:	f06f 000c 	mvn.w	r0, #12
 8013cb2:	e7c6      	b.n	8013c42 <netconn_accept+0x1a>
 8013cb4:	0801c695 	.word	0x0801c695
 8013cb8:	0801c63d 	.word	0x0801c63d
 8013cbc:	0801c6e3 	.word	0x0801c6e3
 8013cc0:	0801c65d 	.word	0x0801c65d
 8013cc4:	200044b8 	.word	0x200044b8

08013cc8 <netconn_recv>:
{
 8013cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013cca:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8013ccc:	460e      	mov	r6, r1
 8013cce:	b959      	cbnz	r1, 8013ce8 <netconn_recv+0x20>
 8013cd0:	4b20      	ldr	r3, [pc, #128]	; (8013d54 <netconn_recv+0x8c>)
 8013cd2:	4921      	ldr	r1, [pc, #132]	; (8013d58 <netconn_recv+0x90>)
 8013cd4:	f44f 721d 	mov.w	r2, #628	; 0x274
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8013cd8:	4820      	ldr	r0, [pc, #128]	; (8013d5c <netconn_recv+0x94>)
 8013cda:	f008 f8ab 	bl	801be34 <iprintf>
 8013cde:	f06f 050f 	mvn.w	r5, #15
}
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	b002      	add	sp, #8
 8013ce6:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 8013ce8:	2200      	movs	r2, #0
 8013cea:	600a      	str	r2, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8013cec:	b920      	cbnz	r0, 8013cf8 <netconn_recv+0x30>
 8013cee:	4b19      	ldr	r3, [pc, #100]	; (8013d54 <netconn_recv+0x8c>)
 8013cf0:	491b      	ldr	r1, [pc, #108]	; (8013d60 <netconn_recv+0x98>)
 8013cf2:	f240 2276 	movw	r2, #630	; 0x276
 8013cf6:	e7ef      	b.n	8013cd8 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8013cf8:	7803      	ldrb	r3, [r0, #0]
 8013cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013cfe:	2b10      	cmp	r3, #16
 8013d00:	d124      	bne.n	8013d4c <netconn_recv+0x84>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013d02:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8013d04:	9201      	str	r2, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013d06:	f002 fea5 	bl	8016a54 <memp_malloc>
    if (buf == NULL) {
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	b1d8      	cbz	r0, 8013d46 <netconn_recv+0x7e>
    err = netconn_recv_data(conn, (void **)&p);
 8013d0e:	4628      	mov	r0, r5
 8013d10:	a901      	add	r1, sp, #4
 8013d12:	f7ff fe43 	bl	801399c <netconn_recv_data>
    if (err != ERR_OK) {
 8013d16:	4605      	mov	r5, r0
 8013d18:	b120      	cbz	r0, 8013d24 <netconn_recv+0x5c>
      memp_free(MEMP_NETBUF, buf);
 8013d1a:	4621      	mov	r1, r4
 8013d1c:	2006      	movs	r0, #6
 8013d1e:	f002 feb5 	bl	8016a8c <memp_free>
      return err;
 8013d22:	e7de      	b.n	8013ce2 <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013d24:	9b01      	ldr	r3, [sp, #4]
 8013d26:	b933      	cbnz	r3, 8013d36 <netconn_recv+0x6e>
 8013d28:	4b0a      	ldr	r3, [pc, #40]	; (8013d54 <netconn_recv+0x8c>)
 8013d2a:	490e      	ldr	r1, [pc, #56]	; (8013d64 <netconn_recv+0x9c>)
 8013d2c:	480b      	ldr	r0, [pc, #44]	; (8013d5c <netconn_recv+0x94>)
 8013d2e:	f240 228a 	movw	r2, #650	; 0x28a
 8013d32:	f008 f87f 	bl	801be34 <iprintf>
    buf->p = p;
 8013d36:	9b01      	ldr	r3, [sp, #4]
 8013d38:	6023      	str	r3, [r4, #0]
    buf->ptr = p;
 8013d3a:	6063      	str	r3, [r4, #4]
    buf->port = 0;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8013d40:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8013d42:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 8013d44:	e7cd      	b.n	8013ce2 <netconn_recv+0x1a>
      return ERR_MEM;
 8013d46:	f04f 35ff 	mov.w	r5, #4294967295
 8013d4a:	e7ca      	b.n	8013ce2 <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf);
 8013d4c:	f7ff fe26 	bl	801399c <netconn_recv_data>
 8013d50:	4605      	mov	r5, r0
 8013d52:	e7c6      	b.n	8013ce2 <netconn_recv+0x1a>
 8013d54:	0801c695 	.word	0x0801c695
 8013d58:	0801c798 	.word	0x0801c798
 8013d5c:	0801c6e3 	.word	0x0801c6e3
 8013d60:	0801c7b6 	.word	0x0801c7b6
 8013d64:	0801faf3 	.word	0x0801faf3

08013d68 <netconn_write_partly>:
{
 8013d68:	b570      	push	{r4, r5, r6, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	4615      	mov	r5, r2
 8013d6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8013d70:	b950      	cbnz	r0, 8013d88 <netconn_write_partly+0x20>
 8013d72:	4b1d      	ldr	r3, [pc, #116]	; (8013de8 <netconn_write_partly+0x80>)
 8013d74:	491d      	ldr	r1, [pc, #116]	; (8013dec <netconn_write_partly+0x84>)
 8013d76:	481e      	ldr	r0, [pc, #120]	; (8013df0 <netconn_write_partly+0x88>)
 8013d78:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013d7c:	f008 f85a 	bl	801be34 <iprintf>
 8013d80:	f06f 000f 	mvn.w	r0, #15
}
 8013d84:	b006      	add	sp, #24
 8013d86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8013d88:	7802      	ldrb	r2, [r0, #0]
 8013d8a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8013d8e:	2a10      	cmp	r2, #16
 8013d90:	d009      	beq.n	8013da6 <netconn_write_partly+0x3e>
 8013d92:	4b15      	ldr	r3, [pc, #84]	; (8013de8 <netconn_write_partly+0x80>)
 8013d94:	4917      	ldr	r1, [pc, #92]	; (8013df4 <netconn_write_partly+0x8c>)
 8013d96:	4816      	ldr	r0, [pc, #88]	; (8013df0 <netconn_write_partly+0x88>)
 8013d98:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013d9c:	f008 f84a 	bl	801be34 <iprintf>
    return ERR_VAL;
 8013da0:	f06f 0005 	mvn.w	r0, #5
 8013da4:	e7ee      	b.n	8013d84 <netconn_write_partly+0x1c>
  if (size == 0) {
 8013da6:	b90d      	cbnz	r5, 8013dac <netconn_write_partly+0x44>
    return ERR_OK;
 8013da8:	2000      	movs	r0, #0
 8013daa:	e7eb      	b.n	8013d84 <netconn_write_partly+0x1c>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8013dac:	7f02      	ldrb	r2, [r0, #28]
 8013dae:	0792      	lsls	r2, r2, #30
 8013db0:	d413      	bmi.n	8013dda <netconn_write_partly+0x72>
 8013db2:	f3c3 0680 	ubfx	r6, r3, #2, #1
  if (dontblock && !bytes_written) {
 8013db6:	b98e      	cbnz	r6, 8013ddc <netconn_write_partly+0x74>
  API_MSG_VAR_REF(msg).conn = conn;
 8013db8:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8013dba:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8013dbc:	480e      	ldr	r0, [pc, #56]	; (8013df8 <netconn_write_partly+0x90>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8013dbe:	f88d 3014 	strb.w	r3, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8013dc2:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8013dc4:	9504      	str	r5, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8013dc6:	f7ff fdbd 	bl	8013944 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	d1da      	bne.n	8013d84 <netconn_write_partly+0x1c>
 8013dce:	2c00      	cmp	r4, #0
 8013dd0:	d0ea      	beq.n	8013da8 <netconn_write_partly+0x40>
    if (dontblock) {
 8013dd2:	b136      	cbz	r6, 8013de2 <netconn_write_partly+0x7a>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8013dd4:	9b04      	ldr	r3, [sp, #16]
 8013dd6:	6023      	str	r3, [r4, #0]
 8013dd8:	e7d4      	b.n	8013d84 <netconn_write_partly+0x1c>
 8013dda:	2601      	movs	r6, #1
  if (dontblock && !bytes_written) {
 8013ddc:	2c00      	cmp	r4, #0
 8013dde:	d1eb      	bne.n	8013db8 <netconn_write_partly+0x50>
 8013de0:	e7de      	b.n	8013da0 <netconn_write_partly+0x38>
      *bytes_written = size;
 8013de2:	6025      	str	r5, [r4, #0]
 8013de4:	e7ce      	b.n	8013d84 <netconn_write_partly+0x1c>
 8013de6:	bf00      	nop
 8013de8:	0801c695 	.word	0x0801c695
 8013dec:	0801c7fc 	.word	0x0801c7fc
 8013df0:	0801c6e3 	.word	0x0801c6e3
 8013df4:	0801c818 	.word	0x0801c818
 8013df8:	08014b91 	.word	0x08014b91

08013dfc <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8013dfc:	2103      	movs	r1, #3
 8013dfe:	f7ff bdab 	b.w	8013958 <netconn_close_shutdown>
	...

08013e04 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8013e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e08:	4606      	mov	r6, r0
 8013e0a:	4617      	mov	r7, r2
 8013e0c:	461d      	mov	r5, r3
 8013e0e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8013e12:	460c      	mov	r4, r1
 8013e14:	b929      	cbnz	r1, 8013e22 <recv_udp+0x1e>
 8013e16:	4b22      	ldr	r3, [pc, #136]	; (8013ea0 <recv_udp+0x9c>)
 8013e18:	4922      	ldr	r1, [pc, #136]	; (8013ea4 <recv_udp+0xa0>)
 8013e1a:	4823      	ldr	r0, [pc, #140]	; (8013ea8 <recv_udp+0xa4>)
 8013e1c:	22b1      	movs	r2, #177	; 0xb1
 8013e1e:	f008 f809 	bl	801be34 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8013e22:	b98e      	cbnz	r6, 8013e48 <recv_udp+0x44>
 8013e24:	4b1e      	ldr	r3, [pc, #120]	; (8013ea0 <recv_udp+0x9c>)
 8013e26:	4921      	ldr	r1, [pc, #132]	; (8013eac <recv_udp+0xa8>)
 8013e28:	481f      	ldr	r0, [pc, #124]	; (8013ea8 <recv_udp+0xa4>)
 8013e2a:	22b2      	movs	r2, #178	; 0xb2
 8013e2c:	f008 f802 	bl	801be34 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8013e30:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8013e32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8013e36:	f002 bfaf 	b.w	8016d98 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013e3a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8013e3c:	b373      	cbz	r3, 8013e9c <recv_udp+0x98>
 8013e3e:	462a      	mov	r2, r5
 8013e40:	4630      	mov	r0, r6
}
 8013e42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013e46:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8013e48:	6873      	ldr	r3, [r6, #4]
 8013e4a:	429c      	cmp	r4, r3
 8013e4c:	d005      	beq.n	8013e5a <recv_udp+0x56>
 8013e4e:	4b14      	ldr	r3, [pc, #80]	; (8013ea0 <recv_udp+0x9c>)
 8013e50:	4917      	ldr	r1, [pc, #92]	; (8013eb0 <recv_udp+0xac>)
 8013e52:	4815      	ldr	r0, [pc, #84]	; (8013ea8 <recv_udp+0xa4>)
 8013e54:	22ba      	movs	r2, #186	; 0xba
 8013e56:	f007 ffed 	bl	801be34 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8013e5a:	f106 0810 	add.w	r8, r6, #16
 8013e5e:	4640      	mov	r0, r8
 8013e60:	f006 fe97 	bl	801ab92 <sys_mbox_valid>
 8013e64:	2800      	cmp	r0, #0
 8013e66:	d0e3      	beq.n	8013e30 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013e68:	2006      	movs	r0, #6
 8013e6a:	f002 fdf3 	bl	8016a54 <memp_malloc>
  if (buf == NULL) {
 8013e6e:	4604      	mov	r4, r0
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d0dd      	beq.n	8013e30 <recv_udp+0x2c>
    buf->p = p;
 8013e74:	6007      	str	r7, [r0, #0]
    buf->ptr = p;
 8013e76:	6047      	str	r7, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8013e78:	b105      	cbz	r5, 8013e7c <recv_udp+0x78>
 8013e7a:	682d      	ldr	r5, [r5, #0]
 8013e7c:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8013e7e:	4621      	mov	r1, r4
    buf->port = port;
 8013e80:	f8a4 900c 	strh.w	r9, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8013e84:	4640      	mov	r0, r8
  len = p->tot_len;
 8013e86:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8013e88:	f006 fe46 	bl	801ab18 <sys_mbox_trypost>
 8013e8c:	4601      	mov	r1, r0
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d0d3      	beq.n	8013e3a <recv_udp+0x36>
    netbuf_delete(buf);
 8013e92:	4620      	mov	r0, r4
}
 8013e94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8013e98:	f000 bf58 	b.w	8014d4c <netbuf_delete>
 8013e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ea0:	0801cb0f 	.word	0x0801cb0f
 8013ea4:	0801cb41 	.word	0x0801cb41
 8013ea8:	0801c6e3 	.word	0x0801c6e3
 8013eac:	0801cb63 	.word	0x0801cb63
 8013eb0:	0801cb82 	.word	0x0801cb82

08013eb4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8013eb4:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8013eb6:	6844      	ldr	r4, [r0, #4]
{
 8013eb8:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8013eba:	4620      	mov	r0, r4
 8013ebc:	f003 fbe2 	bl	8017684 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	4909      	ldr	r1, [pc, #36]	; (8013ee8 <setup_tcp+0x34>)
 8013ec4:	f003 fbe2 	bl	801768c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8013ec8:	4620      	mov	r0, r4
 8013eca:	4908      	ldr	r1, [pc, #32]	; (8013eec <setup_tcp+0x38>)
 8013ecc:	f003 fbf6 	bl	80176bc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	4907      	ldr	r1, [pc, #28]	; (8013ef0 <setup_tcp+0x3c>)
 8013ed4:	2202      	movs	r2, #2
 8013ed6:	f003 fc25 	bl	8017724 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8013eda:	4620      	mov	r0, r4
 8013edc:	4905      	ldr	r1, [pc, #20]	; (8013ef4 <setup_tcp+0x40>)
}
 8013ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 8013ee2:	f003 bc01 	b.w	80176e8 <tcp_err>
 8013ee6:	bf00      	nop
 8013ee8:	08014499 	.word	0x08014499
 8013eec:	0801455d 	.word	0x0801455d
 8013ef0:	0801441d 	.word	0x0801441d
 8013ef4:	08013ef9 	.word	0x08013ef9

08013ef8 <err_tcp>:
{
 8013ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013efc:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013efe:	4604      	mov	r4, r0
 8013f00:	b930      	cbnz	r0, 8013f10 <err_tcp+0x18>
 8013f02:	4b41      	ldr	r3, [pc, #260]	; (8014008 <err_tcp+0x110>)
 8013f04:	4941      	ldr	r1, [pc, #260]	; (801400c <err_tcp+0x114>)
 8013f06:	4842      	ldr	r0, [pc, #264]	; (8014010 <err_tcp+0x118>)
 8013f08:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013f0c:	f007 ff92 	bl	801be34 <iprintf>
  old_state = conn->state;
 8013f10:	7865      	ldrb	r5, [r4, #1]
  conn->pcb.tcp = NULL;
 8013f12:	2700      	movs	r7, #0
  if (old_state == NETCONN_CLOSE) {
 8013f14:	2d04      	cmp	r5, #4
  conn->pcb.tcp = NULL;
 8013f16:	6067      	str	r7, [r4, #4]
  conn->state = NETCONN_NONE;
 8013f18:	7067      	strb	r7, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8013f1a:	d162      	bne.n	8013fe2 <err_tcp+0xea>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8013f1c:	f006 feb6 	bl	801ac8c <sys_arch_protect>
 8013f20:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8013f24:	330c      	adds	r3, #12
 8013f26:	bfa8      	it	ge
 8013f28:	7227      	strbge	r7, [r4, #8]
 8013f2a:	f006 febb 	bl	801aca4 <sys_arch_unprotect>
    err = ERR_OK;
 8013f2e:	2600      	movs	r6, #0
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8013f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013f32:	b11b      	cbz	r3, 8013f3c <err_tcp+0x44>
 8013f34:	2200      	movs	r2, #0
 8013f36:	2104      	movs	r1, #4
 8013f38:	4620      	mov	r0, r4
 8013f3a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013f3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013f3e:	b11b      	cbz	r3, 8013f48 <err_tcp+0x50>
 8013f40:	2200      	movs	r2, #0
 8013f42:	4611      	mov	r1, r2
 8013f44:	4620      	mov	r0, r4
 8013f46:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013f48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013f4a:	b11b      	cbz	r3, 8013f54 <err_tcp+0x5c>
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	2102      	movs	r1, #2
 8013f50:	4620      	mov	r0, r4
 8013f52:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8013f54:	f104 0710 	add.w	r7, r4, #16
 8013f58:	4638      	mov	r0, r7
 8013f5a:	f006 fe1a 	bl	801ab92 <sys_mbox_valid>
 8013f5e:	b118      	cbz	r0, 8013f68 <err_tcp+0x70>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8013f60:	2100      	movs	r1, #0
 8013f62:	4638      	mov	r0, r7
 8013f64:	f006 fdd8 	bl	801ab18 <sys_mbox_trypost>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8013f68:	f104 0714 	add.w	r7, r4, #20
 8013f6c:	4638      	mov	r0, r7
 8013f6e:	f006 fe10 	bl	801ab92 <sys_mbox_valid>
 8013f72:	b118      	cbz	r0, 8013f7c <err_tcp+0x84>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8013f74:	2100      	movs	r1, #0
 8013f76:	4638      	mov	r0, r7
 8013f78:	f006 fdce 	bl	801ab18 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8013f7c:	2d01      	cmp	r5, #1
 8013f7e:	d002      	beq.n	8013f86 <err_tcp+0x8e>
 8013f80:	3d03      	subs	r5, #3
 8013f82:	2d01      	cmp	r5, #1
 8013f84:	d833      	bhi.n	8013fee <err_tcp+0xf6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8013f86:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8013f88:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8013f8c:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8013f8e:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8013f90:	d438      	bmi.n	8014004 <err_tcp+0x10c>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8013f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f94:	b933      	cbnz	r3, 8013fa4 <err_tcp+0xac>
 8013f96:	4b1c      	ldr	r3, [pc, #112]	; (8014008 <err_tcp+0x110>)
 8013f98:	491e      	ldr	r1, [pc, #120]	; (8014014 <err_tcp+0x11c>)
 8013f9a:	481d      	ldr	r0, [pc, #116]	; (8014010 <err_tcp+0x118>)
 8013f9c:	f240 12b3 	movw	r2, #435	; 0x1b3
 8013fa0:	f007 ff48 	bl	801be34 <iprintf>
      conn->current_msg->err = err;
 8013fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013fa6:	681d      	ldr	r5, [r3, #0]
      conn->current_msg->err = err;
 8013fa8:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013faa:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8013fac:	4628      	mov	r0, r5
 8013fae:	f006 fe31 	bl	801ac14 <sys_sem_valid>
 8013fb2:	b930      	cbnz	r0, 8013fc2 <err_tcp+0xca>
 8013fb4:	4b14      	ldr	r3, [pc, #80]	; (8014008 <err_tcp+0x110>)
 8013fb6:	4918      	ldr	r1, [pc, #96]	; (8014018 <err_tcp+0x120>)
 8013fb8:	4815      	ldr	r0, [pc, #84]	; (8014010 <err_tcp+0x118>)
 8013fba:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013fbe:	f007 ff39 	bl	801be34 <iprintf>
      conn->current_msg = NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8013fc6:	f006 fe61 	bl	801ac8c <sys_arch_protect>
 8013fca:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8013fce:	330c      	adds	r3, #12
 8013fd0:	bfa8      	it	ge
 8013fd2:	7226      	strbge	r6, [r4, #8]
 8013fd4:	f006 fe66 	bl	801aca4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8013fd8:	4628      	mov	r0, r5
}
 8013fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8013fde:	f006 be13 	b.w	801ac08 <sys_sem_signal>
    SYS_ARCH_SET(conn->last_err, err);
 8013fe2:	f006 fe53 	bl	801ac8c <sys_arch_protect>
 8013fe6:	7226      	strb	r6, [r4, #8]
 8013fe8:	f006 fe5c 	bl	801aca4 <sys_arch_unprotect>
 8013fec:	e7a0      	b.n	8013f30 <err_tcp+0x38>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8013fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ff0:	b143      	cbz	r3, 8014004 <err_tcp+0x10c>
 8013ff2:	4b05      	ldr	r3, [pc, #20]	; (8014008 <err_tcp+0x110>)
 8013ff4:	4909      	ldr	r1, [pc, #36]	; (801401c <err_tcp+0x124>)
 8013ff6:	4806      	ldr	r0, [pc, #24]	; (8014010 <err_tcp+0x118>)
 8013ff8:	f240 12bd 	movw	r2, #445	; 0x1bd
}
 8013ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8014000:	f007 bf18 	b.w	801be34 <iprintf>
 8014004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014008:	0801cb0f 	.word	0x0801cb0f
 801400c:	0801c83a 	.word	0x0801c83a
 8014010:	0801c6e3 	.word	0x0801c6e3
 8014014:	0801c847 	.word	0x0801c847
 8014018:	0801c861 	.word	0x0801c861
 801401c:	0801c87a 	.word	0x0801c87a

08014020 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014024:	460f      	mov	r7, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014026:	4604      	mov	r4, r0
 8014028:	b930      	cbnz	r0, 8014038 <lwip_netconn_do_writemore+0x18>
 801402a:	4b75      	ldr	r3, [pc, #468]	; (8014200 <lwip_netconn_do_writemore+0x1e0>)
 801402c:	4975      	ldr	r1, [pc, #468]	; (8014204 <lwip_netconn_do_writemore+0x1e4>)
 801402e:	4876      	ldr	r0, [pc, #472]	; (8014208 <lwip_netconn_do_writemore+0x1e8>)
 8014030:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8014034:	f007 fefe 	bl	801be34 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8014038:	7863      	ldrb	r3, [r4, #1]
 801403a:	2b01      	cmp	r3, #1
 801403c:	d006      	beq.n	801404c <lwip_netconn_do_writemore+0x2c>
 801403e:	4b70      	ldr	r3, [pc, #448]	; (8014200 <lwip_netconn_do_writemore+0x1e0>)
 8014040:	4972      	ldr	r1, [pc, #456]	; (801420c <lwip_netconn_do_writemore+0x1ec>)
 8014042:	4871      	ldr	r0, [pc, #452]	; (8014208 <lwip_netconn_do_writemore+0x1e8>)
 8014044:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8014048:	f007 fef4 	bl	801be34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801404c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801404e:	b933      	cbnz	r3, 801405e <lwip_netconn_do_writemore+0x3e>
 8014050:	4b6b      	ldr	r3, [pc, #428]	; (8014200 <lwip_netconn_do_writemore+0x1e0>)
 8014052:	496f      	ldr	r1, [pc, #444]	; (8014210 <lwip_netconn_do_writemore+0x1f0>)
 8014054:	486c      	ldr	r0, [pc, #432]	; (8014208 <lwip_netconn_do_writemore+0x1e8>)
 8014056:	f240 52e5 	movw	r2, #1509	; 0x5e5
 801405a:	f007 feeb 	bl	801be34 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 801405e:	6863      	ldr	r3, [r4, #4]
 8014060:	b933      	cbnz	r3, 8014070 <lwip_netconn_do_writemore+0x50>
 8014062:	4b67      	ldr	r3, [pc, #412]	; (8014200 <lwip_netconn_do_writemore+0x1e0>)
 8014064:	496b      	ldr	r1, [pc, #428]	; (8014214 <lwip_netconn_do_writemore+0x1f4>)
 8014066:	4868      	ldr	r0, [pc, #416]	; (8014208 <lwip_netconn_do_writemore+0x1e8>)
 8014068:	f240 52e6 	movw	r2, #1510	; 0x5e6
 801406c:	f007 fee2 	bl	801be34 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8014070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014072:	6a22      	ldr	r2, [r4, #32]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	429a      	cmp	r2, r3
 8014078:	d306      	bcc.n	8014088 <lwip_netconn_do_writemore+0x68>
 801407a:	4b61      	ldr	r3, [pc, #388]	; (8014200 <lwip_netconn_do_writemore+0x1e0>)
 801407c:	4966      	ldr	r1, [pc, #408]	; (8014218 <lwip_netconn_do_writemore+0x1f8>)
 801407e:	4862      	ldr	r0, [pc, #392]	; (8014208 <lwip_netconn_do_writemore+0x1e8>)
 8014080:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8014084:	f007 fed6 	bl	801be34 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8014088:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801408a:	7f22      	ldrb	r2, [r4, #28]
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 801408c:	6899      	ldr	r1, [r3, #8]
  apiflags = conn->current_msg->msg.w.apiflags;
 801408e:	7c1e      	ldrb	r6, [r3, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014090:	0790      	lsls	r0, r2, #30
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8014092:	6a22      	ldr	r2, [r4, #32]
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8014094:	6860      	ldr	r0, [r4, #4]
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8014096:	eb01 0902 	add.w	r9, r1, r2
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 801409a:	68d9      	ldr	r1, [r3, #12]
    available = tcp_sndbuf(conn->pcb.tcp);
 801409c:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80140a0:	eba1 0302 	sub.w	r3, r1, r2
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80140a4:	bf54      	ite	pl
 80140a6:	f3c6 0880 	ubfxpl	r8, r6, #2, #1
 80140aa:	f04f 0801 	movmi.w	r8, #1
    if (diff > 0xffffUL) { /* max_u16_t */
 80140ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
      len = 0xffff;
 80140b2:	bf2a      	itet	cs
 80140b4:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
      len = (u16_t)diff;
 80140b8:	b29b      	uxthcc	r3, r3
      apiflags |= TCP_WRITE_FLAG_MORE;
 80140ba:	f046 0602 	orrcs.w	r6, r6, #2
    if (available < len) {
 80140be:	42ab      	cmp	r3, r5
 80140c0:	d95f      	bls.n	8014182 <lwip_netconn_do_writemore+0x162>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 80140c2:	f1b8 0f00 	cmp.w	r8, #0
 80140c6:	d059      	beq.n	801417c <lwip_netconn_do_writemore+0x15c>
        if (!len) {
 80140c8:	2d00      	cmp	r5, #0
 80140ca:	d05c      	beq.n	8014186 <lwip_netconn_do_writemore+0x166>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80140cc:	442a      	add	r2, r5
 80140ce:	4291      	cmp	r1, r2
 80140d0:	d206      	bcs.n	80140e0 <lwip_netconn_do_writemore+0xc0>
 80140d2:	4b4b      	ldr	r3, [pc, #300]	; (8014200 <lwip_netconn_do_writemore+0x1e0>)
 80140d4:	4951      	ldr	r1, [pc, #324]	; (801421c <lwip_netconn_do_writemore+0x1fc>)
 80140d6:	484c      	ldr	r0, [pc, #304]	; (8014208 <lwip_netconn_do_writemore+0x1e8>)
 80140d8:	f240 6213 	movw	r2, #1555	; 0x613
 80140dc:	f007 feaa 	bl	801be34 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80140e0:	4633      	mov	r3, r6
 80140e2:	462a      	mov	r2, r5
 80140e4:	4649      	mov	r1, r9
 80140e6:	6860      	ldr	r0, [r4, #4]
 80140e8:	f005 fbe6 	bl	80198b8 <tcp_write>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	2b01      	cmp	r3, #1
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80140f2:	4606      	mov	r6, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80140f4:	d86a      	bhi.n	80141cc <lwip_netconn_do_writemore+0x1ac>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80140f6:	f1b8 0f00 	cmp.w	r8, #0
 80140fa:	d047      	beq.n	801418c <lwip_netconn_do_writemore+0x16c>
 80140fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	429d      	cmp	r5, r3
 8014102:	d243      	bcs.n	801418c <lwip_netconn_do_writemore+0x16c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8014104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014106:	b11b      	cbz	r3, 8014110 <lwip_netconn_do_writemore+0xf0>
 8014108:	462a      	mov	r2, r5
 801410a:	2103      	movs	r1, #3
 801410c:	4620      	mov	r0, r4
 801410e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8014110:	7f23      	ldrb	r3, [r4, #28]
 8014112:	f043 0310 	orr.w	r3, r3, #16
 8014116:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8014118:	2e00      	cmp	r6, #0
 801411a:	d14c      	bne.n	80141b6 <lwip_netconn_do_writemore+0x196>
      err_t out_err;
      conn->write_offset += len;
 801411c:	6a23      	ldr	r3, [r4, #32]
 801411e:	441d      	add	r5, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8014120:	6a63      	ldr	r3, [r4, #36]	; 0x24
      conn->write_offset += len;
 8014122:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8014124:	68da      	ldr	r2, [r3, #12]
 8014126:	4295      	cmp	r5, r2
 8014128:	d002      	beq.n	8014130 <lwip_netconn_do_writemore+0x110>
 801412a:	f1b8 0f00 	cmp.w	r8, #0
 801412e:	d040      	beq.n	80141b2 <lwip_netconn_do_writemore+0x192>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8014130:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8014132:	2501      	movs	r5, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8014134:	6860      	ldr	r0, [r4, #4]
 8014136:	f005 ff45 	bl	8019fc4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 801413a:	f110 0f0c 	cmn.w	r0, #12
 801413e:	db01      	blt.n	8014144 <lwip_netconn_do_writemore+0x124>
 8014140:	1d01      	adds	r1, r0, #4
 8014142:	d154      	bne.n	80141ee <lwip_netconn_do_writemore+0x1ce>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8014144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014146:	2200      	movs	r2, #0
 8014148:	60da      	str	r2, [r3, #12]
      out_err = tcp_output(conn->pcb.tcp);
 801414a:	4606      	mov	r6, r0
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801414c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801414e:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8014150:	711e      	strb	r6, [r3, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014152:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8014154:	2300      	movs	r3, #0
 8014156:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8014158:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 801415a:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 801415c:	f006 fd96 	bl	801ac8c <sys_arch_protect>
 8014160:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014164:	330c      	adds	r3, #12
 8014166:	bfa8      	it	ge
 8014168:	7226      	strbge	r6, [r4, #8]
 801416a:	f006 fd9b 	bl	801aca4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801416e:	b117      	cbz	r7, 8014176 <lwip_netconn_do_writemore+0x156>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8014170:	4628      	mov	r0, r5
 8014172:	f006 fd49 	bl	801ac08 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8014176:	2000      	movs	r0, #0
 8014178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        apiflags |= TCP_WRITE_FLAG_MORE;
 801417c:	f046 0602 	orr.w	r6, r6, #2
 8014180:	e7a4      	b.n	80140cc <lwip_netconn_do_writemore+0xac>
 8014182:	461d      	mov	r5, r3
 8014184:	e7a2      	b.n	80140cc <lwip_netconn_do_writemore+0xac>
          err = ERR_WOULDBLOCK;
 8014186:	f06f 0606 	mvn.w	r6, #6
 801418a:	e7b7      	b.n	80140fc <lwip_netconn_do_writemore+0xdc>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801418c:	6863      	ldr	r3, [r4, #4]
 801418e:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8014192:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014196:	4291      	cmp	r1, r2
 8014198:	d903      	bls.n	80141a2 <lwip_netconn_do_writemore+0x182>
 801419a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801419e:	2b04      	cmp	r3, #4
 80141a0:	d9ba      	bls.n	8014118 <lwip_netconn_do_writemore+0xf8>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80141a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d0b7      	beq.n	8014118 <lwip_netconn_do_writemore+0xf8>
 80141a8:	462a      	mov	r2, r5
 80141aa:	2103      	movs	r1, #3
 80141ac:	4620      	mov	r0, r4
 80141ae:	4798      	blx	r3
 80141b0:	e7b2      	b.n	8014118 <lwip_netconn_do_writemore+0xf8>
  u8_t write_finished = 0;
 80141b2:	4635      	mov	r5, r6
 80141b4:	e7be      	b.n	8014134 <lwip_netconn_do_writemore+0x114>
    } else if (err == ERR_MEM) {
 80141b6:	1c72      	adds	r2, r6, #1
 80141b8:	d108      	bne.n	80141cc <lwip_netconn_do_writemore+0x1ac>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80141ba:	6860      	ldr	r0, [r4, #4]
 80141bc:	f005 ff02 	bl	8019fc4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80141c0:	f110 0f0c 	cmn.w	r0, #12
      err_t out_err = tcp_output(conn->pcb.tcp);
 80141c4:	4606      	mov	r6, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80141c6:	db01      	blt.n	80141cc <lwip_netconn_do_writemore+0x1ac>
 80141c8:	1d03      	adds	r3, r0, #4
 80141ca:	d103      	bne.n	80141d4 <lwip_netconn_do_writemore+0x1b4>
      conn->current_msg->msg.w.len = 0;
 80141cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141ce:	2200      	movs	r2, #0
 80141d0:	60da      	str	r2, [r3, #12]
 80141d2:	e7bb      	b.n	801414c <lwip_netconn_do_writemore+0x12c>
      } else if (dontblock) {
 80141d4:	f1b8 0f00 	cmp.w	r8, #0
 80141d8:	d103      	bne.n	80141e2 <lwip_netconn_do_writemore+0x1c2>
    return ERR_MEM;
 80141da:	f04f 30ff 	mov.w	r0, #4294967295
 80141de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        conn->current_msg->msg.w.len = 0;
 80141e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141e4:	2200      	movs	r2, #0
 80141e6:	60da      	str	r2, [r3, #12]
        err = ERR_WOULDBLOCK;
 80141e8:	f06f 0606 	mvn.w	r6, #6
 80141ec:	e7ae      	b.n	801414c <lwip_netconn_do_writemore+0x12c>
  if (write_finished) {
 80141ee:	2d00      	cmp	r5, #0
 80141f0:	d0f3      	beq.n	80141da <lwip_netconn_do_writemore+0x1ba>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80141f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80141f4:	6815      	ldr	r5, [r2, #0]
    conn->current_msg->err = err;
 80141f6:	2300      	movs	r3, #0
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80141f8:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 80141fa:	7113      	strb	r3, [r2, #4]
 80141fc:	e7ab      	b.n	8014156 <lwip_netconn_do_writemore+0x136>
 80141fe:	bf00      	nop
 8014200:	0801cb0f 	.word	0x0801cb0f
 8014204:	0801c83a 	.word	0x0801c83a
 8014208:	0801c6e3 	.word	0x0801c6e3
 801420c:	0801c956 	.word	0x0801c956
 8014210:	0801c847 	.word	0x0801c847
 8014214:	0801c973 	.word	0x0801c973
 8014218:	0801c989 	.word	0x0801c989
 801421c:	0801c9bb 	.word	0x0801c9bb

08014220 <lwip_netconn_do_close_internal>:
{
 8014220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8014226:	4604      	mov	r4, r0
 8014228:	b930      	cbnz	r0, 8014238 <lwip_netconn_do_close_internal+0x18>
 801422a:	4b71      	ldr	r3, [pc, #452]	; (80143f0 <lwip_netconn_do_close_internal+0x1d0>)
 801422c:	4971      	ldr	r1, [pc, #452]	; (80143f4 <lwip_netconn_do_close_internal+0x1d4>)
 801422e:	4872      	ldr	r0, [pc, #456]	; (80143f8 <lwip_netconn_do_close_internal+0x1d8>)
 8014230:	f240 3243 	movw	r2, #835	; 0x343
 8014234:	f007 fdfe 	bl	801be34 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8014238:	7823      	ldrb	r3, [r4, #0]
 801423a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801423e:	2b10      	cmp	r3, #16
 8014240:	d006      	beq.n	8014250 <lwip_netconn_do_close_internal+0x30>
 8014242:	4b6b      	ldr	r3, [pc, #428]	; (80143f0 <lwip_netconn_do_close_internal+0x1d0>)
 8014244:	496d      	ldr	r1, [pc, #436]	; (80143fc <lwip_netconn_do_close_internal+0x1dc>)
 8014246:	486c      	ldr	r0, [pc, #432]	; (80143f8 <lwip_netconn_do_close_internal+0x1d8>)
 8014248:	f44f 7251 	mov.w	r2, #836	; 0x344
 801424c:	f007 fdf2 	bl	801be34 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8014250:	7863      	ldrb	r3, [r4, #1]
 8014252:	2b04      	cmp	r3, #4
 8014254:	d006      	beq.n	8014264 <lwip_netconn_do_close_internal+0x44>
 8014256:	4b66      	ldr	r3, [pc, #408]	; (80143f0 <lwip_netconn_do_close_internal+0x1d0>)
 8014258:	4969      	ldr	r1, [pc, #420]	; (8014400 <lwip_netconn_do_close_internal+0x1e0>)
 801425a:	4867      	ldr	r0, [pc, #412]	; (80143f8 <lwip_netconn_do_close_internal+0x1d8>)
 801425c:	f240 3245 	movw	r2, #837	; 0x345
 8014260:	f007 fde8 	bl	801be34 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8014264:	6863      	ldr	r3, [r4, #4]
 8014266:	b933      	cbnz	r3, 8014276 <lwip_netconn_do_close_internal+0x56>
 8014268:	4b61      	ldr	r3, [pc, #388]	; (80143f0 <lwip_netconn_do_close_internal+0x1d0>)
 801426a:	4966      	ldr	r1, [pc, #408]	; (8014404 <lwip_netconn_do_close_internal+0x1e4>)
 801426c:	4862      	ldr	r0, [pc, #392]	; (80143f8 <lwip_netconn_do_close_internal+0x1d8>)
 801426e:	f240 3246 	movw	r2, #838	; 0x346
 8014272:	f007 fddf 	bl	801be34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014278:	b933      	cbnz	r3, 8014288 <lwip_netconn_do_close_internal+0x68>
 801427a:	4b5d      	ldr	r3, [pc, #372]	; (80143f0 <lwip_netconn_do_close_internal+0x1d0>)
 801427c:	4962      	ldr	r1, [pc, #392]	; (8014408 <lwip_netconn_do_close_internal+0x1e8>)
 801427e:	485e      	ldr	r0, [pc, #376]	; (80143f8 <lwip_netconn_do_close_internal+0x1d8>)
 8014280:	f240 3247 	movw	r2, #839	; 0x347
 8014284:	f007 fdd6 	bl	801be34 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8014288:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tpcb = conn->pcb.tcp;
 801428a:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 801428c:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 801428e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8014290:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8014294:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8014298:	f000 8084 	beq.w	80143a4 <lwip_netconn_do_close_internal+0x184>
  } else if (shut_rx &&
 801429c:	f1b9 0f00 	cmp.w	r9, #0
 80142a0:	d005      	beq.n	80142ae <lwip_netconn_do_close_internal+0x8e>
             ((tpcb->state == FIN_WAIT_1) ||
 80142a2:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80142a4:	1f5a      	subs	r2, r3, #5
 80142a6:	2a01      	cmp	r2, #1
 80142a8:	d97c      	bls.n	80143a4 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
 80142aa:	2b08      	cmp	r3, #8
 80142ac:	d07a      	beq.n	80143a4 <lwip_netconn_do_close_internal+0x184>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80142ae:	f1b8 0f00 	cmp.w	r8, #0
 80142b2:	d011      	beq.n	80142d8 <lwip_netconn_do_close_internal+0xb8>
 80142b4:	7eaf      	ldrb	r7, [r5, #26]
 80142b6:	f017 0710 	ands.w	r7, r7, #16
 80142ba:	d173      	bne.n	80143a4 <lwip_netconn_do_close_internal+0x184>
  if (tpcb->state == LISTEN) {
 80142bc:	7d2b      	ldrb	r3, [r5, #20]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d10c      	bne.n	80142dc <lwip_netconn_do_close_internal+0xbc>
    tcp_accept(tpcb, NULL);
 80142c2:	2100      	movs	r1, #0
 80142c4:	4628      	mov	r0, r5
 80142c6:	f003 fa27 	bl	8017718 <tcp_accept>
  if (close) {
 80142ca:	bb27      	cbnz	r7, 8014316 <lwip_netconn_do_close_internal+0xf6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80142cc:	4642      	mov	r2, r8
 80142ce:	4649      	mov	r1, r9
 80142d0:	4628      	mov	r0, r5
 80142d2:	f003 fdd9 	bl	8017e88 <tcp_shutdown>
 80142d6:	e021      	b.n	801431c <lwip_netconn_do_close_internal+0xfc>
 80142d8:	4647      	mov	r7, r8
 80142da:	e7ef      	b.n	80142bc <lwip_netconn_do_close_internal+0x9c>
    if (shut_rx) {
 80142dc:	f1b9 0f00 	cmp.w	r9, #0
 80142e0:	d007      	beq.n	80142f2 <lwip_netconn_do_close_internal+0xd2>
      tcp_recv(tpcb, NULL);
 80142e2:	2100      	movs	r1, #0
 80142e4:	4628      	mov	r0, r5
 80142e6:	f003 f9d1 	bl	801768c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80142ea:	2100      	movs	r1, #0
 80142ec:	4628      	mov	r0, r5
 80142ee:	f003 fa13 	bl	8017718 <tcp_accept>
    if (shut_tx) {
 80142f2:	f1b8 0f00 	cmp.w	r8, #0
 80142f6:	d003      	beq.n	8014300 <lwip_netconn_do_close_internal+0xe0>
      tcp_sent(tpcb, NULL);
 80142f8:	2100      	movs	r1, #0
 80142fa:	4628      	mov	r0, r5
 80142fc:	f003 f9de 	bl	80176bc <tcp_sent>
    if (close) {
 8014300:	2f00      	cmp	r7, #0
 8014302:	d0e3      	beq.n	80142cc <lwip_netconn_do_close_internal+0xac>
      tcp_poll(tpcb, NULL, 0);
 8014304:	2200      	movs	r2, #0
 8014306:	4611      	mov	r1, r2
 8014308:	4628      	mov	r0, r5
 801430a:	f003 fa0b 	bl	8017724 <tcp_poll>
      tcp_err(tpcb, NULL);
 801430e:	2100      	movs	r1, #0
 8014310:	4628      	mov	r0, r5
 8014312:	f003 f9e9 	bl	80176e8 <tcp_err>
      err = tcp_close(tpcb);
 8014316:	4628      	mov	r0, r5
 8014318:	f003 fd14 	bl	8017d44 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 801431c:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 801431e:	b160      	cbz	r0, 801433a <lwip_netconn_do_close_internal+0x11a>
    if (err == ERR_MEM) {
 8014320:	1c43      	adds	r3, r0, #1
 8014322:	d10a      	bne.n	801433a <lwip_netconn_do_close_internal+0x11a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8014324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014326:	f893 b009 	ldrb.w	fp, [r3, #9]
 801432a:	f1bb 0f00 	cmp.w	fp, #0
 801432e:	d13f      	bne.n	80143b0 <lwip_netconn_do_close_internal+0x190>
        if (close) {
 8014330:	b11f      	cbz	r7, 801433a <lwip_netconn_do_close_internal+0x11a>
          tcp_abort(tpcb);
 8014332:	4628      	mov	r0, r5
 8014334:	f003 fe44 	bl	8017fc0 <tcp_abort>
          err = ERR_OK;
 8014338:	465e      	mov	r6, fp
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801433a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801433c:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 801433e:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8014340:	2300      	movs	r3, #0
 8014342:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8014344:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8014346:	b9ce      	cbnz	r6, 801437c <lwip_netconn_do_close_internal+0x15c>
      if (close) {
 8014348:	b137      	cbz	r7, 8014358 <lwip_netconn_do_close_internal+0x138>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801434a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        conn->pcb.tcp = NULL;
 801434c:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801434e:	b11b      	cbz	r3, 8014358 <lwip_netconn_do_close_internal+0x138>
 8014350:	4632      	mov	r2, r6
 8014352:	2104      	movs	r1, #4
 8014354:	4620      	mov	r0, r4
 8014356:	4798      	blx	r3
      if (shut_rx) {
 8014358:	f1b9 0f00 	cmp.w	r9, #0
 801435c:	d005      	beq.n	801436a <lwip_netconn_do_close_internal+0x14a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801435e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014360:	b163      	cbz	r3, 801437c <lwip_netconn_do_close_internal+0x15c>
 8014362:	2200      	movs	r2, #0
 8014364:	4611      	mov	r1, r2
 8014366:	4620      	mov	r0, r4
 8014368:	4798      	blx	r3
      if (shut_tx) {
 801436a:	f1b8 0f00 	cmp.w	r8, #0
 801436e:	d005      	beq.n	801437c <lwip_netconn_do_close_internal+0x15c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014372:	b11b      	cbz	r3, 801437c <lwip_netconn_do_close_internal+0x15c>
 8014374:	2200      	movs	r2, #0
 8014376:	2102      	movs	r1, #2
 8014378:	4620      	mov	r0, r4
 801437a:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 801437c:	f006 fc86 	bl	801ac8c <sys_arch_protect>
 8014380:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014384:	330c      	adds	r3, #12
 8014386:	bfa8      	it	ge
 8014388:	7226      	strbge	r6, [r4, #8]
 801438a:	f006 fc8b 	bl	801aca4 <sys_arch_unprotect>
    if (delayed)
 801438e:	f1ba 0f00 	cmp.w	sl, #0
 8014392:	d003      	beq.n	801439c <lwip_netconn_do_close_internal+0x17c>
      sys_sem_signal(op_completed_sem);
 8014394:	f105 000c 	add.w	r0, r5, #12
 8014398:	f006 fc36 	bl	801ac08 <sys_sem_signal>
    return ERR_OK;
 801439c:	2600      	movs	r6, #0
}
 801439e:	4630      	mov	r0, r6
 80143a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_arg(tpcb, NULL);
 80143a4:	2100      	movs	r1, #0
 80143a6:	4628      	mov	r0, r5
 80143a8:	f003 f96c 	bl	8017684 <tcp_arg>
 80143ac:	2701      	movs	r7, #1
 80143ae:	e785      	b.n	80142bc <lwip_netconn_do_close_internal+0x9c>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80143b0:	7d2b      	ldrb	r3, [r5, #20]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d106      	bne.n	80143c4 <lwip_netconn_do_close_internal+0x1a4>
 80143b6:	4b0e      	ldr	r3, [pc, #56]	; (80143f0 <lwip_netconn_do_close_internal+0x1d0>)
 80143b8:	4914      	ldr	r1, [pc, #80]	; (801440c <lwip_netconn_do_close_internal+0x1ec>)
 80143ba:	480f      	ldr	r0, [pc, #60]	; (80143f8 <lwip_netconn_do_close_internal+0x1d8>)
 80143bc:	f240 32e3 	movw	r2, #995	; 0x3e3
 80143c0:	f007 fd38 	bl	801be34 <iprintf>
    if (shut_tx) {
 80143c4:	f1b8 0f00 	cmp.w	r8, #0
 80143c8:	d003      	beq.n	80143d2 <lwip_netconn_do_close_internal+0x1b2>
      tcp_sent(tpcb, sent_tcp);
 80143ca:	4911      	ldr	r1, [pc, #68]	; (8014410 <lwip_netconn_do_close_internal+0x1f0>)
 80143cc:	4628      	mov	r0, r5
 80143ce:	f003 f975 	bl	80176bc <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 80143d2:	2201      	movs	r2, #1
 80143d4:	4628      	mov	r0, r5
 80143d6:	490f      	ldr	r1, [pc, #60]	; (8014414 <lwip_netconn_do_close_internal+0x1f4>)
 80143d8:	f003 f9a4 	bl	8017724 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80143dc:	4628      	mov	r0, r5
 80143de:	490e      	ldr	r1, [pc, #56]	; (8014418 <lwip_netconn_do_close_internal+0x1f8>)
 80143e0:	f003 f982 	bl	80176e8 <tcp_err>
    tcp_arg(tpcb, conn);
 80143e4:	4621      	mov	r1, r4
 80143e6:	4628      	mov	r0, r5
 80143e8:	f003 f94c 	bl	8017684 <tcp_arg>
 80143ec:	e7d7      	b.n	801439e <lwip_netconn_do_close_internal+0x17e>
 80143ee:	bf00      	nop
 80143f0:	0801cb0f 	.word	0x0801cb0f
 80143f4:	0801c688 	.word	0x0801c688
 80143f8:	0801c6e3 	.word	0x0801c6e3
 80143fc:	0801c894 	.word	0x0801c894
 8014400:	0801c8b2 	.word	0x0801c8b2
 8014404:	0801c8d6 	.word	0x0801c8d6
 8014408:	0801c847 	.word	0x0801c847
 801440c:	0801c8e9 	.word	0x0801c8e9
 8014410:	0801455d 	.word	0x0801455d
 8014414:	0801441d 	.word	0x0801441d
 8014418:	08013ef9 	.word	0x08013ef9

0801441c <poll_tcp>:
{
 801441c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801441e:	4604      	mov	r4, r0
 8014420:	b930      	cbnz	r0, 8014430 <poll_tcp+0x14>
 8014422:	4b1a      	ldr	r3, [pc, #104]	; (801448c <poll_tcp+0x70>)
 8014424:	491a      	ldr	r1, [pc, #104]	; (8014490 <poll_tcp+0x74>)
 8014426:	481b      	ldr	r0, [pc, #108]	; (8014494 <poll_tcp+0x78>)
 8014428:	f44f 729c 	mov.w	r2, #312	; 0x138
 801442c:	f007 fd02 	bl	801be34 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8014430:	7861      	ldrb	r1, [r4, #1]
 8014432:	2901      	cmp	r1, #1
 8014434:	d11c      	bne.n	8014470 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8014436:	4620      	mov	r0, r4
 8014438:	f7ff fdf2 	bl	8014020 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801443c:	7f23      	ldrb	r3, [r4, #28]
 801443e:	06da      	lsls	r2, r3, #27
 8014440:	d514      	bpl.n	801446c <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014442:	6862      	ldr	r2, [r4, #4]
 8014444:	b192      	cbz	r2, 801446c <poll_tcp+0x50>
 8014446:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 801444a:	f240 51a1 	movw	r1, #1441	; 0x5a1
 801444e:	4288      	cmp	r0, r1
 8014450:	d90c      	bls.n	801446c <poll_tcp+0x50>
 8014452:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8014456:	2a04      	cmp	r2, #4
 8014458:	d808      	bhi.n	801446c <poll_tcp+0x50>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 801445a:	f023 0310 	bic.w	r3, r3, #16
 801445e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014462:	b11b      	cbz	r3, 801446c <poll_tcp+0x50>
 8014464:	2200      	movs	r2, #0
 8014466:	2102      	movs	r1, #2
 8014468:	4620      	mov	r0, r4
 801446a:	4798      	blx	r3
}
 801446c:	2000      	movs	r0, #0
 801446e:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8014470:	2904      	cmp	r1, #4
 8014472:	d1e3      	bne.n	801443c <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8014474:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014476:	b11a      	cbz	r2, 8014480 <poll_tcp+0x64>
 8014478:	7a53      	ldrb	r3, [r2, #9]
 801447a:	b10b      	cbz	r3, 8014480 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 801447c:	3b01      	subs	r3, #1
 801447e:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8014480:	2101      	movs	r1, #1
 8014482:	4620      	mov	r0, r4
 8014484:	f7ff fecc 	bl	8014220 <lwip_netconn_do_close_internal>
 8014488:	e7d8      	b.n	801443c <poll_tcp+0x20>
 801448a:	bf00      	nop
 801448c:	0801cb0f 	.word	0x0801cb0f
 8014490:	0801c83a 	.word	0x0801c83a
 8014494:	0801c6e3 	.word	0x0801c6e3

08014498 <recv_tcp>:
{
 8014498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801449c:	4605      	mov	r5, r0
 801449e:	4616      	mov	r6, r2
 80144a0:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80144a2:	460f      	mov	r7, r1
 80144a4:	b929      	cbnz	r1, 80144b2 <recv_tcp+0x1a>
 80144a6:	4b28      	ldr	r3, [pc, #160]	; (8014548 <recv_tcp+0xb0>)
 80144a8:	4928      	ldr	r1, [pc, #160]	; (801454c <recv_tcp+0xb4>)
 80144aa:	4829      	ldr	r0, [pc, #164]	; (8014550 <recv_tcp+0xb8>)
 80144ac:	22f9      	movs	r2, #249	; 0xf9
 80144ae:	f007 fcc1 	bl	801be34 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80144b2:	bb9d      	cbnz	r5, 801451c <recv_tcp+0x84>
 80144b4:	4b24      	ldr	r3, [pc, #144]	; (8014548 <recv_tcp+0xb0>)
 80144b6:	4927      	ldr	r1, [pc, #156]	; (8014554 <recv_tcp+0xbc>)
 80144b8:	4825      	ldr	r0, [pc, #148]	; (8014550 <recv_tcp+0xb8>)
 80144ba:	22fa      	movs	r2, #250	; 0xfa
 80144bc:	f007 fcba 	bl	801be34 <iprintf>
    return ERR_VAL;
 80144c0:	f06f 0405 	mvn.w	r4, #5
}
 80144c4:	4620      	mov	r0, r4
 80144c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      tcp_recved(pcb, p->tot_len);
 80144ca:	4638      	mov	r0, r7
 80144cc:	8931      	ldrh	r1, [r6, #8]
 80144ce:	f003 f86f 	bl	80175b0 <tcp_recved>
      pbuf_free(p);
 80144d2:	4630      	mov	r0, r6
 80144d4:	f002 fc60 	bl	8016d98 <pbuf_free>
 80144d8:	e7f4      	b.n	80144c4 <recv_tcp+0x2c>
  if (err != ERR_OK) {
 80144da:	f1b8 0f00 	cmp.w	r8, #0
 80144de:	d009      	beq.n	80144f4 <recv_tcp+0x5c>
    NETCONN_SET_SAFE_ERR(conn, err);
 80144e0:	f006 fbd4 	bl	801ac8c <sys_arch_protect>
 80144e4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80144e8:	330c      	adds	r3, #12
 80144ea:	bfa8      	it	ge
 80144ec:	f885 8008 	strbge.w	r8, [r5, #8]
 80144f0:	f006 fbd8 	bl	801aca4 <sys_arch_unprotect>
  if (p != NULL) {
 80144f4:	b16e      	cbz	r6, 8014512 <recv_tcp+0x7a>
    len = p->tot_len;
 80144f6:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80144f8:	4631      	mov	r1, r6
 80144fa:	4648      	mov	r0, r9
 80144fc:	f006 fb0c 	bl	801ab18 <sys_mbox_trypost>
 8014500:	4604      	mov	r4, r0
 8014502:	b940      	cbnz	r0, 8014516 <recv_tcp+0x7e>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8014504:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014506:	b1eb      	cbz	r3, 8014544 <recv_tcp+0xac>
 8014508:	4601      	mov	r1, r0
 801450a:	463a      	mov	r2, r7
 801450c:	4628      	mov	r0, r5
 801450e:	4798      	blx	r3
 8014510:	e7d8      	b.n	80144c4 <recv_tcp+0x2c>
    len = 0;
 8014512:	4637      	mov	r7, r6
 8014514:	e7f0      	b.n	80144f8 <recv_tcp+0x60>
    return ERR_MEM;
 8014516:	f04f 34ff 	mov.w	r4, #4294967295
 801451a:	e7d3      	b.n	80144c4 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801451c:	686b      	ldr	r3, [r5, #4]
 801451e:	429f      	cmp	r7, r3
 8014520:	d006      	beq.n	8014530 <recv_tcp+0x98>
 8014522:	4b09      	ldr	r3, [pc, #36]	; (8014548 <recv_tcp+0xb0>)
 8014524:	490c      	ldr	r1, [pc, #48]	; (8014558 <recv_tcp+0xc0>)
 8014526:	480a      	ldr	r0, [pc, #40]	; (8014550 <recv_tcp+0xb8>)
 8014528:	f44f 7280 	mov.w	r2, #256	; 0x100
 801452c:	f007 fc82 	bl	801be34 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8014530:	f105 0910 	add.w	r9, r5, #16
 8014534:	4648      	mov	r0, r9
 8014536:	f006 fb2c 	bl	801ab92 <sys_mbox_valid>
 801453a:	4604      	mov	r4, r0
 801453c:	2800      	cmp	r0, #0
 801453e:	d1cc      	bne.n	80144da <recv_tcp+0x42>
    if (p != NULL) {
 8014540:	2e00      	cmp	r6, #0
 8014542:	d1c2      	bne.n	80144ca <recv_tcp+0x32>
    return ERR_OK;
 8014544:	2400      	movs	r4, #0
 8014546:	e7bd      	b.n	80144c4 <recv_tcp+0x2c>
 8014548:	0801cb0f 	.word	0x0801cb0f
 801454c:	0801cab0 	.word	0x0801cab0
 8014550:	0801c6e3 	.word	0x0801c6e3
 8014554:	0801cad2 	.word	0x0801cad2
 8014558:	0801caf1 	.word	0x0801caf1

0801455c <sent_tcp>:
{
 801455c:	b538      	push	{r3, r4, r5, lr}
 801455e:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014560:	4604      	mov	r4, r0
 8014562:	b970      	cbnz	r0, 8014582 <sent_tcp+0x26>
 8014564:	4b16      	ldr	r3, [pc, #88]	; (80145c0 <sent_tcp+0x64>)
 8014566:	4917      	ldr	r1, [pc, #92]	; (80145c4 <sent_tcp+0x68>)
 8014568:	4817      	ldr	r0, [pc, #92]	; (80145c8 <sent_tcp+0x6c>)
 801456a:	f240 1261 	movw	r2, #353	; 0x161
 801456e:	f007 fc61 	bl	801be34 <iprintf>
}
 8014572:	2000      	movs	r0, #0
 8014574:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8014576:	2904      	cmp	r1, #4
 8014578:	d108      	bne.n	801458c <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801457a:	2101      	movs	r1, #1
 801457c:	f7ff fe50 	bl	8014220 <lwip_netconn_do_close_internal>
 8014580:	e004      	b.n	801458c <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8014582:	7841      	ldrb	r1, [r0, #1]
 8014584:	2901      	cmp	r1, #1
 8014586:	d1f6      	bne.n	8014576 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8014588:	f7ff fd4a 	bl	8014020 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801458c:	6863      	ldr	r3, [r4, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d0ef      	beq.n	8014572 <sent_tcp+0x16>
 8014592:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8014596:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801459a:	4291      	cmp	r1, r2
 801459c:	d9e9      	bls.n	8014572 <sent_tcp+0x16>
 801459e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145a2:	2b04      	cmp	r3, #4
 80145a4:	d8e5      	bhi.n	8014572 <sent_tcp+0x16>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80145a6:	7f23      	ldrb	r3, [r4, #28]
 80145a8:	f023 0310 	bic.w	r3, r3, #16
 80145ac:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80145ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d0de      	beq.n	8014572 <sent_tcp+0x16>
 80145b4:	462a      	mov	r2, r5
 80145b6:	2102      	movs	r1, #2
 80145b8:	4620      	mov	r0, r4
 80145ba:	4798      	blx	r3
  return ERR_OK;
 80145bc:	e7d9      	b.n	8014572 <sent_tcp+0x16>
 80145be:	bf00      	nop
 80145c0:	0801cb0f 	.word	0x0801cb0f
 80145c4:	0801c83a 	.word	0x0801c83a
 80145c8:	0801c6e3 	.word	0x0801c6e3

080145cc <lwip_netconn_do_newconn>:
{
 80145cc:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 80145ce:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 80145d0:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 80145d2:	7103      	strb	r3, [r0, #4]
{
 80145d4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 80145d6:	6868      	ldr	r0, [r5, #4]
 80145d8:	bb28      	cbnz	r0, 8014626 <lwip_netconn_do_newconn+0x5a>
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 80145da:	782b      	ldrb	r3, [r5, #0]
 80145dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145e0:	2b10      	cmp	r3, #16
 80145e2:	d014      	beq.n	801460e <lwip_netconn_do_newconn+0x42>
 80145e4:	2b20      	cmp	r3, #32
 80145e6:	d11c      	bne.n	8014622 <lwip_netconn_do_newconn+0x56>
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80145e8:	f006 f9d4 	bl	801a994 <udp_new_ip_type>
 80145ec:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 80145ee:	6822      	ldr	r2, [r4, #0]
 80145f0:	6850      	ldr	r0, [r2, #4]
 80145f2:	b150      	cbz	r0, 801460a <lwip_netconn_do_newconn+0x3e>
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80145f4:	7813      	ldrb	r3, [r2, #0]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80145f6:	4914      	ldr	r1, [pc, #80]	; (8014648 <lwip_netconn_do_newconn+0x7c>)
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80145f8:	2b22      	cmp	r3, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80145fa:	bf04      	itt	eq
 80145fc:	2301      	moveq	r3, #1
 80145fe:	7403      	strbeq	r3, [r0, #16]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8014600:	f006 f99e 	bl	801a940 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8014604:	6823      	ldr	r3, [r4, #0]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	b96b      	cbnz	r3, 8014626 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 801460a:	23ff      	movs	r3, #255	; 0xff
 801460c:	e00a      	b.n	8014624 <lwip_netconn_do_newconn+0x58>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 801460e:	f003 fda7 	bl	8018160 <tcp_new_ip_type>
 8014612:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8014614:	6820      	ldr	r0, [r4, #0]
 8014616:	6843      	ldr	r3, [r0, #4]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d0f6      	beq.n	801460a <lwip_netconn_do_newconn+0x3e>
      setup_tcp(msg->conn);
 801461c:	f7ff fc4a 	bl	8013eb4 <setup_tcp>
 8014620:	e7f0      	b.n	8014604 <lwip_netconn_do_newconn+0x38>
    msg->err = ERR_VAL;
 8014622:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8014624:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8014626:	6823      	ldr	r3, [r4, #0]
 8014628:	b163      	cbz	r3, 8014644 <lwip_netconn_do_newconn+0x78>
 801462a:	f006 fb2f 	bl	801ac8c <sys_arch_protect>
 801462e:	6823      	ldr	r3, [r4, #0]
 8014630:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014634:	320c      	adds	r2, #12
 8014636:	bfa4      	itt	ge
 8014638:	7922      	ldrbge	r2, [r4, #4]
 801463a:	721a      	strbge	r2, [r3, #8]
}
 801463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 8014640:	f006 bb30 	b.w	801aca4 <sys_arch_unprotect>
 8014644:	bd38      	pop	{r3, r4, r5, pc}
 8014646:	bf00      	nop
 8014648:	08013e05 	.word	0x08013e05

0801464c <netconn_alloc>:
{
 801464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801464e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8014650:	2007      	movs	r0, #7
{
 8014652:	460f      	mov	r7, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8014654:	f002 f9fe 	bl	8016a54 <memp_malloc>
  if (conn == NULL) {
 8014658:	4604      	mov	r4, r0
 801465a:	b3a8      	cbz	r0, 80146c8 <netconn_alloc+0x7c>
  conn->type = t;
 801465c:	7005      	strb	r5, [r0, #0]
  switch(NETCONNTYPE_GROUP(t)) {
 801465e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->last_err = ERR_OK;
 8014662:	2300      	movs	r3, #0
  switch(NETCONNTYPE_GROUP(t)) {
 8014664:	2d10      	cmp	r5, #16
  conn->last_err = ERR_OK;
 8014666:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8014668:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 801466a:	d00e      	beq.n	801468a <netconn_alloc+0x3e>
 801466c:	2d20      	cmp	r5, #32
 801466e:	d00c      	beq.n	801468a <netconn_alloc+0x3e>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8014670:	4b16      	ldr	r3, [pc, #88]	; (80146cc <netconn_alloc+0x80>)
 8014672:	4917      	ldr	r1, [pc, #92]	; (80146d0 <netconn_alloc+0x84>)
 8014674:	4817      	ldr	r0, [pc, #92]	; (80146d4 <netconn_alloc+0x88>)
 8014676:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801467a:	f007 fbdb 	bl	801be34 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 801467e:	4621      	mov	r1, r4
 8014680:	2007      	movs	r0, #7
 8014682:	f002 fa03 	bl	8016a8c <memp_free>
  return NULL;
 8014686:	2400      	movs	r4, #0
 8014688:	e01e      	b.n	80146c8 <netconn_alloc+0x7c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801468a:	f104 0610 	add.w	r6, r4, #16
 801468e:	2106      	movs	r1, #6
 8014690:	4630      	mov	r0, r6
 8014692:	f006 fa1b 	bl	801aacc <sys_mbox_new>
 8014696:	4601      	mov	r1, r0
 8014698:	2800      	cmp	r0, #0
 801469a:	d1f0      	bne.n	801467e <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801469c:	f104 000c 	add.w	r0, r4, #12
 80146a0:	f006 fa7f 	bl	801aba2 <sys_sem_new>
 80146a4:	4605      	mov	r5, r0
 80146a6:	b118      	cbz	r0, 80146b0 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 80146a8:	4630      	mov	r0, r6
 80146aa:	f006 fa1f 	bl	801aaec <sys_mbox_free>
    goto free_and_return;
 80146ae:	e7e6      	b.n	801467e <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80146b0:	f104 0014 	add.w	r0, r4, #20
 80146b4:	f006 fa72 	bl	801ab9c <sys_mbox_set_invalid>
  conn->socket       = -1;
 80146b8:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 80146bc:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 80146be:	61a3      	str	r3, [r4, #24]
  conn->callback     = callback;
 80146c0:	62a7      	str	r7, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 80146c2:	6265      	str	r5, [r4, #36]	; 0x24
  conn->write_offset = 0;
 80146c4:	6225      	str	r5, [r4, #32]
  conn->flags = 0;
 80146c6:	7725      	strb	r5, [r4, #28]
}
 80146c8:	4620      	mov	r0, r4
 80146ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146cc:	0801cb0f 	.word	0x0801cb0f
 80146d0:	0801c9e6 	.word	0x0801c9e6
 80146d4:	0801c6e3 	.word	0x0801c6e3

080146d8 <netconn_free>:
{
 80146d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80146da:	6843      	ldr	r3, [r0, #4]
{
 80146dc:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80146de:	b133      	cbz	r3, 80146ee <netconn_free+0x16>
 80146e0:	4b16      	ldr	r3, [pc, #88]	; (801473c <netconn_free+0x64>)
 80146e2:	4917      	ldr	r1, [pc, #92]	; (8014740 <netconn_free+0x68>)
 80146e4:	4817      	ldr	r0, [pc, #92]	; (8014744 <netconn_free+0x6c>)
 80146e6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80146ea:	f007 fba3 	bl	801be34 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80146ee:	f104 0010 	add.w	r0, r4, #16
 80146f2:	f006 fa4e 	bl	801ab92 <sys_mbox_valid>
 80146f6:	b130      	cbz	r0, 8014706 <netconn_free+0x2e>
 80146f8:	4b10      	ldr	r3, [pc, #64]	; (801473c <netconn_free+0x64>)
 80146fa:	4913      	ldr	r1, [pc, #76]	; (8014748 <netconn_free+0x70>)
 80146fc:	4811      	ldr	r0, [pc, #68]	; (8014744 <netconn_free+0x6c>)
 80146fe:	f240 22e2 	movw	r2, #738	; 0x2e2
 8014702:	f007 fb97 	bl	801be34 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8014706:	f104 0014 	add.w	r0, r4, #20
 801470a:	f006 fa42 	bl	801ab92 <sys_mbox_valid>
 801470e:	b130      	cbz	r0, 801471e <netconn_free+0x46>
 8014710:	4b0a      	ldr	r3, [pc, #40]	; (801473c <netconn_free+0x64>)
 8014712:	490e      	ldr	r1, [pc, #56]	; (801474c <netconn_free+0x74>)
 8014714:	480b      	ldr	r0, [pc, #44]	; (8014744 <netconn_free+0x6c>)
 8014716:	f240 22e5 	movw	r2, #741	; 0x2e5
 801471a:	f007 fb8b 	bl	801be34 <iprintf>
  sys_sem_free(&conn->op_completed);
 801471e:	f104 050c 	add.w	r5, r4, #12
 8014722:	4628      	mov	r0, r5
 8014724:	f006 fa73 	bl	801ac0e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8014728:	4628      	mov	r0, r5
 801472a:	f006 fa78 	bl	801ac1e <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 801472e:	4621      	mov	r1, r4
 8014730:	2007      	movs	r0, #7
}
 8014732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8014736:	f002 b9a9 	b.w	8016a8c <memp_free>
 801473a:	bf00      	nop
 801473c:	0801cb0f 	.word	0x0801cb0f
 8014740:	0801ca0c 	.word	0x0801ca0c
 8014744:	0801c6e3 	.word	0x0801c6e3
 8014748:	0801ca3a 	.word	0x0801ca3a
 801474c:	0801ca74 	.word	0x0801ca74

08014750 <netconn_drain>:
{
 8014750:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8014752:	f100 0510 	add.w	r5, r0, #16
{
 8014756:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8014758:	4628      	mov	r0, r5
 801475a:	f006 fa1a 	bl	801ab92 <sys_mbox_valid>
 801475e:	b9b0      	cbnz	r0, 801478e <netconn_drain+0x3e>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8014760:	3414      	adds	r4, #20
 8014762:	4620      	mov	r0, r4
 8014764:	f006 fa15 	bl	801ab92 <sys_mbox_valid>
 8014768:	2800      	cmp	r0, #0
 801476a:	d13d      	bne.n	80147e8 <netconn_drain+0x98>
}
 801476c:	b002      	add	sp, #8
 801476e:	bd70      	pop	{r4, r5, r6, pc}
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8014770:	7823      	ldrb	r3, [r4, #0]
 8014772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014776:	2b10      	cmp	r3, #16
 8014778:	d116      	bne.n	80147a8 <netconn_drain+0x58>
        if (mem != NULL) {
 801477a:	9e01      	ldr	r6, [sp, #4]
 801477c:	b13e      	cbz	r6, 801478e <netconn_drain+0x3e>
          if (conn->pcb.tcp != NULL) {
 801477e:	6860      	ldr	r0, [r4, #4]
 8014780:	b110      	cbz	r0, 8014788 <netconn_drain+0x38>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8014782:	8931      	ldrh	r1, [r6, #8]
 8014784:	f002 ff14 	bl	80175b0 <tcp_recved>
          pbuf_free(p);
 8014788:	4630      	mov	r0, r6
 801478a:	f002 fb05 	bl	8016d98 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801478e:	a901      	add	r1, sp, #4
 8014790:	4628      	mov	r0, r5
 8014792:	f006 f9ed 	bl	801ab70 <sys_arch_mbox_tryfetch>
 8014796:	3001      	adds	r0, #1
 8014798:	d1ea      	bne.n	8014770 <netconn_drain+0x20>
    sys_mbox_free(&conn->recvmbox);
 801479a:	4628      	mov	r0, r5
 801479c:	f006 f9a6 	bl	801aaec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80147a0:	4628      	mov	r0, r5
 80147a2:	f006 f9fb 	bl	801ab9c <sys_mbox_set_invalid>
 80147a6:	e7db      	b.n	8014760 <netconn_drain+0x10>
        netbuf_delete((struct netbuf *)mem);
 80147a8:	9801      	ldr	r0, [sp, #4]
 80147aa:	f000 facf 	bl	8014d4c <netbuf_delete>
 80147ae:	e7ee      	b.n	801478e <netconn_drain+0x3e>
      if (mem != &netconn_aborted) {
 80147b0:	9d01      	ldr	r5, [sp, #4]
 80147b2:	42b5      	cmp	r5, r6
 80147b4:	d00b      	beq.n	80147ce <netconn_drain+0x7e>
        netconn_drain(newconn);
 80147b6:	4628      	mov	r0, r5
 80147b8:	f7ff ffca 	bl	8014750 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80147bc:	6868      	ldr	r0, [r5, #4]
 80147be:	b118      	cbz	r0, 80147c8 <netconn_drain+0x78>
          tcp_abort(newconn->pcb.tcp);
 80147c0:	f003 fbfe 	bl	8017fc0 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80147c4:	2300      	movs	r3, #0
 80147c6:	606b      	str	r3, [r5, #4]
        netconn_free(newconn);
 80147c8:	4628      	mov	r0, r5
 80147ca:	f7ff ff85 	bl	80146d8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80147ce:	a901      	add	r1, sp, #4
 80147d0:	4620      	mov	r0, r4
 80147d2:	f006 f9cd 	bl	801ab70 <sys_arch_mbox_tryfetch>
 80147d6:	3001      	adds	r0, #1
 80147d8:	d1ea      	bne.n	80147b0 <netconn_drain+0x60>
    sys_mbox_free(&conn->acceptmbox);
 80147da:	4620      	mov	r0, r4
 80147dc:	f006 f986 	bl	801aaec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80147e0:	4620      	mov	r0, r4
 80147e2:	f006 f9db 	bl	801ab9c <sys_mbox_set_invalid>
}
 80147e6:	e7c1      	b.n	801476c <netconn_drain+0x1c>
      if (mem != &netconn_aborted) {
 80147e8:	4e00      	ldr	r6, [pc, #0]	; (80147ec <netconn_drain+0x9c>)
 80147ea:	e7f0      	b.n	80147ce <netconn_drain+0x7e>
 80147ec:	200044b8 	.word	0x200044b8

080147f0 <accept_function>:
{
 80147f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f4:	460f      	mov	r7, r1
 80147f6:	4690      	mov	r8, r2
  if (conn == NULL) {
 80147f8:	4605      	mov	r5, r0
 80147fa:	b920      	cbnz	r0, 8014806 <accept_function+0x16>
    return ERR_VAL;
 80147fc:	f06f 0405 	mvn.w	r4, #5
}
 8014800:	4620      	mov	r0, r4
 8014802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8014806:	f100 0414 	add.w	r4, r0, #20
 801480a:	4620      	mov	r0, r4
 801480c:	f006 f9c1 	bl	801ab92 <sys_mbox_valid>
 8014810:	2800      	cmp	r0, #0
 8014812:	d0f3      	beq.n	80147fc <accept_function+0xc>
  if (newpcb == NULL) {
 8014814:	b96f      	cbnz	r7, 8014832 <accept_function+0x42>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8014816:	492c      	ldr	r1, [pc, #176]	; (80148c8 <accept_function+0xd8>)
 8014818:	4620      	mov	r0, r4
 801481a:	f006 f97d 	bl	801ab18 <sys_mbox_trypost>
 801481e:	4602      	mov	r2, r0
 8014820:	2800      	cmp	r0, #0
 8014822:	d1eb      	bne.n	80147fc <accept_function+0xc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014824:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014826:	2b00      	cmp	r3, #0
 8014828:	d0e8      	beq.n	80147fc <accept_function+0xc>
 801482a:	4601      	mov	r1, r0
 801482c:	4628      	mov	r0, r5
 801482e:	4798      	blx	r3
 8014830:	e7e4      	b.n	80147fc <accept_function+0xc>
  newconn = netconn_alloc(conn->type, conn->callback);
 8014832:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8014834:	7828      	ldrb	r0, [r5, #0]
 8014836:	f7ff ff09 	bl	801464c <netconn_alloc>
  if (newconn == NULL) {
 801483a:	4606      	mov	r6, r0
 801483c:	b968      	cbnz	r0, 801485a <accept_function+0x6a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 801483e:	4922      	ldr	r1, [pc, #136]	; (80148c8 <accept_function+0xd8>)
 8014840:	4620      	mov	r0, r4
 8014842:	f006 f969 	bl	801ab18 <sys_mbox_trypost>
 8014846:	4602      	mov	r2, r0
 8014848:	b920      	cbnz	r0, 8014854 <accept_function+0x64>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801484a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801484c:	b113      	cbz	r3, 8014854 <accept_function+0x64>
 801484e:	4601      	mov	r1, r0
 8014850:	4628      	mov	r0, r5
 8014852:	4798      	blx	r3
    return ERR_MEM;
 8014854:	f04f 34ff 	mov.w	r4, #4294967295
 8014858:	e7d2      	b.n	8014800 <accept_function+0x10>
  newconn->pcb.tcp = newpcb;
 801485a:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 801485c:	f7ff fb2a 	bl	8013eb4 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8014860:	4620      	mov	r0, r4
  newconn->last_err = err;
 8014862:	f886 8008 	strb.w	r8, [r6, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8014866:	4631      	mov	r1, r6
 8014868:	f006 f956 	bl	801ab18 <sys_mbox_trypost>
 801486c:	4604      	mov	r4, r0
 801486e:	b318      	cbz	r0, 80148b8 <accept_function+0xc8>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8014870:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8014872:	2100      	movs	r1, #0
 8014874:	4620      	mov	r0, r4
 8014876:	f002 ff05 	bl	8017684 <tcp_arg>
    tcp_recv(pcb, NULL);
 801487a:	4620      	mov	r0, r4
 801487c:	2100      	movs	r1, #0
 801487e:	f002 ff05 	bl	801768c <tcp_recv>
    tcp_sent(pcb, NULL);
 8014882:	4620      	mov	r0, r4
 8014884:	2100      	movs	r1, #0
 8014886:	f002 ff19 	bl	80176bc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 801488a:	2200      	movs	r2, #0
 801488c:	4611      	mov	r1, r2
 801488e:	4620      	mov	r0, r4
 8014890:	f002 ff48 	bl	8017724 <tcp_poll>
    tcp_err(pcb, NULL);
 8014894:	2100      	movs	r1, #0
 8014896:	4620      	mov	r0, r4
 8014898:	f002 ff26 	bl	80176e8 <tcp_err>
    sys_mbox_free(&newconn->recvmbox);
 801489c:	f106 0410 	add.w	r4, r6, #16
    newconn->pcb.tcp = NULL;
 80148a0:	2300      	movs	r3, #0
 80148a2:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 80148a4:	4620      	mov	r0, r4
 80148a6:	f006 f921 	bl	801aaec <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80148aa:	4620      	mov	r0, r4
 80148ac:	f006 f976 	bl	801ab9c <sys_mbox_set_invalid>
    netconn_free(newconn);
 80148b0:	4630      	mov	r0, r6
 80148b2:	f7ff ff11 	bl	80146d8 <netconn_free>
 80148b6:	e7cd      	b.n	8014854 <accept_function+0x64>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80148b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d0a0      	beq.n	8014800 <accept_function+0x10>
 80148be:	4602      	mov	r2, r0
 80148c0:	4601      	mov	r1, r0
 80148c2:	4628      	mov	r0, r5
 80148c4:	4798      	blx	r3
 80148c6:	e79b      	b.n	8014800 <accept_function+0x10>
 80148c8:	200044b8 	.word	0x200044b8

080148cc <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 80148cc:	6803      	ldr	r3, [r0, #0]
{
 80148ce:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 80148d0:	785d      	ldrb	r5, [r3, #1]
{
 80148d2:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80148d4:	b16d      	cbz	r5, 80148f2 <lwip_netconn_do_delconn+0x26>
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80148dc:	2b10      	cmp	r3, #16
 80148de:	d006      	beq.n	80148ee <lwip_netconn_do_delconn+0x22>
 80148e0:	4b40      	ldr	r3, [pc, #256]	; (80149e4 <lwip_netconn_do_delconn+0x118>)
 80148e2:	4941      	ldr	r1, [pc, #260]	; (80149e8 <lwip_netconn_do_delconn+0x11c>)
 80148e4:	4841      	ldr	r0, [pc, #260]	; (80149ec <lwip_netconn_do_delconn+0x120>)
 80148e6:	f240 4201 	movw	r2, #1025	; 0x401
 80148ea:	f007 faa3 	bl	801be34 <iprintf>
  if (((state != NETCONN_NONE) &&
 80148ee:	2d02      	cmp	r5, #2
 80148f0:	d121      	bne.n	8014936 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 80148f2:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 80148f4:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 80148f6:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 80148f8:	f7ff ff2a 	bl	8014750 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80148fc:	6823      	ldr	r3, [r4, #0]
 80148fe:	6858      	ldr	r0, [r3, #4]
 8014900:	b160      	cbz	r0, 801491c <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014902:	781a      	ldrb	r2, [r3, #0]
 8014904:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014908:	2a10      	cmp	r2, #16
 801490a:	d032      	beq.n	8014972 <lwip_netconn_do_delconn+0xa6>
 801490c:	2a20      	cmp	r2, #32
 801490e:	d102      	bne.n	8014916 <lwip_netconn_do_delconn+0x4a>
        msg->conn->pcb.udp->recv_arg = NULL;
 8014910:	61c5      	str	r5, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
 8014912:	f006 f819 	bl	801a948 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	2200      	movs	r2, #0
 801491a:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801491c:	6820      	ldr	r0, [r4, #0]
 801491e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014920:	b113      	cbz	r3, 8014928 <lwip_netconn_do_delconn+0x5c>
 8014922:	2200      	movs	r2, #0
 8014924:	4611      	mov	r1, r2
 8014926:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8014928:	6820      	ldr	r0, [r4, #0]
 801492a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801492c:	b15b      	cbz	r3, 8014946 <lwip_netconn_do_delconn+0x7a>
 801492e:	2200      	movs	r2, #0
 8014930:	2102      	movs	r1, #2
 8014932:	4798      	blx	r3
 8014934:	e007      	b.n	8014946 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8014936:	2d03      	cmp	r5, #3
 8014938:	d103      	bne.n	8014942 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801493a:	6823      	ldr	r3, [r4, #0]
 801493c:	7f1b      	ldrb	r3, [r3, #28]
 801493e:	075b      	lsls	r3, r3, #29
 8014940:	d4d7      	bmi.n	80148f2 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8014942:	23fb      	movs	r3, #251	; 0xfb
 8014944:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8014946:	6820      	ldr	r0, [r4, #0]
 8014948:	300c      	adds	r0, #12
 801494a:	f006 f963 	bl	801ac14 <sys_sem_valid>
 801494e:	2800      	cmp	r0, #0
 8014950:	d046      	beq.n	80149e0 <lwip_netconn_do_delconn+0x114>
    TCPIP_APIMSG_ACK(msg);
 8014952:	6823      	ldr	r3, [r4, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d043      	beq.n	80149e0 <lwip_netconn_do_delconn+0x114>
 8014958:	f006 f998 	bl	801ac8c <sys_arch_protect>
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014962:	320c      	adds	r2, #12
 8014964:	bfa4      	itt	ge
 8014966:	7922      	ldrbge	r2, [r4, #4]
 8014968:	721a      	strbge	r2, [r3, #8]
}
 801496a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TCPIP_APIMSG_ACK(msg);
 801496e:	f006 b999 	b.w	801aca4 <sys_arch_unprotect>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8014972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014974:	b90a      	cbnz	r2, 801497a <lwip_netconn_do_delconn+0xae>
 8014976:	6a1b      	ldr	r3, [r3, #32]
 8014978:	b133      	cbz	r3, 8014988 <lwip_netconn_do_delconn+0xbc>
 801497a:	4b1a      	ldr	r3, [pc, #104]	; (80149e4 <lwip_netconn_do_delconn+0x118>)
 801497c:	491c      	ldr	r1, [pc, #112]	; (80149f0 <lwip_netconn_do_delconn+0x124>)
 801497e:	481b      	ldr	r0, [pc, #108]	; (80149ec <lwip_netconn_do_delconn+0x120>)
 8014980:	f240 4235 	movw	r2, #1077	; 0x435
 8014984:	f007 fa56 	bl	801be34 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8014988:	6820      	ldr	r0, [r4, #0]
 801498a:	2304      	movs	r3, #4
 801498c:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801498e:	2303      	movs	r3, #3
 8014990:	7223      	strb	r3, [r4, #8]
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8014992:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8014994:	6244      	str	r4, [r0, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8014996:	f7ff fc43 	bl	8014220 <lwip_netconn_do_close_internal>
 801499a:	b308      	cbz	r0, 80149e0 <lwip_netconn_do_delconn+0x114>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801499c:	6823      	ldr	r3, [r4, #0]
 801499e:	785b      	ldrb	r3, [r3, #1]
 80149a0:	2b04      	cmp	r3, #4
 80149a2:	d006      	beq.n	80149b2 <lwip_netconn_do_delconn+0xe6>
 80149a4:	4b0f      	ldr	r3, [pc, #60]	; (80149e4 <lwip_netconn_do_delconn+0x118>)
 80149a6:	4913      	ldr	r1, [pc, #76]	; (80149f4 <lwip_netconn_do_delconn+0x128>)
 80149a8:	4810      	ldr	r0, [pc, #64]	; (80149ec <lwip_netconn_do_delconn+0x120>)
 80149aa:	f240 423b 	movw	r2, #1083	; 0x43b
 80149ae:	f007 fa41 	bl	801be34 <iprintf>
          UNLOCK_TCPIP_CORE();
 80149b2:	4811      	ldr	r0, [pc, #68]	; (80149f8 <lwip_netconn_do_delconn+0x12c>)
 80149b4:	f006 f956 	bl	801ac64 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80149b8:	6820      	ldr	r0, [r4, #0]
 80149ba:	2100      	movs	r1, #0
 80149bc:	300c      	adds	r0, #12
 80149be:	f006 f908 	bl	801abd2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80149c2:	480d      	ldr	r0, [pc, #52]	; (80149f8 <lwip_netconn_do_delconn+0x12c>)
 80149c4:	f006 f949 	bl	801ac5a <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80149c8:	6823      	ldr	r3, [r4, #0]
 80149ca:	785b      	ldrb	r3, [r3, #1]
 80149cc:	b143      	cbz	r3, 80149e0 <lwip_netconn_do_delconn+0x114>
 80149ce:	4b05      	ldr	r3, [pc, #20]	; (80149e4 <lwip_netconn_do_delconn+0x118>)
 80149d0:	4908      	ldr	r1, [pc, #32]	; (80149f4 <lwip_netconn_do_delconn+0x128>)
 80149d2:	4806      	ldr	r0, [pc, #24]	; (80149ec <lwip_netconn_do_delconn+0x120>)
 80149d4:	f240 423f 	movw	r2, #1087	; 0x43f
}
 80149d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80149dc:	f007 ba2a 	b.w	801be34 <iprintf>
 80149e0:	bd70      	pop	{r4, r5, r6, pc}
 80149e2:	bf00      	nop
 80149e4:	0801cb0f 	.word	0x0801cb0f
 80149e8:	0801c90c 	.word	0x0801c90c
 80149ec:	0801c6e3 	.word	0x0801c6e3
 80149f0:	0801c920 	.word	0x0801c920
 80149f4:	0801c93b 	.word	0x0801c93b
 80149f8:	200044bc 	.word	0x200044bc

080149fc <lwip_netconn_do_bind>:
{
 80149fc:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80149fe:	6803      	ldr	r3, [r0, #0]
 8014a00:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014a04:	f112 0f0c 	cmn.w	r2, #12
{
 8014a08:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8014a0a:	da0f      	bge.n	8014a2c <lwip_netconn_do_bind+0x30>
    msg->err = msg->conn->last_err;
 8014a0c:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8014a0e:	6823      	ldr	r3, [r4, #0]
 8014a10:	b31b      	cbz	r3, 8014a5a <lwip_netconn_do_bind+0x5e>
 8014a12:	f006 f93b 	bl	801ac8c <sys_arch_protect>
 8014a16:	6823      	ldr	r3, [r4, #0]
 8014a18:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014a1c:	320c      	adds	r2, #12
 8014a1e:	bfa4      	itt	ge
 8014a20:	7922      	ldrbge	r2, [r4, #4]
 8014a22:	721a      	strbge	r2, [r3, #8]
}
 8014a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8014a28:	f006 b93c 	b.w	801aca4 <sys_arch_unprotect>
    msg->err = ERR_VAL;
 8014a2c:	22fa      	movs	r2, #250	; 0xfa
 8014a2e:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8014a30:	6858      	ldr	r0, [r3, #4]
 8014a32:	2800      	cmp	r0, #0
 8014a34:	d0eb      	beq.n	8014a0e <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a3c:	2b10      	cmp	r3, #16
 8014a3e:	d007      	beq.n	8014a50 <lwip_netconn_do_bind+0x54>
 8014a40:	2b20      	cmp	r3, #32
 8014a42:	d1e4      	bne.n	8014a0e <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014a44:	89a2      	ldrh	r2, [r4, #12]
 8014a46:	68a1      	ldr	r1, [r4, #8]
 8014a48:	f005 ff26 	bl	801a898 <udp_bind>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014a4c:	7120      	strb	r0, [r4, #4]
        break;
 8014a4e:	e7de      	b.n	8014a0e <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014a50:	89a2      	ldrh	r2, [r4, #12]
 8014a52:	68a1      	ldr	r1, [r4, #8]
 8014a54:	f002 fcde 	bl	8017414 <tcp_bind>
 8014a58:	e7f8      	b.n	8014a4c <lwip_netconn_do_bind+0x50>
 8014a5a:	bd10      	pop	{r4, pc}

08014a5c <lwip_netconn_do_listen>:
{
 8014a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8014a5e:	6803      	ldr	r3, [r0, #0]
 8014a60:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014a64:	f112 0f0c 	cmn.w	r2, #12
{
 8014a68:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8014a6a:	da0f      	bge.n	8014a8c <lwip_netconn_do_listen+0x30>
    msg->err = msg->conn->last_err;
 8014a6c:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8014a6e:	6823      	ldr	r3, [r4, #0]
 8014a70:	b153      	cbz	r3, 8014a88 <lwip_netconn_do_listen+0x2c>
 8014a72:	f006 f90b 	bl	801ac8c <sys_arch_protect>
 8014a76:	6823      	ldr	r3, [r4, #0]
 8014a78:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014a7c:	320c      	adds	r2, #12
 8014a7e:	bfa4      	itt	ge
 8014a80:	7922      	ldrbge	r2, [r4, #4]
 8014a82:	721a      	strbge	r2, [r3, #8]
 8014a84:	f006 f90e 	bl	801aca4 <sys_arch_unprotect>
}
 8014a88:	b003      	add	sp, #12
 8014a8a:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8014a8c:	22f5      	movs	r2, #245	; 0xf5
 8014a8e:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8014a90:	6858      	ldr	r0, [r3, #4]
 8014a92:	2800      	cmp	r0, #0
 8014a94:	d0eb      	beq.n	8014a6e <lwip_netconn_do_listen+0x12>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014a96:	781a      	ldrb	r2, [r3, #0]
 8014a98:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014a9c:	2a10      	cmp	r2, #16
 8014a9e:	d146      	bne.n	8014b2e <lwip_netconn_do_listen+0xd2>
        if (msg->conn->state == NETCONN_NONE) {
 8014aa0:	785b      	ldrb	r3, [r3, #1]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d13f      	bne.n	8014b26 <lwip_netconn_do_listen+0xca>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8014aa6:	7d03      	ldrb	r3, [r0, #20]
 8014aa8:	b113      	cbz	r3, 8014ab0 <lwip_netconn_do_listen+0x54>
            msg->err = ERR_VAL;
 8014aaa:	23fa      	movs	r3, #250	; 0xfa
        msg->err = ERR_ARG;
 8014aac:	7123      	strb	r3, [r4, #4]
 8014aae:	e7de      	b.n	8014a6e <lwip_netconn_do_listen+0x12>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8014ab0:	f10d 0207 	add.w	r2, sp, #7
 8014ab4:	21ff      	movs	r1, #255	; 0xff
 8014ab6:	f002 fcf7 	bl	80174a8 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8014aba:	4605      	mov	r5, r0
 8014abc:	b910      	cbnz	r0, 8014ac4 <lwip_netconn_do_listen+0x68>
              msg->err = err;
 8014abe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014ac2:	e7f3      	b.n	8014aac <lwip_netconn_do_listen+0x50>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8014ac4:	6820      	ldr	r0, [r4, #0]
 8014ac6:	3010      	adds	r0, #16
 8014ac8:	f006 f863 	bl	801ab92 <sys_mbox_valid>
 8014acc:	b138      	cbz	r0, 8014ade <lwip_netconn_do_listen+0x82>
                sys_mbox_free(&msg->conn->recvmbox);
 8014ace:	6820      	ldr	r0, [r4, #0]
 8014ad0:	3010      	adds	r0, #16
 8014ad2:	f006 f80b 	bl	801aaec <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8014ad6:	6820      	ldr	r0, [r4, #0]
 8014ad8:	3010      	adds	r0, #16
 8014ada:	f006 f85f 	bl	801ab9c <sys_mbox_set_invalid>
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8014ade:	6820      	ldr	r0, [r4, #0]
              msg->err = ERR_OK;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8014ae4:	3014      	adds	r0, #20
 8014ae6:	f006 f854 	bl	801ab92 <sys_mbox_valid>
 8014aea:	b928      	cbnz	r0, 8014af8 <lwip_netconn_do_listen+0x9c>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8014aec:	6820      	ldr	r0, [r4, #0]
 8014aee:	2106      	movs	r1, #6
 8014af0:	3014      	adds	r0, #20
 8014af2:	f005 ffeb 	bl	801aacc <sys_mbox_new>
 8014af6:	7120      	strb	r0, [r4, #4]
              if (msg->err == ERR_OK) {
 8014af8:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8014afc:	b963      	cbnz	r3, 8014b18 <lwip_netconn_do_listen+0xbc>
                msg->conn->state = NETCONN_LISTEN;
 8014afe:	6821      	ldr	r1, [r4, #0]
 8014b00:	2302      	movs	r3, #2
 8014b02:	704b      	strb	r3, [r1, #1]
                msg->conn->pcb.tcp = lpcb;
 8014b04:	604d      	str	r5, [r1, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8014b06:	4628      	mov	r0, r5
 8014b08:	f002 fdbc 	bl	8017684 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8014b0c:	6823      	ldr	r3, [r4, #0]
 8014b0e:	4909      	ldr	r1, [pc, #36]	; (8014b34 <lwip_netconn_do_listen+0xd8>)
 8014b10:	6858      	ldr	r0, [r3, #4]
 8014b12:	f002 fe01 	bl	8017718 <tcp_accept>
 8014b16:	e7aa      	b.n	8014a6e <lwip_netconn_do_listen+0x12>
                tcp_close(lpcb);
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f003 f913 	bl	8017d44 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8014b1e:	6823      	ldr	r3, [r4, #0]
 8014b20:	2200      	movs	r2, #0
 8014b22:	605a      	str	r2, [r3, #4]
 8014b24:	e7a3      	b.n	8014a6e <lwip_netconn_do_listen+0x12>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8014b26:	2b02      	cmp	r3, #2
 8014b28:	d1a1      	bne.n	8014a6e <lwip_netconn_do_listen+0x12>
          msg->err = ERR_OK;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	e7be      	b.n	8014aac <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8014b2e:	23f0      	movs	r3, #240	; 0xf0
 8014b30:	e7bc      	b.n	8014aac <lwip_netconn_do_listen+0x50>
 8014b32:	bf00      	nop
 8014b34:	080147f1 	.word	0x080147f1

08014b38 <lwip_netconn_do_recv>:
{
 8014b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8014b3e:	6803      	ldr	r3, [r0, #0]
 8014b40:	685a      	ldr	r2, [r3, #4]
{
 8014b42:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8014b44:	b912      	cbnz	r2, 8014b4c <lwip_netconn_do_recv+0x14>
  TCPIP_APIMSG_ACK(msg);
 8014b46:	6823      	ldr	r3, [r4, #0]
 8014b48:	b9a3      	cbnz	r3, 8014b74 <lwip_netconn_do_recv+0x3c>
 8014b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b52:	2b10      	cmp	r3, #16
 8014b54:	d1f7      	bne.n	8014b46 <lwip_netconn_do_recv+0xe>
      u32_t remaining = msg->msg.r.len;
 8014b56:	6885      	ldr	r5, [r0, #8]
 8014b58:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014b5c:	42bd      	cmp	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8014b5e:	6823      	ldr	r3, [r4, #0]
 8014b60:	462e      	mov	r6, r5
 8014b62:	bf28      	it	cs
 8014b64:	463e      	movcs	r6, r7
 8014b66:	b2b1      	uxth	r1, r6
 8014b68:	6858      	ldr	r0, [r3, #4]
 8014b6a:	f002 fd21 	bl	80175b0 <tcp_recved>
      } while (remaining != 0);
 8014b6e:	1bad      	subs	r5, r5, r6
 8014b70:	d1f4      	bne.n	8014b5c <lwip_netconn_do_recv+0x24>
 8014b72:	e7e8      	b.n	8014b46 <lwip_netconn_do_recv+0xe>
  TCPIP_APIMSG_ACK(msg);
 8014b74:	f006 f88a 	bl	801ac8c <sys_arch_protect>
 8014b78:	6823      	ldr	r3, [r4, #0]
 8014b7a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014b7e:	320c      	adds	r2, #12
 8014b80:	bfa4      	itt	ge
 8014b82:	7922      	ldrbge	r2, [r4, #4]
 8014b84:	721a      	strbge	r2, [r3, #8]
}
 8014b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TCPIP_APIMSG_ACK(msg);
 8014b8a:	f006 b88b 	b.w	801aca4 <sys_arch_unprotect>
	...

08014b90 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8014b90:	b510      	push	{r4, lr}
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8014b92:	6803      	ldr	r3, [r0, #0]
 8014b94:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014b98:	f112 0f0c 	cmn.w	r2, #12
{
 8014b9c:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8014b9e:	da0d      	bge.n	8014bbc <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 8014ba0:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8014ba2:	f006 f873 	bl	801ac8c <sys_arch_protect>
 8014ba6:	6823      	ldr	r3, [r4, #0]
 8014ba8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014bac:	320c      	adds	r2, #12
 8014bae:	bfa4      	itt	ge
 8014bb0:	7922      	ldrbge	r2, [r4, #4]
 8014bb2:	721a      	strbge	r2, [r3, #8]
}
 8014bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8014bb8:	f006 b874 	b.w	801aca4 <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014bbc:	781a      	ldrb	r2, [r3, #0]
 8014bbe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014bc2:	2a10      	cmp	r2, #16
 8014bc4:	d149      	bne.n	8014c5a <lwip_netconn_do_write+0xca>
      if (msg->conn->state != NETCONN_NONE) {
 8014bc6:	785a      	ldrb	r2, [r3, #1]
 8014bc8:	b112      	cbz	r2, 8014bd0 <lwip_netconn_do_write+0x40>
        msg->err = ERR_INPROGRESS;
 8014bca:	23fb      	movs	r3, #251	; 0xfb
      msg->err = ERR_VAL;
 8014bcc:	7123      	strb	r3, [r4, #4]
 8014bce:	e7e8      	b.n	8014ba2 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8014bd0:	685a      	ldr	r2, [r3, #4]
 8014bd2:	2a00      	cmp	r2, #0
 8014bd4:	d03f      	beq.n	8014c56 <lwip_netconn_do_write+0xc6>
        msg->conn->state = NETCONN_WRITE;
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8014bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bdc:	b90a      	cbnz	r2, 8014be2 <lwip_netconn_do_write+0x52>
 8014bde:	6a1b      	ldr	r3, [r3, #32]
 8014be0:	b133      	cbz	r3, 8014bf0 <lwip_netconn_do_write+0x60>
 8014be2:	4b1f      	ldr	r3, [pc, #124]	; (8014c60 <lwip_netconn_do_write+0xd0>)
 8014be4:	491f      	ldr	r1, [pc, #124]	; (8014c64 <lwip_netconn_do_write+0xd4>)
 8014be6:	4820      	ldr	r0, [pc, #128]	; (8014c68 <lwip_netconn_do_write+0xd8>)
 8014be8:	f240 6283 	movw	r2, #1667	; 0x683
 8014bec:	f007 f922 	bl	801be34 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8014bf0:	68e3      	ldr	r3, [r4, #12]
 8014bf2:	b933      	cbnz	r3, 8014c02 <lwip_netconn_do_write+0x72>
 8014bf4:	4b1a      	ldr	r3, [pc, #104]	; (8014c60 <lwip_netconn_do_write+0xd0>)
 8014bf6:	491d      	ldr	r1, [pc, #116]	; (8014c6c <lwip_netconn_do_write+0xdc>)
 8014bf8:	481b      	ldr	r0, [pc, #108]	; (8014c68 <lwip_netconn_do_write+0xd8>)
 8014bfa:	f240 6284 	movw	r2, #1668	; 0x684
 8014bfe:	f007 f919 	bl	801be34 <iprintf>
        msg->conn->current_msg = msg;
 8014c02:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset = 0;
 8014c04:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8014c06:	6244      	str	r4, [r0, #36]	; 0x24
        msg->conn->write_offset = 0;
 8014c08:	6201      	str	r1, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8014c0a:	f7ff fa09 	bl	8014020 <lwip_netconn_do_writemore>
 8014c0e:	b330      	cbz	r0, 8014c5e <lwip_netconn_do_write+0xce>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8014c10:	6823      	ldr	r3, [r4, #0]
 8014c12:	785b      	ldrb	r3, [r3, #1]
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d006      	beq.n	8014c26 <lwip_netconn_do_write+0x96>
 8014c18:	4b11      	ldr	r3, [pc, #68]	; (8014c60 <lwip_netconn_do_write+0xd0>)
 8014c1a:	4915      	ldr	r1, [pc, #84]	; (8014c70 <lwip_netconn_do_write+0xe0>)
 8014c1c:	4812      	ldr	r0, [pc, #72]	; (8014c68 <lwip_netconn_do_write+0xd8>)
 8014c1e:	f240 6289 	movw	r2, #1673	; 0x689
 8014c22:	f007 f907 	bl	801be34 <iprintf>
          UNLOCK_TCPIP_CORE();
 8014c26:	4813      	ldr	r0, [pc, #76]	; (8014c74 <lwip_netconn_do_write+0xe4>)
 8014c28:	f006 f81c 	bl	801ac64 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014c2c:	6820      	ldr	r0, [r4, #0]
 8014c2e:	2100      	movs	r1, #0
 8014c30:	300c      	adds	r0, #12
 8014c32:	f005 ffce 	bl	801abd2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8014c36:	480f      	ldr	r0, [pc, #60]	; (8014c74 <lwip_netconn_do_write+0xe4>)
 8014c38:	f006 f80f 	bl	801ac5a <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8014c3c:	6823      	ldr	r3, [r4, #0]
 8014c3e:	785b      	ldrb	r3, [r3, #1]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d10c      	bne.n	8014c5e <lwip_netconn_do_write+0xce>
 8014c44:	4b06      	ldr	r3, [pc, #24]	; (8014c60 <lwip_netconn_do_write+0xd0>)
 8014c46:	490a      	ldr	r1, [pc, #40]	; (8014c70 <lwip_netconn_do_write+0xe0>)
 8014c48:	4807      	ldr	r0, [pc, #28]	; (8014c68 <lwip_netconn_do_write+0xd8>)
 8014c4a:	f240 628d 	movw	r2, #1677	; 0x68d
}
 8014c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8014c52:	f007 b8ef 	b.w	801be34 <iprintf>
        msg->err = ERR_CONN;
 8014c56:	23f5      	movs	r3, #245	; 0xf5
 8014c58:	e7b8      	b.n	8014bcc <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 8014c5a:	23fa      	movs	r3, #250	; 0xfa
 8014c5c:	e7b6      	b.n	8014bcc <lwip_netconn_do_write+0x3c>
 8014c5e:	bd10      	pop	{r4, pc}
 8014c60:	0801cb0f 	.word	0x0801cb0f
 8014c64:	0801c920 	.word	0x0801c920
 8014c68:	0801c6e3 	.word	0x0801c6e3
 8014c6c:	0801c942 	.word	0x0801c942
 8014c70:	0801c93b 	.word	0x0801c93b
 8014c74:	200044bc 	.word	0x200044bc

08014c78 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8014c78:	b510      	push	{r4, lr}
 8014c7a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8014c7c:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8014c7e:	6843      	ldr	r3, [r0, #4]
 8014c80:	b163      	cbz	r3, 8014c9c <lwip_netconn_do_close+0x24>
 8014c82:	7803      	ldrb	r3, [r0, #0]
 8014c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c88:	2b10      	cmp	r3, #16
 8014c8a:	d107      	bne.n	8014c9c <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8014c8c:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8014c8e:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8014c90:	2a03      	cmp	r2, #3
 8014c92:	d001      	beq.n	8014c98 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d001      	beq.n	8014c9c <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8014c98:	2b03      	cmp	r3, #3
 8014c9a:	d10e      	bne.n	8014cba <lwip_netconn_do_close+0x42>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8014c9c:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8014c9e:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8014ca0:	f005 fff4 	bl	801ac8c <sys_arch_protect>
 8014ca4:	6823      	ldr	r3, [r4, #0]
 8014ca6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014caa:	320c      	adds	r2, #12
 8014cac:	bfa4      	itt	ge
 8014cae:	7922      	ldrbge	r2, [r4, #4]
 8014cb0:	721a      	strbge	r2, [r3, #8]
}
 8014cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8014cb6:	f005 bff5 	b.w	801aca4 <sys_arch_unprotect>
    } else if (state == NETCONN_WRITE) {
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	d101      	bne.n	8014cc2 <lwip_netconn_do_close+0x4a>
      msg->err = ERR_INPROGRESS;
 8014cbe:	23fb      	movs	r3, #251	; 0xfb
 8014cc0:	e7ed      	b.n	8014c9e <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8014cc2:	07d3      	lsls	r3, r2, #31
 8014cc4:	d501      	bpl.n	8014cca <lwip_netconn_do_close+0x52>
        netconn_drain(msg->conn);
 8014cc6:	f7ff fd43 	bl	8014750 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8014cca:	6823      	ldr	r3, [r4, #0]
 8014ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cce:	b90a      	cbnz	r2, 8014cd4 <lwip_netconn_do_close+0x5c>
 8014cd0:	6a1b      	ldr	r3, [r3, #32]
 8014cd2:	b133      	cbz	r3, 8014ce2 <lwip_netconn_do_close+0x6a>
 8014cd4:	4b18      	ldr	r3, [pc, #96]	; (8014d38 <lwip_netconn_do_close+0xc0>)
 8014cd6:	4919      	ldr	r1, [pc, #100]	; (8014d3c <lwip_netconn_do_close+0xc4>)
 8014cd8:	4819      	ldr	r0, [pc, #100]	; (8014d40 <lwip_netconn_do_close+0xc8>)
 8014cda:	f240 721c 	movw	r2, #1820	; 0x71c
 8014cde:	f007 f8a9 	bl	801be34 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8014ce2:	6820      	ldr	r0, [r4, #0]
 8014ce4:	2304      	movs	r3, #4
 8014ce6:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8014ce8:	6244      	str	r4, [r0, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8014cea:	2100      	movs	r1, #0
 8014cec:	f7ff fa98 	bl	8014220 <lwip_netconn_do_close_internal>
 8014cf0:	b308      	cbz	r0, 8014d36 <lwip_netconn_do_close+0xbe>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8014cf2:	6823      	ldr	r3, [r4, #0]
 8014cf4:	785b      	ldrb	r3, [r3, #1]
 8014cf6:	2b04      	cmp	r3, #4
 8014cf8:	d006      	beq.n	8014d08 <lwip_netconn_do_close+0x90>
 8014cfa:	4b0f      	ldr	r3, [pc, #60]	; (8014d38 <lwip_netconn_do_close+0xc0>)
 8014cfc:	4911      	ldr	r1, [pc, #68]	; (8014d44 <lwip_netconn_do_close+0xcc>)
 8014cfe:	4810      	ldr	r0, [pc, #64]	; (8014d40 <lwip_netconn_do_close+0xc8>)
 8014d00:	f240 7221 	movw	r2, #1825	; 0x721
 8014d04:	f007 f896 	bl	801be34 <iprintf>
        UNLOCK_TCPIP_CORE();
 8014d08:	480f      	ldr	r0, [pc, #60]	; (8014d48 <lwip_netconn_do_close+0xd0>)
 8014d0a:	f005 ffab 	bl	801ac64 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014d0e:	6820      	ldr	r0, [r4, #0]
 8014d10:	2100      	movs	r1, #0
 8014d12:	300c      	adds	r0, #12
 8014d14:	f005 ff5d 	bl	801abd2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8014d18:	480b      	ldr	r0, [pc, #44]	; (8014d48 <lwip_netconn_do_close+0xd0>)
 8014d1a:	f005 ff9e 	bl	801ac5a <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8014d1e:	6823      	ldr	r3, [r4, #0]
 8014d20:	785b      	ldrb	r3, [r3, #1]
 8014d22:	b143      	cbz	r3, 8014d36 <lwip_netconn_do_close+0xbe>
 8014d24:	4b04      	ldr	r3, [pc, #16]	; (8014d38 <lwip_netconn_do_close+0xc0>)
 8014d26:	4907      	ldr	r1, [pc, #28]	; (8014d44 <lwip_netconn_do_close+0xcc>)
 8014d28:	4805      	ldr	r0, [pc, #20]	; (8014d40 <lwip_netconn_do_close+0xc8>)
 8014d2a:	f240 7225 	movw	r2, #1829	; 0x725
}
 8014d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8014d32:	f007 b87f 	b.w	801be34 <iprintf>
 8014d36:	bd10      	pop	{r4, pc}
 8014d38:	0801cb0f 	.word	0x0801cb0f
 8014d3c:	0801c920 	.word	0x0801c920
 8014d40:	0801c6e3 	.word	0x0801c6e3
 8014d44:	0801c93b 	.word	0x0801c93b
 8014d48:	200044bc 	.word	0x200044bc

08014d4c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8014d4c:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8014d4e:	4604      	mov	r4, r0
 8014d50:	b160      	cbz	r0, 8014d6c <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8014d52:	6800      	ldr	r0, [r0, #0]
 8014d54:	b120      	cbz	r0, 8014d60 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8014d56:	f002 f81f 	bl	8016d98 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	6063      	str	r3, [r4, #4]
 8014d5e:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8014d60:	4621      	mov	r1, r4
 8014d62:	2006      	movs	r0, #6
  }
}
 8014d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8014d68:	f001 be90 	b.w	8016a8c <memp_free>
 8014d6c:	bd10      	pop	{r4, pc}
	...

08014d70 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8014d70:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8014d72:	b940      	cbnz	r0, 8014d86 <netbuf_data+0x16>
 8014d74:	4b0f      	ldr	r3, [pc, #60]	; (8014db4 <netbuf_data+0x44>)
 8014d76:	4910      	ldr	r1, [pc, #64]	; (8014db8 <netbuf_data+0x48>)
 8014d78:	22c2      	movs	r2, #194	; 0xc2
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8014d7a:	4810      	ldr	r0, [pc, #64]	; (8014dbc <netbuf_data+0x4c>)
 8014d7c:	f007 f85a 	bl	801be34 <iprintf>
 8014d80:	f06f 000f 	mvn.w	r0, #15
 8014d84:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014d86:	b919      	cbnz	r1, 8014d90 <netbuf_data+0x20>
 8014d88:	4b0a      	ldr	r3, [pc, #40]	; (8014db4 <netbuf_data+0x44>)
 8014d8a:	490d      	ldr	r1, [pc, #52]	; (8014dc0 <netbuf_data+0x50>)
 8014d8c:	22c3      	movs	r2, #195	; 0xc3
 8014d8e:	e7f4      	b.n	8014d7a <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8014d90:	b91a      	cbnz	r2, 8014d9a <netbuf_data+0x2a>
 8014d92:	4b08      	ldr	r3, [pc, #32]	; (8014db4 <netbuf_data+0x44>)
 8014d94:	490b      	ldr	r1, [pc, #44]	; (8014dc4 <netbuf_data+0x54>)
 8014d96:	22c4      	movs	r2, #196	; 0xc4
 8014d98:	e7ef      	b.n	8014d7a <netbuf_data+0xa>

  if (buf->ptr == NULL) {
 8014d9a:	6843      	ldr	r3, [r0, #4]
 8014d9c:	b133      	cbz	r3, 8014dac <netbuf_data+0x3c>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8014da2:	6843      	ldr	r3, [r0, #4]
 8014da4:	895b      	ldrh	r3, [r3, #10]
 8014da6:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8014da8:	2000      	movs	r0, #0
 8014daa:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8014dac:	f06f 0001 	mvn.w	r0, #1
}
 8014db0:	bd08      	pop	{r3, pc}
 8014db2:	bf00      	nop
 8014db4:	0801cba0 	.word	0x0801cba0
 8014db8:	0801cc0f 	.word	0x0801cc0f
 8014dbc:	0801c6e3 	.word	0x0801c6e3
 8014dc0:	0801cc28 	.word	0x0801cc28
 8014dc4:	0801cc45 	.word	0x0801cc45

08014dc8 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8014dc8:	4b1d      	ldr	r3, [pc, #116]	; (8014e40 <tcpip_thread+0x78>)
 8014dca:	681b      	ldr	r3, [r3, #0]
{
 8014dcc:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8014dce:	b113      	cbz	r3, 8014dd6 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8014dd0:	4a1c      	ldr	r2, [pc, #112]	; (8014e44 <tcpip_thread+0x7c>)
 8014dd2:	6810      	ldr	r0, [r2, #0]
 8014dd4:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8014dd6:	481c      	ldr	r0, [pc, #112]	; (8014e48 <tcpip_thread+0x80>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8014dd8:	4d1b      	ldr	r5, [pc, #108]	; (8014e48 <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8014dda:	4e1c      	ldr	r6, [pc, #112]	; (8014e4c <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014ddc:	4c1c      	ldr	r4, [pc, #112]	; (8014e50 <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 8014dde:	f005 ff3c 	bl	801ac5a <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8014de2:	4628      	mov	r0, r5
 8014de4:	f005 ff3e 	bl	801ac64 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8014de8:	a901      	add	r1, sp, #4
 8014dea:	4630      	mov	r0, r6
 8014dec:	f005 fc68 	bl	801a6c0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014df0:	4628      	mov	r0, r5
 8014df2:	f005 ff32 	bl	801ac5a <sys_mutex_lock>
    if (msg == NULL) {
 8014df6:	9b01      	ldr	r3, [sp, #4]
 8014df8:	b933      	cbnz	r3, 8014e08 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014dfa:	4623      	mov	r3, r4
 8014dfc:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014dfe:	4915      	ldr	r1, [pc, #84]	; (8014e54 <tcpip_thread+0x8c>)
 8014e00:	4815      	ldr	r0, [pc, #84]	; (8014e58 <tcpip_thread+0x90>)
 8014e02:	f007 f817 	bl	801be34 <iprintf>
      break;
 8014e06:	e7ec      	b.n	8014de2 <tcpip_thread+0x1a>
    switch (msg->type) {
 8014e08:	781a      	ldrb	r2, [r3, #0]
 8014e0a:	2a03      	cmp	r2, #3
 8014e0c:	d00b      	beq.n	8014e26 <tcpip_thread+0x5e>
 8014e0e:	2a04      	cmp	r2, #4
 8014e10:	d00f      	beq.n	8014e32 <tcpip_thread+0x6a>
 8014e12:	2a02      	cmp	r2, #2
 8014e14:	d111      	bne.n	8014e3a <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8014e16:	1d18      	adds	r0, r3, #4
 8014e18:	c807      	ldmia	r0, {r0, r1, r2}
 8014e1a:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014e1c:	9901      	ldr	r1, [sp, #4]
 8014e1e:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014e20:	f001 fe34 	bl	8016a8c <memp_free>
      break;
 8014e24:	e7dd      	b.n	8014de2 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014e26:	6898      	ldr	r0, [r3, #8]
 8014e28:	685a      	ldr	r2, [r3, #4]
 8014e2a:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014e2c:	9901      	ldr	r1, [sp, #4]
 8014e2e:	2008      	movs	r0, #8
 8014e30:	e7f6      	b.n	8014e20 <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014e32:	685a      	ldr	r2, [r3, #4]
 8014e34:	6898      	ldr	r0, [r3, #8]
 8014e36:	4790      	blx	r2
      break;
 8014e38:	e7d3      	b.n	8014de2 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014e3a:	4623      	mov	r3, r4
 8014e3c:	229b      	movs	r2, #155	; 0x9b
 8014e3e:	e7de      	b.n	8014dfe <tcpip_thread+0x36>
 8014e40:	20003f64 	.word	0x20003f64
 8014e44:	20003f68 	.word	0x20003f68
 8014e48:	200044bc 	.word	0x200044bc
 8014e4c:	20003f60 	.word	0x20003f60
 8014e50:	0801ccbc 	.word	0x0801ccbc
 8014e54:	0801ccec 	.word	0x0801ccec
 8014e58:	0801c6e3 	.word	0x0801c6e3

08014e5c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8014e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e5e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8014e60:	4810      	ldr	r0, [pc, #64]	; (8014ea4 <tcpip_inpkt+0x48>)
{
 8014e62:	460e      	mov	r6, r1
 8014e64:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8014e66:	f005 fe94 	bl	801ab92 <sys_mbox_valid>
 8014e6a:	b928      	cbnz	r0, 8014e78 <tcpip_inpkt+0x1c>
 8014e6c:	4b0e      	ldr	r3, [pc, #56]	; (8014ea8 <tcpip_inpkt+0x4c>)
 8014e6e:	490f      	ldr	r1, [pc, #60]	; (8014eac <tcpip_inpkt+0x50>)
 8014e70:	480f      	ldr	r0, [pc, #60]	; (8014eb0 <tcpip_inpkt+0x54>)
 8014e72:	22b5      	movs	r2, #181	; 0xb5
 8014e74:	f006 ffde 	bl	801be34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8014e78:	2009      	movs	r0, #9
 8014e7a:	f001 fdeb 	bl	8016a54 <memp_malloc>
  if (msg == NULL) {
 8014e7e:	4604      	mov	r4, r0
 8014e80:	b168      	cbz	r0, 8014e9e <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8014e82:	2302      	movs	r3, #2
 8014e84:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8014e86:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8014e88:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8014e8a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8014e8c:	4601      	mov	r1, r0
 8014e8e:	4805      	ldr	r0, [pc, #20]	; (8014ea4 <tcpip_inpkt+0x48>)
 8014e90:	f005 fe42 	bl	801ab18 <sys_mbox_trypost>
 8014e94:	b128      	cbz	r0, 8014ea2 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014e96:	4621      	mov	r1, r4
 8014e98:	2009      	movs	r0, #9
 8014e9a:	f001 fdf7 	bl	8016a8c <memp_free>
    return ERR_MEM;
 8014e9e:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8014ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ea4:	20003f60 	.word	0x20003f60
 8014ea8:	0801ccbc 	.word	0x0801ccbc
 8014eac:	0801ccaf 	.word	0x0801ccaf
 8014eb0:	0801c6e3 	.word	0x0801c6e3

08014eb4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014eb4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8014eb8:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8014ebc:	bf14      	ite	ne
 8014ebe:	4a02      	ldrne	r2, [pc, #8]	; (8014ec8 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8014ec0:	4a02      	ldreq	r2, [pc, #8]	; (8014ecc <tcpip_input+0x18>)
 8014ec2:	f7ff bfcb 	b.w	8014e5c <tcpip_inpkt>
 8014ec6:	bf00      	nop
 8014ec8:	0801a9c5 	.word	0x0801a9c5
 8014ecc:	08015999 	.word	0x08015999

08014ed0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8014ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed2:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8014ed4:	4812      	ldr	r0, [pc, #72]	; (8014f20 <tcpip_callback_with_block+0x50>)
{
 8014ed6:	460e      	mov	r6, r1
 8014ed8:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8014eda:	f005 fe5a 	bl	801ab92 <sys_mbox_valid>
 8014ede:	b928      	cbnz	r0, 8014eec <tcpip_callback_with_block+0x1c>
 8014ee0:	4b10      	ldr	r3, [pc, #64]	; (8014f24 <tcpip_callback_with_block+0x54>)
 8014ee2:	4911      	ldr	r1, [pc, #68]	; (8014f28 <tcpip_callback_with_block+0x58>)
 8014ee4:	4811      	ldr	r0, [pc, #68]	; (8014f2c <tcpip_callback_with_block+0x5c>)
 8014ee6:	22ee      	movs	r2, #238	; 0xee
 8014ee8:	f006 ffa4 	bl	801be34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8014eec:	2008      	movs	r0, #8
 8014eee:	f001 fdb1 	bl	8016a54 <memp_malloc>
  if (msg == NULL) {
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	b188      	cbz	r0, 8014f1a <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014ef6:	2303      	movs	r3, #3
 8014ef8:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8014efa:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8014efc:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8014efe:	4601      	mov	r1, r0
 8014f00:	4807      	ldr	r0, [pc, #28]	; (8014f20 <tcpip_callback_with_block+0x50>)
  if (block) {
 8014f02:	b11d      	cbz	r5, 8014f0c <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 8014f04:	f005 fdfc 	bl	801ab00 <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 8014f08:	2000      	movs	r0, #0
 8014f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8014f0c:	f005 fe04 	bl	801ab18 <sys_mbox_trypost>
 8014f10:	b128      	cbz	r0, 8014f1e <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014f12:	4621      	mov	r1, r4
 8014f14:	2008      	movs	r0, #8
 8014f16:	f001 fdb9 	bl	8016a8c <memp_free>
    return ERR_MEM;
 8014f1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f20:	20003f60 	.word	0x20003f60
 8014f24:	0801ccbc 	.word	0x0801ccbc
 8014f28:	0801ccaf 	.word	0x0801ccaf
 8014f2c:	0801c6e3 	.word	0x0801c6e3

08014f30 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8014f30:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8014f32:	4c06      	ldr	r4, [pc, #24]	; (8014f4c <tcpip_send_msg_wait_sem+0x1c>)
{
 8014f34:	460e      	mov	r6, r1
 8014f36:	4605      	mov	r5, r0
  LOCK_TCPIP_CORE();
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f005 fe8e 	bl	801ac5a <sys_mutex_lock>
  fn(apimsg);
 8014f3e:	4630      	mov	r0, r6
 8014f40:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 8014f42:	4620      	mov	r0, r4
 8014f44:	f005 fe8e 	bl	801ac64 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8014f48:	2000      	movs	r0, #0
 8014f4a:	bd70      	pop	{r4, r5, r6, pc}
 8014f4c:	200044bc 	.word	0x200044bc

08014f50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8014f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f52:	4605      	mov	r5, r0
 8014f54:	460c      	mov	r4, r1
  lwip_init();
 8014f56:	f000 f861 	bl	801501c <lwip_init>

  tcpip_init_done = initfunc;
 8014f5a:	4b13      	ldr	r3, [pc, #76]	; (8014fa8 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014f5c:	4813      	ldr	r0, [pc, #76]	; (8014fac <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8014f5e:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8014f60:	4b13      	ldr	r3, [pc, #76]	; (8014fb0 <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014f62:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8014f64:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014f66:	f005 fdb1 	bl	801aacc <sys_mbox_new>
 8014f6a:	b130      	cbz	r0, 8014f7a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8014f6c:	4b11      	ldr	r3, [pc, #68]	; (8014fb4 <tcpip_init+0x64>)
 8014f6e:	4912      	ldr	r1, [pc, #72]	; (8014fb8 <tcpip_init+0x68>)
 8014f70:	4812      	ldr	r0, [pc, #72]	; (8014fbc <tcpip_init+0x6c>)
 8014f72:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014f76:	f006 ff5d 	bl	801be34 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8014f7a:	4811      	ldr	r0, [pc, #68]	; (8014fc0 <tcpip_init+0x70>)
 8014f7c:	f005 fe5e 	bl	801ac3c <sys_mutex_new>
 8014f80:	b130      	cbz	r0, 8014f90 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8014f82:	4b0c      	ldr	r3, [pc, #48]	; (8014fb4 <tcpip_init+0x64>)
 8014f84:	490f      	ldr	r1, [pc, #60]	; (8014fc4 <tcpip_init+0x74>)
 8014f86:	480d      	ldr	r0, [pc, #52]	; (8014fbc <tcpip_init+0x6c>)
 8014f88:	f240 12d9 	movw	r2, #473	; 0x1d9
 8014f8c:	f006 ff52 	bl	801be34 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8014f90:	2303      	movs	r3, #3
 8014f92:	9300      	str	r3, [sp, #0]
 8014f94:	2200      	movs	r2, #0
 8014f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f9a:	490b      	ldr	r1, [pc, #44]	; (8014fc8 <tcpip_init+0x78>)
 8014f9c:	480b      	ldr	r0, [pc, #44]	; (8014fcc <tcpip_init+0x7c>)
 8014f9e:	f005 fe64 	bl	801ac6a <sys_thread_new>
}
 8014fa2:	b003      	add	sp, #12
 8014fa4:	bd30      	pop	{r4, r5, pc}
 8014fa6:	bf00      	nop
 8014fa8:	20003f64 	.word	0x20003f64
 8014fac:	20003f60 	.word	0x20003f60
 8014fb0:	20003f68 	.word	0x20003f68
 8014fb4:	0801ccbc 	.word	0x0801ccbc
 8014fb8:	0801cc5e 	.word	0x0801cc5e
 8014fbc:	0801c6e3 	.word	0x0801c6e3
 8014fc0:	200044bc 	.word	0x200044bc
 8014fc4:	0801cc81 	.word	0x0801cc81
 8014fc8:	08014dc9 	.word	0x08014dc9
 8014fcc:	0801cca2 	.word	0x0801cca2

08014fd0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8014fd0:	b570      	push	{r4, r5, r6, lr}
 8014fd2:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8014fd4:	4605      	mov	r5, r0
 8014fd6:	b1a8      	cbz	r0, 8015004 <fs_open+0x34>
 8014fd8:	b1a1      	cbz	r1, 8015004 <fs_open+0x34>
 8014fda:	4c0c      	ldr	r4, [pc, #48]	; (801500c <fs_open+0x3c>)
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 8014fdc:	6861      	ldr	r1, [r4, #4]
 8014fde:	4630      	mov	r0, r6
 8014fe0:	f7fb f82e 	bl	8010040 <strcmp>
 8014fe4:	b940      	cbnz	r0, 8014ff8 <fs_open+0x28>
      file->data = (const char *)f->data;
 8014fe6:	68a3      	ldr	r3, [r4, #8]
 8014fe8:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 8014fea:	68e3      	ldr	r3, [r4, #12]
 8014fec:	606b      	str	r3, [r5, #4]
      file->index = f->len;
 8014fee:	60ab      	str	r3, [r5, #8]
      file->pextension = NULL;
 8014ff0:	60e8      	str	r0, [r5, #12]
      file->flags = f->flags;
 8014ff2:	7c23      	ldrb	r3, [r4, #16]
 8014ff4:	742b      	strb	r3, [r5, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8014ff8:	6824      	ldr	r4, [r4, #0]
 8014ffa:	2c00      	cmp	r4, #0
 8014ffc:	d1ee      	bne.n	8014fdc <fs_open+0xc>
    }
  }
  /* file not found */
  return ERR_VAL;
 8014ffe:	f06f 0005 	mvn.w	r0, #5
 8015002:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 8015004:	f06f 000f 	mvn.w	r0, #15
}
 8015008:	bd70      	pop	{r4, r5, r6, pc}
 801500a:	bf00      	nop
 801500c:	0801efac 	.word	0x0801efac

08015010 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8015010:	4770      	bx	lr

08015012 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8015012:	ba40      	rev16	r0, r0
}
 8015014:	b280      	uxth	r0, r0
 8015016:	4770      	bx	lr

08015018 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8015018:	ba00      	rev	r0, r0
 801501a:	4770      	bx	lr

0801501c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801501c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801501e:	f005 fe01 	bl	801ac24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015022:	f001 faa3 	bl	801656c <mem_init>
  memp_init();
 8015026:	f001 fd07 	bl	8016a38 <memp_init>
  pbuf_init();
  netif_init();
 801502a:	f001 fd52 	bl	8016ad2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801502e:	f005 fb99 	bl	801a764 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015032:	f002 f9ed 	bl	8017410 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8015036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801503a:	f005 bb17 	b.w	801a66c <sys_timeouts_init>
	...

08015040 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015040:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015042:	2618      	movs	r6, #24
 8015044:	4c07      	ldr	r4, [pc, #28]	; (8015064 <etharp_free_entry+0x24>)
 8015046:	4346      	muls	r6, r0
{
 8015048:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 801504a:	59a0      	ldr	r0, [r4, r6]
 801504c:	b118      	cbz	r0, 8015056 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801504e:	f001 fea3 	bl	8016d98 <pbuf_free>
    arp_table[i].q = NULL;
 8015052:	2300      	movs	r3, #0
 8015054:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015056:	2318      	movs	r3, #24
 8015058:	fb03 4405 	mla	r4, r3, r5, r4
 801505c:	2300      	movs	r3, #0
 801505e:	7523      	strb	r3, [r4, #20]
 8015060:	bd70      	pop	{r4, r5, r6, pc}
 8015062:	bf00      	nop
 8015064:	20003f6c 	.word	0x20003f6c

08015068 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015068:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801506c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801506e:	4689      	mov	r9, r1
 8015070:	4692      	mov	sl, r2
 8015072:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015074:	4607      	mov	r7, r0
 8015076:	b930      	cbnz	r0, 8015086 <etharp_raw+0x1e>
 8015078:	4b2c      	ldr	r3, [pc, #176]	; (801512c <etharp_raw+0xc4>)
 801507a:	492d      	ldr	r1, [pc, #180]	; (8015130 <etharp_raw+0xc8>)
 801507c:	482d      	ldr	r0, [pc, #180]	; (8015134 <etharp_raw+0xcc>)
 801507e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8015082:	f006 fed7 	bl	801be34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015086:	2200      	movs	r2, #0
 8015088:	211c      	movs	r1, #28
 801508a:	2002      	movs	r0, #2
 801508c:	f001 feee 	bl	8016e6c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015090:	4606      	mov	r6, r0
 8015092:	2800      	cmp	r0, #0
 8015094:	d047      	beq.n	8015126 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015096:	8943      	ldrh	r3, [r0, #10]
 8015098:	2b1b      	cmp	r3, #27
 801509a:	d806      	bhi.n	80150aa <etharp_raw+0x42>
 801509c:	4b23      	ldr	r3, [pc, #140]	; (801512c <etharp_raw+0xc4>)
 801509e:	4926      	ldr	r1, [pc, #152]	; (8015138 <etharp_raw+0xd0>)
 80150a0:	4824      	ldr	r0, [pc, #144]	; (8015134 <etharp_raw+0xcc>)
 80150a2:	f240 4264 	movw	r2, #1124	; 0x464
 80150a6:	f006 fec5 	bl	801be34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80150aa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 80150ae:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 80150b0:	f7ff ffaf 	bl	8015012 <lwip_htons>
 80150b4:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80150b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80150ba:	2b06      	cmp	r3, #6
 80150bc:	d006      	beq.n	80150cc <etharp_raw+0x64>
 80150be:	4b1b      	ldr	r3, [pc, #108]	; (801512c <etharp_raw+0xc4>)
 80150c0:	491e      	ldr	r1, [pc, #120]	; (801513c <etharp_raw+0xd4>)
 80150c2:	481c      	ldr	r0, [pc, #112]	; (8015134 <etharp_raw+0xcc>)
 80150c4:	f240 426b 	movw	r2, #1131	; 0x46b
 80150c8:	f006 feb4 	bl	801be34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80150cc:	f8d8 3000 	ldr.w	r3, [r8]
 80150d0:	60a3      	str	r3, [r4, #8]
 80150d2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80150d6:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80150d8:	682b      	ldr	r3, [r5, #0]
 80150da:	f8c4 3012 	str.w	r3, [r4, #18]
 80150de:	88ab      	ldrh	r3, [r5, #4]
 80150e0:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80150e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80150ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80150f0:	2301      	movs	r3, #1
 80150f2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80150f4:	2308      	movs	r3, #8
 80150f6:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80150f8:	2306      	movs	r3, #6
 80150fa:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80150fc:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80150fe:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8015100:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015102:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8015106:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015108:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801510a:	464a      	mov	r2, r9
 801510c:	9300      	str	r3, [sp, #0]
 801510e:	4631      	mov	r1, r6
 8015110:	4653      	mov	r3, sl
 8015112:	4638      	mov	r0, r7
 8015114:	f005 fca2 	bl	801aa5c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015118:	4630      	mov	r0, r6
 801511a:	f001 fe3d 	bl	8016d98 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801511e:	4628      	mov	r0, r5
}
 8015120:	b002      	add	sp, #8
 8015122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8015126:	f04f 30ff 	mov.w	r0, #4294967295
 801512a:	e7f9      	b.n	8015120 <etharp_raw+0xb8>
 801512c:	0801f0b5 	.word	0x0801f0b5
 8015130:	0801f0ec 	.word	0x0801f0ec
 8015134:	0801c6e3 	.word	0x0801c6e3
 8015138:	0801f0fa 	.word	0x0801f0fa
 801513c:	0801f12b 	.word	0x0801f12b

08015140 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8015140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015144:	4b3e      	ldr	r3, [pc, #248]	; (8015240 <etharp_find_entry.isra.0+0x100>)
 8015146:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8015148:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 801514a:	4605      	mov	r5, r0
 801514c:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801514e:	4694      	mov	ip, r2
 8015150:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015152:	4681      	mov	r9, r0
 8015154:	4680      	mov	r8, r0
 8015156:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8015158:	4696      	mov	lr, r2
 801515a:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801515c:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8015160:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015162:	d112      	bne.n	801518a <etharp_find_entry.isra.0+0x4a>
 8015164:	b99f      	cbnz	r7, 801518e <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8015166:	fa4f fe80 	sxtb.w	lr, r0
 801516a:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801516c:	280a      	cmp	r0, #10
 801516e:	f103 0318 	add.w	r3, r3, #24
 8015172:	d1f3      	bne.n	801515c <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015174:	9b01      	ldr	r3, [sp, #4]
 8015176:	0799      	lsls	r1, r3, #30
 8015178:	d404      	bmi.n	8015184 <etharp_find_entry.isra.0+0x44>
 801517a:	f1be 0f0a 	cmp.w	lr, #10
 801517e:	d11c      	bne.n	80151ba <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015180:	07db      	lsls	r3, r3, #31
 8015182:	d435      	bmi.n	80151f0 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8015184:	f04f 30ff 	mov.w	r0, #4294967295
 8015188:	e009      	b.n	801519e <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 801518a:	2f00      	cmp	r7, #0
 801518c:	d0ed      	beq.n	801516a <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801518e:	2d00      	cmp	r5, #0
 8015190:	d04a      	beq.n	8015228 <etharp_find_entry.isra.0+0xe8>
 8015192:	6829      	ldr	r1, [r5, #0]
 8015194:	468a      	mov	sl, r1
 8015196:	6859      	ldr	r1, [r3, #4]
 8015198:	458a      	cmp	sl, r1
 801519a:	d145      	bne.n	8015228 <etharp_find_entry.isra.0+0xe8>
        return i;
 801519c:	b240      	sxtb	r0, r0
}
 801519e:	b003      	add	sp, #12
 80151a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80151a4:	45c2      	cmp	sl, r8
 80151a6:	d3e0      	bcc.n	801516a <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 80151a8:	fa4f fc80 	sxtb.w	ip, r0
 80151ac:	46d0      	mov	r8, sl
 80151ae:	e7dc      	b.n	801516a <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 80151b0:	45ca      	cmp	sl, r9
            old_stable = i;
 80151b2:	bf24      	itt	cs
 80151b4:	b244      	sxtbcs	r4, r0
 80151b6:	46d1      	movcs	r9, sl
 80151b8:	e7d7      	b.n	801516a <etharp_find_entry.isra.0+0x2a>
    i = empty;
 80151ba:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80151be:	2318      	movs	r3, #24
 80151c0:	fb03 6307 	mla	r3, r3, r7, r6
 80151c4:	7d1b      	ldrb	r3, [r3, #20]
 80151c6:	b133      	cbz	r3, 80151d6 <etharp_find_entry.isra.0+0x96>
 80151c8:	4b1e      	ldr	r3, [pc, #120]	; (8015244 <etharp_find_entry.isra.0+0x104>)
 80151ca:	491f      	ldr	r1, [pc, #124]	; (8015248 <etharp_find_entry.isra.0+0x108>)
 80151cc:	481f      	ldr	r0, [pc, #124]	; (801524c <etharp_find_entry.isra.0+0x10c>)
 80151ce:	f240 1287 	movw	r2, #391	; 0x187
 80151d2:	f006 fe2f 	bl	801be34 <iprintf>
  if (ipaddr != NULL) {
 80151d6:	b125      	cbz	r5, 80151e2 <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80151d8:	2318      	movs	r3, #24
 80151da:	fb03 6307 	mla	r3, r3, r7, r6
 80151de:	682a      	ldr	r2, [r5, #0]
 80151e0:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80151e2:	2318      	movs	r3, #24
 80151e4:	fb03 6607 	mla	r6, r3, r7, r6
 80151e8:	2300      	movs	r3, #0
 80151ea:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 80151ec:	b278      	sxtb	r0, r7
 80151ee:	e7d6      	b.n	801519e <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 80151f0:	2c0a      	cmp	r4, #10
 80151f2:	d00f      	beq.n	8015214 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80151f4:	2318      	movs	r3, #24
      i = old_stable;
 80151f6:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80151f8:	435c      	muls	r4, r3
 80151fa:	5933      	ldr	r3, [r6, r4]
 80151fc:	b133      	cbz	r3, 801520c <etharp_find_entry.isra.0+0xcc>
 80151fe:	4b11      	ldr	r3, [pc, #68]	; (8015244 <etharp_find_entry.isra.0+0x104>)
 8015200:	4913      	ldr	r1, [pc, #76]	; (8015250 <etharp_find_entry.isra.0+0x110>)
 8015202:	4812      	ldr	r0, [pc, #72]	; (801524c <etharp_find_entry.isra.0+0x10c>)
 8015204:	f240 126f 	movw	r2, #367	; 0x16f
 8015208:	f006 fe14 	bl	801be34 <iprintf>
    etharp_free_entry(i);
 801520c:	4638      	mov	r0, r7
 801520e:	f7ff ff17 	bl	8015040 <etharp_free_entry>
 8015212:	e7d4      	b.n	80151be <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015214:	f1bc 0f0a 	cmp.w	ip, #10
 8015218:	d002      	beq.n	8015220 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 801521a:	fa5f f78c 	uxtb.w	r7, ip
 801521e:	e7f5      	b.n	801520c <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015220:	2a0a      	cmp	r2, #10
 8015222:	d0af      	beq.n	8015184 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 8015224:	b2d7      	uxtb	r7, r2
 8015226:	e7f1      	b.n	801520c <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8015228:	2f01      	cmp	r7, #1
 801522a:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 801522e:	d1bf      	bne.n	80151b0 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 8015230:	681f      	ldr	r7, [r3, #0]
 8015232:	2f00      	cmp	r7, #0
 8015234:	d0b6      	beq.n	80151a4 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 8015236:	45da      	cmp	sl, fp
 8015238:	d397      	bcc.n	801516a <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 801523a:	b242      	sxtb	r2, r0
 801523c:	46d3      	mov	fp, sl
 801523e:	e794      	b.n	801516a <etharp_find_entry.isra.0+0x2a>
 8015240:	20003f6c 	.word	0x20003f6c
 8015244:	0801f0b5 	.word	0x0801f0b5
 8015248:	0801efd7 	.word	0x0801efd7
 801524c:	0801c6e3 	.word	0x0801c6e3
 8015250:	0801efc0 	.word	0x0801efc0

08015254 <etharp_cleanup_netif>:
{
 8015254:	b570      	push	{r4, r5, r6, lr}
 8015256:	4d08      	ldr	r5, [pc, #32]	; (8015278 <etharp_cleanup_netif+0x24>)
 8015258:	4606      	mov	r6, r0
 801525a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801525c:	7d2b      	ldrb	r3, [r5, #20]
 801525e:	b12b      	cbz	r3, 801526c <etharp_cleanup_netif+0x18>
 8015260:	68ab      	ldr	r3, [r5, #8]
 8015262:	42b3      	cmp	r3, r6
 8015264:	d102      	bne.n	801526c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8015266:	4620      	mov	r0, r4
 8015268:	f7ff feea 	bl	8015040 <etharp_free_entry>
 801526c:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801526e:	2c0a      	cmp	r4, #10
 8015270:	f105 0518 	add.w	r5, r5, #24
 8015274:	d1f2      	bne.n	801525c <etharp_cleanup_netif+0x8>
}
 8015276:	bd70      	pop	{r4, r5, r6, pc}
 8015278:	20003f6c 	.word	0x20003f6c

0801527c <etharp_input>:
{
 801527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015280:	4680      	mov	r8, r0
 8015282:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015284:	460c      	mov	r4, r1
 8015286:	b949      	cbnz	r1, 801529c <etharp_input+0x20>
 8015288:	4b46      	ldr	r3, [pc, #280]	; (80153a4 <etharp_input+0x128>)
 801528a:	4947      	ldr	r1, [pc, #284]	; (80153a8 <etharp_input+0x12c>)
 801528c:	4847      	ldr	r0, [pc, #284]	; (80153ac <etharp_input+0x130>)
 801528e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8015292:	f006 fdcf 	bl	801be34 <iprintf>
}
 8015296:	b006      	add	sp, #24
 8015298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 801529c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801529e:	882b      	ldrh	r3, [r5, #0]
 80152a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152a4:	d108      	bne.n	80152b8 <etharp_input+0x3c>
 80152a6:	792b      	ldrb	r3, [r5, #4]
 80152a8:	2b06      	cmp	r3, #6
 80152aa:	d105      	bne.n	80152b8 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80152ac:	796b      	ldrb	r3, [r5, #5]
 80152ae:	2b04      	cmp	r3, #4
 80152b0:	d102      	bne.n	80152b8 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80152b2:	886b      	ldrh	r3, [r5, #2]
 80152b4:	2b08      	cmp	r3, #8
 80152b6:	d003      	beq.n	80152c0 <etharp_input+0x44>
  pbuf_free(p);
 80152b8:	4640      	mov	r0, r8
 80152ba:	f001 fd6d 	bl	8016d98 <pbuf_free>
 80152be:	e7ea      	b.n	8015296 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152c0:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80152c2:	f8d5 300e 	ldr.w	r3, [r5, #14]
 80152c6:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80152c8:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152ca:	b116      	cbz	r6, 80152d2 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80152cc:	1b9b      	subs	r3, r3, r6
 80152ce:	425e      	negs	r6, r3
 80152d0:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80152d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80152d6:	2e00      	cmp	r6, #0
 80152d8:	bf14      	ite	ne
 80152da:	f04f 0901 	movne.w	r9, #1
 80152de:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80152e2:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80152e4:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80152e8:	d006      	beq.n	80152f8 <etharp_input+0x7c>
 80152ea:	4b2e      	ldr	r3, [pc, #184]	; (80153a4 <etharp_input+0x128>)
 80152ec:	4930      	ldr	r1, [pc, #192]	; (80153b0 <etharp_input+0x134>)
 80152ee:	482f      	ldr	r0, [pc, #188]	; (80153ac <etharp_input+0x130>)
 80152f0:	f240 12ab 	movw	r2, #427	; 0x1ab
 80152f4:	f006 fd9e 	bl	801be34 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80152f8:	9805      	ldr	r0, [sp, #20]
 80152fa:	2800      	cmp	r0, #0
 80152fc:	d03c      	beq.n	8015378 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80152fe:	4621      	mov	r1, r4
 8015300:	f000 fc95 	bl	8015c2e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8015304:	4682      	mov	sl, r0
 8015306:	bbb8      	cbnz	r0, 8015378 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8015308:	9b05      	ldr	r3, [sp, #20]
 801530a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801530e:	2be0      	cmp	r3, #224	; 0xe0
 8015310:	d032      	beq.n	8015378 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8015312:	4649      	mov	r1, r9
 8015314:	a805      	add	r0, sp, #20
 8015316:	f7ff ff13 	bl	8015140 <etharp_find_entry.isra.0>
  if (i < 0) {
 801531a:	2800      	cmp	r0, #0
 801531c:	db2c      	blt.n	8015378 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801531e:	4b25      	ldr	r3, [pc, #148]	; (80153b4 <etharp_input+0x138>)
 8015320:	2218      	movs	r2, #24
 8015322:	fb02 f100 	mul.w	r1, r2, r0
 8015326:	eb03 0e01 	add.w	lr, r3, r1
 801532a:	f04f 0c02 	mov.w	ip, #2
 801532e:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8015332:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8015336:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801533a:	fb12 c200 	smlabb	r2, r2, r0, ip
 801533e:	6838      	ldr	r0, [r7, #0]
 8015340:	5098      	str	r0, [r3, r2]
 8015342:	eb03 0c02 	add.w	ip, r3, r2
 8015346:	88ba      	ldrh	r2, [r7, #4]
 8015348:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 801534c:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8015350:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8015354:	f1b9 0f00 	cmp.w	r9, #0
 8015358:	d00e      	beq.n	8015378 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 801535a:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801535e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015362:	9300      	str	r3, [sp, #0]
 8015364:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8015368:	463b      	mov	r3, r7
 801536a:	4649      	mov	r1, r9
 801536c:	4620      	mov	r0, r4
 801536e:	f005 fb75 	bl	801aa5c <ethernet_output>
    pbuf_free(p);
 8015372:	4648      	mov	r0, r9
 8015374:	f001 fd10 	bl	8016d98 <pbuf_free>
  switch (hdr->opcode) {
 8015378:	88eb      	ldrh	r3, [r5, #6]
 801537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801537e:	d19b      	bne.n	80152b8 <etharp_input+0x3c>
    if (for_us) {
 8015380:	2e00      	cmp	r6, #0
 8015382:	d099      	beq.n	80152b8 <etharp_input+0x3c>
      etharp_raw(netif,
 8015384:	2202      	movs	r2, #2
 8015386:	9203      	str	r2, [sp, #12]
 8015388:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801538a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 801538e:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015390:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8015392:	9200      	str	r2, [sp, #0]
 8015394:	9701      	str	r7, [sp, #4]
 8015396:	463a      	mov	r2, r7
 8015398:	4619      	mov	r1, r3
 801539a:	4620      	mov	r0, r4
 801539c:	f7ff fe64 	bl	8015068 <etharp_raw>
 80153a0:	e78a      	b.n	80152b8 <etharp_input+0x3c>
 80153a2:	bf00      	nop
 80153a4:	0801f0b5 	.word	0x0801f0b5
 80153a8:	0801f0ec 	.word	0x0801f0ec
 80153ac:	0801c6e3 	.word	0x0801c6e3
 80153b0:	0801f01f 	.word	0x0801f01f
 80153b4:	20003f6c 	.word	0x20003f6c

080153b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80153b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80153ba:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80153bc:	f100 0325 	add.w	r3, r0, #37	; 0x25
 80153c0:	9102      	str	r1, [sp, #8]
 80153c2:	2401      	movs	r4, #1
 80153c4:	4905      	ldr	r1, [pc, #20]	; (80153dc <etharp_request+0x24>)
 80153c6:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80153c8:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80153ca:	9200      	str	r2, [sp, #0]
 80153cc:	9403      	str	r4, [sp, #12]
 80153ce:	4a04      	ldr	r2, [pc, #16]	; (80153e0 <etharp_request+0x28>)
 80153d0:	4619      	mov	r1, r3
 80153d2:	f7ff fe49 	bl	8015068 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80153d6:	b004      	add	sp, #16
 80153d8:	bd10      	pop	{r4, pc}
 80153da:	bf00      	nop
 80153dc:	08020768 	.word	0x08020768
 80153e0:	080206fc 	.word	0x080206fc

080153e4 <etharp_tmr>:
{
 80153e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153e6:	4c13      	ldr	r4, [pc, #76]	; (8015434 <etharp_tmr+0x50>)
 80153e8:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80153ea:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80153ec:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80153ee:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80153f0:	b16a      	cbz	r2, 801540e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80153f2:	89e3      	ldrh	r3, [r4, #14]
 80153f4:	3301      	adds	r3, #1
 80153f6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80153f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80153fc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80153fe:	d203      	bcs.n	8015408 <etharp_tmr+0x24>
 8015400:	2a01      	cmp	r2, #1
 8015402:	d10a      	bne.n	801541a <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015404:	2b04      	cmp	r3, #4
 8015406:	d90c      	bls.n	8015422 <etharp_tmr+0x3e>
        etharp_free_entry(i);
 8015408:	4628      	mov	r0, r5
 801540a:	f7ff fe19 	bl	8015040 <etharp_free_entry>
 801540e:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015410:	2d0a      	cmp	r5, #10
 8015412:	f104 0418 	add.w	r4, r4, #24
 8015416:	d1ea      	bne.n	80153ee <etharp_tmr+0xa>
 8015418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801541a:	2a03      	cmp	r2, #3
 801541c:	d106      	bne.n	801542c <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801541e:	7427      	strb	r7, [r4, #16]
 8015420:	e7f5      	b.n	801540e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015422:	4621      	mov	r1, r4
 8015424:	6860      	ldr	r0, [r4, #4]
 8015426:	f7ff ffc7 	bl	80153b8 <etharp_request>
 801542a:	e7f0      	b.n	801540e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801542c:	2a04      	cmp	r2, #4
 801542e:	d1ee      	bne.n	801540e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015430:	7426      	strb	r6, [r4, #16]
 8015432:	e7ec      	b.n	801540e <etharp_tmr+0x2a>
 8015434:	20003f70 	.word	0x20003f70

08015438 <etharp_output_to_arp_index>:
{
 8015438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801543c:	4d27      	ldr	r5, [pc, #156]	; (80154dc <etharp_output_to_arp_index+0xa4>)
{
 801543e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015440:	2218      	movs	r2, #24
 8015442:	fb02 5204 	mla	r2, r2, r4, r5
{
 8015446:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015448:	7d12      	ldrb	r2, [r2, #20]
 801544a:	2a01      	cmp	r2, #1
{
 801544c:	4606      	mov	r6, r0
 801544e:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015450:	d806      	bhi.n	8015460 <etharp_output_to_arp_index+0x28>
 8015452:	4b23      	ldr	r3, [pc, #140]	; (80154e0 <etharp_output_to_arp_index+0xa8>)
 8015454:	4923      	ldr	r1, [pc, #140]	; (80154e4 <etharp_output_to_arp_index+0xac>)
 8015456:	4824      	ldr	r0, [pc, #144]	; (80154e8 <etharp_output_to_arp_index+0xb0>)
 8015458:	f240 22ed 	movw	r2, #749	; 0x2ed
 801545c:	f006 fcea 	bl	801be34 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015460:	2118      	movs	r1, #24
 8015462:	fb01 5904 	mla	r9, r1, r4, r5
 8015466:	f106 0725 	add.w	r7, r6, #37	; 0x25
 801546a:	f899 3014 	ldrb.w	r3, [r9, #20]
 801546e:	2b02      	cmp	r3, #2
 8015470:	d10d      	bne.n	801548e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015472:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8015476:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801547a:	d917      	bls.n	80154ac <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801547c:	4649      	mov	r1, r9
 801547e:	3104      	adds	r1, #4
 8015480:	4630      	mov	r0, r6
 8015482:	f7ff ff99 	bl	80153b8 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015486:	b910      	cbnz	r0, 801548e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015488:	2303      	movs	r3, #3
 801548a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801548e:	2318      	movs	r3, #24
 8015490:	fb03 5304 	mla	r3, r3, r4, r5
 8015494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015498:	9200      	str	r2, [sp, #0]
 801549a:	330c      	adds	r3, #12
 801549c:	463a      	mov	r2, r7
 801549e:	4641      	mov	r1, r8
 80154a0:	4630      	mov	r0, r6
 80154a2:	f005 fadb 	bl	801aa5c <ethernet_output>
}
 80154a6:	b005      	add	sp, #20
 80154a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80154ac:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80154b0:	d3ed      	bcc.n	801548e <etharp_output_to_arp_index+0x56>
 80154b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80154b6:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80154b8:	f103 020c 	add.w	r2, r3, #12
 80154bc:	3304      	adds	r3, #4
 80154be:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80154c0:	9302      	str	r3, [sp, #8]
 80154c2:	4b0a      	ldr	r3, [pc, #40]	; (80154ec <etharp_output_to_arp_index+0xb4>)
 80154c4:	9301      	str	r3, [sp, #4]
 80154c6:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80154c8:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80154ca:	9103      	str	r1, [sp, #12]
 80154cc:	9300      	str	r3, [sp, #0]
 80154ce:	442a      	add	r2, r5
 80154d0:	463b      	mov	r3, r7
 80154d2:	4639      	mov	r1, r7
 80154d4:	4630      	mov	r0, r6
 80154d6:	f7ff fdc7 	bl	8015068 <etharp_raw>
 80154da:	e7d4      	b.n	8015486 <etharp_output_to_arp_index+0x4e>
 80154dc:	20003f6c 	.word	0x20003f6c
 80154e0:	0801f0b5 	.word	0x0801f0b5
 80154e4:	0801f043 	.word	0x0801f043
 80154e8:	0801c6e3 	.word	0x0801c6e3
 80154ec:	08020768 	.word	0x08020768

080154f0 <etharp_query>:
{
 80154f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80154f4:	4689      	mov	r9, r1
 80154f6:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80154f8:	4601      	mov	r1, r0
 80154fa:	f8d9 0000 	ldr.w	r0, [r9]
{
 80154fe:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015500:	f000 fb95 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 8015504:	4604      	mov	r4, r0
 8015506:	2800      	cmp	r0, #0
 8015508:	d15e      	bne.n	80155c8 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 801550a:	f8d9 3000 	ldr.w	r3, [r9]
 801550e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015512:	2ae0      	cmp	r2, #224	; 0xe0
 8015514:	d058      	beq.n	80155c8 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8015516:	2b00      	cmp	r3, #0
 8015518:	d056      	beq.n	80155c8 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801551a:	2101      	movs	r1, #1
 801551c:	4648      	mov	r0, r9
 801551e:	f7ff fe0f 	bl	8015140 <etharp_find_entry.isra.0>
  if (i < 0) {
 8015522:	1e05      	subs	r5, r0, #0
 8015524:	db53      	blt.n	80155ce <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015526:	4f40      	ldr	r7, [pc, #256]	; (8015628 <etharp_query+0x138>)
 8015528:	2318      	movs	r3, #24
 801552a:	fb03 7305 	mla	r3, r3, r5, r7
 801552e:	7d1a      	ldrb	r2, [r3, #20]
 8015530:	b91a      	cbnz	r2, 801553a <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015532:	2401      	movs	r4, #1
 8015534:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8015536:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801553a:	2318      	movs	r3, #24
 801553c:	fb03 7305 	mla	r3, r3, r5, r7
 8015540:	7d1b      	ldrb	r3, [r3, #20]
 8015542:	b933      	cbnz	r3, 8015552 <etharp_query+0x62>
 8015544:	4b39      	ldr	r3, [pc, #228]	; (801562c <etharp_query+0x13c>)
 8015546:	493a      	ldr	r1, [pc, #232]	; (8015630 <etharp_query+0x140>)
 8015548:	483a      	ldr	r0, [pc, #232]	; (8015634 <etharp_query+0x144>)
 801554a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801554e:	f006 fc71 	bl	801be34 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8015552:	b90c      	cbnz	r4, 8015558 <etharp_query+0x68>
 8015554:	2e00      	cmp	r6, #0
 8015556:	d13c      	bne.n	80155d2 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8015558:	4649      	mov	r1, r9
 801555a:	4640      	mov	r0, r8
 801555c:	f7ff ff2c 	bl	80153b8 <etharp_request>
    if (q == NULL) {
 8015560:	2e00      	cmp	r6, #0
 8015562:	d138      	bne.n	80155d6 <etharp_query+0xe6>
}
 8015564:	b002      	add	sp, #8
 8015566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801556a:	d1fb      	bne.n	8015564 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801556c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 801562c <etharp_query+0x13c>
 8015570:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 801563c <etharp_query+0x14c>
 8015574:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8015634 <etharp_query+0x144>
 8015578:	4634      	mov	r4, r6
    while (p) {
 801557a:	b99c      	cbnz	r4, 80155a4 <etharp_query+0xb4>
      pbuf_ref(p);
 801557c:	4630      	mov	r0, r6
 801557e:	f001 fdc9 	bl	8017114 <pbuf_ref>
    if (p != NULL) {
 8015582:	2e00      	cmp	r6, #0
 8015584:	d04c      	beq.n	8015620 <etharp_query+0x130>
 8015586:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8015588:	2318      	movs	r3, #24
 801558a:	fb03 f205 	mul.w	r2, r3, r5
 801558e:	461c      	mov	r4, r3
 8015590:	58b8      	ldr	r0, [r7, r2]
 8015592:	b108      	cbz	r0, 8015598 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8015594:	f001 fc00 	bl	8016d98 <pbuf_free>
      arp_table[i].q = p;
 8015598:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 801559c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 801559e:	f847 8003 	str.w	r8, [r7, r3]
 80155a2:	e7df      	b.n	8015564 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80155a4:	8962      	ldrh	r2, [r4, #10]
 80155a6:	8923      	ldrh	r3, [r4, #8]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d108      	bne.n	80155be <etharp_query+0xce>
 80155ac:	6823      	ldr	r3, [r4, #0]
 80155ae:	b133      	cbz	r3, 80155be <etharp_query+0xce>
 80155b0:	4643      	mov	r3, r8
 80155b2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80155b6:	4649      	mov	r1, r9
 80155b8:	4650      	mov	r0, sl
 80155ba:	f006 fc3b 	bl	801be34 <iprintf>
      if (p->type != PBUF_ROM) {
 80155be:	7b23      	ldrb	r3, [r4, #12]
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d11e      	bne.n	8015602 <etharp_query+0x112>
      p = p->next;
 80155c4:	6824      	ldr	r4, [r4, #0]
 80155c6:	e7d8      	b.n	801557a <etharp_query+0x8a>
    return ERR_ARG;
 80155c8:	f06f 000f 	mvn.w	r0, #15
 80155cc:	e7ca      	b.n	8015564 <etharp_query+0x74>
 80155ce:	4628      	mov	r0, r5
 80155d0:	e7c8      	b.n	8015564 <etharp_query+0x74>
  err_t result = ERR_MEM;
 80155d2:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80155d6:	2318      	movs	r3, #24
 80155d8:	fb03 7205 	mla	r2, r3, r5, r7
 80155dc:	7d12      	ldrb	r2, [r2, #20]
 80155de:	2a01      	cmp	r2, #1
 80155e0:	d9c3      	bls.n	801556a <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80155e2:	4a15      	ldr	r2, [pc, #84]	; (8015638 <etharp_query+0x148>)
 80155e4:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80155e6:	220c      	movs	r2, #12
 80155e8:	fb13 2305 	smlabb	r3, r3, r5, r2
 80155ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155f0:	9200      	str	r2, [sp, #0]
 80155f2:	443b      	add	r3, r7
 80155f4:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80155f8:	4631      	mov	r1, r6
 80155fa:	4640      	mov	r0, r8
 80155fc:	f005 fa2e 	bl	801aa5c <ethernet_output>
 8015600:	e7b0      	b.n	8015564 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8015602:	2200      	movs	r2, #0
 8015604:	8921      	ldrh	r1, [r4, #8]
 8015606:	2002      	movs	r0, #2
 8015608:	f001 fc30 	bl	8016e6c <pbuf_alloc>
      if (p != NULL) {
 801560c:	4680      	mov	r8, r0
 801560e:	b138      	cbz	r0, 8015620 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015610:	4631      	mov	r1, r6
 8015612:	f001 fdd5 	bl	80171c0 <pbuf_copy>
 8015616:	2800      	cmp	r0, #0
 8015618:	d0b6      	beq.n	8015588 <etharp_query+0x98>
          pbuf_free(p);
 801561a:	4640      	mov	r0, r8
 801561c:	f001 fbbc 	bl	8016d98 <pbuf_free>
      result = ERR_MEM;
 8015620:	f04f 30ff 	mov.w	r0, #4294967295
 8015624:	e79e      	b.n	8015564 <etharp_query+0x74>
 8015626:	bf00      	nop
 8015628:	20003f6c 	.word	0x20003f6c
 801562c:	0801f0b5 	.word	0x0801f0b5
 8015630:	0801f073 	.word	0x0801f073
 8015634:	0801c6e3 	.word	0x0801c6e3
 8015638:	2000405c 	.word	0x2000405c
 801563c:	0801f09b 	.word	0x0801f09b

08015640 <etharp_output>:
{
 8015640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015642:	460e      	mov	r6, r1
 8015644:	b085      	sub	sp, #20
 8015646:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015648:	4604      	mov	r4, r0
 801564a:	b930      	cbnz	r0, 801565a <etharp_output+0x1a>
 801564c:	4b3e      	ldr	r3, [pc, #248]	; (8015748 <etharp_output+0x108>)
 801564e:	493f      	ldr	r1, [pc, #252]	; (801574c <etharp_output+0x10c>)
 8015650:	483f      	ldr	r0, [pc, #252]	; (8015750 <etharp_output+0x110>)
 8015652:	f240 321b 	movw	r2, #795	; 0x31b
 8015656:	f006 fbed 	bl	801be34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801565a:	b936      	cbnz	r6, 801566a <etharp_output+0x2a>
 801565c:	4b3a      	ldr	r3, [pc, #232]	; (8015748 <etharp_output+0x108>)
 801565e:	493d      	ldr	r1, [pc, #244]	; (8015754 <etharp_output+0x114>)
 8015660:	483b      	ldr	r0, [pc, #236]	; (8015750 <etharp_output+0x110>)
 8015662:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015666:	f006 fbe5 	bl	801be34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801566a:	b935      	cbnz	r5, 801567a <etharp_output+0x3a>
 801566c:	4b36      	ldr	r3, [pc, #216]	; (8015748 <etharp_output+0x108>)
 801566e:	493a      	ldr	r1, [pc, #232]	; (8015758 <etharp_output+0x118>)
 8015670:	4837      	ldr	r0, [pc, #220]	; (8015750 <etharp_output+0x110>)
 8015672:	f240 321d 	movw	r2, #797	; 0x31d
 8015676:	f006 fbdd 	bl	801be34 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801567a:	4621      	mov	r1, r4
 801567c:	6828      	ldr	r0, [r5, #0]
 801567e:	f000 fad6 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 8015682:	2800      	cmp	r0, #0
 8015684:	d15b      	bne.n	801573e <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015686:	682b      	ldr	r3, [r5, #0]
 8015688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801568c:	2ae0      	cmp	r2, #224	; 0xe0
 801568e:	d11d      	bne.n	80156cc <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015690:	2301      	movs	r3, #1
 8015692:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015696:	235e      	movs	r3, #94	; 0x5e
 8015698:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801569c:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801569e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80156a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156a6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80156aa:	78ab      	ldrb	r3, [r5, #2]
 80156ac:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80156b0:	78eb      	ldrb	r3, [r5, #3]
 80156b2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80156b6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80156b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80156bc:	9200      	str	r2, [sp, #0]
 80156be:	4631      	mov	r1, r6
 80156c0:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80156c4:	4620      	mov	r0, r4
 80156c6:	f005 f9c9 	bl	801aa5c <ethernet_output>
 80156ca:	e01f      	b.n	801570c <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156cc:	6862      	ldr	r2, [r4, #4]
 80156ce:	68a1      	ldr	r1, [r4, #8]
 80156d0:	405a      	eors	r2, r3
 80156d2:	420a      	tst	r2, r1
 80156d4:	d008      	beq.n	80156e8 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 80156d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80156dc:	4293      	cmp	r3, r2
 80156de:	d003      	beq.n	80156e8 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80156e0:	68e3      	ldr	r3, [r4, #12]
 80156e2:	b373      	cbz	r3, 8015742 <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80156e4:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156e8:	4b1c      	ldr	r3, [pc, #112]	; (801575c <etharp_output+0x11c>)
 80156ea:	491d      	ldr	r1, [pc, #116]	; (8015760 <etharp_output+0x120>)
 80156ec:	781a      	ldrb	r2, [r3, #0]
 80156ee:	2018      	movs	r0, #24
 80156f0:	fb00 1002 	mla	r0, r0, r2, r1
 80156f4:	7d01      	ldrb	r1, [r0, #20]
 80156f6:	2901      	cmp	r1, #1
 80156f8:	4619      	mov	r1, r3
 80156fa:	d909      	bls.n	8015710 <etharp_output+0xd0>
 80156fc:	682f      	ldr	r7, [r5, #0]
 80156fe:	6843      	ldr	r3, [r0, #4]
 8015700:	429f      	cmp	r7, r3
 8015702:	d105      	bne.n	8015710 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8015704:	4631      	mov	r1, r6
 8015706:	4620      	mov	r0, r4
 8015708:	f7ff fe96 	bl	8015438 <etharp_output_to_arp_index>
}
 801570c:	b005      	add	sp, #20
 801570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015710:	4b13      	ldr	r3, [pc, #76]	; (8015760 <etharp_output+0x120>)
{
 8015712:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015714:	7d18      	ldrb	r0, [r3, #20]
 8015716:	2801      	cmp	r0, #1
 8015718:	d906      	bls.n	8015728 <etharp_output+0xe8>
 801571a:	682f      	ldr	r7, [r5, #0]
 801571c:	6858      	ldr	r0, [r3, #4]
 801571e:	4287      	cmp	r7, r0
 8015720:	d102      	bne.n	8015728 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 8015722:	b2d2      	uxtb	r2, r2
 8015724:	700a      	strb	r2, [r1, #0]
 8015726:	e7ed      	b.n	8015704 <etharp_output+0xc4>
 8015728:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801572a:	2a0a      	cmp	r2, #10
 801572c:	f103 0318 	add.w	r3, r3, #24
 8015730:	d1f0      	bne.n	8015714 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8015732:	4632      	mov	r2, r6
 8015734:	4629      	mov	r1, r5
 8015736:	4620      	mov	r0, r4
 8015738:	f7ff feda 	bl	80154f0 <etharp_query>
 801573c:	e7e6      	b.n	801570c <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 801573e:	4b09      	ldr	r3, [pc, #36]	; (8015764 <etharp_output+0x124>)
 8015740:	e7ba      	b.n	80156b8 <etharp_output+0x78>
            return ERR_RTE;
 8015742:	f06f 0003 	mvn.w	r0, #3
 8015746:	e7e1      	b.n	801570c <etharp_output+0xcc>
 8015748:	0801f0b5 	.word	0x0801f0b5
 801574c:	0801f0ec 	.word	0x0801f0ec
 8015750:	0801c6e3 	.word	0x0801c6e3
 8015754:	0801fb37 	.word	0x0801fb37
 8015758:	0801f000 	.word	0x0801f000
 801575c:	2000405c 	.word	0x2000405c
 8015760:	20003f6c 	.word	0x20003f6c
 8015764:	080206fc 	.word	0x080206fc

08015768 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8015768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801576a:	4604      	mov	r4, r0
 801576c:	b087      	sub	sp, #28
 801576e:	460f      	mov	r7, r1
 8015770:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015772:	2124      	movs	r1, #36	; 0x24
 8015774:	2200      	movs	r2, #0
 8015776:	2001      	movs	r0, #1
 8015778:	f001 fb78 	bl	8016e6c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801577c:	4605      	mov	r5, r0
 801577e:	b3a0      	cbz	r0, 80157ea <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015780:	8943      	ldrh	r3, [r0, #10]
 8015782:	2b23      	cmp	r3, #35	; 0x23
 8015784:	d806      	bhi.n	8015794 <icmp_send_response.isra.0+0x2c>
 8015786:	4b1a      	ldr	r3, [pc, #104]	; (80157f0 <icmp_send_response.isra.0+0x88>)
 8015788:	491a      	ldr	r1, [pc, #104]	; (80157f4 <icmp_send_response.isra.0+0x8c>)
 801578a:	481b      	ldr	r0, [pc, #108]	; (80157f8 <icmp_send_response.isra.0+0x90>)
 801578c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015790:	f006 fb50 	bl	801be34 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015794:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015796:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8015798:	2300      	movs	r3, #0
 801579a:	7123      	strb	r3, [r4, #4]
 801579c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 801579e:	71a3      	strb	r3, [r4, #6]
 80157a0:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 80157a2:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 80157a4:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80157a6:	4613      	mov	r3, r2
 80157a8:	f104 0108 	add.w	r1, r4, #8
 80157ac:	f102 001c 	add.w	r0, r2, #28
 80157b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80157b4:	f841 6b04 	str.w	r6, [r1], #4
 80157b8:	4283      	cmp	r3, r0
 80157ba:	d1f9      	bne.n	80157b0 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80157bc:	ae06      	add	r6, sp, #24
 80157be:	68d3      	ldr	r3, [r2, #12]
 80157c0:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80157c4:	4630      	mov	r0, r6
 80157c6:	f000 f8bb 	bl	8015940 <ip4_route>
#endif
  if (netif != NULL) {
 80157ca:	b158      	cbz	r0, 80157e4 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80157cc:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80157ce:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80157d0:	70a1      	strb	r1, [r4, #2]
 80157d2:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80157d4:	4632      	mov	r2, r6
 80157d6:	9002      	str	r0, [sp, #8]
 80157d8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80157dc:	4628      	mov	r0, r5
 80157de:	23ff      	movs	r3, #255	; 0xff
 80157e0:	f000 fa14 	bl	8015c0c <ip4_output_if>
  }
  pbuf_free(q);
 80157e4:	4628      	mov	r0, r5
 80157e6:	f001 fad7 	bl	8016d98 <pbuf_free>
}
 80157ea:	b007      	add	sp, #28
 80157ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ee:	bf00      	nop
 80157f0:	0801f1d3 	.word	0x0801f1d3
 80157f4:	0801f208 	.word	0x0801f208
 80157f8:	0801c6e3 	.word	0x0801c6e3

080157fc <icmp_input>:
{
 80157fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8015800:	4b44      	ldr	r3, [pc, #272]	; (8015914 <icmp_input+0x118>)
 8015802:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8015806:	f899 5000 	ldrb.w	r5, [r9]
 801580a:	f005 050f 	and.w	r5, r5, #15
 801580e:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8015810:	2d13      	cmp	r5, #19
{
 8015812:	b085      	sub	sp, #20
 8015814:	4604      	mov	r4, r0
 8015816:	4688      	mov	r8, r1
 8015818:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 801581a:	d92a      	bls.n	8015872 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 801581c:	8942      	ldrh	r2, [r0, #10]
 801581e:	2a03      	cmp	r2, #3
 8015820:	d927      	bls.n	8015872 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8015822:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8015824:	7812      	ldrb	r2, [r2, #0]
 8015826:	2a08      	cmp	r2, #8
 8015828:	d123      	bne.n	8015872 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801582a:	6958      	ldr	r0, [r3, #20]
 801582c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8015830:	2ae0      	cmp	r2, #224	; 0xe0
 8015832:	d01e      	beq.n	8015872 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015834:	6819      	ldr	r1, [r3, #0]
 8015836:	f000 f9fa 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 801583a:	4606      	mov	r6, r0
 801583c:	b9c8      	cbnz	r0, 8015872 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801583e:	8923      	ldrh	r3, [r4, #8]
 8015840:	2b07      	cmp	r3, #7
 8015842:	d916      	bls.n	8015872 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015844:	f105 010e 	add.w	r1, r5, #14
 8015848:	4620      	mov	r0, r4
 801584a:	f001 fa9f 	bl	8016d8c <pbuf_header>
 801584e:	2800      	cmp	r0, #0
 8015850:	d04f      	beq.n	80158f2 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8015852:	8921      	ldrh	r1, [r4, #8]
 8015854:	4429      	add	r1, r5
 8015856:	4632      	mov	r2, r6
 8015858:	b289      	uxth	r1, r1
 801585a:	2002      	movs	r0, #2
 801585c:	f001 fb06 	bl	8016e6c <pbuf_alloc>
      if (r == NULL) {
 8015860:	4606      	mov	r6, r0
 8015862:	b130      	cbz	r0, 8015872 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015864:	8942      	ldrh	r2, [r0, #10]
 8015866:	f105 0308 	add.w	r3, r5, #8
 801586a:	429a      	cmp	r2, r3
 801586c:	d207      	bcs.n	801587e <icmp_input+0x82>
        pbuf_free(r);
 801586e:	f001 fa93 	bl	8016d98 <pbuf_free>
  pbuf_free(p);
 8015872:	4620      	mov	r0, r4
}
 8015874:	b005      	add	sp, #20
 8015876:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 801587a:	f001 ba8d 	b.w	8016d98 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 801587e:	4649      	mov	r1, r9
 8015880:	462a      	mov	r2, r5
 8015882:	6840      	ldr	r0, [r0, #4]
 8015884:	f006 fdd1 	bl	801c42a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8015888:	4269      	negs	r1, r5
 801588a:	4630      	mov	r0, r6
 801588c:	f001 fa7e 	bl	8016d8c <pbuf_header>
 8015890:	b138      	cbz	r0, 80158a2 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015892:	4b21      	ldr	r3, [pc, #132]	; (8015918 <icmp_input+0x11c>)
 8015894:	4921      	ldr	r1, [pc, #132]	; (801591c <icmp_input+0x120>)
 8015896:	4822      	ldr	r0, [pc, #136]	; (8015920 <icmp_input+0x124>)
 8015898:	22af      	movs	r2, #175	; 0xaf
 801589a:	f006 facb 	bl	801be34 <iprintf>
        pbuf_free(r);
 801589e:	4630      	mov	r0, r6
 80158a0:	e7e5      	b.n	801586e <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 80158a2:	4621      	mov	r1, r4
 80158a4:	4630      	mov	r0, r6
 80158a6:	f001 fc8b 	bl	80171c0 <pbuf_copy>
 80158aa:	2800      	cmp	r0, #0
 80158ac:	d1f7      	bne.n	801589e <icmp_input+0xa2>
      pbuf_free(p);
 80158ae:	4620      	mov	r0, r4
 80158b0:	f001 fa72 	bl	8016d98 <pbuf_free>
 80158b4:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 80158b6:	4629      	mov	r1, r5
 80158b8:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 80158ba:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 80158bc:	f001 fa66 	bl	8016d8c <pbuf_header>
 80158c0:	4602      	mov	r2, r0
 80158c2:	2800      	cmp	r0, #0
 80158c4:	d1d5      	bne.n	8015872 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80158c6:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80158d0:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80158d2:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 80158d4:	70b0      	strb	r0, [r6, #2]
 80158d6:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80158d8:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80158da:	7288      	strb	r0, [r1, #10]
 80158dc:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80158de:	2101      	movs	r1, #1
 80158e0:	9101      	str	r1, [sp, #4]
 80158e2:	9000      	str	r0, [sp, #0]
 80158e4:	f8cd 8008 	str.w	r8, [sp, #8]
 80158e8:	490e      	ldr	r1, [pc, #56]	; (8015924 <icmp_input+0x128>)
 80158ea:	4620      	mov	r0, r4
 80158ec:	f000 f98e 	bl	8015c0c <ip4_output_if>
 80158f0:	e7bf      	b.n	8015872 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80158f2:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80158f6:	31f2      	adds	r1, #242	; 0xf2
 80158f8:	b209      	sxth	r1, r1
 80158fa:	4620      	mov	r0, r4
 80158fc:	f001 fa46 	bl	8016d8c <pbuf_header>
 8015900:	2800      	cmp	r0, #0
 8015902:	d0d8      	beq.n	80158b6 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015904:	4b04      	ldr	r3, [pc, #16]	; (8015918 <icmp_input+0x11c>)
 8015906:	4908      	ldr	r1, [pc, #32]	; (8015928 <icmp_input+0x12c>)
 8015908:	4805      	ldr	r0, [pc, #20]	; (8015920 <icmp_input+0x124>)
 801590a:	22c0      	movs	r2, #192	; 0xc0
 801590c:	f006 fa92 	bl	801be34 <iprintf>
        goto icmperr;
 8015910:	e7af      	b.n	8015872 <icmp_input+0x76>
 8015912:	bf00      	nop
 8015914:	200044c0 	.word	0x200044c0
 8015918:	0801f1d3 	.word	0x0801f1d3
 801591c:	0801f16c 	.word	0x0801f16c
 8015920:	0801c6e3 	.word	0x0801c6e3
 8015924:	200044d4 	.word	0x200044d4
 8015928:	0801f1a1 	.word	0x0801f1a1

0801592c <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 801592c:	460a      	mov	r2, r1
 801592e:	3004      	adds	r0, #4
 8015930:	2103      	movs	r1, #3
 8015932:	f7ff bf19 	b.w	8015768 <icmp_send_response.isra.0>

08015936 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8015936:	460a      	mov	r2, r1
 8015938:	3004      	adds	r0, #4
 801593a:	210b      	movs	r1, #11
 801593c:	f7ff bf14 	b.w	8015768 <icmp_send_response.isra.0>

08015940 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015940:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015942:	4b13      	ldr	r3, [pc, #76]	; (8015990 <ip4_route+0x50>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	b96b      	cbnz	r3, 8015964 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015948:	4a12      	ldr	r2, [pc, #72]	; (8015994 <ip4_route+0x54>)
 801594a:	6812      	ldr	r2, [r2, #0]
 801594c:	b1ea      	cbz	r2, 801598a <ip4_route+0x4a>
 801594e:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8015952:	f001 0105 	and.w	r1, r1, #5
 8015956:	2905      	cmp	r1, #5
 8015958:	d117      	bne.n	801598a <ip4_route+0x4a>
 801595a:	6851      	ldr	r1, [r2, #4]
 801595c:	2900      	cmp	r1, #0
 801595e:	bf18      	it	ne
 8015960:	4613      	movne	r3, r2
 8015962:	e012      	b.n	801598a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015964:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8015968:	f004 0205 	and.w	r2, r4, #5
 801596c:	2a05      	cmp	r2, #5
 801596e:	d1e9      	bne.n	8015944 <ip4_route+0x4>
 8015970:	685a      	ldr	r2, [r3, #4]
 8015972:	2a00      	cmp	r2, #0
 8015974:	d0e6      	beq.n	8015944 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015976:	6801      	ldr	r1, [r0, #0]
 8015978:	689d      	ldr	r5, [r3, #8]
 801597a:	404a      	eors	r2, r1
 801597c:	422a      	tst	r2, r5
 801597e:	d004      	beq.n	801598a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015980:	07a2      	lsls	r2, r4, #30
 8015982:	d4df      	bmi.n	8015944 <ip4_route+0x4>
 8015984:	68da      	ldr	r2, [r3, #12]
 8015986:	4291      	cmp	r1, r2
 8015988:	d1dc      	bne.n	8015944 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 801598a:	4618      	mov	r0, r3
 801598c:	bd30      	pop	{r4, r5, pc}
 801598e:	bf00      	nop
 8015990:	20008acc 	.word	0x20008acc
 8015994:	20008ad0 	.word	0x20008ad0

08015998 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801599c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 801599e:	f897 9000 	ldrb.w	r9, [r7]
 80159a2:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80159a6:	2b04      	cmp	r3, #4
{
 80159a8:	4605      	mov	r5, r0
 80159aa:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 80159ac:	d005      	beq.n	80159ba <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80159ae:	4628      	mov	r0, r5
 80159b0:	f001 f9f2 	bl	8016d98 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80159b4:	2000      	movs	r0, #0
 80159b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80159ba:	8878      	ldrh	r0, [r7, #2]
 80159bc:	f7ff fb29 	bl	8015012 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80159c0:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 80159c2:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 80159c6:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 80159c8:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80159cc:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80159ce:	d903      	bls.n	80159d8 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80159d0:	4601      	mov	r1, r0
 80159d2:	4628      	mov	r0, r5
 80159d4:	f001 fb26 	bl	8017024 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80159d8:	896b      	ldrh	r3, [r5, #10]
 80159da:	454b      	cmp	r3, r9
 80159dc:	d3e7      	bcc.n	80159ae <ip4_input+0x16>
 80159de:	892b      	ldrh	r3, [r5, #8]
 80159e0:	42a3      	cmp	r3, r4
 80159e2:	d3e4      	bcc.n	80159ae <ip4_input+0x16>
 80159e4:	f1b9 0f13 	cmp.w	r9, #19
 80159e8:	d9e1      	bls.n	80159ae <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	4c49      	ldr	r4, [pc, #292]	; (8015b14 <ip4_input+0x17c>)
 80159ee:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80159f4:	68fa      	ldr	r2, [r7, #12]
 80159f6:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159f8:	2be0      	cmp	r3, #224	; 0xe0
 80159fa:	d139      	bne.n	8015a70 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80159fc:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8015a00:	07da      	lsls	r2, r3, #31
 8015a02:	d503      	bpl.n	8015a0c <ip4_input+0x74>
 8015a04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d158      	bne.n	8015abe <ip4_input+0x126>
      netif = NULL;
 8015a0c:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a0e:	4641      	mov	r1, r8
 8015a10:	6920      	ldr	r0, [r4, #16]
 8015a12:	f000 f90c 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d1c9      	bne.n	80159ae <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015a1a:	6923      	ldr	r3, [r4, #16]
 8015a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a20:	2be0      	cmp	r3, #224	; 0xe0
 8015a22:	d0c4      	beq.n	80159ae <ip4_input+0x16>
  if (netif == NULL) {
 8015a24:	2e00      	cmp	r6, #0
 8015a26:	d0c2      	beq.n	80159ae <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015a28:	88fb      	ldrh	r3, [r7, #6]
 8015a2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015a2e:	b133      	cbz	r3, 8015a3e <ip4_input+0xa6>
    p = ip4_reass(p);
 8015a30:	4628      	mov	r0, r5
 8015a32:	f000 fb17 	bl	8016064 <ip4_reass>
    if (p == NULL) {
 8015a36:	4605      	mov	r5, r0
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d0bb      	beq.n	80159b4 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8015a3c:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8015a3e:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8015a40:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015a44:	783b      	ldrb	r3, [r7, #0]
 8015a46:	f003 030f 	and.w	r3, r3, #15
 8015a4a:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015a4c:	f1c9 0100 	rsb	r1, r9, #0
 8015a50:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015a52:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015a54:	f001 f99a 	bl	8016d8c <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8015a58:	7a7b      	ldrb	r3, [r7, #9]
 8015a5a:	2b06      	cmp	r3, #6
 8015a5c:	d03d      	beq.n	8015ada <ip4_input+0x142>
 8015a5e:	2b11      	cmp	r3, #17
 8015a60:	d02f      	beq.n	8015ac2 <ip4_input+0x12a>
 8015a62:	2b01      	cmp	r3, #1
 8015a64:	d13e      	bne.n	8015ae4 <ip4_input+0x14c>
      icmp_input(p, inp);
 8015a66:	4641      	mov	r1, r8
 8015a68:	4628      	mov	r0, r5
 8015a6a:	f7ff fec7 	bl	80157fc <icmp_input>
      break;
 8015a6e:	e02c      	b.n	8015aca <ip4_input+0x132>
        netif = netif_list;
 8015a70:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8015b18 <ip4_input+0x180>
 8015a74:	4646      	mov	r6, r8
 8015a76:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015a7a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 8015a7e:	07db      	lsls	r3, r3, #31
 8015a80:	d404      	bmi.n	8015a8c <ip4_input+0xf4>
      if (first) {
 8015a82:	f1ba 0f00 	cmp.w	sl, #0
 8015a86:	d10d      	bne.n	8015aa4 <ip4_input+0x10c>
        netif = netif->next;
 8015a88:	6836      	ldr	r6, [r6, #0]
 8015a8a:	e010      	b.n	8015aae <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015a8c:	6873      	ldr	r3, [r6, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d0f7      	beq.n	8015a82 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a92:	6960      	ldr	r0, [r4, #20]
 8015a94:	4283      	cmp	r3, r0
 8015a96:	d0ba      	beq.n	8015a0e <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015a98:	4631      	mov	r1, r6
 8015a9a:	f000 f8c8 	bl	8015c2e <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d0ef      	beq.n	8015a82 <ip4_input+0xea>
 8015aa2:	e7b4      	b.n	8015a0e <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8015aa4:	7d23      	ldrb	r3, [r4, #20]
 8015aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8015aa8:	d0b0      	beq.n	8015a0c <ip4_input+0x74>
        netif = netif_list;
 8015aaa:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8015aae:	4546      	cmp	r6, r8
        netif = netif->next;
 8015ab0:	bf08      	it	eq
 8015ab2:	6836      	ldreq	r6, [r6, #0]
 8015ab4:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8015ab8:	2e00      	cmp	r6, #0
 8015aba:	d1de      	bne.n	8015a7a <ip4_input+0xe2>
 8015abc:	e7a6      	b.n	8015a0c <ip4_input+0x74>
 8015abe:	4646      	mov	r6, r8
 8015ac0:	e7a5      	b.n	8015a0e <ip4_input+0x76>
      udp_input(p, inp);
 8015ac2:	4641      	mov	r1, r8
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	f004 fe4f 	bl	801a768 <udp_input>
  ip_data.current_netif = NULL;
 8015aca:	2300      	movs	r3, #0
 8015acc:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8015ace:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8015ad0:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015ad2:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015ad4:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015ad6:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8015ad8:	e76c      	b.n	80159b4 <ip4_input+0x1c>
      tcp_input(p, inp);
 8015ada:	4641      	mov	r1, r8
 8015adc:	4628      	mov	r0, r5
 8015ade:	f003 f907 	bl	8018cf0 <tcp_input>
      break;
 8015ae2:	e7f2      	b.n	8015aca <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ae4:	4631      	mov	r1, r6
 8015ae6:	6960      	ldr	r0, [r4, #20]
 8015ae8:	f000 f8a1 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 8015aec:	b968      	cbnz	r0, 8015b0a <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015aee:	6963      	ldr	r3, [r4, #20]
 8015af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015af4:	2be0      	cmp	r3, #224	; 0xe0
 8015af6:	d008      	beq.n	8015b0a <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8015af8:	4649      	mov	r1, r9
 8015afa:	4628      	mov	r0, r5
 8015afc:	f001 f949 	bl	8016d92 <pbuf_header_force>
        p->payload = iphdr;
 8015b00:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015b02:	2102      	movs	r1, #2
 8015b04:	4628      	mov	r0, r5
 8015b06:	f7ff ff11 	bl	801592c <icmp_dest_unreach>
      pbuf_free(p);
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	f001 f944 	bl	8016d98 <pbuf_free>
 8015b10:	e7db      	b.n	8015aca <ip4_input+0x132>
 8015b12:	bf00      	nop
 8015b14:	200044c0 	.word	0x200044c0
 8015b18:	20008acc 	.word	0x20008acc

08015b1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8015b1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b20:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015b22:	89c3      	ldrh	r3, [r0, #14]
{
 8015b24:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015b28:	2b01      	cmp	r3, #1
{
 8015b2a:	4605      	mov	r5, r0
 8015b2c:	468a      	mov	sl, r1
 8015b2e:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015b30:	d006      	beq.n	8015b40 <ip4_output_if_src+0x24>
 8015b32:	4b30      	ldr	r3, [pc, #192]	; (8015bf4 <ip4_output_if_src+0xd8>)
 8015b34:	4930      	ldr	r1, [pc, #192]	; (8015bf8 <ip4_output_if_src+0xdc>)
 8015b36:	4831      	ldr	r0, [pc, #196]	; (8015bfc <ip4_output_if_src+0xe0>)
 8015b38:	f240 3233 	movw	r2, #819	; 0x333
 8015b3c:	f006 f97a 	bl	801be34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015b40:	2e00      	cmp	r6, #0
 8015b42:	d047      	beq.n	8015bd4 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8015b44:	2114      	movs	r1, #20
 8015b46:	4628      	mov	r0, r5
 8015b48:	f001 f920 	bl	8016d8c <pbuf_header>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	d14e      	bne.n	8015bee <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015b50:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8015b52:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015b54:	2b13      	cmp	r3, #19
 8015b56:	d806      	bhi.n	8015b66 <ip4_output_if_src+0x4a>
 8015b58:	4b26      	ldr	r3, [pc, #152]	; (8015bf4 <ip4_output_if_src+0xd8>)
 8015b5a:	4929      	ldr	r1, [pc, #164]	; (8015c00 <ip4_output_if_src+0xe4>)
 8015b5c:	4827      	ldr	r0, [pc, #156]	; (8015bfc <ip4_output_if_src+0xe0>)
 8015b5e:	f240 3261 	movw	r2, #865	; 0x361
 8015b62:	f006 f967 	bl	801be34 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8015b66:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8015b6a:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015b6c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015b6e:	6833      	ldr	r3, [r6, #0]
 8015b70:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015b72:	2345      	movs	r3, #69	; 0x45
 8015b74:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8015b76:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015b7a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b7c:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015b7e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8015c08 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b82:	f7ff fa46 	bl	8015012 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8015b86:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b88:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8015b8a:	71a7      	strb	r7, [r4, #6]
 8015b8c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015b8e:	f8b9 0000 	ldrh.w	r0, [r9]
 8015b92:	f7ff fa3e 	bl	8015012 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015b96:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015b9a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8015ba2:	f1ba 0f00 	cmp.w	sl, #0
 8015ba6:	d112      	bne.n	8015bce <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015ba8:	4b16      	ldr	r3, [pc, #88]	; (8015c04 <ip4_output_if_src+0xe8>)
 8015baa:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015bac:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015bae:	72a7      	strb	r7, [r4, #10]
 8015bb0:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015bb2:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8015bb6:	b19b      	cbz	r3, 8015be0 <ip4_output_if_src+0xc4>
 8015bb8:	892a      	ldrh	r2, [r5, #8]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d910      	bls.n	8015be0 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8015bbe:	4632      	mov	r2, r6
 8015bc0:	4641      	mov	r1, r8
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f000 fbf8 	bl	80163b8 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8015bc8:	b002      	add	sp, #8
 8015bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8015bce:	f8da 3000 	ldr.w	r3, [sl]
 8015bd2:	e7eb      	b.n	8015bac <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015bd4:	686b      	ldr	r3, [r5, #4]
 8015bd6:	ae02      	add	r6, sp, #8
 8015bd8:	691b      	ldr	r3, [r3, #16]
 8015bda:	f846 3d04 	str.w	r3, [r6, #-4]!
 8015bde:	e7e8      	b.n	8015bb2 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8015be0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015be4:	4632      	mov	r2, r6
 8015be6:	4629      	mov	r1, r5
 8015be8:	4640      	mov	r0, r8
 8015bea:	4798      	blx	r3
 8015bec:	e7ec      	b.n	8015bc8 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8015bee:	f06f 0001 	mvn.w	r0, #1
 8015bf2:	e7e9      	b.n	8015bc8 <ip4_output_if_src+0xac>
 8015bf4:	0801f234 	.word	0x0801f234
 8015bf8:	0801f268 	.word	0x0801f268
 8015bfc:	0801c6e3 	.word	0x0801c6e3
 8015c00:	0801f274 	.word	0x0801f274
 8015c04:	0801f2e4 	.word	0x0801f2e4
 8015c08:	2000405e 	.word	0x2000405e

08015c0c <ip4_output_if>:
{
 8015c0c:	b4f0      	push	{r4, r5, r6, r7}
 8015c0e:	9c06      	ldr	r4, [sp, #24]
 8015c10:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8015c14:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015c18:	b11a      	cbz	r2, 8015c22 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8015c1a:	b109      	cbz	r1, 8015c20 <ip4_output_if+0x14>
 8015c1c:	680f      	ldr	r7, [r1, #0]
 8015c1e:	b907      	cbnz	r7, 8015c22 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8015c20:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c22:	9406      	str	r4, [sp, #24]
 8015c24:	9605      	str	r6, [sp, #20]
 8015c26:	9504      	str	r5, [sp, #16]
}
 8015c28:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c2a:	f7ff bf77 	b.w	8015b1c <ip4_output_if_src>

08015c2e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015c2e:	1e43      	subs	r3, r0, #1
 8015c30:	3303      	adds	r3, #3
 8015c32:	d811      	bhi.n	8015c58 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015c34:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8015c38:	f013 0302 	ands.w	r3, r3, #2
 8015c3c:	d00e      	beq.n	8015c5c <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015c3e:	684a      	ldr	r2, [r1, #4]
 8015c40:	4290      	cmp	r0, r2
 8015c42:	d00b      	beq.n	8015c5c <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015c44:	688b      	ldr	r3, [r1, #8]
 8015c46:	4042      	eors	r2, r0
 8015c48:	421a      	tst	r2, r3
 8015c4a:	d107      	bne.n	8015c5c <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c4c:	43db      	mvns	r3, r3
 8015c4e:	4383      	bics	r3, r0
    return 1;
 8015c50:	bf0c      	ite	eq
 8015c52:	2001      	moveq	r0, #1
 8015c54:	2000      	movne	r0, #0
 8015c56:	4770      	bx	lr
 8015c58:	2001      	movs	r0, #1
 8015c5a:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8015c5c:	2000      	movs	r0, #0
  }
}
 8015c5e:	4770      	bx	lr

08015c60 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8015c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8015c64:	7802      	ldrb	r2, [r0, #0]
{
 8015c66:	460d      	mov	r5, r1
  u32_t *pp = parts;
 8015c68:	466b      	mov	r3, sp
 8015c6a:	466f      	mov	r7, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8015c6c:	f10d 0e0c 	add.w	lr, sp, #12
    if (!isdigit(c)) {
 8015c70:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015c74:	2909      	cmp	r1, #9
 8015c76:	f200 8085 	bhi.w	8015d84 <ip4addr_aton+0x124>
    if (c == '0') {
 8015c7a:	2a30      	cmp	r2, #48	; 0x30
 8015c7c:	d118      	bne.n	8015cb0 <ip4addr_aton+0x50>
      c = *++cp;
 8015c7e:	7842      	ldrb	r2, [r0, #1]
      if (c == 'x' || c == 'X') {
 8015c80:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8015c84:	2958      	cmp	r1, #88	; 0x58
        c = *++cp;
 8015c86:	bf0d      	iteet	eq
 8015c88:	7882      	ldrbeq	r2, [r0, #2]
      c = *++cp;
 8015c8a:	3001      	addne	r0, #1
        base = 8;
 8015c8c:	2608      	movne	r6, #8
        c = *++cp;
 8015c8e:	3002      	addeq	r0, #2
        base = 16;
 8015c90:	bf08      	it	eq
 8015c92:	2610      	moveq	r6, #16
 8015c94:	3001      	adds	r0, #1
 8015c96:	2400      	movs	r4, #0
      if (isdigit(c)) {
 8015c98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015c9c:	2909      	cmp	r1, #9
 8015c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8015ca2:	d807      	bhi.n	8015cb4 <ip4addr_aton+0x54>
        val = (val * base) + (u32_t)(c - '0');
 8015ca4:	fb04 2406 	mla	r4, r4, r6, r2
 8015ca8:	3c30      	subs	r4, #48	; 0x30
        c = *++cp;
 8015caa:	7802      	ldrb	r2, [r0, #0]
 8015cac:	3001      	adds	r0, #1
 8015cae:	e7f3      	b.n	8015c98 <ip4addr_aton+0x38>
    base = 10;
 8015cb0:	260a      	movs	r6, #10
 8015cb2:	e7ef      	b.n	8015c94 <ip4addr_aton+0x34>
      } else if (base == 16 && isxdigit(c)) {
 8015cb4:	2e10      	cmp	r6, #16
 8015cb6:	d114      	bne.n	8015ce2 <ip4addr_aton+0x82>
 8015cb8:	f022 0120 	bic.w	r1, r2, #32
 8015cbc:	3941      	subs	r1, #65	; 0x41
 8015cbe:	b2c9      	uxtb	r1, r1
 8015cc0:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
 8015cc4:	2905      	cmp	r1, #5
 8015cc6:	fa5f fc8c 	uxtb.w	ip, ip
 8015cca:	d80a      	bhi.n	8015ce2 <ip4addr_aton+0x82>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8015ccc:	f1bc 0f1a 	cmp.w	ip, #26
 8015cd0:	f102 020a 	add.w	r2, r2, #10
 8015cd4:	bf34      	ite	cc
 8015cd6:	2161      	movcc	r1, #97	; 0x61
 8015cd8:	2141      	movcs	r1, #65	; 0x41
 8015cda:	1a52      	subs	r2, r2, r1
 8015cdc:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
 8015ce0:	e7e3      	b.n	8015caa <ip4addr_aton+0x4a>
    if (c == '.') {
 8015ce2:	2a2e      	cmp	r2, #46	; 0x2e
 8015ce4:	d108      	bne.n	8015cf8 <ip4addr_aton+0x98>
      if (pp >= parts + 3) {
 8015ce6:	4573      	cmp	r3, lr
 8015ce8:	d04c      	beq.n	8015d84 <ip4addr_aton+0x124>
        return 0;
      }
      *pp++ = val;
 8015cea:	f843 4b04 	str.w	r4, [r3], #4
      c = *++cp;
 8015cee:	f108 0001 	add.w	r0, r8, #1
 8015cf2:	f898 2001 	ldrb.w	r2, [r8, #1]
    if (!isdigit(c)) {
 8015cf6:	e7bb      	b.n	8015c70 <ip4addr_aton+0x10>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8015cf8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8015cfc:	d002      	beq.n	8015d04 <ip4addr_aton+0xa4>
 8015cfe:	3a09      	subs	r2, #9
 8015d00:	2a04      	cmp	r2, #4
 8015d02:	d83f      	bhi.n	8015d84 <ip4addr_aton+0x124>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015d04:	1bd8      	subs	r0, r3, r7
 8015d06:	1080      	asrs	r0, r0, #2
 8015d08:	3001      	adds	r0, #1
 8015d0a:	2804      	cmp	r0, #4
 8015d0c:	d832      	bhi.n	8015d74 <ip4addr_aton+0x114>
 8015d0e:	e8df f000 	tbb	[pc, r0]
 8015d12:	0b3a      	.short	0x0b3a
 8015d14:	1203      	.short	0x1203
 8015d16:	20          	.byte	0x20
 8015d17:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8015d18:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8015d1c:	d232      	bcs.n	8015d84 <ip4addr_aton+0x124>
      return 0;
    }
    if (parts[0] > 0xff) {
 8015d1e:	9b00      	ldr	r3, [sp, #0]
 8015d20:	2bff      	cmp	r3, #255	; 0xff
 8015d22:	d82f      	bhi.n	8015d84 <ip4addr_aton+0x124>
      return 0;
    }
    val |= parts[0] << 24;
 8015d24:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 8015d28:	b11d      	cbz	r5, 8015d32 <ip4addr_aton+0xd2>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	f7ff f974 	bl	8015018 <lwip_htonl>
 8015d30:	6028      	str	r0, [r5, #0]
  }
  return 1;
 8015d32:	2001      	movs	r0, #1
 8015d34:	e027      	b.n	8015d86 <ip4addr_aton+0x126>
    if (val > 0xffff) {
 8015d36:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8015d3a:	d223      	bcs.n	8015d84 <ip4addr_aton+0x124>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8015d3c:	9a00      	ldr	r2, [sp, #0]
 8015d3e:	2aff      	cmp	r2, #255	; 0xff
 8015d40:	d820      	bhi.n	8015d84 <ip4addr_aton+0x124>
 8015d42:	9b01      	ldr	r3, [sp, #4]
 8015d44:	2bff      	cmp	r3, #255	; 0xff
 8015d46:	d81d      	bhi.n	8015d84 <ip4addr_aton+0x124>
    val |= (parts[0] << 24) | (parts[1] << 16);
 8015d48:	041b      	lsls	r3, r3, #16
 8015d4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015d4e:	431c      	orrs	r4, r3
    break;
 8015d50:	e7ea      	b.n	8015d28 <ip4addr_aton+0xc8>
    if (val > 0xff) {
 8015d52:	2cff      	cmp	r4, #255	; 0xff
 8015d54:	d816      	bhi.n	8015d84 <ip4addr_aton+0x124>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8015d56:	9900      	ldr	r1, [sp, #0]
 8015d58:	29ff      	cmp	r1, #255	; 0xff
 8015d5a:	d813      	bhi.n	8015d84 <ip4addr_aton+0x124>
 8015d5c:	9b01      	ldr	r3, [sp, #4]
 8015d5e:	2bff      	cmp	r3, #255	; 0xff
 8015d60:	d810      	bhi.n	8015d84 <ip4addr_aton+0x124>
 8015d62:	9a02      	ldr	r2, [sp, #8]
 8015d64:	2aff      	cmp	r2, #255	; 0xff
 8015d66:	d80d      	bhi.n	8015d84 <ip4addr_aton+0x124>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015d68:	041b      	lsls	r3, r3, #16
 8015d6a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8015d6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015d72:	e7ec      	b.n	8015d4e <ip4addr_aton+0xee>
    LWIP_ASSERT("unhandled", 0);
 8015d74:	4b05      	ldr	r3, [pc, #20]	; (8015d8c <ip4addr_aton+0x12c>)
 8015d76:	4906      	ldr	r1, [pc, #24]	; (8015d90 <ip4addr_aton+0x130>)
 8015d78:	4806      	ldr	r0, [pc, #24]	; (8015d94 <ip4addr_aton+0x134>)
 8015d7a:	f240 1203 	movw	r2, #259	; 0x103
 8015d7e:	f006 f859 	bl	801be34 <iprintf>
    break;
 8015d82:	e7d1      	b.n	8015d28 <ip4addr_aton+0xc8>
      return 0;
 8015d84:	2000      	movs	r0, #0
}
 8015d86:	b004      	add	sp, #16
 8015d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d8c:	0801f2a1 	.word	0x0801f2a1
 8015d90:	0801f2da 	.word	0x0801f2da
 8015d94:	0801c6e3 	.word	0x0801c6e3

08015d98 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015d98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8015d9c:	6803      	ldr	r3, [r0, #0]
 8015d9e:	9301      	str	r3, [sp, #4]
 8015da0:	f10d 0003 	add.w	r0, sp, #3
 8015da4:	f10d 0c07 	add.w	ip, sp, #7

  rp = buf;
 8015da8:	460f      	mov	r7, r1
  int len = 0;
 8015daa:	2500      	movs	r5, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8015dac:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8015db0:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8015db4:	7844      	ldrb	r4, [r0, #1]
  int len = 0;
 8015db6:	2300      	movs	r3, #0
      inv[i++] = (char)('0' + rem);
 8015db8:	f10d 0a08 	add.w	sl, sp, #8
      rem = *ap % (u8_t)10;
 8015dbc:	fbb4 f6fe 	udiv	r6, r4, lr
      inv[i++] = (char)('0' + rem);
 8015dc0:	449a      	add	sl, r3
      rem = *ap % (u8_t)10;
 8015dc2:	fb0e 4416 	mls	r4, lr, r6, r4
      inv[i++] = (char)('0' + rem);
 8015dc6:	3430      	adds	r4, #48	; 0x30
 8015dc8:	f103 0901 	add.w	r9, r3, #1
 8015dcc:	f80a 4c08 	strb.w	r4, [sl, #-8]
    } while (*ap);
 8015dd0:	f016 04ff 	ands.w	r4, r6, #255	; 0xff
      inv[i++] = (char)('0' + rem);
 8015dd4:	fa5f f989 	uxtb.w	r9, r9
    } while (*ap);
 8015dd8:	d117      	bne.n	8015e0a <ip4addr_ntoa_r+0x72>
 8015dda:	f800 4f01 	strb.w	r4, [r0, #1]!
 8015dde:	1bed      	subs	r5, r5, r7
 8015de0:	463c      	mov	r4, r7
    while (i--) {
 8015de2:	2bff      	cmp	r3, #255	; 0xff
 8015de4:	eb04 0605 	add.w	r6, r4, r5
 8015de8:	d111      	bne.n	8015e0e <ip4addr_ntoa_r+0x76>
    if (len++ >= buflen) {
 8015dea:	4296      	cmp	r6, r2
 8015dec:	f106 0501 	add.w	r5, r6, #1
 8015df0:	da19      	bge.n	8015e26 <ip4addr_ntoa_r+0x8e>
  for (n = 0; n < 4; n++) {
 8015df2:	4560      	cmp	r0, ip
    *rp++ = '.';
 8015df4:	f104 0701 	add.w	r7, r4, #1
 8015df8:	f884 8000 	strb.w	r8, [r4]
  for (n = 0; n < 4; n++) {
 8015dfc:	d1da      	bne.n	8015db4 <ip4addr_ntoa_r+0x1c>
    ap++;
  }
  *--rp = 0;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	7023      	strb	r3, [r4, #0]
  return buf;
 8015e02:	4608      	mov	r0, r1
}
 8015e04:	b002      	add	sp, #8
 8015e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      inv[i++] = (char)('0' + rem);
 8015e0a:	464b      	mov	r3, r9
 8015e0c:	e7d4      	b.n	8015db8 <ip4addr_ntoa_r+0x20>
 8015e0e:	1e5f      	subs	r7, r3, #1
      if (len++ >= buflen) {
 8015e10:	4296      	cmp	r6, r2
 8015e12:	b2ff      	uxtb	r7, r7
 8015e14:	da07      	bge.n	8015e26 <ip4addr_ntoa_r+0x8e>
      *rp++ = inv[i];
 8015e16:	ae02      	add	r6, sp, #8
 8015e18:	4433      	add	r3, r6
 8015e1a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8015e1e:	f804 3b01 	strb.w	r3, [r4], #1
 8015e22:	463b      	mov	r3, r7
 8015e24:	e7dd      	b.n	8015de2 <ip4addr_ntoa_r+0x4a>
        return NULL;
 8015e26:	2000      	movs	r0, #0
 8015e28:	e7ec      	b.n	8015e04 <ip4addr_ntoa_r+0x6c>
	...

08015e2c <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015e2c:	2210      	movs	r2, #16
 8015e2e:	4901      	ldr	r1, [pc, #4]	; (8015e34 <ip4addr_ntoa+0x8>)
 8015e30:	f7ff bfb2 	b.w	8015d98 <ip4addr_ntoa_r>
 8015e34:	20004060 	.word	0x20004060

08015e38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e38:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015e3a:	4b0c      	ldr	r3, [pc, #48]	; (8015e6c <ip_reass_dequeue_datagram+0x34>)
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	4282      	cmp	r2, r0
{
 8015e40:	4604      	mov	r4, r0
 8015e42:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8015e44:	d107      	bne.n	8015e56 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015e46:	6802      	ldr	r2, [r0, #0]
 8015e48:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015e4a:	4621      	mov	r1, r4
 8015e4c:	2004      	movs	r0, #4
}
 8015e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8015e52:	f000 be1b 	b.w	8016a8c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015e56:	b931      	cbnz	r1, 8015e66 <ip_reass_dequeue_datagram+0x2e>
 8015e58:	4b05      	ldr	r3, [pc, #20]	; (8015e70 <ip_reass_dequeue_datagram+0x38>)
 8015e5a:	4906      	ldr	r1, [pc, #24]	; (8015e74 <ip_reass_dequeue_datagram+0x3c>)
 8015e5c:	4806      	ldr	r0, [pc, #24]	; (8015e78 <ip_reass_dequeue_datagram+0x40>)
 8015e5e:	f240 1245 	movw	r2, #325	; 0x145
 8015e62:	f005 ffe7 	bl	801be34 <iprintf>
    prev->next = ipr->next;
 8015e66:	6823      	ldr	r3, [r4, #0]
 8015e68:	602b      	str	r3, [r5, #0]
 8015e6a:	e7ee      	b.n	8015e4a <ip_reass_dequeue_datagram+0x12>
 8015e6c:	20004074 	.word	0x20004074
 8015e70:	0801f3cd 	.word	0x0801f3cd
 8015e74:	0801f406 	.word	0x0801f406
 8015e78:	0801c6e3 	.word	0x0801c6e3

08015e7c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015e7c:	4281      	cmp	r1, r0
{
 8015e7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e82:	4605      	mov	r5, r0
 8015e84:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015e86:	d105      	bne.n	8015e94 <ip_reass_free_complete_datagram+0x18>
 8015e88:	4b2f      	ldr	r3, [pc, #188]	; (8015f48 <ip_reass_free_complete_datagram+0xcc>)
 8015e8a:	4930      	ldr	r1, [pc, #192]	; (8015f4c <ip_reass_free_complete_datagram+0xd0>)
 8015e8c:	4830      	ldr	r0, [pc, #192]	; (8015f50 <ip_reass_free_complete_datagram+0xd4>)
 8015e8e:	22ab      	movs	r2, #171	; 0xab
 8015e90:	f005 ffd0 	bl	801be34 <iprintf>
  if (prev != NULL) {
 8015e94:	b147      	cbz	r7, 8015ea8 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	429d      	cmp	r5, r3
 8015e9a:	d005      	beq.n	8015ea8 <ip_reass_free_complete_datagram+0x2c>
 8015e9c:	4b2a      	ldr	r3, [pc, #168]	; (8015f48 <ip_reass_free_complete_datagram+0xcc>)
 8015e9e:	492d      	ldr	r1, [pc, #180]	; (8015f54 <ip_reass_free_complete_datagram+0xd8>)
 8015ea0:	482b      	ldr	r0, [pc, #172]	; (8015f50 <ip_reass_free_complete_datagram+0xd4>)
 8015ea2:	22ad      	movs	r2, #173	; 0xad
 8015ea4:	f005 ffc6 	bl	801be34 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015ea8:	686e      	ldr	r6, [r5, #4]
 8015eaa:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8015eac:	889a      	ldrh	r2, [r3, #4]
 8015eae:	bb92      	cbnz	r2, 8015f16 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8015eb0:	681a      	ldr	r2, [r3, #0]
 8015eb2:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015eb4:	f105 011c 	add.w	r1, r5, #28
 8015eb8:	f105 0208 	add.w	r2, r5, #8
 8015ebc:	f852 0b04 	ldr.w	r0, [r2], #4
 8015ec0:	f843 0b04 	str.w	r0, [r3], #4
 8015ec4:	428a      	cmp	r2, r1
 8015ec6:	d1f9      	bne.n	8015ebc <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015ec8:	2101      	movs	r1, #1
 8015eca:	4630      	mov	r0, r6
 8015ecc:	f7ff fd33 	bl	8015936 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	f001 f917 	bl	8017104 <pbuf_clen>
 8015ed6:	4604      	mov	r4, r0
    pbuf_free(p);
 8015ed8:	4630      	mov	r0, r6
 8015eda:	f000 ff5d 	bl	8016d98 <pbuf_free>
  p = ipr->p;
 8015ede:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ee0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8015f48 <ip_reass_free_complete_datagram+0xcc>
 8015ee4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8015f60 <ip_reass_free_complete_datagram+0xe4>
 8015ee8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8015f50 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8015eec:	b9ae      	cbnz	r6, 8015f1a <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8015eee:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015ef0:	4d19      	ldr	r5, [pc, #100]	; (8015f58 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8015ef2:	4639      	mov	r1, r7
 8015ef4:	f7ff ffa0 	bl	8015e38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015ef8:	882b      	ldrh	r3, [r5, #0]
 8015efa:	42a3      	cmp	r3, r4
 8015efc:	d205      	bcs.n	8015f0a <ip_reass_free_complete_datagram+0x8e>
 8015efe:	4b12      	ldr	r3, [pc, #72]	; (8015f48 <ip_reass_free_complete_datagram+0xcc>)
 8015f00:	4916      	ldr	r1, [pc, #88]	; (8015f5c <ip_reass_free_complete_datagram+0xe0>)
 8015f02:	4813      	ldr	r0, [pc, #76]	; (8015f50 <ip_reass_free_complete_datagram+0xd4>)
 8015f04:	22d2      	movs	r2, #210	; 0xd2
 8015f06:	f005 ff95 	bl	801be34 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8015f0a:	882b      	ldrh	r3, [r5, #0]
 8015f0c:	1b1b      	subs	r3, r3, r4
 8015f0e:	802b      	strh	r3, [r5, #0]
}
 8015f10:	4620      	mov	r0, r4
 8015f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8015f16:	2400      	movs	r4, #0
 8015f18:	e7e1      	b.n	8015ede <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8015f1a:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8015f1c:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8015f1e:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8015f22:	f001 f8ef 	bl	8017104 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f26:	4404      	add	r4, r0
 8015f28:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8015f2c:	db05      	blt.n	8015f3a <ip_reass_free_complete_datagram+0xbe>
 8015f2e:	4643      	mov	r3, r8
 8015f30:	22cc      	movs	r2, #204	; 0xcc
 8015f32:	4649      	mov	r1, r9
 8015f34:	4650      	mov	r0, sl
 8015f36:	f005 ff7d 	bl	801be34 <iprintf>
    pbuf_free(pcur);
 8015f3a:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8015f3c:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8015f3e:	f000 ff2b 	bl	8016d98 <pbuf_free>
    p = iprh->next_pbuf;
 8015f42:	465e      	mov	r6, fp
 8015f44:	e7d2      	b.n	8015eec <ip_reass_free_complete_datagram+0x70>
 8015f46:	bf00      	nop
 8015f48:	0801f3cd 	.word	0x0801f3cd
 8015f4c:	0801f41f 	.word	0x0801f41f
 8015f50:	0801c6e3 	.word	0x0801c6e3
 8015f54:	0801f42b 	.word	0x0801f42b
 8015f58:	20004070 	.word	0x20004070
 8015f5c:	0801f45a 	.word	0x0801f45a
 8015f60:	0801f43d 	.word	0x0801f43d

08015f64 <ip_reass_remove_oldest_datagram>:
{
 8015f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8015f68:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8015fd8 <ip_reass_remove_oldest_datagram+0x74>
{
 8015f6c:	4606      	mov	r6, r0
 8015f6e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8015f70:	2500      	movs	r5, #0
    other_datagrams = 0;
 8015f72:	2400      	movs	r4, #0
    r = reassdatagrams;
 8015f74:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8015f78:	4621      	mov	r1, r4
    prev = NULL;
 8015f7a:	46a6      	mov	lr, r4
    oldest = NULL;
 8015f7c:	4620      	mov	r0, r4
    while (r != NULL) {
 8015f7e:	b953      	cbnz	r3, 8015f96 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8015f80:	b110      	cbz	r0, 8015f88 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015f82:	f7ff ff7b 	bl	8015e7c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8015f86:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015f88:	42bd      	cmp	r5, r7
 8015f8a:	da01      	bge.n	8015f90 <ip_reass_remove_oldest_datagram+0x2c>
 8015f8c:	2c01      	cmp	r4, #1
 8015f8e:	dcf0      	bgt.n	8015f72 <ip_reass_remove_oldest_datagram+0xe>
}
 8015f90:	4628      	mov	r0, r5
 8015f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015f96:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8015f9a:	695a      	ldr	r2, [r3, #20]
 8015f9c:	4562      	cmp	r2, ip
 8015f9e:	d109      	bne.n	8015fb4 <ip_reass_remove_oldest_datagram+0x50>
 8015fa0:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8015fa4:	699a      	ldr	r2, [r3, #24]
 8015fa6:	4562      	cmp	r2, ip
 8015fa8:	d104      	bne.n	8015fb4 <ip_reass_remove_oldest_datagram+0x50>
 8015faa:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8015fae:	88b2      	ldrh	r2, [r6, #4]
 8015fb0:	4594      	cmp	ip, r2
 8015fb2:	d008      	beq.n	8015fc6 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8015fb4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8015fb6:	b160      	cbz	r0, 8015fd2 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8015fb8:	7fc2      	ldrb	r2, [r0, #31]
 8015fba:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8015fbe:	4594      	cmp	ip, r2
 8015fc0:	bf9c      	itt	ls
 8015fc2:	4671      	movls	r1, lr
 8015fc4:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8015fc6:	681a      	ldr	r2, [r3, #0]
 8015fc8:	2a00      	cmp	r2, #0
 8015fca:	bf18      	it	ne
 8015fcc:	469e      	movne	lr, r3
 8015fce:	4613      	mov	r3, r2
 8015fd0:	e7d5      	b.n	8015f7e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8015fd2:	4671      	mov	r1, lr
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	e7f6      	b.n	8015fc6 <ip_reass_remove_oldest_datagram+0x62>
 8015fd8:	20004074 	.word	0x20004074

08015fdc <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8015fdc:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8015fde:	4604      	mov	r4, r0
 8015fe0:	b930      	cbnz	r0, 8015ff0 <ip_frag_free_pbuf_custom_ref+0x14>
 8015fe2:	4b06      	ldr	r3, [pc, #24]	; (8015ffc <ip_frag_free_pbuf_custom_ref+0x20>)
 8015fe4:	4906      	ldr	r1, [pc, #24]	; (8016000 <ip_frag_free_pbuf_custom_ref+0x24>)
 8015fe6:	4807      	ldr	r0, [pc, #28]	; (8016004 <ip_frag_free_pbuf_custom_ref+0x28>)
 8015fe8:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015fec:	f005 ff22 	bl	801be34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ff0:	4621      	mov	r1, r4
 8015ff2:	2005      	movs	r0, #5
}
 8015ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8015ff8:	f000 bd48 	b.w	8016a8c <memp_free>
 8015ffc:	0801f3cd 	.word	0x0801f3cd
 8016000:	0801faf3 	.word	0x0801faf3
 8016004:	0801c6e3 	.word	0x0801c6e3

08016008 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016008:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801600a:	4604      	mov	r4, r0
 801600c:	b930      	cbnz	r0, 801601c <ipfrag_free_pbuf_custom+0x14>
 801600e:	4b08      	ldr	r3, [pc, #32]	; (8016030 <ipfrag_free_pbuf_custom+0x28>)
 8016010:	4908      	ldr	r1, [pc, #32]	; (8016034 <ipfrag_free_pbuf_custom+0x2c>)
 8016012:	4809      	ldr	r0, [pc, #36]	; (8016038 <ipfrag_free_pbuf_custom+0x30>)
 8016014:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8016018:	f005 ff0c 	bl	801be34 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 801601c:	6960      	ldr	r0, [r4, #20]
 801601e:	b108      	cbz	r0, 8016024 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8016020:	f000 feba 	bl	8016d98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016024:	4620      	mov	r0, r4
}
 8016026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801602a:	f7ff bfd7 	b.w	8015fdc <ip_frag_free_pbuf_custom_ref>
 801602e:	bf00      	nop
 8016030:	0801f3cd 	.word	0x0801f3cd
 8016034:	0801f475 	.word	0x0801f475
 8016038:	0801c6e3 	.word	0x0801c6e3

0801603c <ip_reass_tmr>:
{
 801603c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801603e:	4b08      	ldr	r3, [pc, #32]	; (8016060 <ip_reass_tmr+0x24>)
 8016040:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8016042:	2400      	movs	r4, #0
  while (r != NULL) {
 8016044:	b900      	cbnz	r0, 8016048 <ip_reass_tmr+0xc>
}
 8016046:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8016048:	7fc3      	ldrb	r3, [r0, #31]
 801604a:	6805      	ldr	r5, [r0, #0]
 801604c:	b123      	cbz	r3, 8016058 <ip_reass_tmr+0x1c>
      r->timer--;
 801604e:	3b01      	subs	r3, #1
 8016050:	77c3      	strb	r3, [r0, #31]
 8016052:	4604      	mov	r4, r0
      r = r->next;
 8016054:	4628      	mov	r0, r5
 8016056:	e7f5      	b.n	8016044 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8016058:	4621      	mov	r1, r4
 801605a:	f7ff ff0f 	bl	8015e7c <ip_reass_free_complete_datagram>
 801605e:	e7f9      	b.n	8016054 <ip_reass_tmr+0x18>
 8016060:	20004074 	.word	0x20004074

08016064 <ip4_reass>:
{
 8016064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8016068:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801606a:	782b      	ldrb	r3, [r5, #0]
 801606c:	f003 030f 	and.w	r3, r3, #15
 8016070:	2b05      	cmp	r3, #5
{
 8016072:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016074:	f040 808c 	bne.w	8016190 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016078:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801607a:	4cb4      	ldr	r4, [pc, #720]	; (801634c <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801607c:	f7fe ffc9 	bl	8015012 <lwip_htons>
 8016080:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016084:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016088:	8868      	ldrh	r0, [r5, #2]
 801608a:	f7fe ffc2 	bl	8015012 <lwip_htons>
 801608e:	782b      	ldrb	r3, [r5, #0]
 8016090:	f003 030f 	and.w	r3, r3, #15
 8016094:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8016098:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 801609a:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801609c:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 801609e:	f001 f831 	bl	8017104 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80160a2:	8823      	ldrh	r3, [r4, #0]
 80160a4:	4403      	add	r3, r0
 80160a6:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80160a8:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80160aa:	dc68      	bgt.n	801617e <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80160ac:	4ea8      	ldr	r6, [pc, #672]	; (8016350 <ip4_reass+0x2ec>)
 80160ae:	6834      	ldr	r4, [r6, #0]
 80160b0:	2c00      	cmp	r4, #0
 80160b2:	d172      	bne.n	801619a <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160b4:	2004      	movs	r0, #4
 80160b6:	f000 fccd 	bl	8016a54 <memp_malloc>
  if (ipr == NULL) {
 80160ba:	4604      	mov	r4, r0
 80160bc:	b958      	cbnz	r0, 80160d6 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80160be:	4651      	mov	r1, sl
 80160c0:	4628      	mov	r0, r5
 80160c2:	f7ff ff4f 	bl	8015f64 <ip_reass_remove_oldest_datagram>
 80160c6:	4582      	cmp	sl, r0
 80160c8:	dc62      	bgt.n	8016190 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160ca:	2004      	movs	r0, #4
 80160cc:	f000 fcc2 	bl	8016a54 <memp_malloc>
    if (ipr == NULL)
 80160d0:	4604      	mov	r4, r0
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d05c      	beq.n	8016190 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80160d6:	2220      	movs	r2, #32
 80160d8:	2100      	movs	r1, #0
 80160da:	4620      	mov	r0, r4
 80160dc:	f006 f9b0 	bl	801c440 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80160e0:	2303      	movs	r3, #3
 80160e2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80160e4:	6833      	ldr	r3, [r6, #0]
 80160e6:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 80160e8:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80160ea:	462b      	mov	r3, r5
 80160ec:	f104 0208 	add.w	r2, r4, #8
 80160f0:	f105 0114 	add.w	r1, r5, #20
 80160f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80160f8:	f842 0b04 	str.w	r0, [r2], #4
 80160fc:	428b      	cmp	r3, r1
 80160fe:	d1f9      	bne.n	80160f4 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016100:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8016104:	f01b 0b20 	ands.w	fp, fp, #32
 8016108:	d108      	bne.n	801611c <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 801610a:	9b01      	ldr	r3, [sp, #4]
 801610c:	444b      	add	r3, r9
 801610e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016110:	4599      	cmp	r9, r3
 8016112:	d83d      	bhi.n	8016190 <ip4_reass+0x12c>
 8016114:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016118:	4293      	cmp	r3, r2
 801611a:	d839      	bhi.n	8016190 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 801611c:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801611e:	8868      	ldrh	r0, [r5, #2]
 8016120:	f7fe ff77 	bl	8015012 <lwip_htons>
 8016124:	f895 8000 	ldrb.w	r8, [r5]
 8016128:	f008 080f 	and.w	r8, r8, #15
 801612c:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016130:	88e8      	ldrh	r0, [r5, #6]
 8016132:	f7fe ff6e 	bl	8015012 <lwip_htons>
 8016136:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801613a:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801613e:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016140:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8016142:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8016146:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8016148:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 801614c:	2500      	movs	r5, #0
  iprh->end = offset + len;
 801614e:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8016150:	7035      	strb	r5, [r6, #0]
 8016152:	7075      	strb	r5, [r6, #1]
 8016154:	70b5      	strb	r5, [r6, #2]
 8016156:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8016158:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 801615a:	4672      	mov	r2, lr
  int valid = 1;
 801615c:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8016160:	bb52      	cbnz	r2, 80161b8 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8016162:	2d00      	cmp	r5, #0
 8016164:	f040 8092 	bne.w	801628c <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016168:	f1be 0f00 	cmp.w	lr, #0
 801616c:	d07d      	beq.n	801626a <ip4_reass+0x206>
 801616e:	4b79      	ldr	r3, [pc, #484]	; (8016354 <ip4_reass+0x2f0>)
 8016170:	4979      	ldr	r1, [pc, #484]	; (8016358 <ip4_reass+0x2f4>)
 8016172:	487a      	ldr	r0, [pc, #488]	; (801635c <ip4_reass+0x2f8>)
 8016174:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8016178:	f005 fe5c 	bl	801be34 <iprintf>
 801617c:	e075      	b.n	801626a <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801617e:	4601      	mov	r1, r0
 8016180:	4628      	mov	r0, r5
 8016182:	f7ff feef 	bl	8015f64 <ip_reass_remove_oldest_datagram>
 8016186:	b118      	cbz	r0, 8016190 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016188:	8823      	ldrh	r3, [r4, #0]
 801618a:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801618c:	2b0a      	cmp	r3, #10
 801618e:	dd8d      	ble.n	80160ac <ip4_reass+0x48>
  pbuf_free(p);
 8016190:	4638      	mov	r0, r7
 8016192:	f000 fe01 	bl	8016d98 <pbuf_free>
  return NULL;
 8016196:	2500      	movs	r5, #0
 8016198:	e0d4      	b.n	8016344 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801619a:	68eb      	ldr	r3, [r5, #12]
 801619c:	6962      	ldr	r2, [r4, #20]
 801619e:	429a      	cmp	r2, r3
 80161a0:	d108      	bne.n	80161b4 <ip4_reass+0x150>
 80161a2:	692b      	ldr	r3, [r5, #16]
 80161a4:	69a2      	ldr	r2, [r4, #24]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d104      	bne.n	80161b4 <ip4_reass+0x150>
 80161aa:	89a2      	ldrh	r2, [r4, #12]
 80161ac:	88ab      	ldrh	r3, [r5, #4]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	f000 80dc 	beq.w	801636c <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80161b4:	6824      	ldr	r4, [r4, #0]
 80161b6:	e77b      	b.n	80160b0 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80161b8:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 80161bc:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80161c0:	4288      	cmp	r0, r1
 80161c2:	d254      	bcs.n	801626e <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 80161c4:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 80161c6:	2d00      	cmp	r5, #0
 80161c8:	d04d      	beq.n	8016266 <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80161ca:	88ea      	ldrh	r2, [r5, #6]
 80161cc:	4290      	cmp	r0, r2
 80161ce:	f0c0 8091 	bcc.w	80162f4 <ip4_reass+0x290>
 80161d2:	428b      	cmp	r3, r1
 80161d4:	f200 808e 	bhi.w	80162f4 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 80161d8:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 80161da:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 80161dc:	f040 80e4 	bne.w	80163a8 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80161e0:	f1bb 0f00 	cmp.w	fp, #0
 80161e4:	d004      	beq.n	80161f0 <ip4_reass+0x18c>
 80161e6:	7fa3      	ldrb	r3, [r4, #30]
 80161e8:	f013 0301 	ands.w	r3, r3, #1
 80161ec:	f000 80da 	beq.w	80163a4 <ip4_reass+0x340>
    if (valid) {
 80161f0:	f1b8 0f00 	cmp.w	r8, #0
 80161f4:	d159      	bne.n	80162aa <ip4_reass+0x246>
          q = iprh->next_pbuf;
 80161f6:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80161fa:	4e54      	ldr	r6, [pc, #336]	; (801634c <ip4_reass+0x2e8>)
 80161fc:	8833      	ldrh	r3, [r6, #0]
 80161fe:	449a      	add	sl, r3
 8016200:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8016204:	f1bb 0f00 	cmp.w	fp, #0
 8016208:	d107      	bne.n	801621a <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 801620a:	9b01      	ldr	r3, [sp, #4]
 801620c:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801620e:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8016210:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016214:	f043 0301 	orr.w	r3, r3, #1
 8016218:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801621a:	f1b8 0f01 	cmp.w	r8, #1
 801621e:	d1ba      	bne.n	8016196 <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8016220:	8ba3      	ldrh	r3, [r4, #28]
 8016222:	3314      	adds	r3, #20
 8016224:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8016226:	6863      	ldr	r3, [r4, #4]
 8016228:	685d      	ldr	r5, [r3, #4]
 801622a:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801622c:	f104 0308 	add.w	r3, r4, #8
 8016230:	462a      	mov	r2, r5
 8016232:	f104 011c 	add.w	r1, r4, #28
 8016236:	f853 0b04 	ldr.w	r0, [r3], #4
 801623a:	f842 0b04 	str.w	r0, [r2], #4
 801623e:	428b      	cmp	r3, r1
 8016240:	d1f9      	bne.n	8016236 <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8016242:	8ba0      	ldrh	r0, [r4, #28]
 8016244:	f7fe fee5 	bl	8015012 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8016248:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801624a:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801624c:	71ab      	strb	r3, [r5, #6]
 801624e:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016250:	72ab      	strb	r3, [r5, #10]
 8016252:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8016254:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8016256:	2f00      	cmp	r7, #0
 8016258:	d157      	bne.n	801630a <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 801625a:	4b3d      	ldr	r3, [pc, #244]	; (8016350 <ip4_reass+0x2ec>)
 801625c:	6819      	ldr	r1, [r3, #0]
 801625e:	428c      	cmp	r4, r1
 8016260:	d165      	bne.n	801632e <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8016262:	4639      	mov	r1, r7
 8016264:	e065      	b.n	8016332 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8016266:	428b      	cmp	r3, r1
 8016268:	d844      	bhi.n	80162f4 <ip4_reass+0x290>
      ipr->p = new_p;
 801626a:	6067      	str	r7, [r4, #4]
 801626c:	e7b8      	b.n	80161e0 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 801626e:	d041      	beq.n	80162f4 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8016270:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8016274:	4282      	cmp	r2, r0
 8016276:	d83d      	bhi.n	80162f4 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8016278:	b125      	cbz	r5, 8016284 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 801627a:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 801627c:	428a      	cmp	r2, r1
 801627e:	bf18      	it	ne
 8016280:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8016284:	f8dc 2000 	ldr.w	r2, [ip]
 8016288:	4665      	mov	r5, ip
 801628a:	e769      	b.n	8016160 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801628c:	88eb      	ldrh	r3, [r5, #6]
 801628e:	4283      	cmp	r3, r0
 8016290:	d906      	bls.n	80162a0 <ip4_reass+0x23c>
 8016292:	4b30      	ldr	r3, [pc, #192]	; (8016354 <ip4_reass+0x2f0>)
 8016294:	4932      	ldr	r1, [pc, #200]	; (8016360 <ip4_reass+0x2fc>)
 8016296:	4831      	ldr	r0, [pc, #196]	; (801635c <ip4_reass+0x2f8>)
 8016298:	f240 12ab 	movw	r2, #427	; 0x1ab
 801629c:	f005 fdca 	bl	801be34 <iprintf>
      iprh_prev->next_pbuf = new_p;
 80162a0:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80162a2:	88ea      	ldrh	r2, [r5, #6]
 80162a4:	88b3      	ldrh	r3, [r6, #4]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	e798      	b.n	80161dc <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80162aa:	6863      	ldr	r3, [r4, #4]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d0a2      	beq.n	80161f6 <ip4_reass+0x192>
 80162b0:	6859      	ldr	r1, [r3, #4]
 80162b2:	888b      	ldrh	r3, [r1, #4]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d19e      	bne.n	80161f6 <ip4_reass+0x192>
        q = iprh->next_pbuf;
 80162b8:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80162ba:	b99b      	cbnz	r3, 80162e4 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 80162bc:	42b1      	cmp	r1, r6
 80162be:	d106      	bne.n	80162ce <ip4_reass+0x26a>
 80162c0:	4b24      	ldr	r3, [pc, #144]	; (8016354 <ip4_reass+0x2f0>)
 80162c2:	4928      	ldr	r1, [pc, #160]	; (8016364 <ip4_reass+0x300>)
 80162c4:	4825      	ldr	r0, [pc, #148]	; (801635c <ip4_reass+0x2f8>)
 80162c6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80162ca:	f005 fdb3 	bl	801be34 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80162ce:	6833      	ldr	r3, [r6, #0]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d092      	beq.n	80161fa <ip4_reass+0x196>
 80162d4:	4b1f      	ldr	r3, [pc, #124]	; (8016354 <ip4_reass+0x2f0>)
 80162d6:	4924      	ldr	r1, [pc, #144]	; (8016368 <ip4_reass+0x304>)
 80162d8:	4820      	ldr	r0, [pc, #128]	; (801635c <ip4_reass+0x2f8>)
 80162da:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80162de:	f005 fda9 	bl	801be34 <iprintf>
 80162e2:	e78a      	b.n	80161fa <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 80162e4:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80162e6:	88f0      	ldrh	r0, [r6, #6]
 80162e8:	8893      	ldrh	r3, [r2, #4]
 80162ea:	4298      	cmp	r0, r3
 80162ec:	d183      	bne.n	80161f6 <ip4_reass+0x192>
          q = iprh->next_pbuf;
 80162ee:	6813      	ldr	r3, [r2, #0]
 80162f0:	4616      	mov	r6, r2
 80162f2:	e7e2      	b.n	80162ba <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80162f4:	4638      	mov	r0, r7
 80162f6:	f000 ff05 	bl	8017104 <pbuf_clen>
 80162fa:	4a14      	ldr	r2, [pc, #80]	; (801634c <ip4_reass+0x2e8>)
 80162fc:	8813      	ldrh	r3, [r2, #0]
 80162fe:	1a18      	subs	r0, r3, r0
 8016300:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8016302:	4638      	mov	r0, r7
 8016304:	f000 fd48 	bl	8016d98 <pbuf_free>
 8016308:	e742      	b.n	8016190 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 801630a:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 801630e:	f06f 0113 	mvn.w	r1, #19
 8016312:	4638      	mov	r0, r7
 8016314:	f000 fd3a 	bl	8016d8c <pbuf_header>
      pbuf_cat(p, r);
 8016318:	4639      	mov	r1, r7
 801631a:	4628      	mov	r0, r5
 801631c:	f000 ff16 	bl	801714c <pbuf_cat>
      r = iprh->next_pbuf;
 8016320:	f8d8 7000 	ldr.w	r7, [r8]
 8016324:	e797      	b.n	8016256 <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8016326:	680b      	ldr	r3, [r1, #0]
 8016328:	429c      	cmp	r4, r3
 801632a:	d002      	beq.n	8016332 <ip4_reass+0x2ce>
 801632c:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801632e:	2900      	cmp	r1, #0
 8016330:	d1f9      	bne.n	8016326 <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016332:	4620      	mov	r0, r4
 8016334:	f7ff fd80 	bl	8015e38 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8016338:	4628      	mov	r0, r5
 801633a:	f000 fee3 	bl	8017104 <pbuf_clen>
 801633e:	8833      	ldrh	r3, [r6, #0]
 8016340:	1a18      	subs	r0, r3, r0
 8016342:	8030      	strh	r0, [r6, #0]
}
 8016344:	4628      	mov	r0, r5
 8016346:	b003      	add	sp, #12
 8016348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634c:	20004070 	.word	0x20004070
 8016350:	20004074 	.word	0x20004074
 8016354:	0801f3cd 	.word	0x0801f3cd
 8016358:	0801f367 	.word	0x0801f367
 801635c:	0801c6e3 	.word	0x0801c6e3
 8016360:	0801f349 	.word	0x0801f349
 8016364:	0801f39e 	.word	0x0801f39e
 8016368:	0801f3ab 	.word	0x0801f3ab
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801636c:	88e8      	ldrh	r0, [r5, #6]
 801636e:	f7fe fe50 	bl	8015012 <lwip_htons>
 8016372:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016376:	2800      	cmp	r0, #0
 8016378:	f47f aec2 	bne.w	8016100 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801637c:	89e0      	ldrh	r0, [r4, #14]
 801637e:	f7fe fe48 	bl	8015012 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016382:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8016386:	2800      	cmp	r0, #0
 8016388:	f43f aeba 	beq.w	8016100 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801638c:	462b      	mov	r3, r5
 801638e:	f104 0208 	add.w	r2, r4, #8
 8016392:	f105 0114 	add.w	r1, r5, #20
 8016396:	f853 0b04 	ldr.w	r0, [r3], #4
 801639a:	f842 0b04 	str.w	r0, [r2], #4
 801639e:	428b      	cmp	r3, r1
 80163a0:	d1f9      	bne.n	8016396 <ip4_reass+0x332>
 80163a2:	e6ad      	b.n	8016100 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80163a4:	4698      	mov	r8, r3
 80163a6:	e728      	b.n	80161fa <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80163a8:	f1bb 0f00 	cmp.w	fp, #0
 80163ac:	f43f af23 	beq.w	80161f6 <ip4_reass+0x192>
 80163b0:	f04f 0800 	mov.w	r8, #0
 80163b4:	e717      	b.n	80161e6 <ip4_reass+0x182>
 80163b6:	bf00      	nop

080163b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80163b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80163bc:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 80163c0:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80163c2:	2308      	movs	r3, #8
 80163c4:	f1a8 0814 	sub.w	r8, r8, #20
 80163c8:	fb98 f8f3 	sdiv	r8, r8, r3
 80163cc:	fa1f f388 	uxth.w	r3, r8
 80163d0:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80163d2:	6843      	ldr	r3, [r0, #4]
{
 80163d4:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80163d6:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80163d8:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80163da:	f006 060f 	and.w	r6, r6, #15
 80163de:	00b6      	lsls	r6, r6, #2
 80163e0:	2e14      	cmp	r6, #20
{
 80163e2:	4607      	mov	r7, r0
 80163e4:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80163e6:	d00b      	beq.n	8016400 <ip4_frag+0x48>
 80163e8:	4b5a      	ldr	r3, [pc, #360]	; (8016554 <ip4_frag+0x19c>)
 80163ea:	495b      	ldr	r1, [pc, #364]	; (8016558 <ip4_frag+0x1a0>)
 80163ec:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80163f0:	485a      	ldr	r0, [pc, #360]	; (801655c <ip4_frag+0x1a4>)
 80163f2:	f005 fd1f 	bl	801be34 <iprintf>
 80163f6:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80163fa:	b00b      	add	sp, #44	; 0x2c
 80163fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016400:	9b02      	ldr	r3, [sp, #8]
 8016402:	88d8      	ldrh	r0, [r3, #6]
 8016404:	f7fe fe05 	bl	8015012 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8016408:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801640c:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8016410:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8016412:	d004      	beq.n	801641e <ip4_frag+0x66>
 8016414:	4b4f      	ldr	r3, [pc, #316]	; (8016554 <ip4_frag+0x19c>)
 8016416:	4952      	ldr	r1, [pc, #328]	; (8016560 <ip4_frag+0x1a8>)
 8016418:	f240 22e6 	movw	r2, #742	; 0x2e6
 801641c:	e7e8      	b.n	80163f0 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 801641e:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8016420:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8016424:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8016426:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 801642a:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 801642c:	9307      	str	r3, [sp, #28]
  while (left) {
 801642e:	b90d      	cbnz	r5, 8016434 <ip4_frag+0x7c>
  return ERR_OK;
 8016430:	4628      	mov	r0, r5
 8016432:	e7e2      	b.n	80163fa <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8016434:	9b07      	ldr	r3, [sp, #28]
 8016436:	42ab      	cmp	r3, r5
 8016438:	bfa8      	it	ge
 801643a:	462b      	movge	r3, r5
 801643c:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801643e:	2200      	movs	r2, #0
 8016440:	2114      	movs	r1, #20
 8016442:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8016444:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016446:	f000 fd11 	bl	8016e6c <pbuf_alloc>
    if (rambuf == NULL) {
 801644a:	4680      	mov	r8, r0
 801644c:	b370      	cbz	r0, 80164ac <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801644e:	897b      	ldrh	r3, [r7, #10]
 8016450:	2b13      	cmp	r3, #19
 8016452:	d806      	bhi.n	8016462 <ip4_frag+0xaa>
 8016454:	4b3f      	ldr	r3, [pc, #252]	; (8016554 <ip4_frag+0x19c>)
 8016456:	4943      	ldr	r1, [pc, #268]	; (8016564 <ip4_frag+0x1ac>)
 8016458:	4840      	ldr	r0, [pc, #256]	; (801655c <ip4_frag+0x1a4>)
 801645a:	f240 3209 	movw	r2, #777	; 0x309
 801645e:	f005 fce9 	bl	801be34 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016462:	9b02      	ldr	r3, [sp, #8]
 8016464:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016468:	4619      	mov	r1, r3
 801646a:	3114      	adds	r1, #20
 801646c:	f853 0b04 	ldr.w	r0, [r3], #4
 8016470:	f842 0b04 	str.w	r0, [r2], #4
 8016474:	428b      	cmp	r3, r1
 8016476:	d1f9      	bne.n	801646c <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016478:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 801647c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016480:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8016482:	f1b9 0f00 	cmp.w	r9, #0
 8016486:	d037      	beq.n	80164f8 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8016488:	897c      	ldrh	r4, [r7, #10]
 801648a:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801648c:	b2a4      	uxth	r4, r4
 801648e:	454c      	cmp	r4, r9
 8016490:	bf28      	it	cs
 8016492:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8016494:	b914      	cbnz	r4, 801649c <ip4_frag+0xe4>
        p = p->next;
 8016496:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8016498:	2600      	movs	r6, #0
 801649a:	e7f2      	b.n	8016482 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801649c:	2005      	movs	r0, #5
 801649e:	f000 fad9 	bl	8016a54 <memp_malloc>
      if (pcr == NULL) {
 80164a2:	4682      	mov	sl, r0
 80164a4:	b928      	cbnz	r0, 80164b2 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 80164a6:	4640      	mov	r0, r8
 80164a8:	f000 fc76 	bl	8016d98 <pbuf_free>
  return ERR_MEM;
 80164ac:	f04f 30ff 	mov.w	r0, #4294967295
 80164b0:	e7a3      	b.n	80163fa <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80164b2:	9401      	str	r4, [sp, #4]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	4433      	add	r3, r6
 80164b8:	9300      	str	r3, [sp, #0]
 80164ba:	2202      	movs	r2, #2
 80164bc:	4603      	mov	r3, r0
 80164be:	4621      	mov	r1, r4
 80164c0:	2004      	movs	r0, #4
 80164c2:	f000 fc2b 	bl	8016d1c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80164c6:	b918      	cbnz	r0, 80164d0 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 80164c8:	4650      	mov	r0, sl
 80164ca:	f7ff fd87 	bl	8015fdc <ip_frag_free_pbuf_custom_ref>
 80164ce:	e7ea      	b.n	80164a6 <ip4_frag+0xee>
 80164d0:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 80164d2:	4638      	mov	r0, r7
 80164d4:	f000 fe1e 	bl	8017114 <pbuf_ref>
      left_to_copy -= newpbuflen;
 80164d8:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80164dc:	4b22      	ldr	r3, [pc, #136]	; (8016568 <ip4_frag+0x1b0>)
      pcr->original = p;
 80164de:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80164e2:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80164e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164e8:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80164ea:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80164ee:	f000 fe2d 	bl	801714c <pbuf_cat>
      if (left_to_copy) {
 80164f2:	f1b9 0f00 	cmp.w	r9, #0
 80164f6:	d1ce      	bne.n	8016496 <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 80164f8:	9b04      	ldr	r3, [sp, #16]
 80164fa:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80164fe:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8016502:	3b13      	subs	r3, #19
    if (!last) {
 8016504:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8016506:	bfa8      	it	ge
 8016508:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801650c:	f7fe fd81 	bl	8015012 <lwip_htons>
 8016510:	9b03      	ldr	r3, [sp, #12]
 8016512:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8016514:	9b05      	ldr	r3, [sp, #20]
 8016516:	f103 0014 	add.w	r0, r3, #20
 801651a:	b280      	uxth	r0, r0
 801651c:	f7fe fd79 	bl	8015012 <lwip_htons>
 8016520:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8016522:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8016524:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016526:	2300      	movs	r3, #0
 8016528:	7293      	strb	r3, [r2, #10]
 801652a:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 801652c:	4641      	mov	r1, r8
 801652e:	f8db 3014 	ldr.w	r3, [fp, #20]
 8016532:	9a08      	ldr	r2, [sp, #32]
 8016534:	4658      	mov	r0, fp
 8016536:	4798      	blx	r3
    pbuf_free(rambuf);
 8016538:	4640      	mov	r0, r8
 801653a:	f000 fc2d 	bl	8016d98 <pbuf_free>
    left -= fragsize;
 801653e:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8016540:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8016542:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8016544:	9b04      	ldr	r3, [sp, #16]
 8016546:	4413      	add	r3, r2
    poff += newpbuflen;
 8016548:	4426      	add	r6, r4
    ofo += nfb;
 801654a:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 801654c:	b2b6      	uxth	r6, r6
    left -= fragsize;
 801654e:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8016550:	9304      	str	r3, [sp, #16]
 8016552:	e76c      	b.n	801642e <ip4_frag+0x76>
 8016554:	0801f3cd 	.word	0x0801f3cd
 8016558:	0801f2e8 	.word	0x0801f2e8
 801655c:	0801c6e3 	.word	0x0801c6e3
 8016560:	0801f30f 	.word	0x0801f30f
 8016564:	0801f329 	.word	0x0801f329
 8016568:	08016009 	.word	0x08016009

0801656c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801656c:	4b12      	ldr	r3, [pc, #72]	; (80165b8 <mem_init+0x4c>)
 801656e:	4a13      	ldr	r2, [pc, #76]	; (80165bc <mem_init+0x50>)
 8016570:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8016574:	2100      	movs	r1, #0
{
 8016576:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016578:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 801657a:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 801657c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8016580:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8016582:	490f      	ldr	r1, [pc, #60]	; (80165c0 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8016584:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8016586:	1898      	adds	r0, r3, r2
 8016588:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 801658a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->used = 1;
 801658e:	2101      	movs	r1, #1
  ram_end->prev = MEM_SIZE_ALIGNED;
 8016590:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8016594:	4a0b      	ldr	r2, [pc, #44]	; (80165c4 <mem_init+0x58>)
  ram_end->used = 1;
 8016596:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801659a:	480b      	ldr	r0, [pc, #44]	; (80165c8 <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 801659c:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801659e:	f004 fb4d 	bl	801ac3c <sys_mutex_new>
 80165a2:	b140      	cbz	r0, 80165b6 <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80165a4:	4b09      	ldr	r3, [pc, #36]	; (80165cc <mem_init+0x60>)
 80165a6:	490a      	ldr	r1, [pc, #40]	; (80165d0 <mem_init+0x64>)
 80165a8:	480a      	ldr	r0, [pc, #40]	; (80165d4 <mem_init+0x68>)
 80165aa:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 80165ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80165b2:	f005 bc3f 	b.w	801be34 <iprintf>
 80165b6:	bd10      	pop	{r4, pc}
 80165b8:	200044db 	.word	0x200044db
 80165bc:	20004080 	.word	0x20004080
 80165c0:	20004084 	.word	0x20004084
 80165c4:	20004078 	.word	0x20004078
 80165c8:	2000407c 	.word	0x2000407c
 80165cc:	0801f543 	.word	0x0801f543
 80165d0:	0801f572 	.word	0x0801f572
 80165d4:	0801c6e3 	.word	0x0801c6e3

080165d8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80165d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80165dc:	4604      	mov	r4, r0
 80165de:	2800      	cmp	r0, #0
 80165e0:	f000 8096 	beq.w	8016710 <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80165e4:	0783      	lsls	r3, r0, #30
 80165e6:	d006      	beq.n	80165f6 <mem_free+0x1e>
 80165e8:	4b4a      	ldr	r3, [pc, #296]	; (8016714 <mem_free+0x13c>)
 80165ea:	494b      	ldr	r1, [pc, #300]	; (8016718 <mem_free+0x140>)
 80165ec:	484b      	ldr	r0, [pc, #300]	; (801671c <mem_free+0x144>)
 80165ee:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80165f2:	f005 fc1f 	bl	801be34 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80165f6:	4f4a      	ldr	r7, [pc, #296]	; (8016720 <mem_free+0x148>)
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	429c      	cmp	r4, r3
 80165fc:	d303      	bcc.n	8016606 <mem_free+0x2e>
 80165fe:	4b49      	ldr	r3, [pc, #292]	; (8016724 <mem_free+0x14c>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	429c      	cmp	r4, r3
 8016604:	d306      	bcc.n	8016614 <mem_free+0x3c>
 8016606:	4b43      	ldr	r3, [pc, #268]	; (8016714 <mem_free+0x13c>)
 8016608:	4947      	ldr	r1, [pc, #284]	; (8016728 <mem_free+0x150>)
 801660a:	4844      	ldr	r0, [pc, #272]	; (801671c <mem_free+0x144>)
 801660c:	f240 12af 	movw	r2, #431	; 0x1af
 8016610:	f005 fc10 	bl	801be34 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	429c      	cmp	r4, r3
 8016618:	d304      	bcc.n	8016624 <mem_free+0x4c>
 801661a:	4b42      	ldr	r3, [pc, #264]	; (8016724 <mem_free+0x14c>)
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	4294      	cmp	r4, r2
 8016620:	4698      	mov	r8, r3
 8016622:	d305      	bcc.n	8016630 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8016624:	f004 fb32 	bl	801ac8c <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8016628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 801662c:	f004 bb3a 	b.w	801aca4 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8016630:	483e      	ldr	r0, [pc, #248]	; (801672c <mem_free+0x154>)
 8016632:	f004 fb12 	bl	801ac5a <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8016636:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801663a:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801663e:	b933      	cbnz	r3, 801664e <mem_free+0x76>
 8016640:	4b34      	ldr	r3, [pc, #208]	; (8016714 <mem_free+0x13c>)
 8016642:	493b      	ldr	r1, [pc, #236]	; (8016730 <mem_free+0x158>)
 8016644:	4835      	ldr	r0, [pc, #212]	; (801671c <mem_free+0x144>)
 8016646:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801664a:	f005 fbf3 	bl	801be34 <iprintf>
  if (mem < lfree) {
 801664e:	4e39      	ldr	r6, [pc, #228]	; (8016734 <mem_free+0x15c>)
  mem->used = 0;
 8016650:	2300      	movs	r3, #0
 8016652:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8016656:	6833      	ldr	r3, [r6, #0]
 8016658:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801665a:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 801665c:	bf38      	it	cc
 801665e:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016660:	429d      	cmp	r5, r3
 8016662:	d206      	bcs.n	8016672 <mem_free+0x9a>
 8016664:	4b2b      	ldr	r3, [pc, #172]	; (8016714 <mem_free+0x13c>)
 8016666:	4934      	ldr	r1, [pc, #208]	; (8016738 <mem_free+0x160>)
 8016668:	482c      	ldr	r0, [pc, #176]	; (801671c <mem_free+0x144>)
 801666a:	f240 125d 	movw	r2, #349	; 0x15d
 801666e:	f005 fbe1 	bl	801be34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016672:	f8d8 3000 	ldr.w	r3, [r8]
 8016676:	429d      	cmp	r5, r3
 8016678:	d306      	bcc.n	8016688 <mem_free+0xb0>
 801667a:	4b26      	ldr	r3, [pc, #152]	; (8016714 <mem_free+0x13c>)
 801667c:	492f      	ldr	r1, [pc, #188]	; (801673c <mem_free+0x164>)
 801667e:	4827      	ldr	r0, [pc, #156]	; (801671c <mem_free+0x144>)
 8016680:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016684:	f005 fbd6 	bl	801be34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016688:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 801668c:	b133      	cbz	r3, 801669c <mem_free+0xc4>
 801668e:	4b21      	ldr	r3, [pc, #132]	; (8016714 <mem_free+0x13c>)
 8016690:	492b      	ldr	r1, [pc, #172]	; (8016740 <mem_free+0x168>)
 8016692:	4822      	ldr	r0, [pc, #136]	; (801671c <mem_free+0x144>)
 8016694:	f240 125f 	movw	r2, #351	; 0x15f
 8016698:	f005 fbcc 	bl	801be34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801669c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80166a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80166a4:	d906      	bls.n	80166b4 <mem_free+0xdc>
 80166a6:	4b1b      	ldr	r3, [pc, #108]	; (8016714 <mem_free+0x13c>)
 80166a8:	4926      	ldr	r1, [pc, #152]	; (8016744 <mem_free+0x16c>)
 80166aa:	481c      	ldr	r0, [pc, #112]	; (801671c <mem_free+0x144>)
 80166ac:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80166b0:	f005 fbc0 	bl	801be34 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80166ba:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80166bc:	4295      	cmp	r5, r2
 80166be:	d010      	beq.n	80166e2 <mem_free+0x10a>
 80166c0:	7910      	ldrb	r0, [r2, #4]
 80166c2:	b970      	cbnz	r0, 80166e2 <mem_free+0x10a>
 80166c4:	f8d8 0000 	ldr.w	r0, [r8]
 80166c8:	4282      	cmp	r2, r0
 80166ca:	d00a      	beq.n	80166e2 <mem_free+0x10a>
    if (lfree == nmem) {
 80166cc:	6830      	ldr	r0, [r6, #0]
 80166ce:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80166d0:	5a5a      	ldrh	r2, [r3, r1]
 80166d2:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80166d6:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 80166d8:	bf08      	it	eq
 80166da:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80166dc:	441a      	add	r2, r3
 80166de:	1ae9      	subs	r1, r5, r3
 80166e0:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80166e2:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80166e6:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80166e8:	428d      	cmp	r5, r1
 80166ea:	d00c      	beq.n	8016706 <mem_free+0x12e>
 80166ec:	7908      	ldrb	r0, [r1, #4]
 80166ee:	b950      	cbnz	r0, 8016706 <mem_free+0x12e>
    if (lfree == mem) {
 80166f0:	6830      	ldr	r0, [r6, #0]
 80166f2:	4285      	cmp	r5, r0
      lfree = pmem;
 80166f4:	bf08      	it	eq
 80166f6:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80166f8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80166fc:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80166fe:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8016702:	440b      	add	r3, r1
 8016704:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8016706:	4809      	ldr	r0, [pc, #36]	; (801672c <mem_free+0x154>)
}
 8016708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 801670c:	f004 baaa 	b.w	801ac64 <sys_mutex_unlock>
 8016710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016714:	0801f543 	.word	0x0801f543
 8016718:	0801f481 	.word	0x0801f481
 801671c:	0801c6e3 	.word	0x0801c6e3
 8016720:	20004080 	.word	0x20004080
 8016724:	20004084 	.word	0x20004084
 8016728:	0801f4a2 	.word	0x0801f4a2
 801672c:	2000407c 	.word	0x2000407c
 8016730:	0801f4b9 	.word	0x0801f4b9
 8016734:	20004078 	.word	0x20004078
 8016738:	0801f4cd 	.word	0x0801f4cd
 801673c:	0801f4e4 	.word	0x0801f4e4
 8016740:	0801f4fe 	.word	0x0801f4fe
 8016744:	0801f519 	.word	0x0801f519

08016748 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8016748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 801674c:	3103      	adds	r1, #3
 801674e:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8016752:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8016754:	2d0b      	cmp	r5, #11
{
 8016756:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8016758:	d904      	bls.n	8016764 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801675a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 801675e:	d902      	bls.n	8016766 <mem_trim+0x1e>
    return NULL;
 8016760:	2400      	movs	r4, #0
 8016762:	e01c      	b.n	801679e <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8016764:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8016766:	4b36      	ldr	r3, [pc, #216]	; (8016840 <mem_trim+0xf8>)
 8016768:	681a      	ldr	r2, [r3, #0]
 801676a:	42a2      	cmp	r2, r4
 801676c:	4698      	mov	r8, r3
 801676e:	d803      	bhi.n	8016778 <mem_trim+0x30>
 8016770:	4b34      	ldr	r3, [pc, #208]	; (8016844 <mem_trim+0xfc>)
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	429c      	cmp	r4, r3
 8016776:	d306      	bcc.n	8016786 <mem_trim+0x3e>
 8016778:	4b33      	ldr	r3, [pc, #204]	; (8016848 <mem_trim+0x100>)
 801677a:	4934      	ldr	r1, [pc, #208]	; (801684c <mem_trim+0x104>)
 801677c:	4834      	ldr	r0, [pc, #208]	; (8016850 <mem_trim+0x108>)
 801677e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8016782:	f005 fb57 	bl	801be34 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016786:	f8d8 3000 	ldr.w	r3, [r8]
 801678a:	429c      	cmp	r4, r3
 801678c:	d303      	bcc.n	8016796 <mem_trim+0x4e>
 801678e:	4a2d      	ldr	r2, [pc, #180]	; (8016844 <mem_trim+0xfc>)
 8016790:	6812      	ldr	r2, [r2, #0]
 8016792:	4294      	cmp	r4, r2
 8016794:	d306      	bcc.n	80167a4 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8016796:	f004 fa79 	bl	801ac8c <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801679a:	f004 fa83 	bl	801aca4 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801679e:	4620      	mov	r0, r4
 80167a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80167a4:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80167a8:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80167ac:	1af6      	subs	r6, r6, r3
 80167ae:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80167b0:	3f08      	subs	r7, #8
 80167b2:	1bbf      	subs	r7, r7, r6
 80167b4:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80167b6:	42af      	cmp	r7, r5
 80167b8:	d219      	bcs.n	80167ee <mem_trim+0xa6>
 80167ba:	4b23      	ldr	r3, [pc, #140]	; (8016848 <mem_trim+0x100>)
 80167bc:	4925      	ldr	r1, [pc, #148]	; (8016854 <mem_trim+0x10c>)
 80167be:	4824      	ldr	r0, [pc, #144]	; (8016850 <mem_trim+0x108>)
 80167c0:	f240 2206 	movw	r2, #518	; 0x206
 80167c4:	f005 fb36 	bl	801be34 <iprintf>
 80167c8:	e7ca      	b.n	8016760 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80167ca:	f105 0214 	add.w	r2, r5, #20
 80167ce:	42ba      	cmp	r2, r7
 80167d0:	d831      	bhi.n	8016836 <mem_trim+0xee>
    if (mem2 < lfree) {
 80167d2:	4821      	ldr	r0, [pc, #132]	; (8016858 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80167d4:	f106 0208 	add.w	r2, r6, #8
 80167d8:	4415      	add	r5, r2
    if (mem2 < lfree) {
 80167da:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80167dc:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80167de:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 80167e0:	42ba      	cmp	r2, r7
      lfree = mem2;
 80167e2:	bf38      	it	cc
 80167e4:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 80167e6:	2000      	movs	r0, #0
 80167e8:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 80167ea:	5359      	strh	r1, [r3, r5]
 80167ec:	e01a      	b.n	8016824 <mem_trim+0xdc>
  if (newsize == size) {
 80167ee:	d0d6      	beq.n	801679e <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 80167f0:	481a      	ldr	r0, [pc, #104]	; (801685c <mem_trim+0x114>)
 80167f2:	f004 fa32 	bl	801ac5a <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80167f6:	f8d8 3000 	ldr.w	r3, [r8]
 80167fa:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80167fe:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8016800:	7902      	ldrb	r2, [r0, #4]
 8016802:	2a00      	cmp	r2, #0
 8016804:	d1e1      	bne.n	80167ca <mem_trim+0x82>
    next = mem2->next;
 8016806:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 8016808:	4913      	ldr	r1, [pc, #76]	; (8016858 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801680a:	f106 0208 	add.w	r2, r6, #8
 801680e:	4415      	add	r5, r2
    if (lfree == mem2) {
 8016810:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8016812:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8016814:	4290      	cmp	r0, r2
 8016816:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 801681a:	bf08      	it	eq
 801681c:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 801681e:	2100      	movs	r1, #0
 8016820:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8016822:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8016824:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8016826:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801682a:	5b5a      	ldrh	r2, [r3, r5]
 801682c:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8016830:	bf1c      	itt	ne
 8016832:	189b      	addne	r3, r3, r2
 8016834:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8016836:	4809      	ldr	r0, [pc, #36]	; (801685c <mem_trim+0x114>)
 8016838:	f004 fa14 	bl	801ac64 <sys_mutex_unlock>
  return rmem;
 801683c:	e7af      	b.n	801679e <mem_trim+0x56>
 801683e:	bf00      	nop
 8016840:	20004080 	.word	0x20004080
 8016844:	20004084 	.word	0x20004084
 8016848:	0801f543 	.word	0x0801f543
 801684c:	0801f628 	.word	0x0801f628
 8016850:	0801c6e3 	.word	0x0801c6e3
 8016854:	0801f63f 	.word	0x0801f63f
 8016858:	20004078 	.word	0x20004078
 801685c:	2000407c 	.word	0x2000407c

08016860 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8016860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8016864:	b148      	cbz	r0, 801687a <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8016866:	3003      	adds	r0, #3
 8016868:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 801686c:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 801686e:	2d0b      	cmp	r5, #11
 8016870:	d905      	bls.n	801687e <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8016872:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8016876:	d903      	bls.n	8016880 <mem_malloc+0x20>
    return NULL;
 8016878:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 801687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 801687e:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 8016880:	483c      	ldr	r0, [pc, #240]	; (8016974 <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8016882:	4e3d      	ldr	r6, [pc, #244]	; (8016978 <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 8016884:	f004 f9e9 	bl	801ac5a <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8016888:	483c      	ldr	r0, [pc, #240]	; (801697c <mem_malloc+0x11c>)
 801688a:	6831      	ldr	r1, [r6, #0]
 801688c:	6807      	ldr	r7, [r0, #0]
 801688e:	1a7b      	subs	r3, r7, r1
 8016890:	b29b      	uxth	r3, r3
 8016892:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016896:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801689a:	4543      	cmp	r3, r8
 801689c:	d303      	bcc.n	80168a6 <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 801689e:	4835      	ldr	r0, [pc, #212]	; (8016974 <mem_malloc+0x114>)
 80168a0:	f004 f9e0 	bl	801ac64 <sys_mutex_unlock>
 80168a4:	e7e8      	b.n	8016878 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 80168a6:	18cc      	adds	r4, r1, r3
 80168a8:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 80168ac:	f894 c004 	ldrb.w	ip, [r4, #4]
 80168b0:	f1bc 0f00 	cmp.w	ip, #0
 80168b4:	d15b      	bne.n	801696e <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80168b6:	eba9 0203 	sub.w	r2, r9, r3
 80168ba:	4472      	add	r2, lr
      if ((!mem->used) &&
 80168bc:	4295      	cmp	r5, r2
 80168be:	d856      	bhi.n	801696e <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80168c0:	f105 0814 	add.w	r8, r5, #20
 80168c4:	4542      	cmp	r2, r8
 80168c6:	d34c      	bcc.n	8016962 <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80168c8:	f105 0208 	add.w	r2, r5, #8
 80168cc:	441a      	add	r2, r3
 80168ce:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80168d0:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 80168d4:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 80168d8:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 80168dc:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 80168e0:	2301      	movs	r3, #1
          mem->next = ptr2;
 80168e2:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 80168e4:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80168e6:	5a8b      	ldrh	r3, [r1, r2]
 80168e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80168ec:	d001      	beq.n	80168f2 <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80168ee:	4419      	add	r1, r3
 80168f0:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 80168f2:	42a7      	cmp	r7, r4
 80168f4:	4f22      	ldr	r7, [pc, #136]	; (8016980 <mem_malloc+0x120>)
 80168f6:	d111      	bne.n	801691c <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 80168f8:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 80168fa:	6836      	ldr	r6, [r6, #0]
 80168fc:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 80168fe:	791a      	ldrb	r2, [r3, #4]
 8016900:	b10a      	cbz	r2, 8016906 <mem_malloc+0xa6>
 8016902:	428b      	cmp	r3, r1
 8016904:	d130      	bne.n	8016968 <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016906:	428b      	cmp	r3, r1
          lfree = cur;
 8016908:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801690a:	d007      	beq.n	801691c <mem_malloc+0xbc>
 801690c:	b132      	cbz	r2, 801691c <mem_malloc+0xbc>
 801690e:	4b1d      	ldr	r3, [pc, #116]	; (8016984 <mem_malloc+0x124>)
 8016910:	491d      	ldr	r1, [pc, #116]	; (8016988 <mem_malloc+0x128>)
 8016912:	481e      	ldr	r0, [pc, #120]	; (801698c <mem_malloc+0x12c>)
 8016914:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016918:	f005 fa8c 	bl	801be34 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 801691c:	4815      	ldr	r0, [pc, #84]	; (8016974 <mem_malloc+0x114>)
 801691e:	f004 f9a1 	bl	801ac64 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016922:	3508      	adds	r5, #8
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	4425      	add	r5, r4
 8016928:	42ab      	cmp	r3, r5
 801692a:	d206      	bcs.n	801693a <mem_malloc+0xda>
 801692c:	4b15      	ldr	r3, [pc, #84]	; (8016984 <mem_malloc+0x124>)
 801692e:	4918      	ldr	r1, [pc, #96]	; (8016990 <mem_malloc+0x130>)
 8016930:	4816      	ldr	r0, [pc, #88]	; (801698c <mem_malloc+0x12c>)
 8016932:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016936:	f005 fa7d 	bl	801be34 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801693a:	07a3      	lsls	r3, r4, #30
 801693c:	d00d      	beq.n	801695a <mem_malloc+0xfa>
 801693e:	4b11      	ldr	r3, [pc, #68]	; (8016984 <mem_malloc+0x124>)
 8016940:	4914      	ldr	r1, [pc, #80]	; (8016994 <mem_malloc+0x134>)
 8016942:	4812      	ldr	r0, [pc, #72]	; (801698c <mem_malloc+0x12c>)
 8016944:	f240 22d6 	movw	r2, #726	; 0x2d6
 8016948:	f005 fa74 	bl	801be34 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801694c:	4b0d      	ldr	r3, [pc, #52]	; (8016984 <mem_malloc+0x124>)
 801694e:	4912      	ldr	r1, [pc, #72]	; (8016998 <mem_malloc+0x138>)
 8016950:	480e      	ldr	r0, [pc, #56]	; (801698c <mem_malloc+0x12c>)
 8016952:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8016956:	f005 fa6d 	bl	801be34 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 801695a:	f104 0008 	add.w	r0, r4, #8
 801695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8016962:	2301      	movs	r3, #1
 8016964:	7123      	strb	r3, [r4, #4]
 8016966:	e7c4      	b.n	80168f2 <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8016968:	881b      	ldrh	r3, [r3, #0]
 801696a:	4433      	add	r3, r6
 801696c:	e7c7      	b.n	80168fe <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 801696e:	4673      	mov	r3, lr
 8016970:	e793      	b.n	801689a <mem_malloc+0x3a>
 8016972:	bf00      	nop
 8016974:	2000407c 	.word	0x2000407c
 8016978:	20004080 	.word	0x20004080
 801697c:	20004078 	.word	0x20004078
 8016980:	20004084 	.word	0x20004084
 8016984:	0801f543 	.word	0x0801f543
 8016988:	0801f58d 	.word	0x0801f58d
 801698c:	0801c6e3 	.word	0x0801c6e3
 8016990:	0801f5a6 	.word	0x0801f5a6
 8016994:	0801f5d6 	.word	0x0801f5d6
 8016998:	0801f605 	.word	0x0801f605

0801699c <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 801699c:	b538      	push	{r3, r4, r5, lr}
 801699e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80169a0:	f004 f974 	bl	801ac8c <sys_arch_protect>

  memp = *desc->tab;
 80169a4:	6823      	ldr	r3, [r4, #0]
 80169a6:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 80169a8:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80169aa:	b15c      	cbz	r4, 80169c4 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80169ac:	6822      	ldr	r2, [r4, #0]
 80169ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80169b0:	07a3      	lsls	r3, r4, #30
 80169b2:	d006      	beq.n	80169c2 <do_memp_malloc_pool.isra.0+0x26>
 80169b4:	4b05      	ldr	r3, [pc, #20]	; (80169cc <do_memp_malloc_pool.isra.0+0x30>)
 80169b6:	4906      	ldr	r1, [pc, #24]	; (80169d0 <do_memp_malloc_pool.isra.0+0x34>)
 80169b8:	4806      	ldr	r0, [pc, #24]	; (80169d4 <do_memp_malloc_pool.isra.0+0x38>)
 80169ba:	f240 1249 	movw	r2, #329	; 0x149
 80169be:	f005 fa39 	bl	801be34 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80169c2:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80169c4:	f004 f96e 	bl	801aca4 <sys_arch_unprotect>
  return NULL;
}
 80169c8:	4620      	mov	r0, r4
 80169ca:	bd38      	pop	{r3, r4, r5, pc}
 80169cc:	0801f67f 	.word	0x0801f67f
 80169d0:	0801f6af 	.word	0x0801f6af
 80169d4:	0801c6e3 	.word	0x0801c6e3

080169d8 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80169d8:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80169da:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80169dc:	4605      	mov	r5, r0
 80169de:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80169e0:	d006      	beq.n	80169f0 <do_memp_free_pool.isra.1+0x18>
 80169e2:	4b08      	ldr	r3, [pc, #32]	; (8016a04 <do_memp_free_pool.isra.1+0x2c>)
 80169e4:	4908      	ldr	r1, [pc, #32]	; (8016a08 <do_memp_free_pool.isra.1+0x30>)
 80169e6:	4809      	ldr	r0, [pc, #36]	; (8016a0c <do_memp_free_pool.isra.1+0x34>)
 80169e8:	f240 129d 	movw	r2, #413	; 0x19d
 80169ec:	f005 fa22 	bl	801be34 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80169f0:	f004 f94c 	bl	801ac8c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80169f4:	682b      	ldr	r3, [r5, #0]
 80169f6:	681a      	ldr	r2, [r3, #0]
 80169f8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80169fa:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80169fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8016a00:	f004 b950 	b.w	801aca4 <sys_arch_unprotect>
 8016a04:	0801f67f 	.word	0x0801f67f
 8016a08:	0801f65f 	.word	0x0801f65f
 8016a0c:	0801c6e3 	.word	0x0801c6e3

08016a10 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8016a10:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8016a12:	6881      	ldr	r1, [r0, #8]
{
 8016a14:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8016a16:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8016a18:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8016a1a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8016a1c:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8016a1e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8016a22:	42a2      	cmp	r2, r4
 8016a24:	db00      	blt.n	8016a28 <memp_init_pool+0x18>
}
 8016a26:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8016a28:	680d      	ldr	r5, [r1, #0]
 8016a2a:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016a2c:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8016a2e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8016a30:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016a32:	442b      	add	r3, r5
 8016a34:	e7f5      	b.n	8016a22 <memp_init_pool+0x12>
	...

08016a38 <memp_init>:
{
 8016a38:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8016a3a:	4d05      	ldr	r5, [pc, #20]	; (8016a50 <memp_init+0x18>)
{
 8016a3c:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8016a3e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8016a42:	3401      	adds	r4, #1
 8016a44:	f7ff ffe4 	bl	8016a10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016a48:	2c0d      	cmp	r4, #13
 8016a4a:	d1f8      	bne.n	8016a3e <memp_init+0x6>
}
 8016a4c:	bd38      	pop	{r3, r4, r5, pc}
 8016a4e:	bf00      	nop
 8016a50:	0801f7a8 	.word	0x0801f7a8

08016a54 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016a54:	280c      	cmp	r0, #12
{
 8016a56:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016a58:	d807      	bhi.n	8016a6a <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8016a5a:	4b08      	ldr	r3, [pc, #32]	; (8016a7c <memp_malloc+0x28>)
 8016a5c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8016a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8016a64:	3008      	adds	r0, #8
 8016a66:	f7ff bf99 	b.w	801699c <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016a6a:	4b05      	ldr	r3, [pc, #20]	; (8016a80 <memp_malloc+0x2c>)
 8016a6c:	4905      	ldr	r1, [pc, #20]	; (8016a84 <memp_malloc+0x30>)
 8016a6e:	4806      	ldr	r0, [pc, #24]	; (8016a88 <memp_malloc+0x34>)
 8016a70:	f240 1287 	movw	r2, #391	; 0x187
 8016a74:	f005 f9de 	bl	801be34 <iprintf>
}
 8016a78:	2000      	movs	r0, #0
 8016a7a:	bd08      	pop	{r3, pc}
 8016a7c:	0801f7a8 	.word	0x0801f7a8
 8016a80:	0801f67f 	.word	0x0801f67f
 8016a84:	0801f78b 	.word	0x0801f78b
 8016a88:	0801c6e3 	.word	0x0801c6e3

08016a8c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016a8c:	280c      	cmp	r0, #12
 8016a8e:	d906      	bls.n	8016a9e <memp_free+0x12>
 8016a90:	4b07      	ldr	r3, [pc, #28]	; (8016ab0 <memp_free+0x24>)
 8016a92:	4908      	ldr	r1, [pc, #32]	; (8016ab4 <memp_free+0x28>)
 8016a94:	4808      	ldr	r0, [pc, #32]	; (8016ab8 <memp_free+0x2c>)
 8016a96:	f240 12db 	movw	r2, #475	; 0x1db
 8016a9a:	f005 b9cb 	b.w	801be34 <iprintf>

  if (mem == NULL) {
 8016a9e:	b129      	cbz	r1, 8016aac <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016aa0:	4b06      	ldr	r3, [pc, #24]	; (8016abc <memp_free+0x30>)
 8016aa2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8016aa6:	3008      	adds	r0, #8
 8016aa8:	f7ff bf96 	b.w	80169d8 <do_memp_free_pool.isra.1>
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	0801f67f 	.word	0x0801f67f
 8016ab4:	0801f770 	.word	0x0801f770
 8016ab8:	0801c6e3 	.word	0x0801c6e3
 8016abc:	0801f7a8 	.word	0x0801f7a8

08016ac0 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016ac0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8016ac4:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8016ac6:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016ac8:	d502      	bpl.n	8016ad0 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8016aca:	3104      	adds	r1, #4
 8016acc:	f7fe bc74 	b.w	80153b8 <etharp_request>
 8016ad0:	4770      	bx	lr

08016ad2 <netif_init>:
{
 8016ad2:	4770      	bx	lr

08016ad4 <netif_set_ipaddr>:
{
 8016ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ad6:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8016ad8:	460c      	mov	r4, r1
 8016ada:	b1b9      	cbz	r1, 8016b0c <netif_set_ipaddr+0x38>
 8016adc:	680b      	ldr	r3, [r1, #0]
 8016ade:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8016ae0:	9a01      	ldr	r2, [sp, #4]
 8016ae2:	686b      	ldr	r3, [r5, #4]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d00f      	beq.n	8016b08 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8016ae8:	1d2e      	adds	r6, r5, #4
 8016aea:	a901      	add	r1, sp, #4
 8016aec:	4630      	mov	r0, r6
 8016aee:	f001 fb57 	bl	80181a0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8016af2:	a901      	add	r1, sp, #4
 8016af4:	4630      	mov	r0, r6
 8016af6:	f003 ff4f 	bl	801a998 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016afa:	b104      	cbz	r4, 8016afe <netif_set_ipaddr+0x2a>
 8016afc:	6824      	ldr	r4, [r4, #0]
 8016afe:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016b00:	b114      	cbz	r4, 8016b08 <netif_set_ipaddr+0x34>
 8016b02:	4628      	mov	r0, r5
 8016b04:	f7ff ffdc 	bl	8016ac0 <netif_issue_reports.part.0>
}
 8016b08:	b002      	add	sp, #8
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8016b0c:	4b01      	ldr	r3, [pc, #4]	; (8016b14 <netif_set_ipaddr+0x40>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	e7e5      	b.n	8016ade <netif_set_ipaddr+0xa>
 8016b12:	bf00      	nop
 8016b14:	0801f2e4 	.word	0x0801f2e4

08016b18 <netif_set_addr>:
{
 8016b18:	b570      	push	{r4, r5, r6, lr}
 8016b1a:	4606      	mov	r6, r0
 8016b1c:	4615      	mov	r5, r2
 8016b1e:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8016b20:	b109      	cbz	r1, 8016b26 <netif_set_addr+0xe>
 8016b22:	680b      	ldr	r3, [r1, #0]
 8016b24:	b94b      	cbnz	r3, 8016b3a <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8016b26:	4630      	mov	r0, r6
 8016b28:	f7ff ffd4 	bl	8016ad4 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016b2c:	b105      	cbz	r5, 8016b30 <netif_set_addr+0x18>
 8016b2e:	682d      	ldr	r5, [r5, #0]
 8016b30:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016b32:	b104      	cbz	r4, 8016b36 <netif_set_addr+0x1e>
 8016b34:	6824      	ldr	r4, [r4, #0]
 8016b36:	60f4      	str	r4, [r6, #12]
 8016b38:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016b3a:	b102      	cbz	r2, 8016b3e <netif_set_addr+0x26>
 8016b3c:	6815      	ldr	r5, [r2, #0]
 8016b3e:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016b40:	b104      	cbz	r4, 8016b44 <netif_set_addr+0x2c>
 8016b42:	6824      	ldr	r4, [r4, #0]
 8016b44:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8016b46:	4630      	mov	r0, r6
}
 8016b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8016b4c:	f7ff bfc2 	b.w	8016ad4 <netif_set_ipaddr>

08016b50 <netif_add>:
{
 8016b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016b56:	4604      	mov	r4, r0
 8016b58:	460f      	mov	r7, r1
 8016b5a:	4690      	mov	r8, r2
 8016b5c:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8016b5e:	b92e      	cbnz	r6, 8016b6c <netif_add+0x1c>
 8016b60:	4b15      	ldr	r3, [pc, #84]	; (8016bb8 <netif_add+0x68>)
 8016b62:	4916      	ldr	r1, [pc, #88]	; (8016bbc <netif_add+0x6c>)
 8016b64:	4816      	ldr	r0, [pc, #88]	; (8016bc0 <netif_add+0x70>)
 8016b66:	22fb      	movs	r2, #251	; 0xfb
 8016b68:	f005 f964 	bl	801be34 <iprintf>
  netif->num = netif_num++;
 8016b6c:	4a15      	ldr	r2, [pc, #84]	; (8016bc4 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8016b6e:	2303      	movs	r3, #3
 8016b70:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8016b74:	9b08      	ldr	r3, [sp, #32]
 8016b76:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8016b78:	7813      	ldrb	r3, [r2, #0]
 8016b7a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016b7e:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8016b80:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8016b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8016b84:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 8016b86:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016b88:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016b8a:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8016b8c:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016b8e:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8016b90:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016b94:	464b      	mov	r3, r9
 8016b96:	4642      	mov	r2, r8
 8016b98:	4639      	mov	r1, r7
 8016b9a:	f7ff ffbd 	bl	8016b18 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	47b0      	blx	r6
 8016ba2:	b930      	cbnz	r0, 8016bb2 <netif_add+0x62>
  netif->next = netif_list;
 8016ba4:	4b08      	ldr	r3, [pc, #32]	; (8016bc8 <netif_add+0x78>)
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8016baa:	601c      	str	r4, [r3, #0]
}
 8016bac:	4620      	mov	r0, r4
 8016bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8016bb2:	462c      	mov	r4, r5
 8016bb4:	e7fa      	b.n	8016bac <netif_add+0x5c>
 8016bb6:	bf00      	nop
 8016bb8:	0801f7dc 	.word	0x0801f7dc
 8016bbc:	0801f80d 	.word	0x0801f80d
 8016bc0:	0801c6e3 	.word	0x0801c6e3
 8016bc4:	200040bc 	.word	0x200040bc
 8016bc8:	20008acc 	.word	0x20008acc

08016bcc <netif_set_default>:
  netif_default = netif;
 8016bcc:	4b01      	ldr	r3, [pc, #4]	; (8016bd4 <netif_set_default+0x8>)
 8016bce:	6018      	str	r0, [r3, #0]
 8016bd0:	4770      	bx	lr
 8016bd2:	bf00      	nop
 8016bd4:	20008ad0 	.word	0x20008ad0

08016bd8 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016bd8:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016bdc:	07d1      	lsls	r1, r2, #31
 8016bde:	d409      	bmi.n	8016bf4 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8016be0:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016be4:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8016be6:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016bea:	d503      	bpl.n	8016bf4 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016bec:	6843      	ldr	r3, [r0, #4]
 8016bee:	b10b      	cbz	r3, 8016bf4 <netif_set_up+0x1c>
 8016bf0:	f7ff bf66 	b.w	8016ac0 <netif_issue_reports.part.0>
 8016bf4:	4770      	bx	lr

08016bf6 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8016bf6:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8016bfa:	07d9      	lsls	r1, r3, #31
 8016bfc:	d507      	bpl.n	8016c0e <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8016bfe:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016c02:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8016c04:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016c08:	d501      	bpl.n	8016c0e <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8016c0a:	f7fe bb23 	b.w	8015254 <etharp_cleanup_netif>
 8016c0e:	4770      	bx	lr

08016c10 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8016c10:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016c12:	f004 f83b 	bl	801ac8c <sys_arch_protect>
 8016c16:	4b09      	ldr	r3, [pc, #36]	; (8016c3c <pbuf_free_ooseq_callback+0x2c>)
 8016c18:	2200      	movs	r2, #0
 8016c1a:	701a      	strb	r2, [r3, #0]
 8016c1c:	f004 f842 	bl	801aca4 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016c20:	4b07      	ldr	r3, [pc, #28]	; (8016c40 <pbuf_free_ooseq_callback+0x30>)
 8016c22:	681c      	ldr	r4, [r3, #0]
 8016c24:	b904      	cbnz	r4, 8016c28 <pbuf_free_ooseq_callback+0x18>
 8016c26:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8016c28:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8016c2a:	b120      	cbz	r0, 8016c36 <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8016c2c:	f000 fd0c 	bl	8017648 <tcp_segs_free>
      pcb->ooseq = NULL;
 8016c30:	2300      	movs	r3, #0
 8016c32:	6723      	str	r3, [r4, #112]	; 0x70
 8016c34:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016c36:	68e4      	ldr	r4, [r4, #12]
 8016c38:	e7f4      	b.n	8016c24 <pbuf_free_ooseq_callback+0x14>
 8016c3a:	bf00      	nop
 8016c3c:	20008ad4 	.word	0x20008ad4
 8016c40:	20008adc 	.word	0x20008adc

08016c44 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016c44:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016c46:	4604      	mov	r4, r0
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d12f      	bne.n	8016cac <pbuf_header_impl+0x68>
 8016c4c:	4b1f      	ldr	r3, [pc, #124]	; (8016ccc <pbuf_header_impl+0x88>)
 8016c4e:	4920      	ldr	r1, [pc, #128]	; (8016cd0 <pbuf_header_impl+0x8c>)
 8016c50:	4820      	ldr	r0, [pc, #128]	; (8016cd4 <pbuf_header_impl+0x90>)
 8016c52:	f240 223f 	movw	r2, #575	; 0x23f
 8016c56:	f005 f8ed 	bl	801be34 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8016c5e:	b288      	uxth	r0, r1
  type = p->type;
 8016c60:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 8016c62:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8016c64:	b10d      	cbz	r5, 8016c6a <pbuf_header_impl+0x26>
 8016c66:	2d03      	cmp	r5, #3
 8016c68:	d106      	bne.n	8016c78 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8016c6a:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016c6c:	f104 0210 	add.w	r2, r4, #16
 8016c70:	4293      	cmp	r3, r2
 8016c72:	d20a      	bcs.n	8016c8a <pbuf_header_impl+0x46>
      return 1;
 8016c74:	2001      	movs	r0, #1
 8016c76:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8016c78:	3d01      	subs	r5, #1
 8016c7a:	2d01      	cmp	r5, #1
 8016c7c:	d811      	bhi.n	8016ca2 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8016c7e:	2900      	cmp	r1, #0
 8016c80:	da0c      	bge.n	8016c9c <pbuf_header_impl+0x58>
 8016c82:	8962      	ldrh	r2, [r4, #10]
 8016c84:	4282      	cmp	r2, r0
 8016c86:	d3f5      	bcc.n	8016c74 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8016c88:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 8016c8a:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8016c8c:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8016c8e:	8963      	ldrh	r3, [r4, #10]
 8016c90:	b289      	uxth	r1, r1
 8016c92:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 8016c94:	4401      	add	r1, r0
  p->len += header_size_increment;
 8016c96:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8016c98:	8121      	strh	r1, [r4, #8]
 8016c9a:	e7de      	b.n	8016c5a <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8016c9c:	2a00      	cmp	r2, #0
 8016c9e:	d1f3      	bne.n	8016c88 <pbuf_header_impl+0x44>
 8016ca0:	e7e8      	b.n	8016c74 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 8016ca2:	4b0a      	ldr	r3, [pc, #40]	; (8016ccc <pbuf_header_impl+0x88>)
 8016ca4:	490c      	ldr	r1, [pc, #48]	; (8016cd8 <pbuf_header_impl+0x94>)
 8016ca6:	f240 2277 	movw	r2, #631	; 0x277
 8016caa:	e00b      	b.n	8016cc4 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8016cac:	2900      	cmp	r1, #0
 8016cae:	d0d4      	beq.n	8016c5a <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8016cb0:	dad5      	bge.n	8016c5e <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8016cb2:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016cb4:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8016cb6:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016cb8:	4283      	cmp	r3, r0
 8016cba:	d2d1      	bcs.n	8016c60 <pbuf_header_impl+0x1c>
 8016cbc:	4b03      	ldr	r3, [pc, #12]	; (8016ccc <pbuf_header_impl+0x88>)
 8016cbe:	4907      	ldr	r1, [pc, #28]	; (8016cdc <pbuf_header_impl+0x98>)
 8016cc0:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8016cc4:	4803      	ldr	r0, [pc, #12]	; (8016cd4 <pbuf_header_impl+0x90>)
 8016cc6:	f005 f8b5 	bl	801be34 <iprintf>
 8016cca:	e7d3      	b.n	8016c74 <pbuf_header_impl+0x30>
 8016ccc:	0801fa89 	.word	0x0801fa89
 8016cd0:	0801faf3 	.word	0x0801faf3
 8016cd4:	0801c6e3 	.word	0x0801c6e3
 8016cd8:	0801fad7 	.word	0x0801fad7
 8016cdc:	0801fab9 	.word	0x0801fab9

08016ce0 <pbuf_pool_is_empty>:
{
 8016ce0:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 8016ce2:	4d0c      	ldr	r5, [pc, #48]	; (8016d14 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 8016ce4:	f003 ffd2 	bl	801ac8c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8016ce8:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8016cea:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8016cec:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8016cee:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8016cf0:	f003 ffd8 	bl	801aca4 <sys_arch_unprotect>
  if (!queued) {
 8016cf4:	b964      	cbnz	r4, 8016d10 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016cf6:	4622      	mov	r2, r4
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	4807      	ldr	r0, [pc, #28]	; (8016d18 <pbuf_pool_is_empty+0x38>)
 8016cfc:	f7fe f8e8 	bl	8014ed0 <tcpip_callback_with_block>
 8016d00:	b130      	cbz	r0, 8016d10 <pbuf_pool_is_empty+0x30>
 8016d02:	f003 ffc3 	bl	801ac8c <sys_arch_protect>
 8016d06:	702c      	strb	r4, [r5, #0]
}
 8016d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016d0c:	f003 bfca 	b.w	801aca4 <sys_arch_unprotect>
 8016d10:	bd38      	pop	{r3, r4, r5, pc}
 8016d12:	bf00      	nop
 8016d14:	20008ad4 	.word	0x20008ad4
 8016d18:	08016c11 	.word	0x08016c11

08016d1c <pbuf_alloced_custom>:
{
 8016d1c:	b570      	push	{r4, r5, r6, lr}
 8016d1e:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8016d20:	2804      	cmp	r0, #4
 8016d22:	d81e      	bhi.n	8016d62 <pbuf_alloced_custom+0x46>
 8016d24:	e8df f000 	tbb	[pc, r0]
 8016d28:	1b280326 	.word	0x1b280326
 8016d2c:	1b          	.byte	0x1b
 8016d2d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8016d2e:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016d30:	3403      	adds	r4, #3
 8016d32:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8016d36:	f024 0403 	bic.w	r4, r4, #3
 8016d3a:	190e      	adds	r6, r1, r4
 8016d3c:	4286      	cmp	r6, r0
 8016d3e:	f04f 0000 	mov.w	r0, #0
 8016d42:	d80b      	bhi.n	8016d5c <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8016d44:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8016d46:	b1cd      	cbz	r5, 8016d7c <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016d48:	442c      	add	r4, r5
 8016d4a:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8016d4c:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8016d4e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8016d50:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8016d52:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8016d54:	8119      	strh	r1, [r3, #8]
 8016d56:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8016d58:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8016d5a:	4618      	mov	r0, r3
}
 8016d5c:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8016d5e:	2400      	movs	r4, #0
    break;
 8016d60:	e7e6      	b.n	8016d30 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8016d62:	4b07      	ldr	r3, [pc, #28]	; (8016d80 <pbuf_alloced_custom+0x64>)
 8016d64:	4907      	ldr	r1, [pc, #28]	; (8016d84 <pbuf_alloced_custom+0x68>)
 8016d66:	4808      	ldr	r0, [pc, #32]	; (8016d88 <pbuf_alloced_custom+0x6c>)
 8016d68:	f240 12c5 	movw	r2, #453	; 0x1c5
 8016d6c:	f005 f862 	bl	801be34 <iprintf>
    return NULL;
 8016d70:	2000      	movs	r0, #0
 8016d72:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8016d74:	2436      	movs	r4, #54	; 0x36
 8016d76:	e7db      	b.n	8016d30 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8016d78:	240e      	movs	r4, #14
 8016d7a:	e7d9      	b.n	8016d30 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8016d7c:	605d      	str	r5, [r3, #4]
 8016d7e:	e7e5      	b.n	8016d4c <pbuf_alloced_custom+0x30>
 8016d80:	0801fa89 	.word	0x0801fa89
 8016d84:	0801f8cc 	.word	0x0801f8cc
 8016d88:	0801c6e3 	.word	0x0801c6e3

08016d8c <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	f7ff bf59 	b.w	8016c44 <pbuf_header_impl>

08016d92 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8016d92:	2201      	movs	r2, #1
 8016d94:	f7ff bf56 	b.w	8016c44 <pbuf_header_impl>

08016d98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	b950      	cbnz	r0, 8016db6 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8016da0:	4b2c      	ldr	r3, [pc, #176]	; (8016e54 <pbuf_free+0xbc>)
 8016da2:	492d      	ldr	r1, [pc, #180]	; (8016e58 <pbuf_free+0xc0>)
 8016da4:	482d      	ldr	r0, [pc, #180]	; (8016e5c <pbuf_free+0xc4>)
 8016da6:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016daa:	f005 f843 	bl	801be34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016dae:	4627      	mov	r7, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8016db0:	4638      	mov	r0, r7
 8016db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8016db6:	7b03      	ldrb	r3, [r0, #12]
 8016db8:	2b03      	cmp	r3, #3
 8016dba:	d906      	bls.n	8016dca <pbuf_free+0x32>
 8016dbc:	4b25      	ldr	r3, [pc, #148]	; (8016e54 <pbuf_free+0xbc>)
 8016dbe:	4928      	ldr	r1, [pc, #160]	; (8016e60 <pbuf_free+0xc8>)
 8016dc0:	4826      	ldr	r0, [pc, #152]	; (8016e5c <pbuf_free+0xc4>)
 8016dc2:	f240 22de 	movw	r2, #734	; 0x2de
 8016dc6:	f005 f835 	bl	801be34 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016dca:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8016e54 <pbuf_free+0xbc>
 8016dce:	f8df a098 	ldr.w	sl, [pc, #152]	; 8016e68 <pbuf_free+0xd0>
 8016dd2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8016e5c <pbuf_free+0xc4>
{
 8016dd6:	2600      	movs	r6, #0
 8016dd8:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 8016dda:	2c00      	cmp	r4, #0
 8016ddc:	d0e8      	beq.n	8016db0 <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 8016dde:	f003 ff55 	bl	801ac8c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016de2:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8016de4:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016de6:	b933      	cbnz	r3, 8016df6 <pbuf_free+0x5e>
 8016de8:	4643      	mov	r3, r8
 8016dea:	f240 22eb 	movw	r2, #747	; 0x2eb
 8016dee:	4651      	mov	r1, sl
 8016df0:	4648      	mov	r0, r9
 8016df2:	f005 f81f 	bl	801be34 <iprintf>
    ref = --(p->ref);
 8016df6:	89e5      	ldrh	r5, [r4, #14]
 8016df8:	3d01      	subs	r5, #1
 8016dfa:	b2ad      	uxth	r5, r5
 8016dfc:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8016dfe:	4658      	mov	r0, fp
 8016e00:	f003 ff50 	bl	801aca4 <sys_arch_unprotect>
    if (ref == 0) {
 8016e04:	2d00      	cmp	r5, #0
 8016e06:	d1d3      	bne.n	8016db0 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016e08:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8016e0a:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016e0c:	079b      	lsls	r3, r3, #30
 8016e0e:	d50e      	bpl.n	8016e2e <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016e10:	6923      	ldr	r3, [r4, #16]
 8016e12:	b933      	cbnz	r3, 8016e22 <pbuf_free+0x8a>
 8016e14:	4643      	mov	r3, r8
 8016e16:	f240 22f9 	movw	r2, #761	; 0x2f9
 8016e1a:	4912      	ldr	r1, [pc, #72]	; (8016e64 <pbuf_free+0xcc>)
 8016e1c:	4648      	mov	r0, r9
 8016e1e:	f005 f809 	bl	801be34 <iprintf>
        pc->custom_free_function(p);
 8016e22:	6923      	ldr	r3, [r4, #16]
 8016e24:	4620      	mov	r0, r4
 8016e26:	4798      	blx	r3
 8016e28:	3601      	adds	r6, #1
      p = q;
 8016e2a:	462c      	mov	r4, r5
 8016e2c:	e7d4      	b.n	8016dd8 <pbuf_free+0x40>
      type = p->type;
 8016e2e:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8016e30:	2b03      	cmp	r3, #3
 8016e32:	d104      	bne.n	8016e3e <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 8016e34:	4621      	mov	r1, r4
 8016e36:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8016e38:	f7ff fe28 	bl	8016a8c <memp_free>
 8016e3c:	e7f4      	b.n	8016e28 <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8016e3e:	3b01      	subs	r3, #1
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	d802      	bhi.n	8016e4a <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 8016e44:	4621      	mov	r1, r4
 8016e46:	200b      	movs	r0, #11
 8016e48:	e7f6      	b.n	8016e38 <pbuf_free+0xa0>
          mem_free(p);
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	f7ff fbc4 	bl	80165d8 <mem_free>
 8016e50:	e7ea      	b.n	8016e28 <pbuf_free+0x90>
 8016e52:	bf00      	nop
 8016e54:	0801fa89 	.word	0x0801fa89
 8016e58:	0801faf3 	.word	0x0801faf3
 8016e5c:	0801c6e3 	.word	0x0801c6e3
 8016e60:	0801fa3d 	.word	0x0801fa3d
 8016e64:	0801fa68 	.word	0x0801fa68
 8016e68:	0801fa52 	.word	0x0801fa52

08016e6c <pbuf_alloc>:
{
 8016e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e70:	460e      	mov	r6, r1
 8016e72:	4617      	mov	r7, r2
  switch (layer) {
 8016e74:	2804      	cmp	r0, #4
 8016e76:	d80e      	bhi.n	8016e96 <pbuf_alloc+0x2a>
 8016e78:	e8df f000 	tbb	[pc, r0]
 8016e7c:	0b170315 	.word	0x0b170315
 8016e80:	0b          	.byte	0x0b
 8016e81:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8016e82:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8016e84:	2f03      	cmp	r7, #3
 8016e86:	f200 80ba 	bhi.w	8016ffe <pbuf_alloc+0x192>
 8016e8a:	e8df f007 	tbb	[pc, r7]
 8016e8e:	ab90      	.short	0xab90
 8016e90:	10ab      	.short	0x10ab
    offset = 0;
 8016e92:	2500      	movs	r5, #0
    break;
 8016e94:	e7f6      	b.n	8016e84 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8016e96:	4b5c      	ldr	r3, [pc, #368]	; (8017008 <pbuf_alloc+0x19c>)
 8016e98:	495c      	ldr	r1, [pc, #368]	; (801700c <pbuf_alloc+0x1a0>)
 8016e9a:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016e9e:	485c      	ldr	r0, [pc, #368]	; (8017010 <pbuf_alloc+0x1a4>)
 8016ea0:	f004 ffc8 	bl	801be34 <iprintf>
 8016ea4:	e04a      	b.n	8016f3c <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8016ea6:	2536      	movs	r5, #54	; 0x36
 8016ea8:	e7ec      	b.n	8016e84 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8016eaa:	250e      	movs	r5, #14
 8016eac:	e7ea      	b.n	8016e84 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016eae:	200c      	movs	r0, #12
 8016eb0:	f7ff fdd0 	bl	8016a54 <memp_malloc>
    if (p == NULL) {
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	b920      	cbnz	r0, 8016ec2 <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 8016eb8:	f7ff ff12 	bl	8016ce0 <pbuf_pool_is_empty>
}
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8016ec2:	2303      	movs	r3, #3
 8016ec4:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8016eca:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8016ecc:	3503      	adds	r5, #3
 8016ece:	f025 0503 	bic.w	r5, r5, #3
 8016ed2:	f5c5 7542 	rsb	r5, r5, #776	; 0x308
 8016ed6:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8016ed8:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8016edc:	bf28      	it	cs
 8016ede:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8016ee0:	f023 0303 	bic.w	r3, r3, #3
 8016ee4:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8016ee6:	f500 7746 	add.w	r7, r0, #792	; 0x318
 8016eea:	442b      	add	r3, r5
 8016eec:	429f      	cmp	r7, r3
    p->tot_len = length;
 8016eee:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8016ef0:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8016ef2:	d206      	bcs.n	8016f02 <pbuf_alloc+0x96>
 8016ef4:	4b44      	ldr	r3, [pc, #272]	; (8017008 <pbuf_alloc+0x19c>)
 8016ef6:	4947      	ldr	r1, [pc, #284]	; (8017014 <pbuf_alloc+0x1a8>)
 8016ef8:	4845      	ldr	r0, [pc, #276]	; (8017010 <pbuf_alloc+0x1a4>)
 8016efa:	f44f 7298 	mov.w	r2, #304	; 0x130
 8016efe:	f004 ff99 	bl	801be34 <iprintf>
    p->ref = 1;
 8016f02:	2301      	movs	r3, #1
 8016f04:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8016f06:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8016f08:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8017008 <pbuf_alloc+0x19c>
 8016f0c:	f8df a110 	ldr.w	sl, [pc, #272]	; 8017020 <pbuf_alloc+0x1b4>
 8016f10:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8017010 <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 8016f14:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8016f16:	46a3      	mov	fp, r4
 8016f18:	2e00      	cmp	r6, #0
 8016f1a:	dc04      	bgt.n	8016f26 <pbuf_alloc+0xba>
  p->ref = 1;
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8016f20:	2300      	movs	r3, #0
 8016f22:	7363      	strb	r3, [r4, #13]
  return p;
 8016f24:	e7ca      	b.n	8016ebc <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016f26:	200c      	movs	r0, #12
 8016f28:	f7ff fd94 	bl	8016a54 <memp_malloc>
 8016f2c:	2300      	movs	r3, #0
      if (q == NULL) {
 8016f2e:	4605      	mov	r5, r0
 8016f30:	b930      	cbnz	r0, 8016f40 <pbuf_alloc+0xd4>
        PBUF_POOL_IS_EMPTY();
 8016f32:	f7ff fed5 	bl	8016ce0 <pbuf_pool_is_empty>
        pbuf_free(p);
 8016f36:	4620      	mov	r0, r4
 8016f38:	f7ff ff2e 	bl	8016d98 <pbuf_free>
    return NULL;
 8016f3c:	2400      	movs	r4, #0
 8016f3e:	e7bd      	b.n	8016ebc <pbuf_alloc+0x50>
      q->flags = 0;
 8016f40:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8016f42:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8016f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8016f48:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8016f4a:	429e      	cmp	r6, r3
      q->type = type;
 8016f4c:	7302      	strb	r2, [r0, #12]
      r->next = q;
 8016f4e:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8016f52:	d106      	bne.n	8016f62 <pbuf_alloc+0xf6>
 8016f54:	4643      	mov	r3, r8
 8016f56:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8016f5a:	4651      	mov	r1, sl
 8016f5c:	4648      	mov	r0, r9
 8016f5e:	f004 ff69 	bl	801be34 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8016f62:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8016f64:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
      q->tot_len = (u16_t)rem_len;
 8016f68:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8016f6a:	bf28      	it	cs
 8016f6c:	f44f 7342 	movcs.w	r3, #776	; 0x308
 8016f70:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8016f72:	f105 0310 	add.w	r3, r5, #16
 8016f76:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8016f78:	079b      	lsls	r3, r3, #30
 8016f7a:	d006      	beq.n	8016f8a <pbuf_alloc+0x11e>
 8016f7c:	4643      	mov	r3, r8
 8016f7e:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8016f82:	4925      	ldr	r1, [pc, #148]	; (8017018 <pbuf_alloc+0x1ac>)
 8016f84:	4648      	mov	r0, r9
 8016f86:	f004 ff55 	bl	801be34 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8016f8a:	8962      	ldrh	r2, [r4, #10]
 8016f8c:	6863      	ldr	r3, [r4, #4]
 8016f8e:	4413      	add	r3, r2
 8016f90:	429f      	cmp	r7, r3
 8016f92:	d206      	bcs.n	8016fa2 <pbuf_alloc+0x136>
 8016f94:	4643      	mov	r3, r8
 8016f96:	f240 1255 	movw	r2, #341	; 0x155
 8016f9a:	491e      	ldr	r1, [pc, #120]	; (8017014 <pbuf_alloc+0x1a8>)
 8016f9c:	4648      	mov	r0, r9
 8016f9e:	f004 ff49 	bl	801be34 <iprintf>
      q->ref = 1;
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8016fa6:	896b      	ldrh	r3, [r5, #10]
 8016fa8:	46ab      	mov	fp, r5
 8016faa:	1af6      	subs	r6, r6, r3
 8016fac:	e7b4      	b.n	8016f18 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8016fae:	f105 0013 	add.w	r0, r5, #19
 8016fb2:	1cf3      	adds	r3, r6, #3
 8016fb4:	f023 0303 	bic.w	r3, r3, #3
 8016fb8:	f020 0003 	bic.w	r0, r0, #3
 8016fbc:	4418      	add	r0, r3
 8016fbe:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8016fc0:	4298      	cmp	r0, r3
 8016fc2:	d3bb      	bcc.n	8016f3c <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8016fc4:	f7ff fc4c 	bl	8016860 <mem_malloc>
    if (p == NULL) {
 8016fc8:	4604      	mov	r4, r0
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d0b6      	beq.n	8016f3c <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8016fce:	4405      	add	r5, r0
 8016fd0:	3513      	adds	r5, #19
    p->next = NULL;
 8016fd2:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8016fd4:	f025 0503 	bic.w	r5, r5, #3
 8016fd8:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8016fda:	8106      	strh	r6, [r0, #8]
 8016fdc:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8016fde:	6003      	str	r3, [r0, #0]
    p->type = type;
 8016fe0:	7303      	strb	r3, [r0, #12]
 8016fe2:	e79b      	b.n	8016f1c <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016fe4:	200b      	movs	r0, #11
 8016fe6:	f7ff fd35 	bl	8016a54 <memp_malloc>
    if (p == NULL) {
 8016fea:	4604      	mov	r4, r0
 8016fec:	2800      	cmp	r0, #0
 8016fee:	d0a5      	beq.n	8016f3c <pbuf_alloc+0xd0>
    p->payload = NULL;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8016ff4:	8106      	strh	r6, [r0, #8]
 8016ff6:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8016ff8:	6003      	str	r3, [r0, #0]
    p->type = type;
 8016ffa:	7307      	strb	r7, [r0, #12]
    break;
 8016ffc:	e78e      	b.n	8016f1c <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016ffe:	4b02      	ldr	r3, [pc, #8]	; (8017008 <pbuf_alloc+0x19c>)
 8017000:	4906      	ldr	r1, [pc, #24]	; (801701c <pbuf_alloc+0x1b0>)
 8017002:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8017006:	e74a      	b.n	8016e9e <pbuf_alloc+0x32>
 8017008:	0801fa89 	.word	0x0801fa89
 801700c:	0801f824 	.word	0x0801f824
 8017010:	0801c6e3 	.word	0x0801c6e3
 8017014:	0801f83f 	.word	0x0801f83f
 8017018:	0801f884 	.word	0x0801f884
 801701c:	0801f8b1 	.word	0x0801f8b1
 8017020:	0801f870 	.word	0x0801f870

08017024 <pbuf_realloc>:
{
 8017024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017028:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801702a:	4604      	mov	r4, r0
 801702c:	b930      	cbnz	r0, 801703c <pbuf_realloc+0x18>
 801702e:	4b2e      	ldr	r3, [pc, #184]	; (80170e8 <pbuf_realloc+0xc4>)
 8017030:	492e      	ldr	r1, [pc, #184]	; (80170ec <pbuf_realloc+0xc8>)
 8017032:	482f      	ldr	r0, [pc, #188]	; (80170f0 <pbuf_realloc+0xcc>)
 8017034:	f240 12f3 	movw	r2, #499	; 0x1f3
 8017038:	f004 fefc 	bl	801be34 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 801703c:	7b23      	ldrb	r3, [r4, #12]
 801703e:	2b03      	cmp	r3, #3
 8017040:	d906      	bls.n	8017050 <pbuf_realloc+0x2c>
 8017042:	4b29      	ldr	r3, [pc, #164]	; (80170e8 <pbuf_realloc+0xc4>)
 8017044:	492b      	ldr	r1, [pc, #172]	; (80170f4 <pbuf_realloc+0xd0>)
 8017046:	482a      	ldr	r0, [pc, #168]	; (80170f0 <pbuf_realloc+0xcc>)
 8017048:	f240 12f7 	movw	r2, #503	; 0x1f7
 801704c:	f004 fef2 	bl	801be34 <iprintf>
  if (new_len >= p->tot_len) {
 8017050:	8926      	ldrh	r6, [r4, #8]
 8017052:	42ae      	cmp	r6, r5
 8017054:	d945      	bls.n	80170e2 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8017056:	4f24      	ldr	r7, [pc, #144]	; (80170e8 <pbuf_realloc+0xc4>)
 8017058:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8017100 <pbuf_realloc+0xdc>
 801705c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80170f0 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8017060:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8017062:	8963      	ldrh	r3, [r4, #10]
 8017064:	429d      	cmp	r5, r3
 8017066:	d819      	bhi.n	801709c <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8017068:	7b22      	ldrb	r2, [r4, #12]
 801706a:	2a00      	cmp	r2, #0
 801706c:	d131      	bne.n	80170d2 <pbuf_realloc+0xae>
 801706e:	429d      	cmp	r5, r3
 8017070:	d02f      	beq.n	80170d2 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8017072:	7b63      	ldrb	r3, [r4, #13]
 8017074:	079b      	lsls	r3, r3, #30
 8017076:	d42c      	bmi.n	80170d2 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8017078:	6861      	ldr	r1, [r4, #4]
 801707a:	1b09      	subs	r1, r1, r4
 801707c:	4429      	add	r1, r5
 801707e:	4620      	mov	r0, r4
 8017080:	b289      	uxth	r1, r1
 8017082:	f7ff fb61 	bl	8016748 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017086:	4604      	mov	r4, r0
 8017088:	bb18      	cbnz	r0, 80170d2 <pbuf_realloc+0xae>
 801708a:	4b17      	ldr	r3, [pc, #92]	; (80170e8 <pbuf_realloc+0xc4>)
 801708c:	491a      	ldr	r1, [pc, #104]	; (80170f8 <pbuf_realloc+0xd4>)
 801708e:	4818      	ldr	r0, [pc, #96]	; (80170f0 <pbuf_realloc+0xcc>)
 8017090:	f240 221d 	movw	r2, #541	; 0x21d
 8017094:	f004 fece 	bl	801be34 <iprintf>
  q->len = rem_len;
 8017098:	8164      	strh	r4, [r4, #10]
 801709a:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 801709c:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801709e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80170a2:	429e      	cmp	r6, r3
    rem_len -= q->len;
 80170a4:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80170a6:	dd06      	ble.n	80170b6 <pbuf_realloc+0x92>
 80170a8:	463b      	mov	r3, r7
 80170aa:	f240 220b 	movw	r2, #523	; 0x20b
 80170ae:	4649      	mov	r1, r9
 80170b0:	4640      	mov	r0, r8
 80170b2:	f004 febf 	bl	801be34 <iprintf>
    q->tot_len += (u16_t)grow;
 80170b6:	8923      	ldrh	r3, [r4, #8]
 80170b8:	4433      	add	r3, r6
 80170ba:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80170bc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80170be:	2c00      	cmp	r4, #0
 80170c0:	d1cf      	bne.n	8017062 <pbuf_realloc+0x3e>
 80170c2:	463b      	mov	r3, r7
 80170c4:	f240 220f 	movw	r2, #527	; 0x20f
 80170c8:	490c      	ldr	r1, [pc, #48]	; (80170fc <pbuf_realloc+0xd8>)
 80170ca:	4640      	mov	r0, r8
 80170cc:	f004 feb2 	bl	801be34 <iprintf>
 80170d0:	e7c7      	b.n	8017062 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80170d2:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80170d4:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80170d6:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80170d8:	b108      	cbz	r0, 80170de <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80170da:	f7ff fe5d 	bl	8016d98 <pbuf_free>
  q->next = NULL;
 80170de:	2300      	movs	r3, #0
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170e6:	bf00      	nop
 80170e8:	0801fa89 	.word	0x0801fa89
 80170ec:	0801fae5 	.word	0x0801fae5
 80170f0:	0801c6e3 	.word	0x0801c6e3
 80170f4:	0801fafd 	.word	0x0801fafd
 80170f8:	0801fb41 	.word	0x0801fb41
 80170fc:	0801fb29 	.word	0x0801fb29
 8017100:	0801fb18 	.word	0x0801fb18

08017104 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017104:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8017106:	2200      	movs	r2, #0
 8017108:	b290      	uxth	r0, r2
 801710a:	3201      	adds	r2, #1
 801710c:	b903      	cbnz	r3, 8017110 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 801710e:	4770      	bx	lr
    p = p->next;
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	e7f9      	b.n	8017108 <pbuf_clen+0x4>

08017114 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8017114:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8017116:	4604      	mov	r4, r0
 8017118:	b188      	cbz	r0, 801713e <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 801711a:	f003 fdb7 	bl	801ac8c <sys_arch_protect>
 801711e:	89e3      	ldrh	r3, [r4, #14]
 8017120:	3301      	adds	r3, #1
 8017122:	81e3      	strh	r3, [r4, #14]
 8017124:	f003 fdbe 	bl	801aca4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8017128:	89e3      	ldrh	r3, [r4, #14]
 801712a:	b943      	cbnz	r3, 801713e <pbuf_ref+0x2a>
 801712c:	4b04      	ldr	r3, [pc, #16]	; (8017140 <pbuf_ref+0x2c>)
 801712e:	4905      	ldr	r1, [pc, #20]	; (8017144 <pbuf_ref+0x30>)
 8017130:	4805      	ldr	r0, [pc, #20]	; (8017148 <pbuf_ref+0x34>)
 8017132:	f240 3239 	movw	r2, #825	; 0x339
  }
}
 8017136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801713a:	f004 be7b 	b.w	801be34 <iprintf>
 801713e:	bd10      	pop	{r4, pc}
 8017140:	0801fa89 	.word	0x0801fa89
 8017144:	0801fb5d 	.word	0x0801fb5d
 8017148:	0801c6e3 	.word	0x0801c6e3

0801714c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801714c:	b570      	push	{r4, r5, r6, lr}
 801714e:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8017150:	4604      	mov	r4, r0
 8017152:	b100      	cbz	r0, 8017156 <pbuf_cat+0xa>
 8017154:	b969      	cbnz	r1, 8017172 <pbuf_cat+0x26>
 8017156:	4b15      	ldr	r3, [pc, #84]	; (80171ac <pbuf_cat+0x60>)
 8017158:	4915      	ldr	r1, [pc, #84]	; (80171b0 <pbuf_cat+0x64>)
 801715a:	4816      	ldr	r0, [pc, #88]	; (80171b4 <pbuf_cat+0x68>)
 801715c:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8017164:	f004 be66 	b.w	801be34 <iprintf>
    p->tot_len += t->tot_len;
 8017168:	8923      	ldrh	r3, [r4, #8]
 801716a:	8929      	ldrh	r1, [r5, #8]
 801716c:	440b      	add	r3, r1
 801716e:	8123      	strh	r3, [r4, #8]
 8017170:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8017172:	6822      	ldr	r2, [r4, #0]
 8017174:	2a00      	cmp	r2, #0
 8017176:	d1f7      	bne.n	8017168 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8017178:	8922      	ldrh	r2, [r4, #8]
 801717a:	8963      	ldrh	r3, [r4, #10]
 801717c:	429a      	cmp	r2, r3
 801717e:	d006      	beq.n	801718e <pbuf_cat+0x42>
 8017180:	4b0a      	ldr	r3, [pc, #40]	; (80171ac <pbuf_cat+0x60>)
 8017182:	490d      	ldr	r1, [pc, #52]	; (80171b8 <pbuf_cat+0x6c>)
 8017184:	480b      	ldr	r0, [pc, #44]	; (80171b4 <pbuf_cat+0x68>)
 8017186:	f240 3255 	movw	r2, #853	; 0x355
 801718a:	f004 fe53 	bl	801be34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801718e:	6823      	ldr	r3, [r4, #0]
 8017190:	b133      	cbz	r3, 80171a0 <pbuf_cat+0x54>
 8017192:	4b06      	ldr	r3, [pc, #24]	; (80171ac <pbuf_cat+0x60>)
 8017194:	4909      	ldr	r1, [pc, #36]	; (80171bc <pbuf_cat+0x70>)
 8017196:	4807      	ldr	r0, [pc, #28]	; (80171b4 <pbuf_cat+0x68>)
 8017198:	f240 3256 	movw	r2, #854	; 0x356
 801719c:	f004 fe4a 	bl	801be34 <iprintf>
  p->tot_len += t->tot_len;
 80171a0:	892a      	ldrh	r2, [r5, #8]
 80171a2:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80171a4:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80171a6:	4413      	add	r3, r2
 80171a8:	8123      	strh	r3, [r4, #8]
  p->next = t;
 80171aa:	bd70      	pop	{r4, r5, r6, pc}
 80171ac:	0801fa89 	.word	0x0801fa89
 80171b0:	0801f8f0 	.word	0x0801f8f0
 80171b4:	0801c6e3 	.word	0x0801c6e3
 80171b8:	0801f925 	.word	0x0801f925
 80171bc:	0801f952 	.word	0x0801f952

080171c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80171c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c4:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80171c6:	4605      	mov	r5, r0
 80171c8:	b120      	cbz	r0, 80171d4 <pbuf_copy+0x14>
 80171ca:	b119      	cbz	r1, 80171d4 <pbuf_copy+0x14>
 80171cc:	8902      	ldrh	r2, [r0, #8]
 80171ce:	890b      	ldrh	r3, [r1, #8]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d20a      	bcs.n	80171ea <pbuf_copy+0x2a>
 80171d4:	4b38      	ldr	r3, [pc, #224]	; (80172b8 <pbuf_copy+0xf8>)
 80171d6:	4939      	ldr	r1, [pc, #228]	; (80172bc <pbuf_copy+0xfc>)
 80171d8:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80171dc:	4838      	ldr	r0, [pc, #224]	; (80172c0 <pbuf_copy+0x100>)
 80171de:	f004 fe29 	bl	801be34 <iprintf>
 80171e2:	f06f 000f 	mvn.w	r0, #15
 80171e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ea:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80171ee:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80172b8 <pbuf_copy+0xf8>
 80171f2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80172d0 <pbuf_copy+0x110>
 80171f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80172c0 <pbuf_copy+0x100>
 80171fa:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80171fc:	896e      	ldrh	r6, [r5, #10]
 80171fe:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8017200:	6868      	ldr	r0, [r5, #4]
 8017202:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8017204:	1bf6      	subs	r6, r6, r7
 8017206:	eba3 030b 	sub.w	r3, r3, fp
 801720a:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 801720c:	bfac      	ite	ge
 801720e:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8017210:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8017212:	4632      	mov	r2, r6
 8017214:	4459      	add	r1, fp
 8017216:	4438      	add	r0, r7
 8017218:	f005 f907 	bl	801c42a <memcpy>
    offset_to += len;
 801721c:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801721e:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8017220:	b2bf      	uxth	r7, r7
    offset_from += len;
 8017222:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017224:	42bb      	cmp	r3, r7
    offset_from += len;
 8017226:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801722a:	d206      	bcs.n	801723a <pbuf_copy+0x7a>
 801722c:	4643      	mov	r3, r8
 801722e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017232:	4651      	mov	r1, sl
 8017234:	4648      	mov	r0, r9
 8017236:	f004 fdfd 	bl	801be34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801723a:	8963      	ldrh	r3, [r4, #10]
 801723c:	455b      	cmp	r3, fp
 801723e:	d206      	bcs.n	801724e <pbuf_copy+0x8e>
 8017240:	4643      	mov	r3, r8
 8017242:	f240 32ce 	movw	r2, #974	; 0x3ce
 8017246:	491f      	ldr	r1, [pc, #124]	; (80172c4 <pbuf_copy+0x104>)
 8017248:	4648      	mov	r0, r9
 801724a:	f004 fdf3 	bl	801be34 <iprintf>
    if (offset_from >= p_from->len) {
 801724e:	8963      	ldrh	r3, [r4, #10]
 8017250:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8017252:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8017254:	bf9c      	itt	ls
 8017256:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8017258:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 801725c:	42bb      	cmp	r3, r7
 801725e:	d11e      	bne.n	801729e <pbuf_copy+0xde>
      p_to = p_to->next;
 8017260:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8017262:	b9dd      	cbnz	r5, 801729c <pbuf_copy+0xdc>
 8017264:	b1bc      	cbz	r4, 8017296 <pbuf_copy+0xd6>
 8017266:	4b14      	ldr	r3, [pc, #80]	; (80172b8 <pbuf_copy+0xf8>)
 8017268:	4917      	ldr	r1, [pc, #92]	; (80172c8 <pbuf_copy+0x108>)
 801726a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801726e:	e7b5      	b.n	80171dc <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017270:	8962      	ldrh	r2, [r4, #10]
 8017272:	8923      	ldrh	r3, [r4, #8]
 8017274:	429a      	cmp	r2, r3
 8017276:	d114      	bne.n	80172a2 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017278:	6823      	ldr	r3, [r4, #0]
 801727a:	b193      	cbz	r3, 80172a2 <pbuf_copy+0xe2>
 801727c:	4b0e      	ldr	r3, [pc, #56]	; (80172b8 <pbuf_copy+0xf8>)
 801727e:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017282:	4912      	ldr	r1, [pc, #72]	; (80172cc <pbuf_copy+0x10c>)
 8017284:	480e      	ldr	r0, [pc, #56]	; (80172c0 <pbuf_copy+0x100>)
 8017286:	f004 fdd5 	bl	801be34 <iprintf>
 801728a:	f06f 0005 	mvn.w	r0, #5
 801728e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017292:	2c00      	cmp	r4, #0
 8017294:	d1b2      	bne.n	80171fc <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017296:	4620      	mov	r0, r4
 8017298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 801729c:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801729e:	2c00      	cmp	r4, #0
 80172a0:	d1e6      	bne.n	8017270 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80172a2:	896a      	ldrh	r2, [r5, #10]
 80172a4:	892b      	ldrh	r3, [r5, #8]
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d1f3      	bne.n	8017292 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80172aa:	682b      	ldr	r3, [r5, #0]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d0f0      	beq.n	8017292 <pbuf_copy+0xd2>
 80172b0:	4b01      	ldr	r3, [pc, #4]	; (80172b8 <pbuf_copy+0xf8>)
 80172b2:	f240 32e3 	movw	r2, #995	; 0x3e3
 80172b6:	e7e4      	b.n	8017282 <pbuf_copy+0xc2>
 80172b8:	0801fa89 	.word	0x0801fa89
 80172bc:	0801f962 	.word	0x0801f962
 80172c0:	0801c6e3 	.word	0x0801c6e3
 80172c4:	0801f9a9 	.word	0x0801f9a9
 80172c8:	0801f9c4 	.word	0x0801f9c4
 80172cc:	0801f9d1 	.word	0x0801f9d1
 80172d0:	0801f992 	.word	0x0801f992

080172d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80172d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d8:	460f      	mov	r7, r1
 80172da:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80172dc:	4606      	mov	r6, r0
 80172de:	b950      	cbnz	r0, 80172f6 <pbuf_copy_partial+0x22>
 80172e0:	4b1b      	ldr	r3, [pc, #108]	; (8017350 <pbuf_copy_partial+0x7c>)
 80172e2:	491c      	ldr	r1, [pc, #112]	; (8017354 <pbuf_copy_partial+0x80>)
 80172e4:	481c      	ldr	r0, [pc, #112]	; (8017358 <pbuf_copy_partial+0x84>)
 80172e6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80172ea:	f004 fda3 	bl	801be34 <iprintf>
 80172ee:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80172f0:	4628      	mov	r0, r5
 80172f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80172f6:	b169      	cbz	r1, 8017314 <pbuf_copy_partial+0x40>
 80172f8:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80172fa:	f1b8 0f00 	cmp.w	r8, #0
 80172fe:	d0f7      	beq.n	80172f0 <pbuf_copy_partial+0x1c>
 8017300:	2e00      	cmp	r6, #0
 8017302:	d0f5      	beq.n	80172f0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8017304:	b17b      	cbz	r3, 8017326 <pbuf_copy_partial+0x52>
 8017306:	8971      	ldrh	r1, [r6, #10]
 8017308:	428b      	cmp	r3, r1
 801730a:	d30c      	bcc.n	8017326 <pbuf_copy_partial+0x52>
      offset -= p->len;
 801730c:	1a5b      	subs	r3, r3, r1
 801730e:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017310:	6836      	ldr	r6, [r6, #0]
 8017312:	e7f2      	b.n	80172fa <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017314:	4b0e      	ldr	r3, [pc, #56]	; (8017350 <pbuf_copy_partial+0x7c>)
 8017316:	4911      	ldr	r1, [pc, #68]	; (801735c <pbuf_copy_partial+0x88>)
 8017318:	480f      	ldr	r0, [pc, #60]	; (8017358 <pbuf_copy_partial+0x84>)
 801731a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801731e:	f004 fd89 	bl	801be34 <iprintf>
 8017322:	463d      	mov	r5, r7
 8017324:	e7e4      	b.n	80172f0 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8017326:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8017328:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 801732a:	1ae4      	subs	r4, r4, r3
 801732c:	b2a4      	uxth	r4, r4
 801732e:	4544      	cmp	r4, r8
 8017330:	bf28      	it	cs
 8017332:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8017334:	4622      	mov	r2, r4
 8017336:	4419      	add	r1, r3
 8017338:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 801733a:	4425      	add	r5, r4
      len -= buf_copy_len;
 801733c:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8017340:	f005 f873 	bl	801c42a <memcpy>
      copied_total += buf_copy_len;
 8017344:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8017346:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 801734a:	2300      	movs	r3, #0
 801734c:	e7e0      	b.n	8017310 <pbuf_copy_partial+0x3c>
 801734e:	bf00      	nop
 8017350:	0801fa89 	.word	0x0801fa89
 8017354:	0801f9fb 	.word	0x0801f9fb
 8017358:	0801c6e3 	.word	0x0801c6e3
 801735c:	0801fa1a 	.word	0x0801fa1a

08017360 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017360:	4a11      	ldr	r2, [pc, #68]	; (80173a8 <tcp_new_port+0x48>)
 8017362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017364:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017366:	4e11      	ldr	r6, [pc, #68]	; (80173ac <tcp_new_port+0x4c>)
{
 8017368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801736c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8017370:	42a8      	cmp	r0, r5
 8017372:	bf1a      	itte	ne
 8017374:	3001      	addne	r0, #1
 8017376:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017378:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 801737c:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801737e:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8017382:	6824      	ldr	r4, [r4, #0]
 8017384:	b924      	cbnz	r4, 8017390 <tcp_new_port+0x30>
 8017386:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8017388:	2904      	cmp	r1, #4
 801738a:	d1f8      	bne.n	801737e <tcp_new_port+0x1e>
 801738c:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8017390:	8ae7      	ldrh	r7, [r4, #22]
 8017392:	4287      	cmp	r7, r0
 8017394:	d106      	bne.n	80173a4 <tcp_new_port+0x44>
 8017396:	3b01      	subs	r3, #1
 8017398:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801739a:	2b00      	cmp	r3, #0
 801739c:	d1e8      	bne.n	8017370 <tcp_new_port+0x10>
 801739e:	8010      	strh	r0, [r2, #0]
          return 0;
 80173a0:	4618      	mov	r0, r3
 80173a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80173a4:	68e4      	ldr	r4, [r4, #12]
 80173a6:	e7ed      	b.n	8017384 <tcp_new_port+0x24>
 80173a8:	2000000c 	.word	0x2000000c
 80173ac:	0801fc80 	.word	0x0801fc80

080173b0 <tcp_close_shutdown_fin>:
{
 80173b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80173b2:	4604      	mov	r4, r0
 80173b4:	b930      	cbnz	r0, 80173c4 <tcp_close_shutdown_fin+0x14>
 80173b6:	4b13      	ldr	r3, [pc, #76]	; (8017404 <tcp_close_shutdown_fin+0x54>)
 80173b8:	4913      	ldr	r1, [pc, #76]	; (8017408 <tcp_close_shutdown_fin+0x58>)
 80173ba:	4814      	ldr	r0, [pc, #80]	; (801740c <tcp_close_shutdown_fin+0x5c>)
 80173bc:	f240 124d 	movw	r2, #333	; 0x14d
 80173c0:	f004 fd38 	bl	801be34 <iprintf>
  switch (pcb->state) {
 80173c4:	7d23      	ldrb	r3, [r4, #20]
 80173c6:	2b04      	cmp	r3, #4
 80173c8:	d003      	beq.n	80173d2 <tcp_close_shutdown_fin+0x22>
 80173ca:	2b07      	cmp	r3, #7
 80173cc:	d00c      	beq.n	80173e8 <tcp_close_shutdown_fin+0x38>
 80173ce:	2b03      	cmp	r3, #3
 80173d0:	d108      	bne.n	80173e4 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 80173d2:	4620      	mov	r0, r4
 80173d4:	f002 fd9e 	bl	8019f14 <tcp_send_fin>
    if (err == ERR_OK) {
 80173d8:	b988      	cbnz	r0, 80173fe <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 80173da:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80173dc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80173de:	4620      	mov	r0, r4
 80173e0:	f002 fdf0 	bl	8019fc4 <tcp_output>
 80173e4:	2000      	movs	r0, #0
 80173e6:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 80173e8:	4620      	mov	r0, r4
 80173ea:	f002 fd93 	bl	8019f14 <tcp_send_fin>
    if (err == ERR_OK) {
 80173ee:	b930      	cbnz	r0, 80173fe <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 80173f0:	2309      	movs	r3, #9
 80173f2:	e7f3      	b.n	80173dc <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 80173f4:	7ea3      	ldrb	r3, [r4, #26]
 80173f6:	f043 0308 	orr.w	r3, r3, #8
 80173fa:	76a3      	strb	r3, [r4, #26]
 80173fc:	e7f2      	b.n	80173e4 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80173fe:	1c43      	adds	r3, r0, #1
 8017400:	d0f8      	beq.n	80173f4 <tcp_close_shutdown_fin+0x44>
}
 8017402:	bd10      	pop	{r4, pc}
 8017404:	0801fbee 	.word	0x0801fbee
 8017408:	0801fc1d 	.word	0x0801fc1d
 801740c:	0801c6e3 	.word	0x0801c6e3

08017410 <tcp_init>:
{
 8017410:	4770      	bx	lr
	...

08017414 <tcp_bind>:
{
 8017414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8017416:	4d1e      	ldr	r5, [pc, #120]	; (8017490 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8017418:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 801741a:	2900      	cmp	r1, #0
 801741c:	bf18      	it	ne
 801741e:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8017420:	b140      	cbz	r0, 8017434 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8017422:	7d03      	ldrb	r3, [r0, #20]
 8017424:	b14b      	cbz	r3, 801743a <tcp_bind+0x26>
 8017426:	4b1b      	ldr	r3, [pc, #108]	; (8017494 <tcp_bind+0x80>)
 8017428:	491b      	ldr	r1, [pc, #108]	; (8017498 <tcp_bind+0x84>)
 801742a:	481c      	ldr	r0, [pc, #112]	; (801749c <tcp_bind+0x88>)
 801742c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8017430:	f004 fd00 	bl	801be34 <iprintf>
    return ERR_VAL;
 8017434:	f06f 0005 	mvn.w	r0, #5
}
 8017438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 801743a:	b932      	cbnz	r2, 801744a <tcp_bind+0x36>
    port = tcp_new_port();
 801743c:	f7ff ff90 	bl	8017360 <tcp_new_port>
    if (port == 0) {
 8017440:	4602      	mov	r2, r0
 8017442:	b950      	cbnz	r0, 801745a <tcp_bind+0x46>
      return ERR_BUF;
 8017444:	f06f 0001 	mvn.w	r0, #1
 8017448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801744a:	4f15      	ldr	r7, [pc, #84]	; (80174a0 <tcp_bind+0x8c>)
 801744c:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8017450:	6808      	ldr	r0, [r1, #0]
 8017452:	b970      	cbnz	r0, 8017472 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8017454:	3301      	adds	r3, #1
 8017456:	2b04      	cmp	r3, #4
 8017458:	d1f8      	bne.n	801744c <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 801745a:	682b      	ldr	r3, [r5, #0]
 801745c:	b103      	cbz	r3, 8017460 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801745e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017460:	4b10      	ldr	r3, [pc, #64]	; (80174a4 <tcp_bind+0x90>)
  pcb->local_port = port;
 8017462:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	60e2      	str	r2, [r4, #12]
 8017468:	601c      	str	r4, [r3, #0]
 801746a:	f003 f8c9 	bl	801a600 <tcp_timer_needed>
  return ERR_OK;
 801746e:	2000      	movs	r0, #0
 8017470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8017472:	8ac1      	ldrh	r1, [r0, #22]
 8017474:	4291      	cmp	r1, r2
 8017476:	d105      	bne.n	8017484 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017478:	6806      	ldr	r6, [r0, #0]
 801747a:	b12e      	cbz	r6, 8017488 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 801747c:	6829      	ldr	r1, [r5, #0]
 801747e:	b119      	cbz	r1, 8017488 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017480:	428e      	cmp	r6, r1
 8017482:	d001      	beq.n	8017488 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017484:	68c0      	ldr	r0, [r0, #12]
 8017486:	e7e4      	b.n	8017452 <tcp_bind+0x3e>
              return ERR_USE;
 8017488:	f06f 0007 	mvn.w	r0, #7
 801748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801748e:	bf00      	nop
 8017490:	0801f2e4 	.word	0x0801f2e4
 8017494:	0801fbee 	.word	0x0801fbee
 8017498:	0801fbad 	.word	0x0801fbad
 801749c:	0801c6e3 	.word	0x0801c6e3
 80174a0:	0801fc80 	.word	0x0801fc80
 80174a4:	20008ae8 	.word	0x20008ae8

080174a8 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80174a8:	7d03      	ldrb	r3, [r0, #20]
{
 80174aa:	b570      	push	{r4, r5, r6, lr}
 80174ac:	4605      	mov	r5, r0
 80174ae:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80174b0:	b16b      	cbz	r3, 80174ce <tcp_listen_with_backlog_and_err+0x26>
 80174b2:	4b23      	ldr	r3, [pc, #140]	; (8017540 <tcp_listen_with_backlog_and_err+0x98>)
 80174b4:	4923      	ldr	r1, [pc, #140]	; (8017544 <tcp_listen_with_backlog_and_err+0x9c>)
 80174b6:	4824      	ldr	r0, [pc, #144]	; (8017548 <tcp_listen_with_backlog_and_err+0xa0>)
 80174b8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80174bc:	f004 fcba 	bl	801be34 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 80174c0:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80174c2:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 80174c6:	b106      	cbz	r6, 80174ca <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 80174c8:	7033      	strb	r3, [r6, #0]
}
 80174ca:	4620      	mov	r0, r4
 80174cc:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80174ce:	2002      	movs	r0, #2
 80174d0:	f7ff fac0 	bl	8016a54 <memp_malloc>
  if (lpcb == NULL) {
 80174d4:	4604      	mov	r4, r0
 80174d6:	2800      	cmp	r0, #0
 80174d8:	d02f      	beq.n	801753a <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 80174da:	692b      	ldr	r3, [r5, #16]
 80174dc:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 80174de:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 80174e0:	8aeb      	ldrh	r3, [r5, #22]
 80174e2:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 80174e4:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 80174e6:	7d6a      	ldrb	r2, [r5, #21]
 80174e8:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 80174ea:	7a2a      	ldrb	r2, [r5, #8]
 80174ec:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 80174ee:	7aaa      	ldrb	r2, [r5, #10]
 80174f0:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 80174f2:	7a6a      	ldrb	r2, [r5, #9]
 80174f4:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80174f6:	682a      	ldr	r2, [r5, #0]
 80174f8:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 80174fa:	b13b      	cbz	r3, 801750c <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80174fc:	4a13      	ldr	r2, [pc, #76]	; (801754c <tcp_listen_with_backlog_and_err+0xa4>)
 80174fe:	6813      	ldr	r3, [r2, #0]
 8017500:	429d      	cmp	r5, r3
 8017502:	d112      	bne.n	801752a <tcp_listen_with_backlog_and_err+0x82>
 8017504:	68eb      	ldr	r3, [r5, #12]
 8017506:	6013      	str	r3, [r2, #0]
 8017508:	2300      	movs	r3, #0
 801750a:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 801750c:	4629      	mov	r1, r5
 801750e:	2001      	movs	r0, #1
 8017510:	f7ff fabc 	bl	8016a8c <memp_free>
  lpcb->accept = tcp_accept_null;
 8017514:	4b0e      	ldr	r3, [pc, #56]	; (8017550 <tcp_listen_with_backlog_and_err+0xa8>)
 8017516:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017518:	4b0e      	ldr	r3, [pc, #56]	; (8017554 <tcp_listen_with_backlog_and_err+0xac>)
 801751a:	681a      	ldr	r2, [r3, #0]
 801751c:	60e2      	str	r2, [r4, #12]
 801751e:	601c      	str	r4, [r3, #0]
 8017520:	f003 f86e 	bl	801a600 <tcp_timer_needed>
  res = ERR_OK;
 8017524:	2300      	movs	r3, #0
 8017526:	e7ce      	b.n	80174c6 <tcp_listen_with_backlog_and_err+0x1e>
 8017528:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801752a:	2b00      	cmp	r3, #0
 801752c:	d0ec      	beq.n	8017508 <tcp_listen_with_backlog_and_err+0x60>
 801752e:	68da      	ldr	r2, [r3, #12]
 8017530:	4295      	cmp	r5, r2
 8017532:	d1f9      	bne.n	8017528 <tcp_listen_with_backlog_and_err+0x80>
 8017534:	68ea      	ldr	r2, [r5, #12]
 8017536:	60da      	str	r2, [r3, #12]
 8017538:	e7e6      	b.n	8017508 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 801753a:	f04f 33ff 	mov.w	r3, #4294967295
 801753e:	e7c2      	b.n	80174c6 <tcp_listen_with_backlog_and_err+0x1e>
 8017540:	0801fbee 	.word	0x0801fbee
 8017544:	0801fc5d 	.word	0x0801fc5d
 8017548:	0801c6e3 	.word	0x0801c6e3
 801754c:	20008ae8 	.word	0x20008ae8
 8017550:	08017fc7 	.word	0x08017fc7
 8017554:	20008ae4 	.word	0x20008ae4

08017558 <tcp_update_rcv_ann_wnd>:
{
 8017558:	b538      	push	{r3, r4, r5, lr}
 801755a:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801755c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801755e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017560:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017562:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017564:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017566:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801756a:	4428      	add	r0, r5
 801756c:	bf94      	ite	ls
 801756e:	1a82      	subls	r2, r0, r2
 8017570:	f5a0 6200 	subhi.w	r2, r0, #2048	; 0x800
 8017574:	2a00      	cmp	r2, #0
 8017576:	db01      	blt.n	801757c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017578:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801757a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801757c:	1aea      	subs	r2, r5, r3
 801757e:	2a00      	cmp	r2, #0
 8017580:	dd02      	ble.n	8017588 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8017582:	2000      	movs	r0, #0
 8017584:	8560      	strh	r0, [r4, #42]	; 0x2a
 8017586:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8017588:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801758a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801758e:	d306      	bcc.n	801759e <tcp_update_rcv_ann_wnd+0x46>
 8017590:	4b04      	ldr	r3, [pc, #16]	; (80175a4 <tcp_update_rcv_ann_wnd+0x4c>)
 8017592:	4905      	ldr	r1, [pc, #20]	; (80175a8 <tcp_update_rcv_ann_wnd+0x50>)
 8017594:	4805      	ldr	r0, [pc, #20]	; (80175ac <tcp_update_rcv_ann_wnd+0x54>)
 8017596:	f44f 7242 	mov.w	r2, #776	; 0x308
 801759a:	f004 fc4b 	bl	801be34 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801759e:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80175a0:	2000      	movs	r0, #0
}
 80175a2:	bd38      	pop	{r3, r4, r5, pc}
 80175a4:	0801fbee 	.word	0x0801fbee
 80175a8:	0801fee4 	.word	0x0801fee4
 80175ac:	0801c6e3 	.word	0x0801c6e3

080175b0 <tcp_recved>:
{
 80175b0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80175b2:	7d03      	ldrb	r3, [r0, #20]
 80175b4:	2b01      	cmp	r3, #1
{
 80175b6:	4604      	mov	r4, r0
 80175b8:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80175ba:	d106      	bne.n	80175ca <tcp_recved+0x1a>
 80175bc:	4b17      	ldr	r3, [pc, #92]	; (801761c <tcp_recved+0x6c>)
 80175be:	4918      	ldr	r1, [pc, #96]	; (8017620 <tcp_recved+0x70>)
 80175c0:	4818      	ldr	r0, [pc, #96]	; (8017624 <tcp_recved+0x74>)
 80175c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80175c6:	f004 fc35 	bl	801be34 <iprintf>
  pcb->rcv_wnd += len;
 80175ca:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80175cc:	4429      	add	r1, r5
 80175ce:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80175d0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  pcb->rcv_wnd += len;
 80175d4:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80175d6:	d911      	bls.n	80175fc <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80175d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80175dc:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80175de:	4620      	mov	r0, r4
 80175e0:	f7ff ffba 	bl	8017558 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80175e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80175e8:	db17      	blt.n	801761a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 80175ea:	7ea3      	ldrb	r3, [r4, #26]
 80175ec:	f043 0302 	orr.w	r3, r3, #2
 80175f0:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80175f2:	4620      	mov	r0, r4
}
 80175f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80175f8:	f002 bce4 	b.w	8019fc4 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 80175fc:	2900      	cmp	r1, #0
 80175fe:	d1ee      	bne.n	80175de <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8017600:	7d23      	ldrb	r3, [r4, #20]
 8017602:	2b07      	cmp	r3, #7
 8017604:	d0e8      	beq.n	80175d8 <tcp_recved+0x28>
 8017606:	2b09      	cmp	r3, #9
 8017608:	d0e6      	beq.n	80175d8 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801760a:	4b04      	ldr	r3, [pc, #16]	; (801761c <tcp_recved+0x6c>)
 801760c:	4906      	ldr	r1, [pc, #24]	; (8017628 <tcp_recved+0x78>)
 801760e:	4805      	ldr	r0, [pc, #20]	; (8017624 <tcp_recved+0x74>)
 8017610:	f240 322d 	movw	r2, #813	; 0x32d
 8017614:	f004 fc0e 	bl	801be34 <iprintf>
 8017618:	e7e1      	b.n	80175de <tcp_recved+0x2e>
 801761a:	bd38      	pop	{r3, r4, r5, pc}
 801761c:	0801fbee 	.word	0x0801fbee
 8017620:	0801fd24 	.word	0x0801fd24
 8017624:	0801c6e3 	.word	0x0801c6e3
 8017628:	0801fd4a 	.word	0x0801fd4a

0801762c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801762c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 801762e:	4604      	mov	r4, r0
 8017630:	b148      	cbz	r0, 8017646 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8017632:	6840      	ldr	r0, [r0, #4]
 8017634:	b108      	cbz	r0, 801763a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8017636:	f7ff fbaf 	bl	8016d98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801763a:	4621      	mov	r1, r4
 801763c:	2003      	movs	r0, #3
  }
}
 801763e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8017642:	f7ff ba23 	b.w	8016a8c <memp_free>
 8017646:	bd10      	pop	{r4, pc}

08017648 <tcp_segs_free>:
{
 8017648:	b510      	push	{r4, lr}
  while (seg != NULL) {
 801764a:	b900      	cbnz	r0, 801764e <tcp_segs_free+0x6>
}
 801764c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 801764e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8017650:	f7ff ffec 	bl	801762c <tcp_seg_free>
    seg = next;
 8017654:	4620      	mov	r0, r4
 8017656:	e7f8      	b.n	801764a <tcp_segs_free+0x2>

08017658 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801765c:	2003      	movs	r0, #3
 801765e:	f7ff f9f9 	bl	8016a54 <memp_malloc>
  if (cseg == NULL) {
 8017662:	4605      	mov	r5, r0
 8017664:	b160      	cbz	r0, 8017680 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017666:	4620      	mov	r0, r4
 8017668:	462b      	mov	r3, r5
 801766a:	f104 0210 	add.w	r2, r4, #16
 801766e:	f850 1b04 	ldr.w	r1, [r0], #4
 8017672:	f843 1b04 	str.w	r1, [r3], #4
 8017676:	4290      	cmp	r0, r2
 8017678:	d1f9      	bne.n	801766e <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 801767a:	6868      	ldr	r0, [r5, #4]
 801767c:	f7ff fd4a 	bl	8017114 <pbuf_ref>
  return cseg;
}
 8017680:	4628      	mov	r0, r5
 8017682:	bd38      	pop	{r3, r4, r5, pc}

08017684 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017684:	b100      	cbz	r0, 8017688 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8017686:	6101      	str	r1, [r0, #16]
 8017688:	4770      	bx	lr
	...

0801768c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801768c:	b538      	push	{r3, r4, r5, lr}
 801768e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8017690:	4604      	mov	r4, r0
 8017692:	b158      	cbz	r0, 80176ac <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017694:	7d03      	ldrb	r3, [r0, #20]
 8017696:	2b01      	cmp	r3, #1
 8017698:	d106      	bne.n	80176a8 <tcp_recv+0x1c>
 801769a:	4b05      	ldr	r3, [pc, #20]	; (80176b0 <tcp_recv+0x24>)
 801769c:	4905      	ldr	r1, [pc, #20]	; (80176b4 <tcp_recv+0x28>)
 801769e:	4806      	ldr	r0, [pc, #24]	; (80176b8 <tcp_recv+0x2c>)
 80176a0:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80176a4:	f004 fbc6 	bl	801be34 <iprintf>
    pcb->recv = recv;
 80176a8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80176ac:	bd38      	pop	{r3, r4, r5, pc}
 80176ae:	bf00      	nop
 80176b0:	0801fbee 	.word	0x0801fbee
 80176b4:	0801fcfd 	.word	0x0801fcfd
 80176b8:	0801c6e3 	.word	0x0801c6e3

080176bc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80176bc:	b538      	push	{r3, r4, r5, lr}
 80176be:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80176c0:	4604      	mov	r4, r0
 80176c2:	b150      	cbz	r0, 80176da <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80176c4:	7d03      	ldrb	r3, [r0, #20]
 80176c6:	2b01      	cmp	r3, #1
 80176c8:	d106      	bne.n	80176d8 <tcp_sent+0x1c>
 80176ca:	4b04      	ldr	r3, [pc, #16]	; (80176dc <tcp_sent+0x20>)
 80176cc:	4904      	ldr	r1, [pc, #16]	; (80176e0 <tcp_sent+0x24>)
 80176ce:	4805      	ldr	r0, [pc, #20]	; (80176e4 <tcp_sent+0x28>)
 80176d0:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80176d4:	f004 fbae 	bl	801be34 <iprintf>
    pcb->sent = sent;
 80176d8:	67e5      	str	r5, [r4, #124]	; 0x7c
 80176da:	bd38      	pop	{r3, r4, r5, pc}
 80176dc:	0801fbee 	.word	0x0801fbee
 80176e0:	0801fd6b 	.word	0x0801fd6b
 80176e4:	0801c6e3 	.word	0x0801c6e3

080176e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80176e8:	b538      	push	{r3, r4, r5, lr}
 80176ea:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80176ec:	4604      	mov	r4, r0
 80176ee:	b158      	cbz	r0, 8017708 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80176f0:	7d03      	ldrb	r3, [r0, #20]
 80176f2:	2b01      	cmp	r3, #1
 80176f4:	d106      	bne.n	8017704 <tcp_err+0x1c>
 80176f6:	4b05      	ldr	r3, [pc, #20]	; (801770c <tcp_err+0x24>)
 80176f8:	4905      	ldr	r1, [pc, #20]	; (8017710 <tcp_err+0x28>)
 80176fa:	4806      	ldr	r0, [pc, #24]	; (8017714 <tcp_err+0x2c>)
 80176fc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8017700:	f004 fb98 	bl	801be34 <iprintf>
    pcb->errf = err;
 8017704:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8017708:	bd38      	pop	{r3, r4, r5, pc}
 801770a:	bf00      	nop
 801770c:	0801fbee 	.word	0x0801fbee
 8017710:	0801fc29 	.word	0x0801fc29
 8017714:	0801c6e3 	.word	0x0801c6e3

08017718 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017718:	b118      	cbz	r0, 8017722 <tcp_accept+0xa>
 801771a:	7d03      	ldrb	r3, [r0, #20]
 801771c:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 801771e:	bf08      	it	eq
 8017720:	6181      	streq	r1, [r0, #24]
 8017722:	4770      	bx	lr

08017724 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017724:	7d03      	ldrb	r3, [r0, #20]
 8017726:	2b01      	cmp	r3, #1
{
 8017728:	b570      	push	{r4, r5, r6, lr}
 801772a:	4604      	mov	r4, r0
 801772c:	460e      	mov	r6, r1
 801772e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017730:	d106      	bne.n	8017740 <tcp_poll+0x1c>
 8017732:	4b05      	ldr	r3, [pc, #20]	; (8017748 <tcp_poll+0x24>)
 8017734:	4905      	ldr	r1, [pc, #20]	; (801774c <tcp_poll+0x28>)
 8017736:	4806      	ldr	r0, [pc, #24]	; (8017750 <tcp_poll+0x2c>)
 8017738:	f240 7203 	movw	r2, #1795	; 0x703
 801773c:	f004 fb7a 	bl	801be34 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017740:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8017742:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8017746:	bd70      	pop	{r4, r5, r6, pc}
 8017748:	0801fbee 	.word	0x0801fbee
 801774c:	0801fcdf 	.word	0x0801fcdf
 8017750:	0801c6e3 	.word	0x0801c6e3

08017754 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017754:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8017756:	7d03      	ldrb	r3, [r0, #20]
 8017758:	2b01      	cmp	r3, #1
{
 801775a:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 801775c:	d919      	bls.n	8017792 <tcp_pcb_purge+0x3e>
 801775e:	2b0a      	cmp	r3, #10
 8017760:	d017      	beq.n	8017792 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017762:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017764:	b118      	cbz	r0, 801776e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017766:	f7ff fb17 	bl	8016d98 <pbuf_free>
      pcb->refused_data = NULL;
 801776a:	2300      	movs	r3, #0
 801776c:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801776e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8017770:	f7ff ff6a 	bl	8017648 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017774:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801777a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801777c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 801777e:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8017780:	f7ff ff62 	bl	8017648 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017784:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8017786:	f7ff ff5f 	bl	8017648 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801778a:	66a5      	str	r5, [r4, #104]	; 0x68
 801778c:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801778e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8017792:	bd38      	pop	{r3, r4, r5, pc}

08017794 <tcp_slowtmr>:
{
 8017794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8017798:	4eb0      	ldr	r6, [pc, #704]	; (8017a5c <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 801779a:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8017a90 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 801779e:	6833      	ldr	r3, [r6, #0]
 80177a0:	3301      	adds	r3, #1
 80177a2:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80177a4:	4bae      	ldr	r3, [pc, #696]	; (8017a60 <tcp_slowtmr+0x2cc>)
 80177a6:	781a      	ldrb	r2, [r3, #0]
{
 80177a8:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 80177aa:	3201      	adds	r2, #1
 80177ac:	701a      	strb	r2, [r3, #0]
 80177ae:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 80177b0:	4fac      	ldr	r7, [pc, #688]	; (8017a64 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80177b2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8017a94 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 80177b6:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 80177b8:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80177bc:	b96c      	cbnz	r4, 80177da <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80177be:	4faa      	ldr	r7, [pc, #680]	; (8017a68 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80177c0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8017a94 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 80177c4:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80177c6:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8017a98 <tcp_slowtmr+0x304>
 80177ca:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8017a70 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 80177ce:	2d00      	cmp	r5, #0
 80177d0:	f040 8185 	bne.w	8017ade <tcp_slowtmr+0x34a>
}
 80177d4:	b005      	add	sp, #20
 80177d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80177da:	7d23      	ldrb	r3, [r4, #20]
 80177dc:	b933      	cbnz	r3, 80177ec <tcp_slowtmr+0x58>
 80177de:	464b      	mov	r3, r9
 80177e0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80177e4:	49a1      	ldr	r1, [pc, #644]	; (8017a6c <tcp_slowtmr+0x2d8>)
 80177e6:	48a2      	ldr	r0, [pc, #648]	; (8017a70 <tcp_slowtmr+0x2dc>)
 80177e8:	f004 fb24 	bl	801be34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80177ec:	7d23      	ldrb	r3, [r4, #20]
 80177ee:	2b01      	cmp	r3, #1
 80177f0:	d106      	bne.n	8017800 <tcp_slowtmr+0x6c>
 80177f2:	464b      	mov	r3, r9
 80177f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80177f8:	499e      	ldr	r1, [pc, #632]	; (8017a74 <tcp_slowtmr+0x2e0>)
 80177fa:	489d      	ldr	r0, [pc, #628]	; (8017a70 <tcp_slowtmr+0x2dc>)
 80177fc:	f004 fb1a 	bl	801be34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8017800:	7d23      	ldrb	r3, [r4, #20]
 8017802:	2b0a      	cmp	r3, #10
 8017804:	d106      	bne.n	8017814 <tcp_slowtmr+0x80>
 8017806:	464b      	mov	r3, r9
 8017808:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801780c:	499a      	ldr	r1, [pc, #616]	; (8017a78 <tcp_slowtmr+0x2e4>)
 801780e:	4898      	ldr	r0, [pc, #608]	; (8017a70 <tcp_slowtmr+0x2dc>)
 8017810:	f004 fb10 	bl	801be34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017814:	9b02      	ldr	r3, [sp, #8]
 8017816:	7f62      	ldrb	r2, [r4, #29]
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	429a      	cmp	r2, r3
 801781c:	d104      	bne.n	8017828 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 801781e:	68e5      	ldr	r5, [r4, #12]
 8017820:	4644      	mov	r4, r8
      continue;
 8017822:	46a0      	mov	r8, r4
 8017824:	462c      	mov	r4, r5
 8017826:	e7c9      	b.n	80177bc <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017828:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801782a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801782c:	2902      	cmp	r1, #2
 801782e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8017832:	d102      	bne.n	801783a <tcp_slowtmr+0xa6>
 8017834:	2a05      	cmp	r2, #5
 8017836:	f200 80e6 	bhi.w	8017a06 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801783a:	2a0b      	cmp	r2, #11
 801783c:	f200 80e3 	bhi.w	8017a06 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8017840:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8017844:	f1bb 0f00 	cmp.w	fp, #0
 8017848:	f000 80a6 	beq.w	8017998 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801784c:	488b      	ldr	r0, [pc, #556]	; (8017a7c <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 801784e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8017852:	4483      	add	fp, r0
 8017854:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8017858:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 801785a:	bf84      	itt	hi
 801785c:	3301      	addhi	r3, #1
 801785e:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8017862:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8017866:	4293      	cmp	r3, r2
 8017868:	f080 8085 	bcs.w	8017976 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 801786c:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8017870:	7d23      	ldrb	r3, [r4, #20]
 8017872:	2b06      	cmp	r3, #6
 8017874:	d10b      	bne.n	801788e <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8017876:	7ea2      	ldrb	r2, [r4, #26]
 8017878:	06d2      	lsls	r2, r2, #27
 801787a:	d508      	bpl.n	801788e <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801787c:	6832      	ldr	r2, [r6, #0]
 801787e:	6a21      	ldr	r1, [r4, #32]
 8017880:	1a52      	subs	r2, r2, r1
 8017882:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8017884:	bf84      	itt	hi
 8017886:	f10b 0b01 	addhi.w	fp, fp, #1
 801788a:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801788e:	7a25      	ldrb	r5, [r4, #8]
 8017890:	f015 0508 	ands.w	r5, r5, #8
 8017894:	d019      	beq.n	80178ca <tcp_slowtmr+0x136>
 8017896:	2b04      	cmp	r3, #4
 8017898:	d002      	beq.n	80178a0 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 801789a:	2b07      	cmp	r3, #7
 801789c:	f040 80c8 	bne.w	8017a30 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80178a0:	6831      	ldr	r1, [r6, #0]
 80178a2:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80178a4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80178a8:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80178aa:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 80178ae:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80178b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80178b6:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80178ba:	4291      	cmp	r1, r2
 80178bc:	f240 80a6 	bls.w	8017a0c <tcp_slowtmr+0x278>
        ++pcb_remove;
 80178c0:	f10b 0b01 	add.w	fp, fp, #1
 80178c4:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80178c8:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80178ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80178cc:	b168      	cbz	r0, 80178ea <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80178ce:	6833      	ldr	r3, [r6, #0]
 80178d0:	6a22      	ldr	r2, [r4, #32]
 80178d2:	1a9a      	subs	r2, r3, r2
 80178d4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80178d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80178dc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80178e0:	d303      	bcc.n	80178ea <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 80178e2:	f7ff feb1 	bl	8017648 <tcp_segs_free>
      pcb->ooseq = NULL;
 80178e6:	2300      	movs	r3, #0
 80178e8:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 80178ea:	7d23      	ldrb	r3, [r4, #20]
 80178ec:	2b03      	cmp	r3, #3
 80178ee:	f040 80a1 	bne.w	8017a34 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80178f2:	6833      	ldr	r3, [r6, #0]
 80178f4:	6a22      	ldr	r2, [r4, #32]
 80178f6:	1a9b      	subs	r3, r3, r2
 80178f8:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80178fa:	d803      	bhi.n	8017904 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 80178fc:	f1bb 0f00 	cmp.w	fp, #0
 8017900:	f000 80cc 	beq.w	8017a9c <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8017904:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8017906:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 801790a:	f7ff ff23 	bl	8017754 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801790e:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8017910:	f1b8 0f00 	cmp.w	r8, #0
 8017914:	f000 8096 	beq.w	8017a44 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017918:	429c      	cmp	r4, r3
 801791a:	d106      	bne.n	801792a <tcp_slowtmr+0x196>
 801791c:	464b      	mov	r3, r9
 801791e:	f240 4289 	movw	r2, #1161	; 0x489
 8017922:	4957      	ldr	r1, [pc, #348]	; (8017a80 <tcp_slowtmr+0x2ec>)
 8017924:	4852      	ldr	r0, [pc, #328]	; (8017a70 <tcp_slowtmr+0x2dc>)
 8017926:	f004 fa85 	bl	801be34 <iprintf>
        prev->next = pcb->next;
 801792a:	68e3      	ldr	r3, [r4, #12]
 801792c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8017930:	b14d      	cbz	r5, 8017946 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017932:	8b23      	ldrh	r3, [r4, #24]
 8017934:	9301      	str	r3, [sp, #4]
 8017936:	8ae3      	ldrh	r3, [r4, #22]
 8017938:	9300      	str	r3, [sp, #0]
 801793a:	4622      	mov	r2, r4
 801793c:	1d23      	adds	r3, r4, #4
 801793e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017940:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017942:	f002 fcbd 	bl	801a2c0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8017946:	6923      	ldr	r3, [r4, #16]
 8017948:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801794a:	4621      	mov	r1, r4
 801794c:	2001      	movs	r0, #1
      pcb = pcb->next;
 801794e:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8017950:	f7ff f89c 	bl	8016a8c <memp_free>
      tcp_active_pcbs_changed = 0;
 8017954:	2200      	movs	r2, #0
 8017956:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801795a:	f1bb 0f00 	cmp.w	fp, #0
 801795e:	d004      	beq.n	801796a <tcp_slowtmr+0x1d6>
 8017960:	9b03      	ldr	r3, [sp, #12]
 8017962:	f06f 010c 	mvn.w	r1, #12
 8017966:	4618      	mov	r0, r3
 8017968:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 801796a:	f89a 3000 	ldrb.w	r3, [sl]
 801796e:	2b00      	cmp	r3, #0
 8017970:	f43f af56 	beq.w	8017820 <tcp_slowtmr+0x8c>
 8017974:	e71c      	b.n	80177b0 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8017976:	4620      	mov	r0, r4
 8017978:	f002 fd90 	bl	801a49c <tcp_zero_window_probe>
 801797c:	2800      	cmp	r0, #0
 801797e:	f47f af75 	bne.w	801786c <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017982:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8017986:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801798a:	2b06      	cmp	r3, #6
 801798c:	f63f af6e 	bhi.w	801786c <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8017990:	3301      	adds	r3, #1
 8017992:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8017996:	e769      	b.n	801786c <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 8017998:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801799c:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 801799e:	bfa4      	itt	ge
 80179a0:	3301      	addge	r3, #1
 80179a2:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80179a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	f43f af60 	beq.w	801786c <tcp_slowtmr+0xd8>
 80179ac:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80179b0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80179b4:	4298      	cmp	r0, r3
 80179b6:	f6ff af59 	blt.w	801786c <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 80179ba:	2902      	cmp	r1, #2
 80179bc:	d00a      	beq.n	80179d4 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80179be:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80179c2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80179c6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80179ca:	492e      	ldr	r1, [pc, #184]	; (8017a84 <tcp_slowtmr+0x2f0>)
 80179cc:	5c8a      	ldrb	r2, [r1, r2]
 80179ce:	4093      	lsls	r3, r2
 80179d0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80179d4:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80179d6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80179da:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80179dc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80179e0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 80179e2:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 80179e6:	4293      	cmp	r3, r2
 80179e8:	bf28      	it	cs
 80179ea:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80179ec:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 80179ee:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80179f0:	b292      	uxth	r2, r2
 80179f2:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80179f4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80179f8:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 80179fa:	bf38      	it	cc
 80179fc:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8017a00:	f002 fcb6 	bl	801a370 <tcp_rexmit_rto>
 8017a04:	e734      	b.n	8017870 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8017a06:	f04f 0b01 	mov.w	fp, #1
 8017a0a:	e731      	b.n	8017870 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017a0c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8017a10:	4a1d      	ldr	r2, [pc, #116]	; (8017a88 <tcp_slowtmr+0x2f4>)
 8017a12:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8017a16:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017a1a:	4299      	cmp	r1, r3
 8017a1c:	d908      	bls.n	8017a30 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f002 fd12 	bl	801a448 <tcp_keepalive>
        if (err == ERR_OK) {
 8017a24:	b920      	cbnz	r0, 8017a30 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8017a26:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8017a2a:	3301      	adds	r3, #1
 8017a2c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8017a30:	2500      	movs	r5, #0
 8017a32:	e74a      	b.n	80178ca <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8017a34:	2b09      	cmp	r3, #9
 8017a36:	f47f af61 	bne.w	80178fc <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017a3a:	6833      	ldr	r3, [r6, #0]
 8017a3c:	6a22      	ldr	r2, [r4, #32]
 8017a3e:	1a9b      	subs	r3, r3, r2
 8017a40:	2bf0      	cmp	r3, #240	; 0xf0
 8017a42:	e75a      	b.n	80178fa <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017a44:	429c      	cmp	r4, r3
 8017a46:	d006      	beq.n	8017a56 <tcp_slowtmr+0x2c2>
 8017a48:	464b      	mov	r3, r9
 8017a4a:	f240 428d 	movw	r2, #1165	; 0x48d
 8017a4e:	490f      	ldr	r1, [pc, #60]	; (8017a8c <tcp_slowtmr+0x2f8>)
 8017a50:	4807      	ldr	r0, [pc, #28]	; (8017a70 <tcp_slowtmr+0x2dc>)
 8017a52:	f004 f9ef 	bl	801be34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017a56:	68e3      	ldr	r3, [r4, #12]
 8017a58:	603b      	str	r3, [r7, #0]
 8017a5a:	e769      	b.n	8017930 <tcp_slowtmr+0x19c>
 8017a5c:	20008ae0 	.word	0x20008ae0
 8017a60:	200040be 	.word	0x200040be
 8017a64:	20008adc 	.word	0x20008adc
 8017a68:	20008aec 	.word	0x20008aec
 8017a6c:	0801fd92 	.word	0x0801fd92
 8017a70:	0801c6e3 	.word	0x0801c6e3
 8017a74:	0801fdbc 	.word	0x0801fdbc
 8017a78:	0801fde6 	.word	0x0801fde6
 8017a7c:	0801fcd8 	.word	0x0801fcd8
 8017a80:	0801fe13 	.word	0x0801fe13
 8017a84:	0801fba0 	.word	0x0801fba0
 8017a88:	000124f8 	.word	0x000124f8
 8017a8c:	0801fe3e 	.word	0x0801fe3e
 8017a90:	20008ad8 	.word	0x20008ad8
 8017a94:	0801fbee 	.word	0x0801fbee
 8017a98:	0801fe68 	.word	0x0801fe68
      ++prev->polltmr;
 8017a9c:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8017a9e:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8017aa0:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8017aa2:	3301      	adds	r3, #1
 8017aa4:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8017aa6:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8017aa8:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8017aaa:	f63f aeba 	bhi.w	8017822 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8017aae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8017ab2:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8017ab6:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8017aba:	b173      	cbz	r3, 8017ada <tcp_slowtmr+0x346>
 8017abc:	4621      	mov	r1, r4
 8017abe:	6920      	ldr	r0, [r4, #16]
 8017ac0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8017ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	f47f ae72 	bne.w	80177b0 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8017acc:	2800      	cmp	r0, #0
 8017ace:	f47f aea8 	bne.w	8017822 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f002 fa76 	bl	8019fc4 <tcp_output>
 8017ad8:	e6a3      	b.n	8017822 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8017ada:	4658      	mov	r0, fp
 8017adc:	e7f1      	b.n	8017ac2 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017ade:	7d2b      	ldrb	r3, [r5, #20]
 8017ae0:	2b0a      	cmp	r3, #10
 8017ae2:	d006      	beq.n	8017af2 <tcp_slowtmr+0x35e>
 8017ae4:	4643      	mov	r3, r8
 8017ae6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8017aea:	4651      	mov	r1, sl
 8017aec:	4648      	mov	r0, r9
 8017aee:	f004 f9a1 	bl	801be34 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017af2:	6833      	ldr	r3, [r6, #0]
 8017af4:	6a2a      	ldr	r2, [r5, #32]
 8017af6:	1a9b      	subs	r3, r3, r2
 8017af8:	2bf0      	cmp	r3, #240	; 0xf0
 8017afa:	d816      	bhi.n	8017b2a <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8017afc:	462c      	mov	r4, r5
 8017afe:	68ed      	ldr	r5, [r5, #12]
 8017b00:	e665      	b.n	80177ce <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	429d      	cmp	r5, r3
 8017b06:	d106      	bne.n	8017b16 <tcp_slowtmr+0x382>
 8017b08:	4643      	mov	r3, r8
 8017b0a:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8017b0e:	4910      	ldr	r1, [pc, #64]	; (8017b50 <tcp_slowtmr+0x3bc>)
 8017b10:	4648      	mov	r0, r9
 8017b12:	f004 f98f 	bl	801be34 <iprintf>
        prev->next = pcb->next;
 8017b16:	68eb      	ldr	r3, [r5, #12]
 8017b18:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8017b1a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8017b1e:	4629      	mov	r1, r5
 8017b20:	2001      	movs	r0, #1
 8017b22:	f7fe ffb3 	bl	8016a8c <memp_free>
      pcb = pcb->next;
 8017b26:	465d      	mov	r5, fp
 8017b28:	e651      	b.n	80177ce <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	f7ff fe12 	bl	8017754 <tcp_pcb_purge>
      if (prev != NULL) {
 8017b30:	2c00      	cmp	r4, #0
 8017b32:	d1e6      	bne.n	8017b02 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	429d      	cmp	r5, r3
 8017b38:	d006      	beq.n	8017b48 <tcp_slowtmr+0x3b4>
 8017b3a:	4643      	mov	r3, r8
 8017b3c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8017b40:	4904      	ldr	r1, [pc, #16]	; (8017b54 <tcp_slowtmr+0x3c0>)
 8017b42:	4648      	mov	r0, r9
 8017b44:	f004 f976 	bl	801be34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017b48:	68eb      	ldr	r3, [r5, #12]
 8017b4a:	603b      	str	r3, [r7, #0]
 8017b4c:	e7e5      	b.n	8017b1a <tcp_slowtmr+0x386>
 8017b4e:	bf00      	nop
 8017b50:	0801fe97 	.word	0x0801fe97
 8017b54:	0801febe 	.word	0x0801febe

08017b58 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8017b58:	6803      	ldr	r3, [r0, #0]
 8017b5a:	428b      	cmp	r3, r1
{
 8017b5c:	b510      	push	{r4, lr}
 8017b5e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8017b60:	d137      	bne.n	8017bd2 <tcp_pcb_remove+0x7a>
 8017b62:	68cb      	ldr	r3, [r1, #12]
 8017b64:	6003      	str	r3, [r0, #0]
 8017b66:	2300      	movs	r3, #0
 8017b68:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7ff fdf2 	bl	8017754 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8017b70:	7d23      	ldrb	r3, [r4, #20]
 8017b72:	2b0a      	cmp	r3, #10
 8017b74:	d00a      	beq.n	8017b8c <tcp_pcb_remove+0x34>
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d008      	beq.n	8017b8c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8017b7a:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8017b7c:	07da      	lsls	r2, r3, #31
 8017b7e:	d505      	bpl.n	8017b8c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8017b80:	f043 0302 	orr.w	r3, r3, #2
 8017b84:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8017b86:	4620      	mov	r0, r4
 8017b88:	f002 fa1c 	bl	8019fc4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017b8c:	7d23      	ldrb	r3, [r4, #20]
 8017b8e:	2b01      	cmp	r3, #1
 8017b90:	d01a      	beq.n	8017bc8 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017b92:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8017b94:	b133      	cbz	r3, 8017ba4 <tcp_pcb_remove+0x4c>
 8017b96:	4b13      	ldr	r3, [pc, #76]	; (8017be4 <tcp_pcb_remove+0x8c>)
 8017b98:	4913      	ldr	r1, [pc, #76]	; (8017be8 <tcp_pcb_remove+0x90>)
 8017b9a:	4814      	ldr	r0, [pc, #80]	; (8017bec <tcp_pcb_remove+0x94>)
 8017b9c:	f240 7253 	movw	r2, #1875	; 0x753
 8017ba0:	f004 f948 	bl	801be34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017ba4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017ba6:	b133      	cbz	r3, 8017bb6 <tcp_pcb_remove+0x5e>
 8017ba8:	4b0e      	ldr	r3, [pc, #56]	; (8017be4 <tcp_pcb_remove+0x8c>)
 8017baa:	4911      	ldr	r1, [pc, #68]	; (8017bf0 <tcp_pcb_remove+0x98>)
 8017bac:	480f      	ldr	r0, [pc, #60]	; (8017bec <tcp_pcb_remove+0x94>)
 8017bae:	f240 7254 	movw	r2, #1876	; 0x754
 8017bb2:	f004 f93f 	bl	801be34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017bb6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017bb8:	b133      	cbz	r3, 8017bc8 <tcp_pcb_remove+0x70>
 8017bba:	4b0a      	ldr	r3, [pc, #40]	; (8017be4 <tcp_pcb_remove+0x8c>)
 8017bbc:	490d      	ldr	r1, [pc, #52]	; (8017bf4 <tcp_pcb_remove+0x9c>)
 8017bbe:	480b      	ldr	r0, [pc, #44]	; (8017bec <tcp_pcb_remove+0x94>)
 8017bc0:	f240 7256 	movw	r2, #1878	; 0x756
 8017bc4:	f004 f936 	bl	801be34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017bc8:	2300      	movs	r3, #0
 8017bca:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017bcc:	82e3      	strh	r3, [r4, #22]
 8017bce:	bd10      	pop	{r4, pc}
 8017bd0:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d0c7      	beq.n	8017b66 <tcp_pcb_remove+0xe>
 8017bd6:	68da      	ldr	r2, [r3, #12]
 8017bd8:	4294      	cmp	r4, r2
 8017bda:	d1f9      	bne.n	8017bd0 <tcp_pcb_remove+0x78>
 8017bdc:	68e2      	ldr	r2, [r4, #12]
 8017bde:	60da      	str	r2, [r3, #12]
 8017be0:	e7c1      	b.n	8017b66 <tcp_pcb_remove+0xe>
 8017be2:	bf00      	nop
 8017be4:	0801fbee 	.word	0x0801fbee
 8017be8:	0801fc90 	.word	0x0801fc90
 8017bec:	0801c6e3 	.word	0x0801c6e3
 8017bf0:	0801fca8 	.word	0x0801fca8
 8017bf4:	0801fcc1 	.word	0x0801fcc1

08017bf8 <tcp_close_shutdown>:
{
 8017bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bfa:	7d03      	ldrb	r3, [r0, #20]
 8017bfc:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017bfe:	2900      	cmp	r1, #0
 8017c00:	d049      	beq.n	8017c96 <tcp_close_shutdown+0x9e>
 8017c02:	2b04      	cmp	r3, #4
 8017c04:	d001      	beq.n	8017c0a <tcp_close_shutdown+0x12>
 8017c06:	2b07      	cmp	r3, #7
 8017c08:	d145      	bne.n	8017c96 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017c0a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8017c0c:	b91a      	cbnz	r2, 8017c16 <tcp_close_shutdown+0x1e>
 8017c0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8017c10:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8017c14:	d03f      	beq.n	8017c96 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017c16:	7ea3      	ldrb	r3, [r4, #26]
 8017c18:	06db      	lsls	r3, r3, #27
 8017c1a:	d406      	bmi.n	8017c2a <tcp_close_shutdown+0x32>
 8017c1c:	4b3f      	ldr	r3, [pc, #252]	; (8017d1c <tcp_close_shutdown+0x124>)
 8017c1e:	4940      	ldr	r1, [pc, #256]	; (8017d20 <tcp_close_shutdown+0x128>)
 8017c20:	4840      	ldr	r0, [pc, #256]	; (8017d24 <tcp_close_shutdown+0x12c>)
 8017c22:	f240 120f 	movw	r2, #271	; 0x10f
 8017c26:	f004 f905 	bl	801be34 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017c2a:	8b23      	ldrh	r3, [r4, #24]
 8017c2c:	9301      	str	r3, [sp, #4]
 8017c2e:	8ae3      	ldrh	r3, [r4, #22]
 8017c30:	9300      	str	r3, [sp, #0]
 8017c32:	4622      	mov	r2, r4
 8017c34:	1d23      	adds	r3, r4, #4
 8017c36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017c38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017c3a:	f002 fb41 	bl	801a2c0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f7ff fd88 	bl	8017754 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017c44:	4a38      	ldr	r2, [pc, #224]	; (8017d28 <tcp_close_shutdown+0x130>)
 8017c46:	6813      	ldr	r3, [r2, #0]
 8017c48:	429c      	cmp	r4, r3
 8017c4a:	d115      	bne.n	8017c78 <tcp_close_shutdown+0x80>
 8017c4c:	68e3      	ldr	r3, [r4, #12]
 8017c4e:	6013      	str	r3, [r2, #0]
 8017c50:	2300      	movs	r3, #0
 8017c52:	60e3      	str	r3, [r4, #12]
 8017c54:	4b35      	ldr	r3, [pc, #212]	; (8017d2c <tcp_close_shutdown+0x134>)
 8017c56:	2201      	movs	r2, #1
 8017c58:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8017c5a:	7d23      	ldrb	r3, [r4, #20]
 8017c5c:	2b04      	cmp	r3, #4
 8017c5e:	d113      	bne.n	8017c88 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8017c60:	230a      	movs	r3, #10
 8017c62:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017c64:	4b32      	ldr	r3, [pc, #200]	; (8017d30 <tcp_close_shutdown+0x138>)
 8017c66:	681a      	ldr	r2, [r3, #0]
 8017c68:	60e2      	str	r2, [r4, #12]
 8017c6a:	601c      	str	r4, [r3, #0]
 8017c6c:	f002 fcc8 	bl	801a600 <tcp_timer_needed>
}
 8017c70:	2000      	movs	r0, #0
 8017c72:	b003      	add	sp, #12
 8017c74:	bd30      	pop	{r4, r5, pc}
 8017c76:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d0e9      	beq.n	8017c50 <tcp_close_shutdown+0x58>
 8017c7c:	68da      	ldr	r2, [r3, #12]
 8017c7e:	4294      	cmp	r4, r2
 8017c80:	d1f9      	bne.n	8017c76 <tcp_close_shutdown+0x7e>
 8017c82:	68e2      	ldr	r2, [r4, #12]
 8017c84:	60da      	str	r2, [r3, #12]
 8017c86:	e7e3      	b.n	8017c50 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8017c88:	4b2a      	ldr	r3, [pc, #168]	; (8017d34 <tcp_close_shutdown+0x13c>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	429c      	cmp	r4, r3
 8017c8e:	d117      	bne.n	8017cc0 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8017c90:	f001 fd2c 	bl	80196ec <tcp_trigger_input_pcb_close>
 8017c94:	e7ec      	b.n	8017c70 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8017c96:	2b01      	cmp	r3, #1
 8017c98:	d020      	beq.n	8017cdc <tcp_close_shutdown+0xe4>
 8017c9a:	d307      	bcc.n	8017cac <tcp_close_shutdown+0xb4>
 8017c9c:	2b02      	cmp	r3, #2
 8017c9e:	d033      	beq.n	8017d08 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8017ca0:	4620      	mov	r0, r4
}
 8017ca2:	b003      	add	sp, #12
 8017ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8017ca8:	f7ff bb82 	b.w	80173b0 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8017cac:	8ae3      	ldrh	r3, [r4, #22]
 8017cae:	b13b      	cbz	r3, 8017cc0 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017cb0:	4a21      	ldr	r2, [pc, #132]	; (8017d38 <tcp_close_shutdown+0x140>)
 8017cb2:	6813      	ldr	r3, [r2, #0]
 8017cb4:	429c      	cmp	r4, r3
 8017cb6:	d109      	bne.n	8017ccc <tcp_close_shutdown+0xd4>
 8017cb8:	68e3      	ldr	r3, [r4, #12]
 8017cba:	6013      	str	r3, [r2, #0]
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8017cc0:	4621      	mov	r1, r4
 8017cc2:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8017cc4:	f7fe fee2 	bl	8016a8c <memp_free>
    break;
 8017cc8:	e7d2      	b.n	8017c70 <tcp_close_shutdown+0x78>
 8017cca:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d0f5      	beq.n	8017cbc <tcp_close_shutdown+0xc4>
 8017cd0:	68da      	ldr	r2, [r3, #12]
 8017cd2:	4294      	cmp	r4, r2
 8017cd4:	d1f9      	bne.n	8017cca <tcp_close_shutdown+0xd2>
 8017cd6:	68e2      	ldr	r2, [r4, #12]
 8017cd8:	60da      	str	r2, [r3, #12]
 8017cda:	e7ef      	b.n	8017cbc <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8017cdc:	4917      	ldr	r1, [pc, #92]	; (8017d3c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8017cde:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8017ce0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8017ce4:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017ce6:	b94a      	cbnz	r2, 8017cfc <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017ce8:	3301      	adds	r3, #1
 8017cea:	2b04      	cmp	r3, #4
 8017cec:	d1f8      	bne.n	8017ce0 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017cee:	4621      	mov	r1, r4
 8017cf0:	4813      	ldr	r0, [pc, #76]	; (8017d40 <tcp_close_shutdown+0x148>)
 8017cf2:	f7ff ff31 	bl	8017b58 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017cf6:	4621      	mov	r1, r4
 8017cf8:	2002      	movs	r0, #2
 8017cfa:	e7e3      	b.n	8017cc4 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8017cfc:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8017cfe:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8017d00:	bf08      	it	eq
 8017d02:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017d04:	68d2      	ldr	r2, [r2, #12]
 8017d06:	e7ee      	b.n	8017ce6 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8017d08:	4621      	mov	r1, r4
 8017d0a:	4807      	ldr	r0, [pc, #28]	; (8017d28 <tcp_close_shutdown+0x130>)
 8017d0c:	f7ff ff24 	bl	8017b58 <tcp_pcb_remove>
 8017d10:	4b06      	ldr	r3, [pc, #24]	; (8017d2c <tcp_close_shutdown+0x134>)
 8017d12:	2001      	movs	r0, #1
 8017d14:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8017d16:	4621      	mov	r1, r4
 8017d18:	e7d4      	b.n	8017cc4 <tcp_close_shutdown+0xcc>
 8017d1a:	bf00      	nop
 8017d1c:	0801fbee 	.word	0x0801fbee
 8017d20:	0801fbd5 	.word	0x0801fbd5
 8017d24:	0801c6e3 	.word	0x0801c6e3
 8017d28:	20008adc 	.word	0x20008adc
 8017d2c:	20008ad8 	.word	0x20008ad8
 8017d30:	20008aec 	.word	0x20008aec
 8017d34:	20008af0 	.word	0x20008af0
 8017d38:	20008ae8 	.word	0x20008ae8
 8017d3c:	0801fc80 	.word	0x0801fc80
 8017d40:	20008ae4 	.word	0x20008ae4

08017d44 <tcp_close>:
  if (pcb->state != LISTEN) {
 8017d44:	7d03      	ldrb	r3, [r0, #20]
 8017d46:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8017d48:	bf1e      	ittt	ne
 8017d4a:	7e83      	ldrbne	r3, [r0, #26]
 8017d4c:	f043 0310 	orrne.w	r3, r3, #16
 8017d50:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8017d52:	2101      	movs	r1, #1
 8017d54:	f7ff bf50 	b.w	8017bf8 <tcp_close_shutdown>

08017d58 <tcp_recv_null>:
{
 8017d58:	b510      	push	{r4, lr}
 8017d5a:	4608      	mov	r0, r1
  if (p != NULL) {
 8017d5c:	4614      	mov	r4, r2
 8017d5e:	b13a      	cbz	r2, 8017d70 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8017d60:	8911      	ldrh	r1, [r2, #8]
 8017d62:	f7ff fc25 	bl	80175b0 <tcp_recved>
    pbuf_free(p);
 8017d66:	4620      	mov	r0, r4
 8017d68:	f7ff f816 	bl	8016d98 <pbuf_free>
}
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d1fb      	bne.n	8017d6c <tcp_recv_null+0x14>
}
 8017d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8017d78:	f7ff bfe4 	b.w	8017d44 <tcp_close>

08017d7c <tcp_process_refused_data>:
{
 8017d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8017d7e:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017d80:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8017d84:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8017d86:	2300      	movs	r3, #0
{
 8017d88:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 8017d8a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017d8c:	b1dd      	cbz	r5, 8017dc6 <tcp_process_refused_data+0x4a>
 8017d8e:	4601      	mov	r1, r0
 8017d90:	4632      	mov	r2, r6
 8017d92:	6900      	ldr	r0, [r0, #16]
 8017d94:	47a8      	blx	r5
 8017d96:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8017d98:	b9e0      	cbnz	r0, 8017dd4 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8017d9a:	06bb      	lsls	r3, r7, #26
 8017d9c:	d511      	bpl.n	8017dc2 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017d9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8017da0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
          pcb->rcv_wnd++;
 8017da8:	bf1c      	itt	ne
 8017daa:	3301      	addne	r3, #1
 8017dac:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8017dae:	b146      	cbz	r6, 8017dc2 <tcp_process_refused_data+0x46>
 8017db0:	2300      	movs	r3, #0
 8017db2:	461a      	mov	r2, r3
 8017db4:	4621      	mov	r1, r4
 8017db6:	6920      	ldr	r0, [r4, #16]
 8017db8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8017dba:	300d      	adds	r0, #13
 8017dbc:	d101      	bne.n	8017dc2 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8017dbe:	f06f 050c 	mvn.w	r5, #12
}
 8017dc2:	4628      	mov	r0, r5
 8017dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017dc6:	4601      	mov	r1, r0
 8017dc8:	462b      	mov	r3, r5
 8017dca:	4632      	mov	r2, r6
 8017dcc:	4628      	mov	r0, r5
 8017dce:	f7ff ffc3 	bl	8017d58 <tcp_recv_null>
 8017dd2:	e7e0      	b.n	8017d96 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8017dd4:	f110 050d 	adds.w	r5, r0, #13
 8017dd8:	d0f1      	beq.n	8017dbe <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8017dda:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8017ddc:	f06f 0504 	mvn.w	r5, #4
 8017de0:	e7ef      	b.n	8017dc2 <tcp_process_refused_data+0x46>
	...

08017de4 <tcp_fasttmr>:
{
 8017de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8017de8:	4d1b      	ldr	r5, [pc, #108]	; (8017e58 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8017dea:	4f1c      	ldr	r7, [pc, #112]	; (8017e5c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8017dec:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8017dee:	4e1c      	ldr	r6, [pc, #112]	; (8017e60 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8017df0:	3301      	adds	r3, #1
 8017df2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8017df4:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8017df6:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8017dfa:	b90c      	cbnz	r4, 8017e00 <tcp_fasttmr+0x1c>
}
 8017dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8017e00:	782b      	ldrb	r3, [r5, #0]
 8017e02:	7f62      	ldrb	r2, [r4, #29]
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d024      	beq.n	8017e52 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8017e08:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8017e0a:	7ea3      	ldrb	r3, [r4, #26]
 8017e0c:	07d9      	lsls	r1, r3, #31
 8017e0e:	d509      	bpl.n	8017e24 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8017e10:	f043 0302 	orr.w	r3, r3, #2
 8017e14:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8017e16:	4620      	mov	r0, r4
 8017e18:	f002 f8d4 	bl	8019fc4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8017e1c:	7ea3      	ldrb	r3, [r4, #26]
 8017e1e:	f023 0303 	bic.w	r3, r3, #3
 8017e22:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8017e24:	7ea3      	ldrb	r3, [r4, #26]
 8017e26:	071a      	lsls	r2, r3, #28
 8017e28:	d505      	bpl.n	8017e36 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8017e2a:	f023 0308 	bic.w	r3, r3, #8
 8017e2e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8017e30:	4620      	mov	r0, r4
 8017e32:	f7ff fabd 	bl	80173b0 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8017e36:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8017e38:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8017e3c:	b13b      	cbz	r3, 8017e4e <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8017e3e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8017e40:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8017e44:	f7ff ff9a 	bl	8017d7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017e48:	7833      	ldrb	r3, [r6, #0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d1d2      	bne.n	8017df4 <tcp_fasttmr+0x10>
{
 8017e4e:	464c      	mov	r4, r9
 8017e50:	e7d3      	b.n	8017dfa <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8017e52:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8017e56:	e7fa      	b.n	8017e4e <tcp_fasttmr+0x6a>
 8017e58:	200040be 	.word	0x200040be
 8017e5c:	20008adc 	.word	0x20008adc
 8017e60:	20008ad8 	.word	0x20008ad8

08017e64 <tcp_tmr>:
{
 8017e64:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8017e66:	f7ff ffbd 	bl	8017de4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8017e6a:	4a06      	ldr	r2, [pc, #24]	; (8017e84 <tcp_tmr+0x20>)
 8017e6c:	7813      	ldrb	r3, [r2, #0]
 8017e6e:	3301      	adds	r3, #1
 8017e70:	b2db      	uxtb	r3, r3
 8017e72:	7013      	strb	r3, [r2, #0]
 8017e74:	07db      	lsls	r3, r3, #31
 8017e76:	d503      	bpl.n	8017e80 <tcp_tmr+0x1c>
}
 8017e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8017e7c:	f7ff bc8a 	b.w	8017794 <tcp_slowtmr>
 8017e80:	bd08      	pop	{r3, pc}
 8017e82:	bf00      	nop
 8017e84:	200040bd 	.word	0x200040bd

08017e88 <tcp_shutdown>:
{
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4614      	mov	r4, r2
  if (pcb->state == LISTEN) {
 8017e8c:	7d02      	ldrb	r2, [r0, #20]
 8017e8e:	2a01      	cmp	r2, #1
{
 8017e90:	4605      	mov	r5, r0
  if (pcb->state == LISTEN) {
 8017e92:	d01b      	beq.n	8017ecc <tcp_shutdown+0x44>
  if (shut_rx) {
 8017e94:	b189      	cbz	r1, 8017eba <tcp_shutdown+0x32>
    pcb->flags |= TF_RXCLOSED;
 8017e96:	7e83      	ldrb	r3, [r0, #26]
 8017e98:	f043 0310 	orr.w	r3, r3, #16
 8017e9c:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8017e9e:	b124      	cbz	r4, 8017eaa <tcp_shutdown+0x22>
      return tcp_close_shutdown(pcb, 1);
 8017ea0:	2101      	movs	r1, #1
}
 8017ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8017ea6:	f7ff bea7 	b.w	8017bf8 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8017eaa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017eac:	b908      	cbnz	r0, 8017eb2 <tcp_shutdown+0x2a>
  return ERR_OK;
 8017eae:	2000      	movs	r0, #0
 8017eb0:	bd38      	pop	{r3, r4, r5, pc}
      pbuf_free(pcb->refused_data);
 8017eb2:	f7fe ff71 	bl	8016d98 <pbuf_free>
      pcb->refused_data = NULL;
 8017eb6:	676c      	str	r4, [r5, #116]	; 0x74
 8017eb8:	e7f9      	b.n	8017eae <tcp_shutdown+0x26>
  if (shut_tx) {
 8017eba:	2c00      	cmp	r4, #0
 8017ebc:	d0f7      	beq.n	8017eae <tcp_shutdown+0x26>
 8017ebe:	2a07      	cmp	r2, #7
 8017ec0:	d804      	bhi.n	8017ecc <tcp_shutdown+0x44>
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	4093      	lsls	r3, r2
 8017ec6:	f013 0f98 	tst.w	r3, #152	; 0x98
 8017eca:	d1ea      	bne.n	8017ea2 <tcp_shutdown+0x1a>
    return ERR_CONN;
 8017ecc:	f06f 000a 	mvn.w	r0, #10
}
 8017ed0:	bd38      	pop	{r3, r4, r5, pc}
	...

08017ed4 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017ed4:	7d03      	ldrb	r3, [r0, #20]
 8017ed6:	2b01      	cmp	r3, #1
{
 8017ed8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017edc:	4604      	mov	r4, r0
 8017ede:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017ee0:	d106      	bne.n	8017ef0 <tcp_abandon+0x1c>
 8017ee2:	4b30      	ldr	r3, [pc, #192]	; (8017fa4 <tcp_abandon+0xd0>)
 8017ee4:	4930      	ldr	r1, [pc, #192]	; (8017fa8 <tcp_abandon+0xd4>)
 8017ee6:	4831      	ldr	r0, [pc, #196]	; (8017fac <tcp_abandon+0xd8>)
 8017ee8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017eec:	f003 ffa2 	bl	801be34 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8017ef0:	7d23      	ldrb	r3, [r4, #20]
 8017ef2:	2b0a      	cmp	r3, #10
 8017ef4:	d10a      	bne.n	8017f0c <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017ef6:	4621      	mov	r1, r4
 8017ef8:	482d      	ldr	r0, [pc, #180]	; (8017fb0 <tcp_abandon+0xdc>)
 8017efa:	f7ff fe2d 	bl	8017b58 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8017efe:	4621      	mov	r1, r4
 8017f00:	2001      	movs	r0, #1
}
 8017f02:	b002      	add	sp, #8
 8017f04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8017f08:	f7fe bdc0 	b.w	8016a8c <memp_free>
    seqno = pcb->snd_nxt;
 8017f0c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8017f10:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8017f14:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8017f18:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8017f1c:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8017f1e:	b99b      	cbnz	r3, 8017f48 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8017f20:	b13d      	cbz	r5, 8017f32 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017f22:	4a24      	ldr	r2, [pc, #144]	; (8017fb4 <tcp_abandon+0xe0>)
 8017f24:	6813      	ldr	r3, [r2, #0]
 8017f26:	429c      	cmp	r4, r3
 8017f28:	d106      	bne.n	8017f38 <tcp_abandon+0x64>
 8017f2a:	68e3      	ldr	r3, [r4, #12]
 8017f2c:	6013      	str	r3, [r2, #0]
 8017f2e:	2500      	movs	r5, #0
 8017f30:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8017f32:	462e      	mov	r6, r5
 8017f34:	e00f      	b.n	8017f56 <tcp_abandon+0x82>
 8017f36:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d0f8      	beq.n	8017f2e <tcp_abandon+0x5a>
 8017f3c:	68da      	ldr	r2, [r3, #12]
 8017f3e:	4294      	cmp	r4, r2
 8017f40:	d1f9      	bne.n	8017f36 <tcp_abandon+0x62>
 8017f42:	68e2      	ldr	r2, [r4, #12]
 8017f44:	60da      	str	r2, [r3, #12]
 8017f46:	e7f2      	b.n	8017f2e <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017f48:	4621      	mov	r1, r4
 8017f4a:	481b      	ldr	r0, [pc, #108]	; (8017fb8 <tcp_abandon+0xe4>)
 8017f4c:	f7ff fe04 	bl	8017b58 <tcp_pcb_remove>
 8017f50:	4b1a      	ldr	r3, [pc, #104]	; (8017fbc <tcp_abandon+0xe8>)
 8017f52:	2201      	movs	r2, #1
 8017f54:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8017f56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8017f58:	b108      	cbz	r0, 8017f5e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8017f5a:	f7ff fb75 	bl	8017648 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8017f5e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8017f60:	b108      	cbz	r0, 8017f66 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8017f62:	f7ff fb71 	bl	8017648 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8017f66:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8017f68:	b108      	cbz	r0, 8017f6e <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8017f6a:	f7ff fb6d 	bl	8017648 <tcp_segs_free>
    if (send_rst) {
 8017f6e:	b146      	cbz	r6, 8017f82 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017f70:	8b23      	ldrh	r3, [r4, #24]
 8017f72:	9301      	str	r3, [sp, #4]
 8017f74:	9500      	str	r5, [sp, #0]
 8017f76:	1d23      	adds	r3, r4, #4
 8017f78:	4622      	mov	r2, r4
 8017f7a:	4651      	mov	r1, sl
 8017f7c:	4648      	mov	r0, r9
 8017f7e:	f002 f99f 	bl	801a2c0 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8017f82:	4621      	mov	r1, r4
 8017f84:	2001      	movs	r0, #1
 8017f86:	f7fe fd81 	bl	8016a8c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017f8a:	b13f      	cbz	r7, 8017f9c <tcp_abandon+0xc8>
 8017f8c:	f06f 010c 	mvn.w	r1, #12
 8017f90:	4640      	mov	r0, r8
 8017f92:	463b      	mov	r3, r7
}
 8017f94:	b002      	add	sp, #8
 8017f96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017f9a:	4718      	bx	r3
}
 8017f9c:	b002      	add	sp, #8
 8017f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fa2:	bf00      	nop
 8017fa4:	0801fbee 	.word	0x0801fbee
 8017fa8:	0801fb6f 	.word	0x0801fb6f
 8017fac:	0801c6e3 	.word	0x0801c6e3
 8017fb0:	20008aec 	.word	0x20008aec
 8017fb4:	20008ae8 	.word	0x20008ae8
 8017fb8:	20008adc 	.word	0x20008adc
 8017fbc:	20008ad8 	.word	0x20008ad8

08017fc0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8017fc0:	2101      	movs	r1, #1
 8017fc2:	f7ff bf87 	b.w	8017ed4 <tcp_abandon>

08017fc6 <tcp_accept_null>:
{
 8017fc6:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8017fc8:	4608      	mov	r0, r1
 8017fca:	f7ff fff9 	bl	8017fc0 <tcp_abort>
}
 8017fce:	f06f 000c 	mvn.w	r0, #12
 8017fd2:	bd08      	pop	{r3, pc}

08017fd4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8017fd4:	b538      	push	{r3, r4, r5, lr}
 8017fd6:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8017fd8:	b901      	cbnz	r1, 8017fdc <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8017fda:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017fdc:	680a      	ldr	r2, [r1, #0]
 8017fde:	682b      	ldr	r3, [r5, #0]
 8017fe0:	68cc      	ldr	r4, [r1, #12]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d102      	bne.n	8017fec <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8017fe6:	4608      	mov	r0, r1
 8017fe8:	f7ff ffea 	bl	8017fc0 <tcp_abort>
      pcb = pcb->next;
 8017fec:	4621      	mov	r1, r4
 8017fee:	e7f3      	b.n	8017fd8 <tcp_netif_ip_addr_changed_pcblist+0x4>

08017ff0 <tcp_kill_state>:
{
 8017ff0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017ff2:	f1a0 0308 	sub.w	r3, r0, #8
 8017ff6:	2b01      	cmp	r3, #1
{
 8017ff8:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017ffa:	d906      	bls.n	801800a <tcp_kill_state+0x1a>
 8017ffc:	4b0f      	ldr	r3, [pc, #60]	; (801803c <tcp_kill_state+0x4c>)
 8017ffe:	4910      	ldr	r1, [pc, #64]	; (8018040 <tcp_kill_state+0x50>)
 8018000:	4810      	ldr	r0, [pc, #64]	; (8018044 <tcp_kill_state+0x54>)
 8018002:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8018006:	f003 ff15 	bl	801be34 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801800a:	4b0f      	ldr	r3, [pc, #60]	; (8018048 <tcp_kill_state+0x58>)
 801800c:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801800e:	4b0f      	ldr	r3, [pc, #60]	; (801804c <tcp_kill_state+0x5c>)
  inactivity = 0;
 8018010:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018012:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8018014:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018016:	b921      	cbnz	r1, 8018022 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8018018:	b170      	cbz	r0, 8018038 <tcp_kill_state+0x48>
}
 801801a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 801801e:	f7ff bf59 	b.w	8017ed4 <tcp_abandon>
    if (pcb->state == state) {
 8018022:	7d0b      	ldrb	r3, [r1, #20]
 8018024:	42a3      	cmp	r3, r4
 8018026:	d105      	bne.n	8018034 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018028:	6a0b      	ldr	r3, [r1, #32]
 801802a:	1aeb      	subs	r3, r5, r3
 801802c:	429a      	cmp	r2, r3
 801802e:	bf9c      	itt	ls
 8018030:	461a      	movls	r2, r3
 8018032:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018034:	68c9      	ldr	r1, [r1, #12]
 8018036:	e7ee      	b.n	8018016 <tcp_kill_state+0x26>
 8018038:	bd38      	pop	{r3, r4, r5, pc}
 801803a:	bf00      	nop
 801803c:	0801fbee 	.word	0x0801fbee
 8018040:	0801fc4f 	.word	0x0801fc4f
 8018044:	0801c6e3 	.word	0x0801c6e3
 8018048:	20008adc 	.word	0x20008adc
 801804c:	20008ae0 	.word	0x20008ae0

08018050 <tcp_alloc>:
{
 8018050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018052:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018054:	2001      	movs	r0, #1
 8018056:	f7fe fcfd 	bl	8016a54 <memp_malloc>
 801805a:	4d3b      	ldr	r5, [pc, #236]	; (8018148 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 801805c:	4604      	mov	r4, r0
 801805e:	bb90      	cbnz	r0, 80180c6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018060:	4b3a      	ldr	r3, [pc, #232]	; (801814c <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018062:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018064:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8018066:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018068:	2b00      	cmp	r3, #0
 801806a:	d158      	bne.n	801811e <tcp_alloc+0xce>
  if (inactive != NULL) {
 801806c:	b114      	cbz	r4, 8018074 <tcp_alloc+0x24>
    tcp_abort(inactive);
 801806e:	4620      	mov	r0, r4
 8018070:	f7ff ffa6 	bl	8017fc0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018074:	2001      	movs	r0, #1
 8018076:	f7fe fced 	bl	8016a54 <memp_malloc>
    if (pcb == NULL) {
 801807a:	4604      	mov	r4, r0
 801807c:	bb18      	cbnz	r0, 80180c6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 801807e:	2009      	movs	r0, #9
 8018080:	f7ff ffb6 	bl	8017ff0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018084:	2001      	movs	r0, #1
 8018086:	f7fe fce5 	bl	8016a54 <memp_malloc>
      if (pcb == NULL) {
 801808a:	4604      	mov	r4, r0
 801808c:	b9d8      	cbnz	r0, 80180c6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 801808e:	2008      	movs	r0, #8
 8018090:	f7ff ffae 	bl	8017ff0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018094:	2001      	movs	r0, #1
 8018096:	f7fe fcdd 	bl	8016a54 <memp_malloc>
        if (pcb == NULL) {
 801809a:	4604      	mov	r4, r0
 801809c:	b998      	cbnz	r0, 80180c6 <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801809e:	4b2c      	ldr	r3, [pc, #176]	; (8018150 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80180a0:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180a4:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80180a6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80180aa:	bf0c      	ite	eq
 80180ac:	4631      	moveq	r1, r6
 80180ae:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d13c      	bne.n	801812e <tcp_alloc+0xde>
  if (inactive != NULL) {
 80180b4:	b114      	cbz	r4, 80180bc <tcp_alloc+0x6c>
    tcp_abort(inactive);
 80180b6:	4620      	mov	r0, r4
 80180b8:	f7ff ff82 	bl	8017fc0 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80180bc:	2001      	movs	r0, #1
 80180be:	f7fe fcc9 	bl	8016a54 <memp_malloc>
  if (pcb != NULL) {
 80180c2:	4604      	mov	r4, r0
 80180c4:	b348      	cbz	r0, 801811a <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80180c6:	2298      	movs	r2, #152	; 0x98
 80180c8:	2100      	movs	r1, #0
 80180ca:	4620      	mov	r0, r4
 80180cc:	f004 f9b8 	bl	801c440 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80180d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80180d4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80180d6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80180d8:	22ff      	movs	r2, #255	; 0xff
 80180da:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80180dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80180e0:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80180e2:	2206      	movs	r2, #6
 80180e4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80180e8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80180ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180ee:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80180f0:	2201      	movs	r2, #1
 80180f2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80180f6:	682a      	ldr	r2, [r5, #0]
 80180f8:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80180fa:	f44f 63e6 	mov.w	r3, #1840	; 0x730
    pcb->last_timer = tcp_timer_ctr;
 80180fe:	4a15      	ldr	r2, [pc, #84]	; (8018154 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8018100:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8018104:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8018108:	4b13      	ldr	r3, [pc, #76]	; (8018158 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 801810a:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 801810c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018110:	4b12      	ldr	r3, [pc, #72]	; (801815c <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8018112:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 8018114:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018116:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 801811a:	4620      	mov	r0, r4
 801811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801811e:	6a1a      	ldr	r2, [r3, #32]
 8018120:	1a82      	subs	r2, r0, r2
 8018122:	428a      	cmp	r2, r1
 8018124:	bf24      	itt	cs
 8018126:	461c      	movcs	r4, r3
 8018128:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801812a:	68db      	ldr	r3, [r3, #12]
 801812c:	e79c      	b.n	8018068 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 801812e:	7d5f      	ldrb	r7, [r3, #21]
 8018130:	428f      	cmp	r7, r1
 8018132:	d807      	bhi.n	8018144 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018134:	6a1a      	ldr	r2, [r3, #32]
 8018136:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 801813a:	4282      	cmp	r2, r0
 801813c:	bf22      	ittt	cs
 801813e:	4639      	movcs	r1, r7
 8018140:	4610      	movcs	r0, r2
 8018142:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018144:	68db      	ldr	r3, [r3, #12]
 8018146:	e7b3      	b.n	80180b0 <tcp_alloc+0x60>
 8018148:	20008ae0 	.word	0x20008ae0
 801814c:	20008aec 	.word	0x20008aec
 8018150:	20008adc 	.word	0x20008adc
 8018154:	200040be 	.word	0x200040be
 8018158:	08017d59 	.word	0x08017d59
 801815c:	006ddd00 	.word	0x006ddd00

08018160 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8018160:	2040      	movs	r0, #64	; 0x40
 8018162:	f7ff bf75 	b.w	8018050 <tcp_alloc>
	...

08018168 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8018168:	4b03      	ldr	r3, [pc, #12]	; (8018178 <tcp_next_iss+0x10>)
 801816a:	4a04      	ldr	r2, [pc, #16]	; (801817c <tcp_next_iss+0x14>)
 801816c:	6818      	ldr	r0, [r3, #0]
 801816e:	6812      	ldr	r2, [r2, #0]
 8018170:	4410      	add	r0, r2
 8018172:	6018      	str	r0, [r3, #0]
}
 8018174:	4770      	bx	lr
 8018176:	bf00      	nop
 8018178:	20000008 	.word	0x20000008
 801817c:	20008ae0 	.word	0x20008ae0

08018180 <tcp_eff_send_mss_impl>:
{
 8018180:	b510      	push	{r4, lr}
 8018182:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8018184:	4608      	mov	r0, r1
 8018186:	f7fd fbdb 	bl	8015940 <ip4_route>
    if (outif == NULL) {
 801818a:	b130      	cbz	r0, 801819a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 801818c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 801818e:	b123      	cbz	r3, 801819a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8018190:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8018192:	b29b      	uxth	r3, r3
 8018194:	429c      	cmp	r4, r3
 8018196:	bf28      	it	cs
 8018198:	461c      	movcs	r4, r3
}
 801819a:	4620      	mov	r0, r4
 801819c:	bd10      	pop	{r4, pc}
	...

080181a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80181a0:	b538      	push	{r3, r4, r5, lr}
 80181a2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80181a4:	4604      	mov	r4, r0
 80181a6:	b180      	cbz	r0, 80181ca <tcp_netif_ip_addr_changed+0x2a>
 80181a8:	6803      	ldr	r3, [r0, #0]
 80181aa:	b173      	cbz	r3, 80181ca <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80181ac:	4b0c      	ldr	r3, [pc, #48]	; (80181e0 <tcp_netif_ip_addr_changed+0x40>)
 80181ae:	6819      	ldr	r1, [r3, #0]
 80181b0:	f7ff ff10 	bl	8017fd4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80181b4:	4b0b      	ldr	r3, [pc, #44]	; (80181e4 <tcp_netif_ip_addr_changed+0x44>)
 80181b6:	4620      	mov	r0, r4
 80181b8:	6819      	ldr	r1, [r3, #0]
 80181ba:	f7ff ff0b 	bl	8017fd4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80181be:	b125      	cbz	r5, 80181ca <tcp_netif_ip_addr_changed+0x2a>
 80181c0:	682b      	ldr	r3, [r5, #0]
 80181c2:	b113      	cbz	r3, 80181ca <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80181c4:	4b08      	ldr	r3, [pc, #32]	; (80181e8 <tcp_netif_ip_addr_changed+0x48>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	b903      	cbnz	r3, 80181cc <tcp_netif_ip_addr_changed+0x2c>
 80181ca:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80181cc:	6818      	ldr	r0, [r3, #0]
 80181ce:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80181d0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80181d2:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80181d4:	bf04      	itt	eq
 80181d6:	6829      	ldreq	r1, [r5, #0]
 80181d8:	6019      	streq	r1, [r3, #0]
{
 80181da:	4613      	mov	r3, r2
 80181dc:	e7f4      	b.n	80181c8 <tcp_netif_ip_addr_changed+0x28>
 80181de:	bf00      	nop
 80181e0:	20008adc 	.word	0x20008adc
 80181e4:	20008ae8 	.word	0x20008ae8
 80181e8:	20008ae4 	.word	0x20008ae4

080181ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80181ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80181f0:	68c3      	ldr	r3, [r0, #12]
{
 80181f2:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80181f4:	8998      	ldrh	r0, [r3, #12]
{
 80181f6:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80181f8:	f7fc ff0b 	bl	8015012 <lwip_htons>
 80181fc:	07c2      	lsls	r2, r0, #31
 80181fe:	d415      	bmi.n	801822c <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018200:	4e18      	ldr	r6, [pc, #96]	; (8018264 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8018202:	b1bc      	cbz	r4, 8018234 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018204:	68e7      	ldr	r7, [r4, #12]
 8018206:	6830      	ldr	r0, [r6, #0]
 8018208:	892b      	ldrh	r3, [r5, #8]
 801820a:	6879      	ldr	r1, [r7, #4]
 801820c:	8922      	ldrh	r2, [r4, #8]
 801820e:	4403      	add	r3, r0
 8018210:	440a      	add	r2, r1
 8018212:	1a9a      	subs	r2, r3, r2
    while (next &&
 8018214:	2a00      	cmp	r2, #0
 8018216:	da10      	bge.n	801823a <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018218:	1a5b      	subs	r3, r3, r1
    if (next &&
 801821a:	2b00      	cmp	r3, #0
 801821c:	dd0a      	ble.n	8018234 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801821e:	1a09      	subs	r1, r1, r0
 8018220:	b289      	uxth	r1, r1
 8018222:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018224:	6868      	ldr	r0, [r5, #4]
 8018226:	f7fe fefd 	bl	8017024 <pbuf_realloc>
 801822a:	e003      	b.n	8018234 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 801822c:	4620      	mov	r0, r4
 801822e:	f7ff fa0b 	bl	8017648 <tcp_segs_free>
    next = NULL;
 8018232:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8018234:	602c      	str	r4, [r5, #0]
}
 8018236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801823a:	89b8      	ldrh	r0, [r7, #12]
 801823c:	f7fc fee9 	bl	8015012 <lwip_htons>
 8018240:	07c3      	lsls	r3, r0, #31
 8018242:	d509      	bpl.n	8018258 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018244:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8018248:	2001      	movs	r0, #1
 801824a:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801824e:	f7fc fee0 	bl	8015012 <lwip_htons>
 8018252:	4338      	orrs	r0, r7
 8018254:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8018258:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801825a:	4620      	mov	r0, r4
 801825c:	f7ff f9e6 	bl	801762c <tcp_seg_free>
      next = next->next;
 8018260:	463c      	mov	r4, r7
 8018262:	e7ce      	b.n	8018202 <tcp_oos_insert_segment+0x16>
 8018264:	200040e4 	.word	0x200040e4

08018268 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018268:	7d03      	ldrb	r3, [r0, #20]
 801826a:	2b03      	cmp	r3, #3
{
 801826c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018270:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018272:	d806      	bhi.n	8018282 <tcp_receive+0x1a>
 8018274:	4b87      	ldr	r3, [pc, #540]	; (8018494 <tcp_receive+0x22c>)
 8018276:	4988      	ldr	r1, [pc, #544]	; (8018498 <tcp_receive+0x230>)
 8018278:	4888      	ldr	r0, [pc, #544]	; (801849c <tcp_receive+0x234>)
 801827a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801827e:	f003 fdd9 	bl	801be34 <iprintf>

  if (flags & TCP_ACK) {
 8018282:	4b87      	ldr	r3, [pc, #540]	; (80184a0 <tcp_receive+0x238>)
 8018284:	4e87      	ldr	r6, [pc, #540]	; (80184a4 <tcp_receive+0x23c>)
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	f013 0f10 	tst.w	r3, #16
 801828c:	f000 817c 	beq.w	8018588 <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018290:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018292:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018294:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8018298:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801829a:	1a1d      	subs	r5, r3, r0
 801829c:	2d00      	cmp	r5, #0
 801829e:	4d82      	ldr	r5, [pc, #520]	; (80184a8 <tcp_receive+0x240>)
 80182a0:	db0d      	blt.n	80182be <tcp_receive+0x56>
 80182a2:	4283      	cmp	r3, r0
 80182a4:	d103      	bne.n	80182ae <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80182a6:	682b      	ldr	r3, [r5, #0]
 80182a8:	1acb      	subs	r3, r1, r3
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	db07      	blt.n	80182be <tcp_receive+0x56>
 80182ae:	682b      	ldr	r3, [r5, #0]
 80182b0:	4299      	cmp	r1, r3
 80182b2:	d11c      	bne.n	80182ee <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80182b4:	4b7d      	ldr	r3, [pc, #500]	; (80184ac <tcp_receive+0x244>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	89db      	ldrh	r3, [r3, #14]
 80182ba:	4293      	cmp	r3, r2
 80182bc:	d917      	bls.n	80182ee <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80182be:	4b7b      	ldr	r3, [pc, #492]	; (80184ac <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80182c0:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 80182c8:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80182ca:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 80182cc:	6828      	ldr	r0, [r5, #0]
 80182ce:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80182d0:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 80182d4:	bf38      	it	cc
 80182d6:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 80182da:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80182de:	2f00      	cmp	r7, #0
 80182e0:	d13c      	bne.n	801835c <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 80182e2:	b920      	cbnz	r0, 80182ee <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80182e4:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 80182e8:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80182ea:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80182ee:	682b      	ldr	r3, [r5, #0]
 80182f0:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 80182f4:	4f6e      	ldr	r7, [pc, #440]	; (80184b0 <tcp_receive+0x248>)
 80182f6:	eba3 000e 	sub.w	r0, r3, lr
 80182fa:	2800      	cmp	r0, #0
 80182fc:	dc37      	bgt.n	801836e <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 80182fe:	486d      	ldr	r0, [pc, #436]	; (80184b4 <tcp_receive+0x24c>)
 8018300:	8800      	ldrh	r0, [r0, #0]
 8018302:	2800      	cmp	r0, #0
 8018304:	f040 846f 	bne.w	8018be6 <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018308:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801830a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801830c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018310:	4401      	add	r1, r0
 8018312:	428a      	cmp	r2, r1
 8018314:	f040 8467 	bne.w	8018be6 <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018318:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801831c:	2a00      	cmp	r2, #0
 801831e:	f2c0 8462 	blt.w	8018be6 <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018322:	4573      	cmp	r3, lr
 8018324:	f040 845f 	bne.w	8018be6 <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801832c:	1c53      	adds	r3, r2, #1
 801832e:	b2db      	uxtb	r3, r3
 8018330:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8018332:	bf38      	it	cc
 8018334:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018338:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801833c:	2b03      	cmp	r3, #3
 801833e:	d911      	bls.n	8018364 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8018340:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8018344:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8018346:	4413      	add	r3, r2
 8018348:	b29b      	uxth	r3, r3
 801834a:	429a      	cmp	r2, r3
 801834c:	d201      	bcs.n	8018352 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 801834e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8018352:	f8df a140 	ldr.w	sl, [pc, #320]	; 8018494 <tcp_receive+0x22c>
 8018356:	f8df 9144 	ldr.w	r9, [pc, #324]	; 801849c <tcp_receive+0x234>
 801835a:	e108      	b.n	801856e <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 801835c:	2800      	cmp	r0, #0
 801835e:	d0c6      	beq.n	80182ee <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8018360:	2300      	movs	r3, #0
 8018362:	e7c2      	b.n	80182ea <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8018364:	d1f5      	bne.n	8018352 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8018366:	4620      	mov	r0, r4
 8018368:	f002 f847 	bl	801a3fa <tcp_rexmit_fast>
 801836c:	e7f1      	b.n	8018352 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801836e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018370:	1a9a      	subs	r2, r3, r2
 8018372:	2a00      	cmp	r2, #0
 8018374:	f300 808a 	bgt.w	801848c <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8018378:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801837a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 801837e:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8018380:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8018382:	bf41      	itttt	mi
 8018384:	f022 0204 	bicmi.w	r2, r2, #4
 8018388:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801838a:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 801838e:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8018392:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8018394:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8018396:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8018398:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801839c:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 801839e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80183a2:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80183a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80183aa:	d90f      	bls.n	80183cc <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 80183ac:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80183b0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80183b4:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80183b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80183b8:	bf9c      	itt	ls
 80183ba:	435b      	mulls	r3, r3
 80183bc:	fb93 f3f2 	sdivls	r3, r3, r2
 80183c0:	4413      	add	r3, r2
 80183c2:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80183c4:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 80183c6:	bf38      	it	cc
 80183c8:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80183cc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8018494 <tcp_receive+0x22c>
 80183d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801849c <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 80183d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80183d6:	b943      	cbnz	r3, 80183ea <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 80183d8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80183da:	2300      	movs	r3, #0
 80183dc:	2a00      	cmp	r2, #0
 80183de:	d153      	bne.n	8018488 <tcp_receive+0x220>
        pcb->rtime = -1;
 80183e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183e4:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80183e6:	76e3      	strb	r3, [r4, #27]
 80183e8:	e7b3      	b.n	8018352 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80183ea:	68db      	ldr	r3, [r3, #12]
 80183ec:	6858      	ldr	r0, [r3, #4]
 80183ee:	f7fc fe13 	bl	8015018 <lwip_htonl>
 80183f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80183f4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	4683      	mov	fp, r0
 80183fc:	8998      	ldrh	r0, [r3, #12]
 80183fe:	f7fc fe08 	bl	8015012 <lwip_htons>
 8018402:	682b      	ldr	r3, [r5, #0]
 8018404:	f010 0003 	ands.w	r0, r0, #3
 8018408:	eba8 0803 	sub.w	r8, r8, r3
 801840c:	bf18      	it	ne
 801840e:	2001      	movne	r0, #1
 8018410:	44d8      	add	r8, fp
 8018412:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8018414:	f1b8 0f00 	cmp.w	r8, #0
 8018418:	dcde      	bgt.n	80183d8 <tcp_receive+0x170>
        next = pcb->unacked;
 801841a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801841e:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8018422:	f8d8 3000 	ldr.w	r3, [r8]
 8018426:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8018428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801842c:	f7fe fe6a 	bl	8017104 <pbuf_clen>
 8018430:	4583      	cmp	fp, r0
 8018432:	d206      	bcs.n	8018442 <tcp_receive+0x1da>
 8018434:	464b      	mov	r3, r9
 8018436:	f240 429e 	movw	r2, #1182	; 0x49e
 801843a:	491f      	ldr	r1, [pc, #124]	; (80184b8 <tcp_receive+0x250>)
 801843c:	4650      	mov	r0, sl
 801843e:	f003 fcf9 	bl	801be34 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8018442:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018446:	f7fe fe5d 	bl	8017104 <pbuf_clen>
 801844a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 801844e:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8018450:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8018452:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8018456:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 801845a:	4413      	add	r3, r2
        tcp_seg_free(next);
 801845c:	4640      	mov	r0, r8
        recv_acked += next->len;
 801845e:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8018460:	f7ff f8e4 	bl	801762c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8018464:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8018468:	2b00      	cmp	r3, #0
 801846a:	d0b3      	beq.n	80183d4 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801846c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801846e:	2b00      	cmp	r3, #0
 8018470:	d1b0      	bne.n	80183d4 <tcp_receive+0x16c>
 8018472:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8018474:	2b00      	cmp	r3, #0
 8018476:	d1ad      	bne.n	80183d4 <tcp_receive+0x16c>
 8018478:	464b      	mov	r3, r9
 801847a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801847e:	490f      	ldr	r1, [pc, #60]	; (80184bc <tcp_receive+0x254>)
 8018480:	4650      	mov	r0, sl
 8018482:	f003 fcd7 	bl	801be34 <iprintf>
 8018486:	e7a5      	b.n	80183d4 <tcp_receive+0x16c>
        pcb->rtime = 0;
 8018488:	8623      	strh	r3, [r4, #48]	; 0x30
 801848a:	e7ac      	b.n	80183e6 <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 801848c:	4620      	mov	r0, r4
 801848e:	f001 fd63 	bl	8019f58 <tcp_send_empty_ack>
 8018492:	e75e      	b.n	8018352 <tcp_receive+0xea>
 8018494:	080200b4 	.word	0x080200b4
 8018498:	080200e6 	.word	0x080200e6
 801849c:	0801c6e3 	.word	0x0801c6e3
 80184a0:	200040c4 	.word	0x200040c4
 80184a4:	200040e4 	.word	0x200040e4
 80184a8:	200040c0 	.word	0x200040c0
 80184ac:	200040ec 	.word	0x200040ec
 80184b0:	200040d8 	.word	0x200040d8
 80184b4:	200040fa 	.word	0x200040fa
 80184b8:	080200ff 	.word	0x080200ff
 80184bc:	08020127 	.word	0x08020127
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80184c0:	682a      	ldr	r2, [r5, #0]
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	9201      	str	r2, [sp, #4]
 80184c6:	6858      	ldr	r0, [r3, #4]
 80184c8:	f7fc fda6 	bl	8015018 <lwip_htonl>
 80184cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80184ce:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80184d2:	68db      	ldr	r3, [r3, #12]
 80184d4:	4683      	mov	fp, r0
 80184d6:	8998      	ldrh	r0, [r3, #12]
 80184d8:	f7fc fd9b 	bl	8015012 <lwip_htons>
 80184dc:	9a01      	ldr	r2, [sp, #4]
 80184de:	f010 0003 	ands.w	r0, r0, #3
 80184e2:	eba2 0808 	sub.w	r8, r2, r8
 80184e6:	bf18      	it	ne
 80184e8:	2001      	movne	r0, #1
 80184ea:	eba8 080b 	sub.w	r8, r8, fp
 80184ee:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80184f2:	f1b8 0f00 	cmp.w	r8, #0
 80184f6:	db3d      	blt.n	8018574 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80184f8:	682b      	ldr	r3, [r5, #0]
 80184fa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80184fc:	1a9b      	subs	r3, r3, r2
 80184fe:	2b00      	cmp	r3, #0
 8018500:	dc38      	bgt.n	8018574 <tcp_receive+0x30c>
      next = pcb->unsent;
 8018502:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8018506:	f8d8 3000 	ldr.w	r3, [r8]
 801850a:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 801850c:	b90b      	cbnz	r3, 8018512 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 801850e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8018512:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018516:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 801851a:	f7fe fdf3 	bl	8017104 <pbuf_clen>
 801851e:	4583      	cmp	fp, r0
 8018520:	d206      	bcs.n	8018530 <tcp_receive+0x2c8>
 8018522:	4653      	mov	r3, sl
 8018524:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8018528:	49ba      	ldr	r1, [pc, #744]	; (8018814 <tcp_receive+0x5ac>)
 801852a:	4648      	mov	r0, r9
 801852c:	f003 fc82 	bl	801be34 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8018530:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018534:	f7fe fde6 	bl	8017104 <pbuf_clen>
 8018538:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 801853c:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801853e:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8018540:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8018544:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8018548:	4413      	add	r3, r2
      tcp_seg_free(next);
 801854a:	4640      	mov	r0, r8
      recv_acked += next->len;
 801854c:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 801854e:	f7ff f86d 	bl	801762c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8018552:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8018556:	b153      	cbz	r3, 801856e <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8018558:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801855a:	b943      	cbnz	r3, 801856e <tcp_receive+0x306>
 801855c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801855e:	b933      	cbnz	r3, 801856e <tcp_receive+0x306>
 8018560:	4653      	mov	r3, sl
 8018562:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8018566:	49ac      	ldr	r1, [pc, #688]	; (8018818 <tcp_receive+0x5b0>)
 8018568:	4648      	mov	r0, r9
 801856a:	f003 fc63 	bl	801be34 <iprintf>
    while (pcb->unsent != NULL &&
 801856e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8018570:	2b00      	cmp	r3, #0
 8018572:	d1a5      	bne.n	80184c0 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8018574:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8018578:	883a      	ldrh	r2, [r7, #0]
 801857a:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801857c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 801857e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018582:	2a00      	cmp	r2, #0
 8018584:	f040 8119 	bne.w	80187ba <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018588:	4fa4      	ldr	r7, [pc, #656]	; (801881c <tcp_receive+0x5b4>)
 801858a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801858c:	8838      	ldrh	r0, [r7, #0]
 801858e:	2800      	cmp	r0, #0
 8018590:	f000 831c 	beq.w	8018bcc <tcp_receive+0x964>
 8018594:	7d23      	ldrb	r3, [r4, #20]
 8018596:	2b06      	cmp	r3, #6
 8018598:	f200 8318 	bhi.w	8018bcc <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801859c:	6833      	ldr	r3, [r6, #0]
 801859e:	1ad5      	subs	r5, r2, r3
 80185a0:	2d01      	cmp	r5, #1
 80185a2:	f100 815c 	bmi.w	801885e <tcp_receive+0x5f6>
 80185a6:	f1c3 0101 	rsb	r1, r3, #1
 80185aa:	1a09      	subs	r1, r1, r0
 80185ac:	4411      	add	r1, r2
 80185ae:	2900      	cmp	r1, #0
 80185b0:	f300 8155 	bgt.w	801885e <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80185b4:	4b9a      	ldr	r3, [pc, #616]	; (8018820 <tcp_receive+0x5b8>)
 80185b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 80185ba:	46aa      	mov	sl, r5
 80185bc:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80185be:	f1b9 0f00 	cmp.w	r9, #0
 80185c2:	d106      	bne.n	80185d2 <tcp_receive+0x36a>
 80185c4:	4b97      	ldr	r3, [pc, #604]	; (8018824 <tcp_receive+0x5bc>)
 80185c6:	4998      	ldr	r1, [pc, #608]	; (8018828 <tcp_receive+0x5c0>)
 80185c8:	4898      	ldr	r0, [pc, #608]	; (801882c <tcp_receive+0x5c4>)
 80185ca:	f240 523c 	movw	r2, #1340	; 0x53c
 80185ce:	f003 fc31 	bl	801be34 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80185d2:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80185d6:	429d      	cmp	r5, r3
 80185d8:	dd06      	ble.n	80185e8 <tcp_receive+0x380>
 80185da:	4b92      	ldr	r3, [pc, #584]	; (8018824 <tcp_receive+0x5bc>)
 80185dc:	4994      	ldr	r1, [pc, #592]	; (8018830 <tcp_receive+0x5c8>)
 80185de:	4893      	ldr	r0, [pc, #588]	; (801882c <tcp_receive+0x5c4>)
 80185e0:	f240 523d 	movw	r2, #1341	; 0x53d
 80185e4:	f003 fc26 	bl	801be34 <iprintf>
      if (inseg.p->len < off) {
 80185e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80185ec:	8943      	ldrh	r3, [r0, #10]
 80185ee:	429d      	cmp	r5, r3
 80185f0:	f340 812a 	ble.w	8018848 <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80185f4:	8903      	ldrh	r3, [r0, #8]
 80185f6:	429d      	cmp	r5, r3
 80185f8:	dd06      	ble.n	8018608 <tcp_receive+0x3a0>
 80185fa:	4b8a      	ldr	r3, [pc, #552]	; (8018824 <tcp_receive+0x5bc>)
 80185fc:	498d      	ldr	r1, [pc, #564]	; (8018834 <tcp_receive+0x5cc>)
 80185fe:	488b      	ldr	r0, [pc, #556]	; (801882c <tcp_receive+0x5c4>)
 8018600:	f240 523f 	movw	r2, #1343	; 0x53f
 8018604:	f003 fc16 	bl	801be34 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018608:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801860c:	8919      	ldrh	r1, [r3, #8]
 801860e:	1b4d      	subs	r5, r1, r5
 8018610:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8018612:	2200      	movs	r2, #0
        while (p->len < off) {
 8018614:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8018618:	459a      	cmp	sl, r3
 801861a:	f300 80f2 	bgt.w	8018802 <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801861e:	f1ca 0100 	rsb	r1, sl, #0
 8018622:	b209      	sxth	r1, r1
 8018624:	4648      	mov	r0, r9
 8018626:	f7fe fbb1 	bl	8016d8c <pbuf_header>
 801862a:	b130      	cbz	r0, 801863a <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801862c:	4b7d      	ldr	r3, [pc, #500]	; (8018824 <tcp_receive+0x5bc>)
 801862e:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8018632:	4981      	ldr	r1, [pc, #516]	; (8018838 <tcp_receive+0x5d0>)
 8018634:	487d      	ldr	r0, [pc, #500]	; (801882c <tcp_receive+0x5c4>)
 8018636:	f003 fbfd 	bl	801be34 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801863a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 801863e:	6833      	ldr	r3, [r6, #0]
 8018640:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018642:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8018644:	440b      	add	r3, r1
 8018646:	1a9b      	subs	r3, r3, r2
 8018648:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801864c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018650:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018652:	6831      	ldr	r1, [r6, #0]
 8018654:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018656:	1a8b      	subs	r3, r1, r2
 8018658:	2b00      	cmp	r3, #0
 801865a:	f2c0 82b1 	blt.w	8018bc0 <tcp_receive+0x958>
 801865e:	1c4b      	adds	r3, r1, #1
 8018660:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8018662:	1a9b      	subs	r3, r3, r2
 8018664:	1a1b      	subs	r3, r3, r0
 8018666:	2b00      	cmp	r3, #0
 8018668:	f300 82aa 	bgt.w	8018bc0 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801866c:	4291      	cmp	r1, r2
 801866e:	f040 81c9 	bne.w	8018a04 <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018672:	4d6b      	ldr	r5, [pc, #428]	; (8018820 <tcp_receive+0x5b8>)
 8018674:	68eb      	ldr	r3, [r5, #12]
 8018676:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801867a:	8998      	ldrh	r0, [r3, #12]
 801867c:	f7fc fcc9 	bl	8015012 <lwip_htons>
 8018680:	f010 0003 	ands.w	r0, r0, #3
 8018684:	bf18      	it	ne
 8018686:	2001      	movne	r0, #1
 8018688:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 801868a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801868c:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 801868e:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8018690:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8018692:	d242      	bcs.n	801871a <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018694:	68eb      	ldr	r3, [r5, #12]
 8018696:	8998      	ldrh	r0, [r3, #12]
 8018698:	f7fc fcbb 	bl	8015012 <lwip_htons>
 801869c:	07c2      	lsls	r2, r0, #31
 801869e:	d510      	bpl.n	80186c2 <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80186a0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80186a4:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80186a8:	4640      	mov	r0, r8
 80186aa:	f7fc fcb2 	bl	8015012 <lwip_htons>
 80186ae:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80186b2:	f7fc fcae 	bl	8015012 <lwip_htons>
 80186b6:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80186ba:	ea40 0808 	orr.w	r8, r0, r8
 80186be:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80186c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80186c4:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80186c6:	68eb      	ldr	r3, [r5, #12]
 80186c8:	8998      	ldrh	r0, [r3, #12]
 80186ca:	f7fc fca2 	bl	8015012 <lwip_htons>
 80186ce:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 80186d0:	bf48      	it	mi
 80186d2:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80186d4:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80186d6:	bf44      	itt	mi
 80186d8:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80186dc:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80186de:	8929      	ldrh	r1, [r5, #8]
 80186e0:	f7fe fca0 	bl	8017024 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80186e4:	68eb      	ldr	r3, [r5, #12]
 80186e6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80186ea:	8998      	ldrh	r0, [r3, #12]
 80186ec:	f7fc fc91 	bl	8015012 <lwip_htons>
 80186f0:	f010 0003 	ands.w	r0, r0, #3
 80186f4:	bf18      	it	ne
 80186f6:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80186f8:	6833      	ldr	r3, [r6, #0]
 80186fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80186fc:	4440      	add	r0, r8
 80186fe:	b280      	uxth	r0, r0
 8018700:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018702:	4418      	add	r0, r3
 8018704:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8018706:	4413      	add	r3, r2
 8018708:	4298      	cmp	r0, r3
 801870a:	d006      	beq.n	801871a <tcp_receive+0x4b2>
 801870c:	4b45      	ldr	r3, [pc, #276]	; (8018824 <tcp_receive+0x5bc>)
 801870e:	494b      	ldr	r1, [pc, #300]	; (801883c <tcp_receive+0x5d4>)
 8018710:	4846      	ldr	r0, [pc, #280]	; (801882c <tcp_receive+0x5c4>)
 8018712:	f240 527f 	movw	r2, #1407	; 0x57f
 8018716:	f003 fb8d 	bl	801be34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801871a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801871c:	2b00      	cmp	r3, #0
 801871e:	f000 80ad 	beq.w	801887c <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018722:	68eb      	ldr	r3, [r5, #12]
 8018724:	8998      	ldrh	r0, [r3, #12]
 8018726:	f7fc fc74 	bl	8015012 <lwip_htons>
 801872a:	07c0      	lsls	r0, r0, #31
 801872c:	f100 80a3 	bmi.w	8018876 <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8018730:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018734:	f1b8 0f00 	cmp.w	r8, #0
 8018738:	d03c      	beq.n	80187b4 <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801873a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 801873e:	6830      	ldr	r0, [r6, #0]
 8018740:	883b      	ldrh	r3, [r7, #0]
 8018742:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018746:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 801874a:	4403      	add	r3, r0
 801874c:	4411      	add	r1, r2
 801874e:	1a59      	subs	r1, r3, r1
            while (next &&
 8018750:	2900      	cmp	r1, #0
 8018752:	f280 80cf 	bge.w	80188f4 <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8018756:	1a9b      	subs	r3, r3, r2
            if (next &&
 8018758:	2b00      	cmp	r3, #0
 801875a:	dd2b      	ble.n	80187b4 <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801875c:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801875e:	1a12      	subs	r2, r2, r0
 8018760:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018762:	8998      	ldrh	r0, [r3, #12]
 8018764:	f7fc fc55 	bl	8015012 <lwip_htons>
 8018768:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 801876a:	bf48      	it	mi
 801876c:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801876e:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8018770:	bf44      	itt	mi
 8018772:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018776:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8018778:	8929      	ldrh	r1, [r5, #8]
 801877a:	f7fe fc53 	bl	8017024 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801877e:	68eb      	ldr	r3, [r5, #12]
 8018780:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8018784:	8998      	ldrh	r0, [r3, #12]
 8018786:	f7fc fc44 	bl	8015012 <lwip_htons>
 801878a:	f010 0003 	ands.w	r0, r0, #3
 801878e:	bf18      	it	ne
 8018790:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018792:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8018794:	4448      	add	r0, r9
 8018796:	b280      	uxth	r0, r0
 8018798:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801879a:	4418      	add	r0, r3
 801879c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	4298      	cmp	r0, r3
 80187a4:	d006      	beq.n	80187b4 <tcp_receive+0x54c>
 80187a6:	4b1f      	ldr	r3, [pc, #124]	; (8018824 <tcp_receive+0x5bc>)
 80187a8:	4925      	ldr	r1, [pc, #148]	; (8018840 <tcp_receive+0x5d8>)
 80187aa:	4820      	ldr	r0, [pc, #128]	; (801882c <tcp_receive+0x5c4>)
 80187ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80187b0:	f003 fb40 	bl	801be34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80187b4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80187b8:	e060      	b.n	801887c <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80187ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80187bc:	6829      	ldr	r1, [r5, #0]
 80187be:	1a5b      	subs	r3, r3, r1
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	f6bf aee1 	bge.w	8018588 <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80187c6:	4b1f      	ldr	r3, [pc, #124]	; (8018844 <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 80187c8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80187cc:	6819      	ldr	r1, [r3, #0]
 80187ce:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 80187d0:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 80187d4:	b289      	uxth	r1, r1
 80187d6:	b20b      	sxth	r3, r1
      if (m < 0) {
 80187d8:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 80187da:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 80187de:	4408      	add	r0, r1
        m = -m;
 80187e0:	bfbc      	itt	lt
 80187e2:	4249      	neglt	r1, r1
 80187e4:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80187e6:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 80187ea:	4413      	add	r3, r2
      pcb->sa += m;
 80187ec:	b200      	sxth	r0, r0
      pcb->sv += m;
 80187ee:	b29b      	uxth	r3, r3
 80187f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80187f2:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80187f6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80187fa:	2300      	movs	r3, #0
      pcb->sa += m;
 80187fc:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80187fe:	6363      	str	r3, [r4, #52]	; 0x34
 8018800:	e6c2      	b.n	8018588 <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 8018802:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8018806:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 801880a:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 801880e:	f8d9 9000 	ldr.w	r9, [r9]
 8018812:	e6ff      	b.n	8018614 <tcp_receive+0x3ac>
 8018814:	080200ff 	.word	0x080200ff
 8018818:	08020127 	.word	0x08020127
 801881c:	200040fa 	.word	0x200040fa
 8018820:	200040c8 	.word	0x200040c8
 8018824:	080200b4 	.word	0x080200b4
 8018828:	08020147 	.word	0x08020147
 801882c:	0801c6e3 	.word	0x0801c6e3
 8018830:	08020157 	.word	0x08020157
 8018834:	08020166 	.word	0x08020166
 8018838:	08020176 	.word	0x08020176
 801883c:	08020189 	.word	0x08020189
 8018840:	080201c0 	.word	0x080201c0
 8018844:	20008ae0 	.word	0x20008ae0
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8018848:	4269      	negs	r1, r5
 801884a:	b209      	sxth	r1, r1
 801884c:	f7fe fa9e 	bl	8016d8c <pbuf_header>
 8018850:	2800      	cmp	r0, #0
 8018852:	f43f aef2 	beq.w	801863a <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 8018856:	4b9c      	ldr	r3, [pc, #624]	; (8018ac8 <tcp_receive+0x860>)
 8018858:	f240 5251 	movw	r2, #1361	; 0x551
 801885c:	e6e9      	b.n	8018632 <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801885e:	1a9b      	subs	r3, r3, r2
 8018860:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8018862:	bfbe      	ittt	lt
 8018864:	7ea3      	ldrblt	r3, [r4, #26]
 8018866:	f043 0302 	orrlt.w	r3, r3, #2
 801886a:	76a3      	strblt	r3, [r4, #26]
 801886c:	e6f1      	b.n	8018652 <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 801886e:	6803      	ldr	r3, [r0, #0]
 8018870:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8018872:	f7fe fedb 	bl	801762c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018876:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018878:	2800      	cmp	r0, #0
 801887a:	d1f8      	bne.n	801886e <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801887c:	883a      	ldrh	r2, [r7, #0]
 801887e:	6833      	ldr	r3, [r6, #0]
 8018880:	4413      	add	r3, r2
 8018882:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018884:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8018886:	4293      	cmp	r3, r2
 8018888:	d206      	bcs.n	8018898 <tcp_receive+0x630>
 801888a:	4b8f      	ldr	r3, [pc, #572]	; (8018ac8 <tcp_receive+0x860>)
 801888c:	498f      	ldr	r1, [pc, #572]	; (8018acc <tcp_receive+0x864>)
 801888e:	4890      	ldr	r0, [pc, #576]	; (8018ad0 <tcp_receive+0x868>)
 8018890:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018894:	f003 face 	bl	801be34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018898:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801889a:	883a      	ldrh	r2, [r7, #0]
 801889c:	1a9b      	subs	r3, r3, r2
 801889e:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80188a0:	4620      	mov	r0, r4
 80188a2:	f7fe fe59 	bl	8017558 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80188a6:	686b      	ldr	r3, [r5, #4]
 80188a8:	891a      	ldrh	r2, [r3, #8]
 80188aa:	b11a      	cbz	r2, 80188b4 <tcp_receive+0x64c>
          recv_data = inseg.p;
 80188ac:	4a89      	ldr	r2, [pc, #548]	; (8018ad4 <tcp_receive+0x86c>)
 80188ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80188b0:	2300      	movs	r3, #0
 80188b2:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80188b4:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80188b6:	4f84      	ldr	r7, [pc, #528]	; (8018ac8 <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80188b8:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80188ba:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8018ae0 <tcp_receive+0x878>
 80188be:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8018ad0 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80188c2:	f7fc fba6 	bl	8015012 <lwip_htons>
 80188c6:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 80188c8:	bf41      	itttt	mi
 80188ca:	4a83      	ldrmi	r2, [pc, #524]	; (8018ad8 <tcp_receive+0x870>)
 80188cc:	7813      	ldrbmi	r3, [r2, #0]
 80188ce:	f043 0320 	orrmi.w	r3, r3, #32
 80188d2:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80188d4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80188d6:	b125      	cbz	r5, 80188e2 <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80188d8:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80188da:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80188dc:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80188de:	428b      	cmp	r3, r1
 80188e0:	d033      	beq.n	801894a <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80188e2:	7ea3      	ldrb	r3, [r4, #26]
 80188e4:	07d9      	lsls	r1, r3, #31
 80188e6:	f140 8087 	bpl.w	80189f8 <tcp_receive+0x790>
 80188ea:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80188ee:	f043 0302 	orr.w	r3, r3, #2
 80188f2:	e083      	b.n	80189fc <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80188f4:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80188f8:	f7fc fb8b 	bl	8015012 <lwip_htons>
 80188fc:	07c1      	lsls	r1, r0, #31
 80188fe:	d51d      	bpl.n	801893c <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018900:	68eb      	ldr	r3, [r5, #12]
 8018902:	8998      	ldrh	r0, [r3, #12]
 8018904:	f7fc fb85 	bl	8015012 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018908:	0782      	lsls	r2, r0, #30
 801890a:	d417      	bmi.n	801893c <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801890c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8018910:	2001      	movs	r0, #1
 8018912:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8018916:	f7fc fb7c 	bl	8015012 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 801891a:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801891c:	ea49 0000 	orr.w	r0, r9, r0
 8018920:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018924:	8998      	ldrh	r0, [r3, #12]
 8018926:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801892a:	f7fc fb72 	bl	8015012 <lwip_htons>
 801892e:	f010 0003 	ands.w	r0, r0, #3
 8018932:	bf18      	it	ne
 8018934:	2001      	movne	r0, #1
 8018936:	4481      	add	r9, r0
 8018938:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 801893c:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8018940:	4640      	mov	r0, r8
 8018942:	f7fe fe73 	bl	801762c <tcp_seg_free>
              next = next->next;
 8018946:	46c8      	mov	r8, r9
 8018948:	e6f4      	b.n	8018734 <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 801894a:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801894c:	8990      	ldrh	r0, [r2, #12]
 801894e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8018952:	f7fc fb5e 	bl	8015012 <lwip_htons>
 8018956:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018958:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801895c:	f010 0003 	ands.w	r0, r0, #3
 8018960:	bf18      	it	ne
 8018962:	2001      	movne	r0, #1
 8018964:	449a      	add	sl, r3
 8018966:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018968:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801896a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801896c:	8998      	ldrh	r0, [r3, #12]
 801896e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8018972:	f7fc fb4e 	bl	8015012 <lwip_htons>
 8018976:	f010 0003 	ands.w	r0, r0, #3
 801897a:	bf18      	it	ne
 801897c:	2001      	movne	r0, #1
 801897e:	4458      	add	r0, fp
 8018980:	4582      	cmp	sl, r0
 8018982:	d206      	bcs.n	8018992 <tcp_receive+0x72a>
 8018984:	463b      	mov	r3, r7
 8018986:	f240 52de 	movw	r2, #1502	; 0x5de
 801898a:	4641      	mov	r1, r8
 801898c:	4648      	mov	r0, r9
 801898e:	f003 fa51 	bl	801be34 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018992:	68eb      	ldr	r3, [r5, #12]
 8018994:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8018998:	8998      	ldrh	r0, [r3, #12]
 801899a:	f7fc fb3a 	bl	8015012 <lwip_htons>
 801899e:	f010 0003 	ands.w	r0, r0, #3
 80189a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80189a4:	bf18      	it	ne
 80189a6:	2001      	movne	r0, #1
 80189a8:	4450      	add	r0, sl
 80189aa:	1a18      	subs	r0, r3, r0
 80189ac:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80189ae:	4620      	mov	r0, r4
 80189b0:	f7fe fdd2 	bl	8017558 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80189b4:	6869      	ldr	r1, [r5, #4]
 80189b6:	890b      	ldrh	r3, [r1, #8]
 80189b8:	b133      	cbz	r3, 80189c8 <tcp_receive+0x760>
            if (recv_data) {
 80189ba:	4b46      	ldr	r3, [pc, #280]	; (8018ad4 <tcp_receive+0x86c>)
 80189bc:	6818      	ldr	r0, [r3, #0]
 80189be:	b1c8      	cbz	r0, 80189f4 <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 80189c0:	f7fe fbc4 	bl	801714c <pbuf_cat>
            cseg->p = NULL;
 80189c4:	2300      	movs	r3, #0
 80189c6:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80189c8:	68eb      	ldr	r3, [r5, #12]
 80189ca:	8998      	ldrh	r0, [r3, #12]
 80189cc:	f7fc fb21 	bl	8015012 <lwip_htons>
 80189d0:	07c0      	lsls	r0, r0, #31
 80189d2:	d509      	bpl.n	80189e8 <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 80189d4:	4a40      	ldr	r2, [pc, #256]	; (8018ad8 <tcp_receive+0x870>)
 80189d6:	7813      	ldrb	r3, [r2, #0]
 80189d8:	f043 0320 	orr.w	r3, r3, #32
 80189dc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80189de:	7d23      	ldrb	r3, [r4, #20]
 80189e0:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80189e2:	bf04      	itt	eq
 80189e4:	2307      	moveq	r3, #7
 80189e6:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80189e8:	682b      	ldr	r3, [r5, #0]
 80189ea:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80189ec:	4628      	mov	r0, r5
 80189ee:	f7fe fe1d 	bl	801762c <tcp_seg_free>
 80189f2:	e76f      	b.n	80188d4 <tcp_receive+0x66c>
              recv_data = cseg->p;
 80189f4:	6019      	str	r1, [r3, #0]
 80189f6:	e7e5      	b.n	80189c4 <tcp_receive+0x75c>
        tcp_ack(pcb);
 80189f8:	f043 0301 	orr.w	r3, r3, #1
 80189fc:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 80189fe:	b003      	add	sp, #12
 8018a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8018a04:	4620      	mov	r0, r4
 8018a06:	f001 faa7 	bl	8019f58 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8018a0a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8018a0c:	b925      	cbnz	r5, 8018a18 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018a0e:	4833      	ldr	r0, [pc, #204]	; (8018adc <tcp_receive+0x874>)
 8018a10:	f7fe fe22 	bl	8017658 <tcp_seg_copy>
 8018a14:	6720      	str	r0, [r4, #112]	; 0x70
 8018a16:	e7f2      	b.n	80189fe <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 8018a18:	6833      	ldr	r3, [r6, #0]
 8018a1a:	f04f 0800 	mov.w	r8, #0
 8018a1e:	f103 3eff 	add.w	lr, r3, #4294967295
 8018a22:	f103 0c01 	add.w	ip, r3, #1
 8018a26:	68e8      	ldr	r0, [r5, #12]
 8018a28:	6842      	ldr	r2, [r0, #4]
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d117      	bne.n	8018a5e <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 8018a2e:	482b      	ldr	r0, [pc, #172]	; (8018adc <tcp_receive+0x874>)
 8018a30:	892b      	ldrh	r3, [r5, #8]
 8018a32:	8902      	ldrh	r2, [r0, #8]
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d9e2      	bls.n	80189fe <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 8018a38:	f7fe fe0e 	bl	8017658 <tcp_seg_copy>
                if (cseg != NULL) {
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d0de      	beq.n	80189fe <tcp_receive+0x796>
                  if (prev != NULL) {
 8018a40:	f1b8 0f00 	cmp.w	r8, #0
 8018a44:	d009      	beq.n	8018a5a <tcp_receive+0x7f2>
                    prev->next = cseg;
 8018a46:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8018a4a:	4629      	mov	r1, r5
}
 8018a4c:	b003      	add	sp, #12
 8018a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8018a52:	f7ff bbcb 	b.w	80181ec <tcp_oos_insert_segment>
 8018a56:	460d      	mov	r5, r1
 8018a58:	e7e5      	b.n	8018a26 <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 8018a5a:	6720      	str	r0, [r4, #112]	; 0x70
 8018a5c:	e7f5      	b.n	8018a4a <tcp_receive+0x7e2>
              if (prev == NULL) {
 8018a5e:	f1b8 0f00 	cmp.w	r8, #0
 8018a62:	d109      	bne.n	8018a78 <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018a64:	1a99      	subs	r1, r3, r2
 8018a66:	2900      	cmp	r1, #0
 8018a68:	da3c      	bge.n	8018ae4 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8018a6a:	481c      	ldr	r0, [pc, #112]	; (8018adc <tcp_receive+0x874>)
 8018a6c:	f7fe fdf4 	bl	8017658 <tcp_seg_copy>
                  if (cseg != NULL) {
 8018a70:	2800      	cmp	r0, #0
 8018a72:	d0c4      	beq.n	80189fe <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 8018a74:	6720      	str	r0, [r4, #112]	; 0x70
 8018a76:	e7e8      	b.n	8018a4a <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8018a78:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8018a7c:	6849      	ldr	r1, [r1, #4]
 8018a7e:	ebae 0101 	sub.w	r1, lr, r1
 8018a82:	2900      	cmp	r1, #0
 8018a84:	db2e      	blt.n	8018ae4 <tcp_receive+0x87c>
 8018a86:	ebac 0102 	sub.w	r1, ip, r2
 8018a8a:	2900      	cmp	r1, #0
 8018a8c:	dc2a      	bgt.n	8018ae4 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8018a8e:	4813      	ldr	r0, [pc, #76]	; (8018adc <tcp_receive+0x874>)
 8018a90:	f7fe fde2 	bl	8017658 <tcp_seg_copy>
                  if (cseg != NULL) {
 8018a94:	4604      	mov	r4, r0
 8018a96:	2800      	cmp	r0, #0
 8018a98:	d0b1      	beq.n	80189fe <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018a9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a9e:	6831      	ldr	r1, [r6, #0]
 8018aa0:	685a      	ldr	r2, [r3, #4]
 8018aa2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8018aa6:	4413      	add	r3, r2
 8018aa8:	1a5b      	subs	r3, r3, r1
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	dd07      	ble.n	8018abe <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018aae:	1a89      	subs	r1, r1, r2
 8018ab0:	b289      	uxth	r1, r1
 8018ab2:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018ab6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018aba:	f7fe fab3 	bl	8017024 <pbuf_realloc>
                    prev->next = cseg;
 8018abe:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8018ac2:	4629      	mov	r1, r5
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	e7c1      	b.n	8018a4c <tcp_receive+0x7e4>
 8018ac8:	080200b4 	.word	0x080200b4
 8018acc:	080201fb 	.word	0x080201fb
 8018ad0:	0801c6e3 	.word	0x0801c6e3
 8018ad4:	200040dc 	.word	0x200040dc
 8018ad8:	200040e0 	.word	0x200040e0
 8018adc:	200040c8 	.word	0x200040c8
 8018ae0:	0802021a 	.word	0x0802021a
              if (next->next == NULL &&
 8018ae4:	6829      	ldr	r1, [r5, #0]
 8018ae6:	46a8      	mov	r8, r5
 8018ae8:	2900      	cmp	r1, #0
 8018aea:	d1b4      	bne.n	8018a56 <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018aec:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	dd85      	ble.n	80189fe <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018af2:	8980      	ldrh	r0, [r0, #12]
 8018af4:	f7fc fa8d 	bl	8015012 <lwip_htons>
 8018af8:	07c2      	lsls	r2, r0, #31
 8018afa:	d480      	bmi.n	80189fe <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 8018afc:	483c      	ldr	r0, [pc, #240]	; (8018bf0 <tcp_receive+0x988>)
 8018afe:	f7fe fdab 	bl	8017658 <tcp_seg_copy>
 8018b02:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8018b04:	2800      	cmp	r0, #0
 8018b06:	f43f af7a 	beq.w	80189fe <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018b0a:	68eb      	ldr	r3, [r5, #12]
 8018b0c:	6831      	ldr	r1, [r6, #0]
 8018b0e:	685a      	ldr	r2, [r3, #4]
 8018b10:	892b      	ldrh	r3, [r5, #8]
 8018b12:	4413      	add	r3, r2
 8018b14:	1a5b      	subs	r3, r3, r1
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	dd05      	ble.n	8018b26 <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018b1a:	1a89      	subs	r1, r1, r2
 8018b1c:	b289      	uxth	r1, r1
 8018b1e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8018b20:	6868      	ldr	r0, [r5, #4]
 8018b22:	f7fe fa7f 	bl	8017024 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018b26:	6832      	ldr	r2, [r6, #0]
 8018b28:	883b      	ldrh	r3, [r7, #0]
 8018b2a:	4413      	add	r3, r2
 8018b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018b2e:	1a9b      	subs	r3, r3, r2
 8018b30:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018b32:	1a9b      	subs	r3, r3, r2
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	f77f af62 	ble.w	80189fe <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018b3a:	682b      	ldr	r3, [r5, #0]
 8018b3c:	68db      	ldr	r3, [r3, #12]
 8018b3e:	8998      	ldrh	r0, [r3, #12]
 8018b40:	f7fc fa67 	bl	8015012 <lwip_htons>
 8018b44:	07c3      	lsls	r3, r0, #31
 8018b46:	d511      	bpl.n	8018b6c <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018b48:	682b      	ldr	r3, [r5, #0]
 8018b4a:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8018b4e:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8018b52:	4640      	mov	r0, r8
 8018b54:	f7fc fa5d 	bl	8015012 <lwip_htons>
 8018b58:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8018b5c:	f7fc fa59 	bl	8015012 <lwip_htons>
 8018b60:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8018b64:	ea40 0808 	orr.w	r8, r0, r8
 8018b68:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018b6c:	6832      	ldr	r2, [r6, #0]
 8018b6e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8018b70:	682b      	ldr	r3, [r5, #0]
 8018b72:	1a89      	subs	r1, r1, r2
 8018b74:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8018b76:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018b78:	4411      	add	r1, r2
 8018b7a:	b289      	uxth	r1, r1
 8018b7c:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018b7e:	f7fe fa51 	bl	8017024 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018b82:	682b      	ldr	r3, [r5, #0]
 8018b84:	891d      	ldrh	r5, [r3, #8]
 8018b86:	68db      	ldr	r3, [r3, #12]
 8018b88:	8998      	ldrh	r0, [r3, #12]
 8018b8a:	f7fc fa42 	bl	8015012 <lwip_htons>
 8018b8e:	f010 0003 	ands.w	r0, r0, #3
 8018b92:	bf18      	it	ne
 8018b94:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b96:	6833      	ldr	r3, [r6, #0]
 8018b98:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8018b9a:	4428      	add	r0, r5
 8018b9c:	b280      	uxth	r0, r0
 8018b9e:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018ba0:	4418      	add	r0, r3
 8018ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8018ba4:	4413      	add	r3, r2
 8018ba6:	4298      	cmp	r0, r3
 8018ba8:	f43f af29 	beq.w	80189fe <tcp_receive+0x796>
 8018bac:	4b11      	ldr	r3, [pc, #68]	; (8018bf4 <tcp_receive+0x98c>)
 8018bae:	4912      	ldr	r1, [pc, #72]	; (8018bf8 <tcp_receive+0x990>)
 8018bb0:	4812      	ldr	r0, [pc, #72]	; (8018bfc <tcp_receive+0x994>)
 8018bb2:	f240 627b 	movw	r2, #1659	; 0x67b
}
 8018bb6:	b003      	add	sp, #12
 8018bb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018bbc:	f003 b93a 	b.w	801be34 <iprintf>
      tcp_send_empty_ack(pcb);
 8018bc0:	4620      	mov	r0, r4
}
 8018bc2:	b003      	add	sp, #12
 8018bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8018bc8:	f001 b9c6 	b.w	8019f58 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018bcc:	6833      	ldr	r3, [r6, #0]
 8018bce:	1a99      	subs	r1, r3, r2
 8018bd0:	2900      	cmp	r1, #0
 8018bd2:	db06      	blt.n	8018be2 <tcp_receive+0x97a>
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	1a9b      	subs	r3, r3, r2
 8018bd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018bda:	1a9b      	subs	r3, r3, r2
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	f77f af0e 	ble.w	80189fe <tcp_receive+0x796>
      tcp_ack_now(pcb);
 8018be2:	7ea3      	ldrb	r3, [r4, #26]
 8018be4:	e683      	b.n	80188ee <tcp_receive+0x686>
        pcb->dupacks = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018bec:	f7ff bbb1 	b.w	8018352 <tcp_receive+0xea>
 8018bf0:	200040c8 	.word	0x200040c8
 8018bf4:	080200b4 	.word	0x080200b4
 8018bf8:	08020189 	.word	0x08020189
 8018bfc:	0801c6e3 	.word	0x0801c6e3

08018c00 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8018c00:	4b0b      	ldr	r3, [pc, #44]	; (8018c30 <tcp_getoptbyte+0x30>)
 8018c02:	4a0c      	ldr	r2, [pc, #48]	; (8018c34 <tcp_getoptbyte+0x34>)
 8018c04:	6819      	ldr	r1, [r3, #0]
{
 8018c06:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8018c08:	b121      	cbz	r1, 8018c14 <tcp_getoptbyte+0x14>
 8018c0a:	480b      	ldr	r0, [pc, #44]	; (8018c38 <tcp_getoptbyte+0x38>)
 8018c0c:	8813      	ldrh	r3, [r2, #0]
 8018c0e:	8800      	ldrh	r0, [r0, #0]
 8018c10:	4283      	cmp	r3, r0
 8018c12:	d207      	bcs.n	8018c24 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8018c14:	4b09      	ldr	r3, [pc, #36]	; (8018c3c <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8018c16:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8018c18:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8018c1a:	440b      	add	r3, r1
 8018c1c:	1c48      	adds	r0, r1, #1
 8018c1e:	8010      	strh	r0, [r2, #0]
 8018c20:	7d18      	ldrb	r0, [r3, #20]
 8018c22:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8018c24:	1c5c      	adds	r4, r3, #1
 8018c26:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8018c28:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8018c2a:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8018c2c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8018c2e:	bd10      	pop	{r4, pc}
 8018c30:	200040f4 	.word	0x200040f4
 8018c34:	200040e8 	.word	0x200040e8
 8018c38:	200040f0 	.word	0x200040f0
 8018c3c:	200040ec 	.word	0x200040ec

08018c40 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8018c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c42:	4d19      	ldr	r5, [pc, #100]	; (8018ca8 <tcp_parseopt.isra.1.part.2+0x68>)
 8018c44:	4e19      	ldr	r6, [pc, #100]	; (8018cac <tcp_parseopt.isra.1.part.2+0x6c>)
 8018c46:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8018c48:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c4a:	802b      	strh	r3, [r5, #0]
 8018c4c:	8834      	ldrh	r4, [r6, #0]
 8018c4e:	882b      	ldrh	r3, [r5, #0]
 8018c50:	42a3      	cmp	r3, r4
 8018c52:	d300      	bcc.n	8018c56 <tcp_parseopt.isra.1.part.2+0x16>
 8018c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8018c56:	f7ff ffd3 	bl	8018c00 <tcp_getoptbyte>
      switch (opt) {
 8018c5a:	2801      	cmp	r0, #1
 8018c5c:	d0f6      	beq.n	8018c4c <tcp_parseopt.isra.1.part.2+0xc>
 8018c5e:	d3f9      	bcc.n	8018c54 <tcp_parseopt.isra.1.part.2+0x14>
 8018c60:	2802      	cmp	r0, #2
 8018c62:	d117      	bne.n	8018c94 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018c64:	f7ff ffcc 	bl	8018c00 <tcp_getoptbyte>
 8018c68:	2804      	cmp	r0, #4
 8018c6a:	d1f3      	bne.n	8018c54 <tcp_parseopt.isra.1.part.2+0x14>
 8018c6c:	882b      	ldrh	r3, [r5, #0]
 8018c6e:	3301      	adds	r3, #1
 8018c70:	42a3      	cmp	r3, r4
 8018c72:	daef      	bge.n	8018c54 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8018c74:	f7ff ffc4 	bl	8018c00 <tcp_getoptbyte>
 8018c78:	0200      	lsls	r0, r0, #8
 8018c7a:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8018c7c:	f7ff ffc0 	bl	8018c00 <tcp_getoptbyte>
 8018c80:	4320      	orrs	r0, r4
 8018c82:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018c84:	1e43      	subs	r3, r0, #1
 8018c86:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8018c8a:	bf28      	it	cs
 8018c8c:	f44f 7034 	movcs.w	r0, #720	; 0x2d0
 8018c90:	8038      	strh	r0, [r7, #0]
 8018c92:	e7db      	b.n	8018c4c <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8018c94:	f7ff ffb4 	bl	8018c00 <tcp_getoptbyte>
        if (data < 2) {
 8018c98:	2801      	cmp	r0, #1
 8018c9a:	d9db      	bls.n	8018c54 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8018c9c:	882b      	ldrh	r3, [r5, #0]
 8018c9e:	3b02      	subs	r3, #2
 8018ca0:	4418      	add	r0, r3
 8018ca2:	8028      	strh	r0, [r5, #0]
 8018ca4:	e7d2      	b.n	8018c4c <tcp_parseopt.isra.1.part.2+0xc>
 8018ca6:	bf00      	nop
 8018ca8:	200040e8 	.word	0x200040e8
 8018cac:	200040f8 	.word	0x200040f8

08018cb0 <tcp_input_delayed_close>:
{
 8018cb0:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8018cb2:	4b0d      	ldr	r3, [pc, #52]	; (8018ce8 <tcp_input_delayed_close+0x38>)
{
 8018cb4:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8018cb6:	7818      	ldrb	r0, [r3, #0]
 8018cb8:	f010 0010 	ands.w	r0, r0, #16
 8018cbc:	d012      	beq.n	8018ce4 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018cbe:	7ea3      	ldrb	r3, [r4, #26]
 8018cc0:	06db      	lsls	r3, r3, #27
 8018cc2:	d406      	bmi.n	8018cd2 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018cc4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8018cc8:	b11b      	cbz	r3, 8018cd2 <tcp_input_delayed_close+0x22>
 8018cca:	f06f 010e 	mvn.w	r1, #14
 8018cce:	6920      	ldr	r0, [r4, #16]
 8018cd0:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018cd2:	4621      	mov	r1, r4
 8018cd4:	4805      	ldr	r0, [pc, #20]	; (8018cec <tcp_input_delayed_close+0x3c>)
 8018cd6:	f7fe ff3f 	bl	8017b58 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8018cda:	2001      	movs	r0, #1
 8018cdc:	4621      	mov	r1, r4
 8018cde:	f7fd fed5 	bl	8016a8c <memp_free>
 8018ce2:	2001      	movs	r0, #1
}
 8018ce4:	bd10      	pop	{r4, pc}
 8018ce6:	bf00      	nop
 8018ce8:	200040e0 	.word	0x200040e0
 8018cec:	20008adc 	.word	0x20008adc

08018cf0 <tcp_input>:
{
 8018cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8018cf4:	4e9f      	ldr	r6, [pc, #636]	; (8018f74 <tcp_input+0x284>)
 8018cf6:	6843      	ldr	r3, [r0, #4]
 8018cf8:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8018cfa:	8943      	ldrh	r3, [r0, #10]
 8018cfc:	2b13      	cmp	r3, #19
{
 8018cfe:	b089      	sub	sp, #36	; 0x24
 8018d00:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8018d02:	f240 81b2 	bls.w	801906a <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018d06:	4f9c      	ldr	r7, [pc, #624]	; (8018f78 <tcp_input+0x288>)
 8018d08:	6839      	ldr	r1, [r7, #0]
 8018d0a:	6978      	ldr	r0, [r7, #20]
 8018d0c:	f7fc ff8f 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 8018d10:	46b8      	mov	r8, r7
 8018d12:	4604      	mov	r4, r0
 8018d14:	2800      	cmp	r0, #0
 8018d16:	f040 81a8 	bne.w	801906a <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018d20:	2be0      	cmp	r3, #224	; 0xe0
 8018d22:	f000 81a2 	beq.w	801906a <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8018d26:	6833      	ldr	r3, [r6, #0]
 8018d28:	8998      	ldrh	r0, [r3, #12]
 8018d2a:	f7fc f972 	bl	8015012 <lwip_htons>
 8018d2e:	0a81      	lsrs	r1, r0, #10
 8018d30:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018d34:	2913      	cmp	r1, #19
 8018d36:	f240 8198 	bls.w	801906a <tcp_input+0x37a>
 8018d3a:	892b      	ldrh	r3, [r5, #8]
 8018d3c:	b289      	uxth	r1, r1
 8018d3e:	428b      	cmp	r3, r1
 8018d40:	f0c0 8193 	bcc.w	801906a <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 8018d44:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8018d46:	4a8d      	ldr	r2, [pc, #564]	; (8018f7c <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8018d48:	4f8d      	ldr	r7, [pc, #564]	; (8018f80 <tcp_input+0x290>)
 8018d4a:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8018d4c:	f1a1 0314 	sub.w	r3, r1, #20
 8018d50:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8018d52:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8018d54:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8018d56:	8013      	strh	r3, [r2, #0]
 8018d58:	4c8a      	ldr	r4, [pc, #552]	; (8018f84 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8018d5a:	d344      	bcc.n	8018de6 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8018d5c:	4249      	negs	r1, r1
 8018d5e:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8018d60:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8018d62:	f7fe f813 	bl	8016d8c <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018d66:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018d68:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8018fd8 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018d6c:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018d6e:	4f86      	ldr	r7, [pc, #536]	; (8018f88 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018d70:	f7fc f94f 	bl	8015012 <lwip_htons>
 8018d74:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018d76:	6834      	ldr	r4, [r6, #0]
 8018d78:	8860      	ldrh	r0, [r4, #2]
 8018d7a:	f7fc f94a 	bl	8015012 <lwip_htons>
 8018d7e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018d80:	6834      	ldr	r4, [r6, #0]
 8018d82:	6860      	ldr	r0, [r4, #4]
 8018d84:	f7fc f948 	bl	8015018 <lwip_htonl>
 8018d88:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018d8a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018d8c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018d90:	68a0      	ldr	r0, [r4, #8]
 8018d92:	f7fc f941 	bl	8015018 <lwip_htonl>
 8018d96:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018d98:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018d9a:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018d9c:	89e0      	ldrh	r0, [r4, #14]
 8018d9e:	f7fc f938 	bl	8015012 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8018da2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018da4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8018da6:	8998      	ldrh	r0, [r3, #12]
 8018da8:	f7fc f933 	bl	8015012 <lwip_htons>
 8018dac:	b2c0      	uxtb	r0, r0
 8018dae:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8018db2:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8018db4:	4a75      	ldr	r2, [pc, #468]	; (8018f8c <tcp_input+0x29c>)
 8018db6:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8018db8:	f010 0003 	ands.w	r0, r0, #3
 8018dbc:	bf18      	it	ne
 8018dbe:	2001      	movne	r0, #1
 8018dc0:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018dc2:	4973      	ldr	r1, [pc, #460]	; (8018f90 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8018dc4:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8018dc6:	4b73      	ldr	r3, [pc, #460]	; (8018f94 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018dc8:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8018dca:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8018dcc:	f04f 0a00 	mov.w	sl, #0
 8018dd0:	9304      	str	r3, [sp, #16]
 8018dd2:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018dd4:	2c00      	cmp	r4, #0
 8018dd6:	d140      	bne.n	8018e5a <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018dd8:	4b6f      	ldr	r3, [pc, #444]	; (8018f98 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018dda:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8018f9c <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018dde:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018de0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8018fdc <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018de4:	e148      	b.n	8019078 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018de6:	682b      	ldr	r3, [r5, #0]
 8018de8:	b92b      	cbnz	r3, 8018df6 <tcp_input+0x106>
 8018dea:	4b6c      	ldr	r3, [pc, #432]	; (8018f9c <tcp_input+0x2ac>)
 8018dec:	496c      	ldr	r1, [pc, #432]	; (8018fa0 <tcp_input+0x2b0>)
 8018dee:	486d      	ldr	r0, [pc, #436]	; (8018fa4 <tcp_input+0x2b4>)
 8018df0:	22b2      	movs	r2, #178	; 0xb2
 8018df2:	f003 f81f 	bl	801be34 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8018df6:	f06f 0113 	mvn.w	r1, #19
 8018dfa:	4628      	mov	r0, r5
 8018dfc:	f7fd ffc6 	bl	8016d8c <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8018e00:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8018e02:	8969      	ldrh	r1, [r5, #10]
 8018e04:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8018e06:	881c      	ldrh	r4, [r3, #0]
 8018e08:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8018e0a:	4249      	negs	r1, r1
 8018e0c:	b209      	sxth	r1, r1
 8018e0e:	4628      	mov	r0, r5
 8018e10:	f7fd ffbc 	bl	8016d8c <pbuf_header>
    if (opt2len > p->next->len) {
 8018e14:	6828      	ldr	r0, [r5, #0]
 8018e16:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8018e18:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8018e1a:	42a3      	cmp	r3, r4
 8018e1c:	f0c0 8125 	bcc.w	801906a <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8018e20:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8018e22:	6843      	ldr	r3, [r0, #4]
 8018e24:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8018e26:	b209      	sxth	r1, r1
 8018e28:	f7fd ffb0 	bl	8016d8c <pbuf_header>
    p->tot_len -= opt2len;
 8018e2c:	892b      	ldrh	r3, [r5, #8]
 8018e2e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018e30:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8018e32:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018e34:	b12b      	cbz	r3, 8018e42 <tcp_input+0x152>
 8018e36:	4b59      	ldr	r3, [pc, #356]	; (8018f9c <tcp_input+0x2ac>)
 8018e38:	495b      	ldr	r1, [pc, #364]	; (8018fa8 <tcp_input+0x2b8>)
 8018e3a:	485a      	ldr	r0, [pc, #360]	; (8018fa4 <tcp_input+0x2b4>)
 8018e3c:	22cf      	movs	r2, #207	; 0xcf
 8018e3e:	f002 fff9 	bl	801be34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018e42:	682b      	ldr	r3, [r5, #0]
 8018e44:	892a      	ldrh	r2, [r5, #8]
 8018e46:	891b      	ldrh	r3, [r3, #8]
 8018e48:	429a      	cmp	r2, r3
 8018e4a:	d08c      	beq.n	8018d66 <tcp_input+0x76>
 8018e4c:	4b53      	ldr	r3, [pc, #332]	; (8018f9c <tcp_input+0x2ac>)
 8018e4e:	4957      	ldr	r1, [pc, #348]	; (8018fac <tcp_input+0x2bc>)
 8018e50:	4854      	ldr	r0, [pc, #336]	; (8018fa4 <tcp_input+0x2b4>)
 8018e52:	22d0      	movs	r2, #208	; 0xd0
 8018e54:	f002 ffee 	bl	801be34 <iprintf>
 8018e58:	e785      	b.n	8018d66 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018e5a:	7d23      	ldrb	r3, [r4, #20]
 8018e5c:	b92b      	cbnz	r3, 8018e6a <tcp_input+0x17a>
 8018e5e:	4b4f      	ldr	r3, [pc, #316]	; (8018f9c <tcp_input+0x2ac>)
 8018e60:	4953      	ldr	r1, [pc, #332]	; (8018fb0 <tcp_input+0x2c0>)
 8018e62:	4850      	ldr	r0, [pc, #320]	; (8018fa4 <tcp_input+0x2b4>)
 8018e64:	22e2      	movs	r2, #226	; 0xe2
 8018e66:	f002 ffe5 	bl	801be34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018e6a:	7d23      	ldrb	r3, [r4, #20]
 8018e6c:	2b0a      	cmp	r3, #10
 8018e6e:	d105      	bne.n	8018e7c <tcp_input+0x18c>
 8018e70:	4b4a      	ldr	r3, [pc, #296]	; (8018f9c <tcp_input+0x2ac>)
 8018e72:	4950      	ldr	r1, [pc, #320]	; (8018fb4 <tcp_input+0x2c4>)
 8018e74:	484b      	ldr	r0, [pc, #300]	; (8018fa4 <tcp_input+0x2b4>)
 8018e76:	22e3      	movs	r2, #227	; 0xe3
 8018e78:	f002 ffdc 	bl	801be34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018e7c:	7d23      	ldrb	r3, [r4, #20]
 8018e7e:	2b01      	cmp	r3, #1
 8018e80:	d105      	bne.n	8018e8e <tcp_input+0x19e>
 8018e82:	4b46      	ldr	r3, [pc, #280]	; (8018f9c <tcp_input+0x2ac>)
 8018e84:	494c      	ldr	r1, [pc, #304]	; (8018fb8 <tcp_input+0x2c8>)
 8018e86:	4847      	ldr	r0, [pc, #284]	; (8018fa4 <tcp_input+0x2b4>)
 8018e88:	22e4      	movs	r2, #228	; 0xe4
 8018e8a:	f002 ffd3 	bl	801be34 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8018e8e:	6832      	ldr	r2, [r6, #0]
 8018e90:	8b21      	ldrh	r1, [r4, #24]
 8018e92:	8813      	ldrh	r3, [r2, #0]
 8018e94:	4299      	cmp	r1, r3
 8018e96:	68e3      	ldr	r3, [r4, #12]
 8018e98:	d169      	bne.n	8018f6e <tcp_input+0x27e>
 8018e9a:	8ae1      	ldrh	r1, [r4, #22]
 8018e9c:	8852      	ldrh	r2, [r2, #2]
 8018e9e:	4291      	cmp	r1, r2
 8018ea0:	d165      	bne.n	8018f6e <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8018ea2:	6861      	ldr	r1, [r4, #4]
 8018ea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018ea8:	4291      	cmp	r1, r2
 8018eaa:	d160      	bne.n	8018f6e <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018eac:	6821      	ldr	r1, [r4, #0]
 8018eae:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8018eb2:	4291      	cmp	r1, r2
 8018eb4:	d15b      	bne.n	8018f6e <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018eb6:	429c      	cmp	r4, r3
 8018eb8:	f040 8406 	bne.w	80196c8 <tcp_input+0x9d8>
 8018ebc:	4b37      	ldr	r3, [pc, #220]	; (8018f9c <tcp_input+0x2ac>)
 8018ebe:	493f      	ldr	r1, [pc, #252]	; (8018fbc <tcp_input+0x2cc>)
 8018ec0:	4838      	ldr	r0, [pc, #224]	; (8018fa4 <tcp_input+0x2b4>)
 8018ec2:	22ec      	movs	r2, #236	; 0xec
 8018ec4:	f002 ffb6 	bl	801be34 <iprintf>
      if (prev != NULL) {
 8018ec8:	f1ba 0f00 	cmp.w	sl, #0
 8018ecc:	d007      	beq.n	8018ede <tcp_input+0x1ee>
        prev->next = pcb->next;
 8018ece:	68e3      	ldr	r3, [r4, #12]
 8018ed0:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8018ed4:	f8d9 3000 	ldr.w	r3, [r9]
 8018ed8:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8018eda:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018ede:	68e3      	ldr	r3, [r4, #12]
 8018ee0:	429c      	cmp	r4, r3
 8018ee2:	d105      	bne.n	8018ef0 <tcp_input+0x200>
 8018ee4:	4b2d      	ldr	r3, [pc, #180]	; (8018f9c <tcp_input+0x2ac>)
 8018ee6:	4936      	ldr	r1, [pc, #216]	; (8018fc0 <tcp_input+0x2d0>)
 8018ee8:	482e      	ldr	r0, [pc, #184]	; (8018fa4 <tcp_input+0x2b4>)
 8018eea:	22f4      	movs	r2, #244	; 0xf4
 8018eec:	f002 ffa2 	bl	801be34 <iprintf>
    inseg.next = NULL;
 8018ef0:	4b34      	ldr	r3, [pc, #208]	; (8018fc4 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8018ef2:	8929      	ldrh	r1, [r5, #8]
 8018ef4:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 8018ef6:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 8018ef8:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 8018efa:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 8018efc:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8018efe:	4832      	ldr	r0, [pc, #200]	; (8018fc8 <tcp_input+0x2d8>)
    recv_acked = 0;
 8018f00:	4932      	ldr	r1, [pc, #200]	; (8018fcc <tcp_input+0x2dc>)
    inseg.p = p;
 8018f02:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8018f04:	4b32      	ldr	r3, [pc, #200]	; (8018fd0 <tcp_input+0x2e0>)
    recv_flags = 0;
 8018f06:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8018f08:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 8018f0a:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8018f0c:	9a03      	ldr	r2, [sp, #12]
 8018f0e:	9105      	str	r1, [sp, #20]
 8018f10:	7812      	ldrb	r2, [r2, #0]
 8018f12:	f012 0f08 	tst.w	r2, #8
 8018f16:	4680      	mov	r8, r0
 8018f18:	469a      	mov	sl, r3
 8018f1a:	d003      	beq.n	8018f24 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8018f1c:	7b6b      	ldrb	r3, [r5, #13]
 8018f1e:	f043 0301 	orr.w	r3, r3, #1
 8018f22:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8018f24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8018f26:	4d2b      	ldr	r5, [pc, #172]	; (8018fd4 <tcp_input+0x2e4>)
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f000 8137 	beq.w	801919c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018f2e:	4620      	mov	r0, r4
 8018f30:	f7fe ff24 	bl	8017d7c <tcp_process_refused_data>
 8018f34:	300d      	adds	r0, #13
 8018f36:	d008      	beq.n	8018f4a <tcp_input+0x25a>
 8018f38:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	f000 812e 	beq.w	801919c <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018f40:	9b04      	ldr	r3, [sp, #16]
 8018f42:	881b      	ldrh	r3, [r3, #0]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	f000 8129 	beq.w	801919c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8018f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8018f4c:	b913      	cbnz	r3, 8018f54 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f001 f802 	bl	8019f58 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8018f54:	2400      	movs	r4, #0
 8018f56:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8018f58:	4d1a      	ldr	r5, [pc, #104]	; (8018fc4 <tcp_input+0x2d4>)
    recv_data = NULL;
 8018f5a:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8018f5e:	6868      	ldr	r0, [r5, #4]
 8018f60:	b110      	cbz	r0, 8018f68 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8018f62:	f7fd ff19 	bl	8016d98 <pbuf_free>
      inseg.p = NULL;
 8018f66:	606c      	str	r4, [r5, #4]
}
 8018f68:	b009      	add	sp, #36	; 0x24
 8018f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f6e:	46a2      	mov	sl, r4
 8018f70:	461c      	mov	r4, r3
 8018f72:	e72f      	b.n	8018dd4 <tcp_input+0xe4>
 8018f74:	200040ec 	.word	0x200040ec
 8018f78:	200044c0 	.word	0x200044c0
 8018f7c:	200040f8 	.word	0x200040f8
 8018f80:	200040f4 	.word	0x200040f4
 8018f84:	200040f0 	.word	0x200040f0
 8018f88:	200040c0 	.word	0x200040c0
 8018f8c:	200040c4 	.word	0x200040c4
 8018f90:	20008adc 	.word	0x20008adc
 8018f94:	200040fa 	.word	0x200040fa
 8018f98:	20008aec 	.word	0x20008aec
 8018f9c:	080200b4 	.word	0x080200b4
 8018fa0:	0801fefe 	.word	0x0801fefe
 8018fa4:	0801c6e3 	.word	0x0801c6e3
 8018fa8:	0801ff0e 	.word	0x0801ff0e
 8018fac:	0801ff1a 	.word	0x0801ff1a
 8018fb0:	0801ff39 	.word	0x0801ff39
 8018fb4:	0801ff60 	.word	0x0801ff60
 8018fb8:	0801ff8a 	.word	0x0801ff8a
 8018fbc:	0801ffb1 	.word	0x0801ffb1
 8018fc0:	0801ffdc 	.word	0x0801ffdc
 8018fc4:	200040c8 	.word	0x200040c8
 8018fc8:	200040e0 	.word	0x200040e0
 8018fcc:	200040d8 	.word	0x200040d8
 8018fd0:	200040dc 	.word	0x200040dc
 8018fd4:	20008af0 	.word	0x20008af0
 8018fd8:	200040e4 	.word	0x200040e4
 8018fdc:	08020006 	.word	0x08020006
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018fe0:	7d23      	ldrb	r3, [r4, #20]
 8018fe2:	2b0a      	cmp	r3, #10
 8018fe4:	d005      	beq.n	8018ff2 <tcp_input+0x302>
 8018fe6:	4653      	mov	r3, sl
 8018fe8:	22fe      	movs	r2, #254	; 0xfe
 8018fea:	4649      	mov	r1, r9
 8018fec:	489d      	ldr	r0, [pc, #628]	; (8019264 <tcp_input+0x574>)
 8018fee:	f002 ff21 	bl	801be34 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8018ff2:	6833      	ldr	r3, [r6, #0]
 8018ff4:	8b22      	ldrh	r2, [r4, #24]
 8018ff6:	8818      	ldrh	r0, [r3, #0]
 8018ff8:	4290      	cmp	r0, r2
 8018ffa:	d13c      	bne.n	8019076 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8018ffc:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8018ffe:	885a      	ldrh	r2, [r3, #2]
 8019000:	428a      	cmp	r2, r1
 8019002:	d138      	bne.n	8019076 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8019004:	6861      	ldr	r1, [r4, #4]
 8019006:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801900a:	4299      	cmp	r1, r3
 801900c:	d133      	bne.n	8019076 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801900e:	6821      	ldr	r1, [r4, #0]
 8019010:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8019014:	4299      	cmp	r1, r3
 8019016:	d12e      	bne.n	8019076 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8019018:	9b03      	ldr	r3, [sp, #12]
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	0759      	lsls	r1, r3, #29
 801901e:	d424      	bmi.n	801906a <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8019020:	079e      	lsls	r6, r3, #30
 8019022:	d513      	bpl.n	801904c <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8019024:	f8db 1000 	ldr.w	r1, [fp]
 8019028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801902a:	1acb      	subs	r3, r1, r3
 801902c:	d413      	bmi.n	8019056 <tcp_input+0x366>
 801902e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8019030:	1b9b      	subs	r3, r3, r6
 8019032:	2b00      	cmp	r3, #0
 8019034:	dc0f      	bgt.n	8019056 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019036:	9b04      	ldr	r3, [sp, #16]
 8019038:	881c      	ldrh	r4, [r3, #0]
 801903a:	9001      	str	r0, [sp, #4]
 801903c:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801903e:	4b8a      	ldr	r3, [pc, #552]	; (8019268 <tcp_input+0x578>)
 8019040:	4421      	add	r1, r4
 8019042:	1d1a      	adds	r2, r3, #4
 8019044:	6838      	ldr	r0, [r7, #0]
 8019046:	f001 f93b 	bl	801a2c0 <tcp_rst>
 801904a:	e00e      	b.n	801906a <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 801904c:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 801904e:	bf42      	ittt	mi
 8019050:	4b86      	ldrmi	r3, [pc, #536]	; (801926c <tcp_input+0x57c>)
 8019052:	681b      	ldrmi	r3, [r3, #0]
 8019054:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8019056:	9b04      	ldr	r3, [sp, #16]
 8019058:	881b      	ldrh	r3, [r3, #0]
 801905a:	b133      	cbz	r3, 801906a <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 801905c:	7ea3      	ldrb	r3, [r4, #26]
 801905e:	f043 0302 	orr.w	r3, r3, #2
 8019062:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8019064:	4620      	mov	r0, r4
 8019066:	f000 ffad 	bl	8019fc4 <tcp_output>
  pbuf_free(p);
 801906a:	4628      	mov	r0, r5
}
 801906c:	b009      	add	sp, #36	; 0x24
 801906e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8019072:	f7fd be91 	b.w	8016d98 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019076:	68e4      	ldr	r4, [r4, #12]
 8019078:	2c00      	cmp	r4, #0
 801907a:	d1b1      	bne.n	8018fe0 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801907c:	4b7c      	ldr	r3, [pc, #496]	; (8019270 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 801907e:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019080:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8019082:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019086:	4689      	mov	r9, r1
 8019088:	f1b9 0f00 	cmp.w	r9, #0
 801908c:	d111      	bne.n	80190b2 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801908e:	8990      	ldrh	r0, [r2, #12]
 8019090:	f7fb ffbf 	bl	8015012 <lwip_htons>
 8019094:	0743      	lsls	r3, r0, #29
 8019096:	d4e8      	bmi.n	801906a <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019098:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801909a:	9a04      	ldr	r2, [sp, #16]
 801909c:	f8db 1000 	ldr.w	r1, [fp]
 80190a0:	8810      	ldrh	r0, [r2, #0]
 80190a2:	881a      	ldrh	r2, [r3, #0]
 80190a4:	9201      	str	r2, [sp, #4]
 80190a6:	885b      	ldrh	r3, [r3, #2]
 80190a8:	9300      	str	r3, [sp, #0]
 80190aa:	4b6f      	ldr	r3, [pc, #444]	; (8019268 <tcp_input+0x578>)
 80190ac:	4401      	add	r1, r0
 80190ae:	1d1a      	adds	r2, r3, #4
 80190b0:	e7c8      	b.n	8019044 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 80190b2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80190b6:	8853      	ldrh	r3, [r2, #2]
 80190b8:	4283      	cmp	r3, r0
 80190ba:	d107      	bne.n	80190cc <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80190bc:	f8d9 3000 	ldr.w	r3, [r9]
 80190c0:	4573      	cmp	r3, lr
 80190c2:	f000 82dd 	beq.w	8019680 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	f000 82da 	beq.w	8019680 <tcp_input+0x990>
 80190cc:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80190ce:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80190d2:	e7d9      	b.n	8019088 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 80190d4:	0798      	lsls	r0, r3, #30
 80190d6:	d5c8      	bpl.n	801906a <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 80190d8:	f899 0015 	ldrb.w	r0, [r9, #21]
 80190dc:	f7fe ffb8 	bl	8018050 <tcp_alloc>
    if (npcb == NULL) {
 80190e0:	4604      	mov	r4, r0
 80190e2:	b950      	cbnz	r0, 80190fa <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80190e4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d0be      	beq.n	801906a <tcp_input+0x37a>
 80190ec:	4601      	mov	r1, r0
 80190ee:	f04f 32ff 	mov.w	r2, #4294967295
 80190f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80190f6:	4798      	blx	r3
 80190f8:	e7b7      	b.n	801906a <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80190fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80190fe:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019100:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019102:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019106:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8019108:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 801910c:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 801910e:	7813      	ldrb	r3, [r2, #0]
 8019110:	7852      	ldrb	r2, [r2, #1]
 8019112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019116:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8019118:	2303      	movs	r3, #3
 801911a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 801911c:	f8db 3000 	ldr.w	r3, [fp]
 8019120:	3301      	adds	r3, #1
 8019122:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019124:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019126:	f7ff f81f 	bl	8018168 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801912a:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 801912e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019130:	3b01      	subs	r3, #1
 8019132:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8019134:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8019138:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 801913a:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 801913c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 801913e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8019140:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019144:	f899 3008 	ldrb.w	r3, [r9, #8]
 8019148:	f003 030c 	and.w	r3, r3, #12
 801914c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 801914e:	4b49      	ldr	r3, [pc, #292]	; (8019274 <tcp_input+0x584>)
 8019150:	681a      	ldr	r2, [r3, #0]
 8019152:	60e2      	str	r2, [r4, #12]
 8019154:	601c      	str	r4, [r3, #0]
 8019156:	f001 fa53 	bl	801a600 <tcp_timer_needed>
 801915a:	4b47      	ldr	r3, [pc, #284]	; (8019278 <tcp_input+0x588>)
 801915c:	2201      	movs	r2, #1
 801915e:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8019160:	9b06      	ldr	r3, [sp, #24]
 8019162:	881b      	ldrh	r3, [r3, #0]
 8019164:	b11b      	cbz	r3, 801916e <tcp_input+0x47e>
 8019166:	f104 0032 	add.w	r0, r4, #50	; 0x32
 801916a:	f7ff fd69 	bl	8018c40 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 801916e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019170:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8019172:	89db      	ldrh	r3, [r3, #14]
 8019174:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019178:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 801917a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801917e:	f7fe ffff 	bl	8018180 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019182:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019184:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019186:	4620      	mov	r0, r4
 8019188:	f000 fe2c 	bl	8019de4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801918c:	2800      	cmp	r0, #0
 801918e:	f43f af69 	beq.w	8019064 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8019192:	2100      	movs	r1, #0
 8019194:	4620      	mov	r0, r4
 8019196:	f7fe fe9d 	bl	8017ed4 <tcp_abandon>
 801919a:	e766      	b.n	801906a <tcp_input+0x37a>
  if (flags & TCP_RST) {
 801919c:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 801919e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 80191a0:	781b      	ldrb	r3, [r3, #0]
 80191a2:	0759      	lsls	r1, r3, #29
 80191a4:	d535      	bpl.n	8019212 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 80191a6:	7d21      	ldrb	r1, [r4, #20]
 80191a8:	2902      	cmp	r1, #2
 80191aa:	d122      	bne.n	80191f2 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 80191ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80191ae:	683b      	ldr	r3, [r7, #0]
 80191b0:	429a      	cmp	r2, r3
 80191b2:	d109      	bne.n	80191c8 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 80191b4:	f898 3000 	ldrb.w	r3, [r8]
 80191b8:	f043 0308 	orr.w	r3, r3, #8
 80191bc:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80191c0:	7ea3      	ldrb	r3, [r4, #26]
 80191c2:	f023 0301 	bic.w	r3, r3, #1
 80191c6:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80191c8:	f898 3000 	ldrb.w	r3, [r8]
 80191cc:	0719      	lsls	r1, r3, #28
 80191ce:	f140 81ed 	bpl.w	80195ac <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80191d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80191d6:	b11b      	cbz	r3, 80191e0 <tcp_input+0x4f0>
 80191d8:	f06f 010d 	mvn.w	r1, #13
 80191dc:	6920      	ldr	r0, [r4, #16]
 80191de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80191e0:	4621      	mov	r1, r4
 80191e2:	4824      	ldr	r0, [pc, #144]	; (8019274 <tcp_input+0x584>)
 80191e4:	f7fe fcb8 	bl	8017b58 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80191e8:	4621      	mov	r1, r4
 80191ea:	2001      	movs	r0, #1
 80191ec:	f7fd fc4e 	bl	8016a8c <memp_free>
 80191f0:	e6b0      	b.n	8018f54 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 80191f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80191f4:	f8db 3000 	ldr.w	r3, [fp]
 80191f8:	429a      	cmp	r2, r3
 80191fa:	f000 825a 	beq.w	80196b2 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80191fe:	1a9b      	subs	r3, r3, r2
 8019200:	d4e2      	bmi.n	80191c8 <tcp_input+0x4d8>
 8019202:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8019204:	1a9b      	subs	r3, r3, r2
 8019206:	2b00      	cmp	r3, #0
 8019208:	dcde      	bgt.n	80191c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 801920a:	7ea3      	ldrb	r3, [r4, #26]
 801920c:	f043 0302 	orr.w	r3, r3, #2
 8019210:	e7d9      	b.n	80191c6 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8019212:	f013 0102 	ands.w	r1, r3, #2
 8019216:	d003      	beq.n	8019220 <tcp_input+0x530>
 8019218:	7d22      	ldrb	r2, [r4, #20]
 801921a:	3a02      	subs	r2, #2
 801921c:	2a01      	cmp	r2, #1
 801921e:	d8f4      	bhi.n	801920a <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8019220:	7ea2      	ldrb	r2, [r4, #26]
 8019222:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8019224:	bf5e      	ittt	pl
 8019226:	4a11      	ldrpl	r2, [pc, #68]	; (801926c <tcp_input+0x57c>)
 8019228:	6812      	ldrpl	r2, [r2, #0]
 801922a:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 801922c:	2200      	movs	r2, #0
 801922e:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8019232:	9a06      	ldr	r2, [sp, #24]
 8019234:	8812      	ldrh	r2, [r2, #0]
 8019236:	b13a      	cbz	r2, 8019248 <tcp_input+0x558>
 8019238:	f104 0032 	add.w	r0, r4, #50	; 0x32
 801923c:	9107      	str	r1, [sp, #28]
 801923e:	9306      	str	r3, [sp, #24]
 8019240:	f7ff fcfe 	bl	8018c40 <tcp_parseopt.isra.1.part.2>
 8019244:	9907      	ldr	r1, [sp, #28]
 8019246:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8019248:	7d22      	ldrb	r2, [r4, #20]
 801924a:	3a02      	subs	r2, #2
 801924c:	2a07      	cmp	r2, #7
 801924e:	d8bb      	bhi.n	80191c8 <tcp_input+0x4d8>
 8019250:	e8df f012 	tbh	[pc, r2, lsl #1]
 8019254:	00940014 	.word	0x00940014
 8019258:	010000fc 	.word	0x010000fc
 801925c:	00fc014a 	.word	0x00fc014a
 8019260:	01830164 	.word	0x01830164
 8019264:	0801c6e3 	.word	0x0801c6e3
 8019268:	200044d0 	.word	0x200044d0
 801926c:	20008ae0 	.word	0x20008ae0
 8019270:	20008ae4 	.word	0x20008ae4
 8019274:	20008adc 	.word	0x20008adc
 8019278:	20008ad8 	.word	0x20008ad8
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801927c:	f003 0212 	and.w	r2, r3, #18
 8019280:	2a12      	cmp	r2, #18
 8019282:	d15e      	bne.n	8019342 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8019284:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8019286:	6839      	ldr	r1, [r7, #0]
 8019288:	3201      	adds	r2, #1
 801928a:	428a      	cmp	r2, r1
 801928c:	d159      	bne.n	8019342 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 801928e:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8019292:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8019294:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8019296:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8019298:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801929a:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801929c:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 801929e:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80192a0:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80192a2:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 80192a4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80192a8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 80192ac:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80192ae:	18e1      	adds	r1, r4, r3
 80192b0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80192b2:	f7fe ff65 	bl	8018180 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80192b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80192ba:	0043      	lsls	r3, r0, #1
 80192bc:	4293      	cmp	r3, r2
 80192be:	bf38      	it	cc
 80192c0:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80192c2:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80192c4:	0080      	lsls	r0, r0, #2
 80192c6:	4283      	cmp	r3, r0
 80192c8:	bf28      	it	cs
 80192ca:	4603      	movcs	r3, r0
 80192cc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80192d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80192d4:	b933      	cbnz	r3, 80192e4 <tcp_input+0x5f4>
 80192d6:	4bad      	ldr	r3, [pc, #692]	; (801958c <tcp_input+0x89c>)
 80192d8:	49ad      	ldr	r1, [pc, #692]	; (8019590 <tcp_input+0x8a0>)
 80192da:	48ae      	ldr	r0, [pc, #696]	; (8019594 <tcp_input+0x8a4>)
 80192dc:	f240 321a 	movw	r2, #794	; 0x31a
 80192e0:	f002 fda8 	bl	801be34 <iprintf>
      --pcb->snd_queuelen;
 80192e4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80192e8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80192ea:	3b01      	subs	r3, #1
 80192ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80192f0:	b9fe      	cbnz	r6, 8019332 <tcp_input+0x642>
        rseg = pcb->unsent;
 80192f2:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80192f4:	b936      	cbnz	r6, 8019304 <tcp_input+0x614>
 80192f6:	4ba5      	ldr	r3, [pc, #660]	; (801958c <tcp_input+0x89c>)
 80192f8:	49a7      	ldr	r1, [pc, #668]	; (8019598 <tcp_input+0x8a8>)
 80192fa:	48a6      	ldr	r0, [pc, #664]	; (8019594 <tcp_input+0x8a4>)
 80192fc:	f240 3222 	movw	r2, #802	; 0x322
 8019300:	f002 fd98 	bl	801be34 <iprintf>
        pcb->unsent = rseg->next;
 8019304:	6833      	ldr	r3, [r6, #0]
 8019306:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8019308:	4630      	mov	r0, r6
 801930a:	f7fe f98f 	bl	801762c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 801930e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019310:	b993      	cbnz	r3, 8019338 <tcp_input+0x648>
        pcb->rtime = -1;
 8019312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019316:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019318:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801931c:	2b00      	cmp	r3, #0
 801931e:	f43f af74 	beq.w	801920a <tcp_input+0x51a>
 8019322:	2200      	movs	r2, #0
 8019324:	4621      	mov	r1, r4
 8019326:	6920      	ldr	r0, [r4, #16]
 8019328:	4798      	blx	r3
      if (err == ERR_ABRT) {
 801932a:	300d      	adds	r0, #13
 801932c:	f47f af6d 	bne.w	801920a <tcp_input+0x51a>
 8019330:	e610      	b.n	8018f54 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8019332:	6833      	ldr	r3, [r6, #0]
 8019334:	66e3      	str	r3, [r4, #108]	; 0x6c
 8019336:	e7e7      	b.n	8019308 <tcp_input+0x618>
        pcb->rtime = 0;
 8019338:	2300      	movs	r3, #0
 801933a:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 801933c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019340:	e7ea      	b.n	8019318 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8019342:	06db      	lsls	r3, r3, #27
 8019344:	f57f af40 	bpl.w	80191c8 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019348:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801934a:	9a04      	ldr	r2, [sp, #16]
 801934c:	f8db 1000 	ldr.w	r1, [fp]
 8019350:	8810      	ldrh	r0, [r2, #0]
 8019352:	881a      	ldrh	r2, [r3, #0]
 8019354:	9201      	str	r2, [sp, #4]
 8019356:	885b      	ldrh	r3, [r3, #2]
 8019358:	9300      	str	r3, [sp, #0]
 801935a:	4b90      	ldr	r3, [pc, #576]	; (801959c <tcp_input+0x8ac>)
 801935c:	4401      	add	r1, r0
 801935e:	1d1a      	adds	r2, r3, #4
 8019360:	6838      	ldr	r0, [r7, #0]
 8019362:	f000 ffad 	bl	801a2c0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019366:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801936a:	2b05      	cmp	r3, #5
 801936c:	f63f af2c 	bhi.w	80191c8 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8019370:	2300      	movs	r3, #0
 8019372:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8019374:	4620      	mov	r0, r4
 8019376:	f000 fffb 	bl	801a370 <tcp_rexmit_rto>
 801937a:	e725      	b.n	80191c8 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 801937c:	06d8      	lsls	r0, r3, #27
 801937e:	d557      	bpl.n	8019430 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8019380:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019382:	6838      	ldr	r0, [r7, #0]
 8019384:	43db      	mvns	r3, r3
 8019386:	42c3      	cmn	r3, r0
 8019388:	d443      	bmi.n	8019412 <tcp_input+0x722>
 801938a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801938c:	1ac3      	subs	r3, r0, r3
 801938e:	2b00      	cmp	r3, #0
 8019390:	dc3f      	bgt.n	8019412 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8019392:	2304      	movs	r3, #4
 8019394:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8019396:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8019398:	b143      	cbz	r3, 80193ac <tcp_input+0x6bc>
 801939a:	699b      	ldr	r3, [r3, #24]
 801939c:	b933      	cbnz	r3, 80193ac <tcp_input+0x6bc>
 801939e:	4b7b      	ldr	r3, [pc, #492]	; (801958c <tcp_input+0x89c>)
 80193a0:	497f      	ldr	r1, [pc, #508]	; (80195a0 <tcp_input+0x8b0>)
 80193a2:	487c      	ldr	r0, [pc, #496]	; (8019594 <tcp_input+0x8a4>)
 80193a4:	f240 3251 	movw	r2, #849	; 0x351
 80193a8:	f002 fd44 	bl	801be34 <iprintf>
        if (pcb->listener == NULL) {
 80193ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80193ae:	b91b      	cbnz	r3, 80193b8 <tcp_input+0x6c8>
            tcp_abort(pcb);
 80193b0:	4620      	mov	r0, r4
 80193b2:	f7fe fe05 	bl	8017fc0 <tcp_abort>
            goto aborted;
 80193b6:	e5cd      	b.n	8018f54 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80193b8:	699b      	ldr	r3, [r3, #24]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d0f8      	beq.n	80193b0 <tcp_input+0x6c0>
 80193be:	2200      	movs	r2, #0
 80193c0:	4621      	mov	r1, r4
 80193c2:	6920      	ldr	r0, [r4, #16]
 80193c4:	4798      	blx	r3
        if (err != ERR_OK) {
 80193c6:	b110      	cbz	r0, 80193ce <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 80193c8:	300d      	adds	r0, #13
 80193ca:	d1f1      	bne.n	80193b0 <tcp_input+0x6c0>
 80193cc:	e5c2      	b.n	8018f54 <tcp_input+0x264>
        tcp_receive(pcb);
 80193ce:	4620      	mov	r0, r4
 80193d0:	f7fe ff4a 	bl	8018268 <tcp_receive>
        if (recv_acked != 0) {
 80193d4:	9b05      	ldr	r3, [sp, #20]
 80193d6:	881b      	ldrh	r3, [r3, #0]
 80193d8:	b113      	cbz	r3, 80193e0 <tcp_input+0x6f0>
          recv_acked--;
 80193da:	9a05      	ldr	r2, [sp, #20]
 80193dc:	3b01      	subs	r3, #1
 80193de:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80193e0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80193e2:	f241 111c 	movw	r1, #4380	; 0x111c
 80193e6:	0053      	lsls	r3, r2, #1
 80193e8:	428b      	cmp	r3, r1
 80193ea:	bf38      	it	cc
 80193ec:	460b      	movcc	r3, r1
 80193ee:	0092      	lsls	r2, r2, #2
 80193f0:	4293      	cmp	r3, r2
 80193f2:	bf28      	it	cs
 80193f4:	4613      	movcs	r3, r2
 80193f6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80193fa:	f898 3000 	ldrb.w	r3, [r8]
 80193fe:	069a      	lsls	r2, r3, #26
 8019400:	f57f aee2 	bpl.w	80191c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8019404:	7ea3      	ldrb	r3, [r4, #26]
 8019406:	f043 0302 	orr.w	r3, r3, #2
 801940a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 801940c:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 801940e:	7523      	strb	r3, [r4, #20]
 8019410:	e6da      	b.n	80191c8 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019412:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019414:	9a04      	ldr	r2, [sp, #16]
 8019416:	f8db 1000 	ldr.w	r1, [fp]
 801941a:	8816      	ldrh	r6, [r2, #0]
 801941c:	881a      	ldrh	r2, [r3, #0]
 801941e:	9201      	str	r2, [sp, #4]
 8019420:	885b      	ldrh	r3, [r3, #2]
 8019422:	9300      	str	r3, [sp, #0]
 8019424:	4b5d      	ldr	r3, [pc, #372]	; (801959c <tcp_input+0x8ac>)
 8019426:	4431      	add	r1, r6
 8019428:	1d1a      	adds	r2, r3, #4
 801942a:	f000 ff49 	bl	801a2c0 <tcp_rst>
 801942e:	e6cb      	b.n	80191c8 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019430:	2900      	cmp	r1, #0
 8019432:	f43f aec9 	beq.w	80191c8 <tcp_input+0x4d8>
 8019436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019438:	f8db 2000 	ldr.w	r2, [fp]
 801943c:	3b01      	subs	r3, #1
 801943e:	4293      	cmp	r3, r2
 8019440:	f47f aec2 	bne.w	80191c8 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8019444:	4620      	mov	r0, r4
 8019446:	f000 ffaf 	bl	801a3a8 <tcp_rexmit>
 801944a:	e6bd      	b.n	80191c8 <tcp_input+0x4d8>
    tcp_receive(pcb);
 801944c:	4620      	mov	r0, r4
 801944e:	f7fe ff0b 	bl	8018268 <tcp_receive>
 8019452:	e7d2      	b.n	80193fa <tcp_input+0x70a>
    tcp_receive(pcb);
 8019454:	4620      	mov	r0, r4
 8019456:	f7fe ff07 	bl	8018268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801945a:	f898 3000 	ldrb.w	r3, [r8]
 801945e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019462:	9b03      	ldr	r3, [sp, #12]
 8019464:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8019466:	d031      	beq.n	80194cc <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019468:	f013 0f10 	tst.w	r3, #16
 801946c:	7ea3      	ldrb	r3, [r4, #26]
 801946e:	d028      	beq.n	80194c2 <tcp_input+0x7d2>
 8019470:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8019472:	683a      	ldr	r2, [r7, #0]
 8019474:	4291      	cmp	r1, r2
 8019476:	d124      	bne.n	80194c2 <tcp_input+0x7d2>
 8019478:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801947a:	bb12      	cbnz	r2, 80194c2 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 801947c:	f043 0302 	orr.w	r3, r3, #2
 8019480:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8019482:	4620      	mov	r0, r4
 8019484:	f7fe f966 	bl	8017754 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019488:	f8d9 3000 	ldr.w	r3, [r9]
 801948c:	429c      	cmp	r4, r3
 801948e:	d10a      	bne.n	80194a6 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8019490:	68e3      	ldr	r3, [r4, #12]
 8019492:	f8c9 3000 	str.w	r3, [r9]
 8019496:	e008      	b.n	80194aa <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8019498:	68da      	ldr	r2, [r3, #12]
 801949a:	4294      	cmp	r4, r2
 801949c:	d102      	bne.n	80194a4 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 801949e:	68e2      	ldr	r2, [r4, #12]
 80194a0:	60da      	str	r2, [r3, #12]
 80194a2:	e002      	b.n	80194aa <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80194a4:	4613      	mov	r3, r2
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d1f6      	bne.n	8019498 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 80194aa:	4b3e      	ldr	r3, [pc, #248]	; (80195a4 <tcp_input+0x8b4>)
 80194ac:	2201      	movs	r2, #1
 80194ae:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80194b0:	230a      	movs	r3, #10
 80194b2:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80194b4:	4b3c      	ldr	r3, [pc, #240]	; (80195a8 <tcp_input+0x8b8>)
 80194b6:	681a      	ldr	r2, [r3, #0]
 80194b8:	60e2      	str	r2, [r4, #12]
 80194ba:	601c      	str	r4, [r3, #0]
 80194bc:	f001 f8a0 	bl	801a600 <tcp_timer_needed>
 80194c0:	e682      	b.n	80191c8 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 80194c2:	f043 0302 	orr.w	r3, r3, #2
 80194c6:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80194c8:	2308      	movs	r3, #8
 80194ca:	e7a0      	b.n	801940e <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80194cc:	06db      	lsls	r3, r3, #27
 80194ce:	f57f ae7b 	bpl.w	80191c8 <tcp_input+0x4d8>
 80194d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	429a      	cmp	r2, r3
 80194d8:	f47f ae76 	bne.w	80191c8 <tcp_input+0x4d8>
 80194dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80194de:	2b00      	cmp	r3, #0
 80194e0:	f47f ae72 	bne.w	80191c8 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 80194e4:	2306      	movs	r3, #6
 80194e6:	e792      	b.n	801940e <tcp_input+0x71e>
    tcp_receive(pcb);
 80194e8:	4620      	mov	r0, r4
 80194ea:	f7fe febd 	bl	8018268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80194ee:	f898 3000 	ldrb.w	r3, [r8]
 80194f2:	069f      	lsls	r7, r3, #26
 80194f4:	f57f ae68 	bpl.w	80191c8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80194f8:	7ea3      	ldrb	r3, [r4, #26]
 80194fa:	f043 0302 	orr.w	r3, r3, #2
 80194fe:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8019500:	4620      	mov	r0, r4
 8019502:	f7fe f927 	bl	8017754 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019506:	f8d9 3000 	ldr.w	r3, [r9]
 801950a:	429c      	cmp	r4, r3
 801950c:	d0c0      	beq.n	8019490 <tcp_input+0x7a0>
 801950e:	2b00      	cmp	r3, #0
 8019510:	d0cb      	beq.n	80194aa <tcp_input+0x7ba>
 8019512:	68da      	ldr	r2, [r3, #12]
 8019514:	4294      	cmp	r4, r2
 8019516:	d0c2      	beq.n	801949e <tcp_input+0x7ae>
 8019518:	4613      	mov	r3, r2
 801951a:	e7f8      	b.n	801950e <tcp_input+0x81e>
    tcp_receive(pcb);
 801951c:	4620      	mov	r0, r4
 801951e:	f7fe fea3 	bl	8018268 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019522:	9b03      	ldr	r3, [sp, #12]
 8019524:	781b      	ldrb	r3, [r3, #0]
 8019526:	06de      	lsls	r6, r3, #27
 8019528:	f57f ae4e 	bpl.w	80191c8 <tcp_input+0x4d8>
 801952c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801952e:	683b      	ldr	r3, [r7, #0]
 8019530:	429a      	cmp	r2, r3
 8019532:	f47f ae49 	bne.w	80191c8 <tcp_input+0x4d8>
 8019536:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019538:	2b00      	cmp	r3, #0
 801953a:	f47f ae45 	bne.w	80191c8 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 801953e:	4620      	mov	r0, r4
 8019540:	f7fe f908 	bl	8017754 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019544:	f8d9 3000 	ldr.w	r3, [r9]
 8019548:	429c      	cmp	r4, r3
 801954a:	d0a1      	beq.n	8019490 <tcp_input+0x7a0>
 801954c:	2b00      	cmp	r3, #0
 801954e:	d0ac      	beq.n	80194aa <tcp_input+0x7ba>
 8019550:	68da      	ldr	r2, [r3, #12]
 8019552:	4294      	cmp	r4, r2
 8019554:	d0a3      	beq.n	801949e <tcp_input+0x7ae>
 8019556:	4613      	mov	r3, r2
 8019558:	e7f8      	b.n	801954c <tcp_input+0x85c>
    tcp_receive(pcb);
 801955a:	4620      	mov	r0, r4
 801955c:	f7fe fe84 	bl	8018268 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019560:	9b03      	ldr	r3, [sp, #12]
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	06d8      	lsls	r0, r3, #27
 8019566:	f57f ae2f 	bpl.w	80191c8 <tcp_input+0x4d8>
 801956a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	429a      	cmp	r2, r3
 8019570:	f47f ae2a 	bne.w	80191c8 <tcp_input+0x4d8>
 8019574:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019576:	2b00      	cmp	r3, #0
 8019578:	f47f ae26 	bne.w	80191c8 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 801957c:	f898 3000 	ldrb.w	r3, [r8]
 8019580:	f043 0310 	orr.w	r3, r3, #16
 8019584:	f888 3000 	strb.w	r3, [r8]
 8019588:	e61e      	b.n	80191c8 <tcp_input+0x4d8>
 801958a:	bf00      	nop
 801958c:	080200b4 	.word	0x080200b4
 8019590:	08020053 	.word	0x08020053
 8019594:	0801c6e3 	.word	0x0801c6e3
 8019598:	08020069 	.word	0x08020069
 801959c:	200044d0 	.word	0x200044d0
 80195a0:	0802007c 	.word	0x0802007c
 80195a4:	20008ad8 	.word	0x20008ad8
 80195a8:	20008aec 	.word	0x20008aec
        if (recv_acked > 0) {
 80195ac:	9b05      	ldr	r3, [sp, #20]
 80195ae:	881a      	ldrh	r2, [r3, #0]
 80195b0:	b122      	cbz	r2, 80195bc <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80195b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80195b4:	b9eb      	cbnz	r3, 80195f2 <tcp_input+0x902>
          recv_acked = 0;
 80195b6:	9a05      	ldr	r2, [sp, #20]
 80195b8:	2300      	movs	r3, #0
 80195ba:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80195bc:	4620      	mov	r0, r4
 80195be:	f7ff fb77 	bl	8018cb0 <tcp_input_delayed_close>
 80195c2:	2800      	cmp	r0, #0
 80195c4:	f47f acc6 	bne.w	8018f54 <tcp_input+0x264>
        if (recv_data != NULL) {
 80195c8:	f8da 3000 	ldr.w	r3, [sl]
 80195cc:	b33b      	cbz	r3, 801961e <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80195ce:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80195d0:	b133      	cbz	r3, 80195e0 <tcp_input+0x8f0>
 80195d2:	4b40      	ldr	r3, [pc, #256]	; (80196d4 <tcp_input+0x9e4>)
 80195d4:	4940      	ldr	r1, [pc, #256]	; (80196d8 <tcp_input+0x9e8>)
 80195d6:	4841      	ldr	r0, [pc, #260]	; (80196dc <tcp_input+0x9ec>)
 80195d8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80195dc:	f002 fc2a 	bl	801be34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80195e0:	7ea3      	ldrb	r3, [r4, #26]
 80195e2:	f013 0310 	ands.w	r3, r3, #16
 80195e6:	d00a      	beq.n	80195fe <tcp_input+0x90e>
            pbuf_free(recv_data);
 80195e8:	f8da 0000 	ldr.w	r0, [sl]
 80195ec:	f7fd fbd4 	bl	8016d98 <pbuf_free>
 80195f0:	e6de      	b.n	80193b0 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80195f2:	4621      	mov	r1, r4
 80195f4:	6920      	ldr	r0, [r4, #16]
 80195f6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80195f8:	300d      	adds	r0, #13
 80195fa:	d1dc      	bne.n	80195b6 <tcp_input+0x8c6>
 80195fc:	e4aa      	b.n	8018f54 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80195fe:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8019602:	b31e      	cbz	r6, 801964c <tcp_input+0x95c>
 8019604:	f8da 2000 	ldr.w	r2, [sl]
 8019608:	6920      	ldr	r0, [r4, #16]
 801960a:	4621      	mov	r1, r4
 801960c:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801960e:	f110 0f0d 	cmn.w	r0, #13
 8019612:	f43f ac9f 	beq.w	8018f54 <tcp_input+0x264>
          if (err != ERR_OK) {
 8019616:	b110      	cbz	r0, 801961e <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8019618:	f8da 3000 	ldr.w	r3, [sl]
 801961c:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801961e:	f898 3000 	ldrb.w	r3, [r8]
 8019622:	069a      	lsls	r2, r3, #26
 8019624:	d505      	bpl.n	8019632 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8019626:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019628:	b1c3      	cbz	r3, 801965c <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801962a:	7b5a      	ldrb	r2, [r3, #13]
 801962c:	f042 0220 	orr.w	r2, r2, #32
 8019630:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8019632:	4b2b      	ldr	r3, [pc, #172]	; (80196e0 <tcp_input+0x9f0>)
 8019634:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8019636:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8019638:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801963a:	f7ff fb39 	bl	8018cb0 <tcp_input_delayed_close>
 801963e:	2800      	cmp	r0, #0
 8019640:	f47f ac88 	bne.w	8018f54 <tcp_input+0x264>
        tcp_output(pcb);
 8019644:	4620      	mov	r0, r4
 8019646:	f000 fcbd 	bl	8019fc4 <tcp_output>
 801964a:	e483      	b.n	8018f54 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801964c:	4633      	mov	r3, r6
 801964e:	f8da 2000 	ldr.w	r2, [sl]
 8019652:	4621      	mov	r1, r4
 8019654:	4630      	mov	r0, r6
 8019656:	f7fe fb7f 	bl	8017d58 <tcp_recv_null>
 801965a:	e7d8      	b.n	801960e <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801965c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801965e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
              pcb->rcv_wnd++;
 8019666:	bf1c      	itt	ne
 8019668:	3301      	addne	r3, #1
 801966a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801966c:	2e00      	cmp	r6, #0
 801966e:	d0e0      	beq.n	8019632 <tcp_input+0x942>
 8019670:	2300      	movs	r3, #0
 8019672:	461a      	mov	r2, r3
 8019674:	4621      	mov	r1, r4
 8019676:	6920      	ldr	r0, [r4, #16]
 8019678:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801967a:	300d      	adds	r0, #13
 801967c:	d1d9      	bne.n	8019632 <tcp_input+0x942>
 801967e:	e469      	b.n	8018f54 <tcp_input+0x264>
      if (prev != NULL) {
 8019680:	b13c      	cbz	r4, 8019692 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019682:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019686:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019688:	4b16      	ldr	r3, [pc, #88]	; (80196e4 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801968a:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801968e:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8019692:	9b03      	ldr	r3, [sp, #12]
 8019694:	781b      	ldrb	r3, [r3, #0]
 8019696:	0759      	lsls	r1, r3, #29
 8019698:	f53f ace7 	bmi.w	801906a <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 801969c:	06dc      	lsls	r4, r3, #27
 801969e:	f57f ad19 	bpl.w	80190d4 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80196a2:	9b04      	ldr	r3, [sp, #16]
 80196a4:	f8db 1000 	ldr.w	r1, [fp]
 80196a8:	881c      	ldrh	r4, [r3, #0]
 80196aa:	8813      	ldrh	r3, [r2, #0]
 80196ac:	e88d 0009 	stmia.w	sp, {r0, r3}
 80196b0:	e4c5      	b.n	801903e <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80196b2:	2900      	cmp	r1, #0
 80196b4:	f47f ad7e 	bne.w	80191b4 <tcp_input+0x4c4>
 80196b8:	4b06      	ldr	r3, [pc, #24]	; (80196d4 <tcp_input+0x9e4>)
 80196ba:	490b      	ldr	r1, [pc, #44]	; (80196e8 <tcp_input+0x9f8>)
 80196bc:	4807      	ldr	r0, [pc, #28]	; (80196dc <tcp_input+0x9ec>)
 80196be:	f240 22e7 	movw	r2, #743	; 0x2e7
 80196c2:	f002 fbb7 	bl	801be34 <iprintf>
 80196c6:	e575      	b.n	80191b4 <tcp_input+0x4c4>
      if (prev != NULL) {
 80196c8:	f1ba 0f00 	cmp.w	sl, #0
 80196cc:	f47f abff 	bne.w	8018ece <tcp_input+0x1de>
 80196d0:	e40e      	b.n	8018ef0 <tcp_input+0x200>
 80196d2:	bf00      	nop
 80196d4:	080200b4 	.word	0x080200b4
 80196d8:	0802009a 	.word	0x0802009a
 80196dc:	0801c6e3 	.word	0x0801c6e3
 80196e0:	20008af0 	.word	0x20008af0
 80196e4:	20008ae4 	.word	0x20008ae4
 80196e8:	08020033 	.word	0x08020033

080196ec <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80196ec:	4a02      	ldr	r2, [pc, #8]	; (80196f8 <tcp_trigger_input_pcb_close+0xc>)
 80196ee:	7813      	ldrb	r3, [r2, #0]
 80196f0:	f043 0310 	orr.w	r3, r3, #16
 80196f4:	7013      	strb	r3, [r2, #0]
 80196f6:	4770      	bx	lr
 80196f8:	200040e0 	.word	0x200040e0

080196fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80196fc:	b570      	push	{r4, r5, r6, lr}
 80196fe:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019700:	4294      	cmp	r4, r2
{
 8019702:	461e      	mov	r6, r3
 8019704:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8019708:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 801970a:	d228      	bcs.n	801975e <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801970c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019710:	07ad      	lsls	r5, r5, #30
 8019712:	d407      	bmi.n	8019724 <tcp_pbuf_prealloc+0x28>
 8019714:	7e9d      	ldrb	r5, [r3, #26]
 8019716:	066d      	lsls	r5, r5, #25
 8019718:	d421      	bmi.n	801975e <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 801971a:	b119      	cbz	r1, 8019724 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 801971c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 801971e:	b909      	cbnz	r1, 8019724 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8019720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019722:	b1e3      	cbz	r3, 801975e <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019724:	f204 23d3 	addw	r3, r4, #723	; 0x2d3
 8019728:	f023 0103 	bic.w	r1, r3, #3
 801972c:	428a      	cmp	r2, r1
 801972e:	bf28      	it	cs
 8019730:	460a      	movcs	r2, r1
 8019732:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019734:	2200      	movs	r2, #0
 8019736:	f7fd fb99 	bl	8016e6c <pbuf_alloc>
  if (p == NULL) {
 801973a:	4605      	mov	r5, r0
 801973c:	b168      	cbz	r0, 801975a <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801973e:	6803      	ldr	r3, [r0, #0]
 8019740:	b133      	cbz	r3, 8019750 <tcp_pbuf_prealloc+0x54>
 8019742:	4b08      	ldr	r3, [pc, #32]	; (8019764 <tcp_pbuf_prealloc+0x68>)
 8019744:	4908      	ldr	r1, [pc, #32]	; (8019768 <tcp_pbuf_prealloc+0x6c>)
 8019746:	4809      	ldr	r0, [pc, #36]	; (801976c <tcp_pbuf_prealloc+0x70>)
 8019748:	f44f 7288 	mov.w	r2, #272	; 0x110
 801974c:	f002 fb72 	bl	801be34 <iprintf>
  *oversize = p->len - length;
 8019750:	896b      	ldrh	r3, [r5, #10]
 8019752:	1b1b      	subs	r3, r3, r4
 8019754:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019756:	812c      	strh	r4, [r5, #8]
 8019758:	816c      	strh	r4, [r5, #10]
  return p;
}
 801975a:	4628      	mov	r0, r5
 801975c:	bd70      	pop	{r4, r5, r6, pc}
 801975e:	4621      	mov	r1, r4
 8019760:	e7e8      	b.n	8019734 <tcp_pbuf_prealloc+0x38>
 8019762:	bf00      	nop
 8019764:	080203b7 	.word	0x080203b7
 8019768:	080203ea 	.word	0x080203ea
 801976c:	0801c6e3 	.word	0x0801c6e3

08019770 <tcp_create_segment>:
{
 8019770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019774:	f89d a020 	ldrb.w	sl, [sp, #32]
 8019778:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801977a:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801977e:	f04f 0003 	mov.w	r0, #3
{
 8019782:	460f      	mov	r7, r1
 8019784:	4616      	mov	r6, r2
 8019786:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019788:	bf14      	ite	ne
 801978a:	2504      	movne	r5, #4
 801978c:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801978e:	f7fd f961 	bl	8016a54 <memp_malloc>
 8019792:	4604      	mov	r4, r0
 8019794:	b928      	cbnz	r0, 80197a2 <tcp_create_segment+0x32>
    pbuf_free(p);
 8019796:	4638      	mov	r0, r7
 8019798:	f7fd fafe 	bl	8016d98 <pbuf_free>
}
 801979c:	4620      	mov	r0, r4
 801979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 80197a2:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 80197a6:	2300      	movs	r3, #0
  seg->p = p;
 80197a8:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80197ac:	893b      	ldrh	r3, [r7, #8]
 80197ae:	fa1f fa85 	uxth.w	sl, r5
 80197b2:	4553      	cmp	r3, sl
 80197b4:	d205      	bcs.n	80197c2 <tcp_create_segment+0x52>
 80197b6:	4b1f      	ldr	r3, [pc, #124]	; (8019834 <tcp_create_segment+0xc4>)
 80197b8:	491f      	ldr	r1, [pc, #124]	; (8019838 <tcp_create_segment+0xc8>)
 80197ba:	4820      	ldr	r0, [pc, #128]	; (801983c <tcp_create_segment+0xcc>)
 80197bc:	22ba      	movs	r2, #186	; 0xba
 80197be:	f002 fb39 	bl	801be34 <iprintf>
  seg->len = p->tot_len - optlen;
 80197c2:	893b      	ldrh	r3, [r7, #8]
 80197c4:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 80197c8:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 80197ca:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80197cc:	2114      	movs	r1, #20
 80197ce:	f7fd fadd 	bl	8016d8c <pbuf_header>
 80197d2:	4607      	mov	r7, r0
 80197d4:	b120      	cbz	r0, 80197e0 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 80197d6:	4620      	mov	r0, r4
 80197d8:	f7fd ff28 	bl	801762c <tcp_seg_free>
    return NULL;
 80197dc:	2400      	movs	r4, #0
 80197de:	e7dd      	b.n	801979c <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80197e0:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80197e2:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80197e6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80197ea:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80197ee:	f7fb fc10 	bl	8015012 <lwip_htons>
 80197f2:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80197f6:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80197fa:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80197fe:	f7fb fc08 	bl	8015012 <lwip_htons>
 8019802:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019806:	4648      	mov	r0, r9
 8019808:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801980c:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801980e:	f7fb fc03 	bl	8015018 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8019812:	3505      	adds	r5, #5
 8019814:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019818:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801981c:	b2a8      	uxth	r0, r5
 801981e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8019822:	f7fb fbf6 	bl	8015012 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8019826:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8019828:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 801982c:	749f      	strb	r7, [r3, #18]
 801982e:	74df      	strb	r7, [r3, #19]
  return seg;
 8019830:	e7b4      	b.n	801979c <tcp_create_segment+0x2c>
 8019832:	bf00      	nop
 8019834:	080203b7 	.word	0x080203b7
 8019838:	0802023f 	.word	0x0802023f
 801983c:	0801c6e3 	.word	0x0801c6e3

08019840 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019840:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8019842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019844:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8019846:	4605      	mov	r5, r0
 8019848:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801984a:	2001      	movs	r0, #1
 801984c:	2200      	movs	r2, #0
 801984e:	f7fd fb0d 	bl	8016e6c <pbuf_alloc>
  if (p != NULL) {
 8019852:	4606      	mov	r6, r0
 8019854:	b340      	cbz	r0, 80198a8 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019856:	8943      	ldrh	r3, [r0, #10]
 8019858:	2b13      	cmp	r3, #19
 801985a:	dc05      	bgt.n	8019868 <tcp_output_alloc_header.constprop.0+0x28>
 801985c:	4b13      	ldr	r3, [pc, #76]	; (80198ac <tcp_output_alloc_header.constprop.0+0x6c>)
 801985e:	4914      	ldr	r1, [pc, #80]	; (80198b0 <tcp_output_alloc_header.constprop.0+0x70>)
 8019860:	4814      	ldr	r0, [pc, #80]	; (80198b4 <tcp_output_alloc_header.constprop.0+0x74>)
 8019862:	2273      	movs	r2, #115	; 0x73
 8019864:	f002 fae6 	bl	801be34 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8019868:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 801986a:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 801986c:	f7fb fbd1 	bl	8015012 <lwip_htons>
 8019870:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8019872:	8b28      	ldrh	r0, [r5, #24]
 8019874:	f7fb fbcd 	bl	8015012 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8019878:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801987a:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801987c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801987e:	f7fb fbcb 	bl	8015018 <lwip_htonl>
 8019882:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8019884:	f245 0010 	movw	r0, #20496	; 0x5010
 8019888:	f7fb fbc3 	bl	8015012 <lwip_htons>
 801988c:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801988e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8019890:	f7fb fbbf 	bl	8015012 <lwip_htons>
    tcphdr->chksum = 0;
 8019894:	2300      	movs	r3, #0
 8019896:	7423      	strb	r3, [r4, #16]
 8019898:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801989a:	74a3      	strb	r3, [r4, #18]
 801989c:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801989e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 80198a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80198a2:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80198a4:	4413      	add	r3, r2
 80198a6:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80198a8:	4630      	mov	r0, r6
 80198aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198ac:	080203b7 	.word	0x080203b7
 80198b0:	08020389 	.word	0x08020389
 80198b4:	0801c6e3 	.word	0x0801c6e3

080198b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80198b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198bc:	b091      	sub	sp, #68	; 0x44
 80198be:	4605      	mov	r5, r0
 80198c0:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80198c2:	2300      	movs	r3, #0
 80198c4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80198c8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 80198cc:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80198ce:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80198d0:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80198d2:	085b      	lsrs	r3, r3, #1
 80198d4:	4293      	cmp	r3, r2
 80198d6:	bf28      	it	cs
 80198d8:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80198da:	2b00      	cmp	r3, #0
 80198dc:	bf08      	it	eq
 80198de:	4613      	moveq	r3, r2
 80198e0:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80198e2:	b959      	cbnz	r1, 80198fc <tcp_write+0x44>
 80198e4:	4ba1      	ldr	r3, [pc, #644]	; (8019b6c <tcp_write+0x2b4>)
 80198e6:	49a2      	ldr	r1, [pc, #648]	; (8019b70 <tcp_write+0x2b8>)
 80198e8:	48a2      	ldr	r0, [pc, #648]	; (8019b74 <tcp_write+0x2bc>)
 80198ea:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80198ee:	f002 faa1 	bl	801be34 <iprintf>
 80198f2:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80198f6:	b011      	add	sp, #68	; 0x44
 80198f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80198fc:	7d2b      	ldrb	r3, [r5, #20]
 80198fe:	2b07      	cmp	r3, #7
 8019900:	d003      	beq.n	801990a <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 8019902:	3b02      	subs	r3, #2
 8019904:	2b02      	cmp	r3, #2
 8019906:	f200 8254 	bhi.w	8019db2 <tcp_write+0x4fa>
  } else if (len == 0) {
 801990a:	9b05      	ldr	r3, [sp, #20]
 801990c:	b1db      	cbz	r3, 8019946 <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 801990e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8019912:	9a05      	ldr	r2, [sp, #20]
 8019914:	4293      	cmp	r3, r2
 8019916:	d206      	bcs.n	8019926 <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 8019918:	7eab      	ldrb	r3, [r5, #26]
 801991a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801991e:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 8019920:	f04f 30ff 	mov.w	r0, #4294967295
 8019924:	e7e7      	b.n	80198f6 <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8019926:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 801992a:	2a0a      	cmp	r2, #10
 801992c:	d8f4      	bhi.n	8019918 <tcp_write+0x60>
 801992e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8019930:	b30a      	cbz	r2, 8019976 <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019932:	b943      	cbnz	r3, 8019946 <tcp_write+0x8e>
 8019934:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8019936:	b933      	cbnz	r3, 8019946 <tcp_write+0x8e>
 8019938:	4b8c      	ldr	r3, [pc, #560]	; (8019b6c <tcp_write+0x2b4>)
 801993a:	498f      	ldr	r1, [pc, #572]	; (8019b78 <tcp_write+0x2c0>)
 801993c:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019940:	488c      	ldr	r0, [pc, #560]	; (8019b74 <tcp_write+0x2bc>)
 8019942:	f002 fa77 	bl	801be34 <iprintf>
  if (pcb->unsent != NULL) {
 8019946:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8019948:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 801994c:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 801994e:	b9dc      	cbnz	r4, 8019988 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019950:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 8019954:	f1b8 0f00 	cmp.w	r8, #0
 8019958:	f000 8103 	beq.w	8019b62 <tcp_write+0x2aa>
 801995c:	4b83      	ldr	r3, [pc, #524]	; (8019b6c <tcp_write+0x2b4>)
 801995e:	4987      	ldr	r1, [pc, #540]	; (8019b7c <tcp_write+0x2c4>)
 8019960:	4884      	ldr	r0, [pc, #528]	; (8019b74 <tcp_write+0x2bc>)
 8019962:	f240 2225 	movw	r2, #549	; 0x225
 8019966:	f002 fa65 	bl	801be34 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801996a:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 801996c:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 801996e:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8019970:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 8019972:	46a1      	mov	r9, r4
 8019974:	e094      	b.n	8019aa0 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019976:	b913      	cbnz	r3, 801997e <tcp_write+0xc6>
 8019978:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801997a:	2b00      	cmp	r3, #0
 801997c:	d0e3      	beq.n	8019946 <tcp_write+0x8e>
 801997e:	4b7b      	ldr	r3, [pc, #492]	; (8019b6c <tcp_write+0x2b4>)
 8019980:	497f      	ldr	r1, [pc, #508]	; (8019b80 <tcp_write+0x2c8>)
 8019982:	f240 1259 	movw	r2, #345	; 0x159
 8019986:	e7db      	b.n	8019940 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8019988:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801998a:	f8d7 b000 	ldr.w	fp, [r7]
 801998e:	f1bb 0f00 	cmp.w	fp, #0
 8019992:	f040 80b6 	bne.w	8019b02 <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8019996:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019998:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801999a:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801999e:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80199a0:	bf14      	ite	ne
 80199a2:	2404      	movne	r4, #4
 80199a4:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80199a6:	4423      	add	r3, r4
 80199a8:	429a      	cmp	r2, r3
 80199aa:	da06      	bge.n	80199ba <tcp_write+0x102>
 80199ac:	4b6f      	ldr	r3, [pc, #444]	; (8019b6c <tcp_write+0x2b4>)
 80199ae:	4975      	ldr	r1, [pc, #468]	; (8019b84 <tcp_write+0x2cc>)
 80199b0:	4870      	ldr	r0, [pc, #448]	; (8019b74 <tcp_write+0x2bc>)
 80199b2:	f240 12c7 	movw	r2, #455	; 0x1c7
 80199b6:	f002 fa3d 	bl	801be34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80199ba:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 80199be:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 80199c0:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 80199c4:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 80199c8:	eba3 0909 	sub.w	r9, r3, r9
 80199cc:	eba9 0904 	sub.w	r9, r9, r4
 80199d0:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 80199d4:	2e00      	cmp	r6, #0
 80199d6:	f000 8096 	beq.w	8019b06 <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80199da:	45b1      	cmp	r9, r6
 80199dc:	d206      	bcs.n	80199ec <tcp_write+0x134>
 80199de:	4b63      	ldr	r3, [pc, #396]	; (8019b6c <tcp_write+0x2b4>)
 80199e0:	4969      	ldr	r1, [pc, #420]	; (8019b88 <tcp_write+0x2d0>)
 80199e2:	4864      	ldr	r0, [pc, #400]	; (8019b74 <tcp_write+0x2bc>)
 80199e4:	f240 12d9 	movw	r2, #473	; 0x1d9
 80199e8:	f002 fa24 	bl	801be34 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80199ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80199f0:	9a05      	ldr	r2, [sp, #20]
 80199f2:	429a      	cmp	r2, r3
 80199f4:	bf28      	it	cs
 80199f6:	461a      	movcs	r2, r3
 80199f8:	454a      	cmp	r2, r9
 80199fa:	4616      	mov	r6, r2
 80199fc:	bfa8      	it	ge
 80199fe:	464e      	movge	r6, r9
      oversize -= oversize_used;
 8019a00:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 8019a02:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8019a06:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8019a0a:	fa1f f989 	uxth.w	r9, r9
 8019a0e:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019a10:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019a14:	b153      	cbz	r3, 8019a2c <tcp_write+0x174>
 8019a16:	9b05      	ldr	r3, [sp, #20]
 8019a18:	429e      	cmp	r6, r3
 8019a1a:	f000 81cd 	beq.w	8019db8 <tcp_write+0x500>
 8019a1e:	4b53      	ldr	r3, [pc, #332]	; (8019b6c <tcp_write+0x2b4>)
 8019a20:	495a      	ldr	r1, [pc, #360]	; (8019b8c <tcp_write+0x2d4>)
 8019a22:	4854      	ldr	r0, [pc, #336]	; (8019b74 <tcp_write+0x2bc>)
 8019a24:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019a28:	f002 fa04 	bl	801be34 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019a2c:	9b05      	ldr	r3, [sp, #20]
 8019a2e:	429e      	cmp	r6, r3
 8019a30:	f080 81c2 	bcs.w	8019db8 <tcp_write+0x500>
 8019a34:	f1b9 0f00 	cmp.w	r9, #0
 8019a38:	f000 808f 	beq.w	8019b5a <tcp_write+0x2a2>
 8019a3c:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8019a40:	f1ba 0f00 	cmp.w	sl, #0
 8019a44:	f000 808a 	beq.w	8019b5c <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019a48:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019a4c:	454c      	cmp	r4, r9
 8019a4e:	bfa8      	it	ge
 8019a50:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a52:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019a54:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a58:	d557      	bpl.n	8019b0a <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	9302      	str	r3, [sp, #8]
 8019a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a60:	9301      	str	r3, [sp, #4]
 8019a62:	464a      	mov	r2, r9
 8019a64:	9500      	str	r5, [sp, #0]
 8019a66:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8019a6a:	4641      	mov	r1, r8
 8019a6c:	2004      	movs	r0, #4
 8019a6e:	f7ff fe45 	bl	80196fc <tcp_pbuf_prealloc>
 8019a72:	4681      	mov	r9, r0
 8019a74:	2800      	cmp	r0, #0
 8019a76:	f000 8199 	beq.w	8019dac <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019a7a:	9b08      	ldr	r3, [sp, #32]
 8019a7c:	6840      	ldr	r0, [r0, #4]
 8019a7e:	4642      	mov	r2, r8
 8019a80:	1999      	adds	r1, r3, r6
 8019a82:	f002 fcd2 	bl	801c42a <memcpy>
        queuelen += pbuf_clen(concat_p);
 8019a86:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8019a88:	f7fd fb3c 	bl	8017104 <pbuf_clen>
 8019a8c:	9b06      	ldr	r3, [sp, #24]
 8019a8e:	4403      	add	r3, r0
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8019a94:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8019a98:	44b0      	add	r8, r6
 8019a9a:	fa1f f888 	uxth.w	r8, r8
 8019a9e:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019aa2:	f04f 0b00 	mov.w	fp, #0
 8019aa6:	f003 0301 	and.w	r3, r3, #1
 8019aaa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8019aae:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8019ab0:	9b05      	ldr	r3, [sp, #20]
 8019ab2:	4598      	cmp	r8, r3
 8019ab4:	d370      	bcc.n	8019b98 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 8019ab6:	b146      	cbz	r6, 8019aca <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 8019ab8:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8019abc:	f1b8 0f00 	cmp.w	r8, #0
 8019ac0:	f040 8110 	bne.w	8019ce4 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 8019ac4:	893b      	ldrh	r3, [r7, #8]
 8019ac6:	441e      	add	r6, r3
 8019ac8:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8019aca:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019ace:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 8019ad2:	f1b9 0f00 	cmp.w	r9, #0
 8019ad6:	f000 811e 	beq.w	8019d16 <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019ada:	b937      	cbnz	r7, 8019aea <tcp_write+0x232>
 8019adc:	4b23      	ldr	r3, [pc, #140]	; (8019b6c <tcp_write+0x2b4>)
 8019ade:	492c      	ldr	r1, [pc, #176]	; (8019b90 <tcp_write+0x2d8>)
 8019ae0:	4824      	ldr	r0, [pc, #144]	; (8019b74 <tcp_write+0x2bc>)
 8019ae2:	f240 22bb 	movw	r2, #699	; 0x2bb
 8019ae6:	f002 f9a5 	bl	801be34 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8019aea:	4649      	mov	r1, r9
 8019aec:	6878      	ldr	r0, [r7, #4]
 8019aee:	f7fd fb2d 	bl	801714c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019af2:	893b      	ldrh	r3, [r7, #8]
 8019af4:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8019af8:	4413      	add	r3, r2
 8019afa:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8019afc:	f8c7 b000 	str.w	fp, [r7]
 8019b00:	e12b      	b.n	8019d5a <tcp_write+0x4a2>
 8019b02:	465f      	mov	r7, fp
 8019b04:	e741      	b.n	801998a <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019b06:	4634      	mov	r4, r6
 8019b08:	e782      	b.n	8019a10 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	f8d3 9000 	ldr.w	r9, [r3]
 8019b10:	f1b9 0f00 	cmp.w	r9, #0
 8019b14:	d112      	bne.n	8019b3c <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019b16:	7b1a      	ldrb	r2, [r3, #12]
 8019b18:	2a01      	cmp	r2, #1
 8019b1a:	d111      	bne.n	8019b40 <tcp_write+0x288>
 8019b1c:	895a      	ldrh	r2, [r3, #10]
 8019b1e:	685b      	ldr	r3, [r3, #4]
 8019b20:	4413      	add	r3, r2
 8019b22:	9a08      	ldr	r2, [sp, #32]
 8019b24:	429a      	cmp	r2, r3
 8019b26:	d10b      	bne.n	8019b40 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019b28:	b136      	cbz	r6, 8019b38 <tcp_write+0x280>
 8019b2a:	4b10      	ldr	r3, [pc, #64]	; (8019b6c <tcp_write+0x2b4>)
 8019b2c:	4919      	ldr	r1, [pc, #100]	; (8019b94 <tcp_write+0x2dc>)
 8019b2e:	4811      	ldr	r0, [pc, #68]	; (8019b74 <tcp_write+0x2bc>)
 8019b30:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8019b34:	f002 f97e 	bl	801be34 <iprintf>
          extendlen = seglen;
 8019b38:	46c2      	mov	sl, r8
 8019b3a:	e7ad      	b.n	8019a98 <tcp_write+0x1e0>
 8019b3c:	464b      	mov	r3, r9
 8019b3e:	e7e5      	b.n	8019b0c <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019b40:	2201      	movs	r2, #1
 8019b42:	4641      	mov	r1, r8
 8019b44:	2004      	movs	r0, #4
 8019b46:	f7fd f991 	bl	8016e6c <pbuf_alloc>
 8019b4a:	4681      	mov	r9, r0
 8019b4c:	2800      	cmp	r0, #0
 8019b4e:	f000 812d 	beq.w	8019dac <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8019b52:	9b08      	ldr	r3, [sp, #32]
 8019b54:	4433      	add	r3, r6
 8019b56:	6043      	str	r3, [r0, #4]
 8019b58:	e796      	b.n	8019a88 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8019b5a:	46ca      	mov	sl, r9
 8019b5c:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8019b5e:	46d1      	mov	r9, sl
 8019b60:	e79e      	b.n	8019aa0 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 8019b62:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8019b64:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019b66:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8019b68:	46c1      	mov	r9, r8
 8019b6a:	e799      	b.n	8019aa0 <tcp_write+0x1e8>
 8019b6c:	080203b7 	.word	0x080203b7
 8019b70:	080203fe 	.word	0x080203fe
 8019b74:	0801c6e3 	.word	0x0801c6e3
 8019b78:	0802042f 	.word	0x0802042f
 8019b7c:	08020519 	.word	0x08020519
 8019b80:	08020469 	.word	0x08020469
 8019b84:	0802049b 	.word	0x0802049b
 8019b88:	080204b2 	.word	0x080204b2
 8019b8c:	080204d2 	.word	0x080204d2
 8019b90:	080205a5 	.word	0x080205a5
 8019b94:	080204f0 	.word	0x080204f0
    u16_t left = len - pos;
 8019b98:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019b9a:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8019b9c:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8019ba0:	b29b      	uxth	r3, r3
 8019ba2:	4293      	cmp	r3, r2
 8019ba4:	bf28      	it	cs
 8019ba6:	4613      	movcs	r3, r2
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bae:	b363      	cbz	r3, 8019c0a <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019bb0:	fabb f38b 	clz	r3, fp
 8019bb4:	095b      	lsrs	r3, r3, #5
 8019bb6:	9302      	str	r3, [sp, #8]
 8019bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bba:	9301      	str	r3, [sp, #4]
 8019bbc:	9500      	str	r5, [sp, #0]
 8019bbe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8019bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019bc4:	2000      	movs	r0, #0
 8019bc6:	f7ff fd99 	bl	80196fc <tcp_pbuf_prealloc>
 8019bca:	4604      	mov	r4, r0
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	d03b      	beq.n	8019c48 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019bd0:	8943      	ldrh	r3, [r0, #10]
 8019bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bd4:	4293      	cmp	r3, r2
 8019bd6:	d206      	bcs.n	8019be6 <tcp_write+0x32e>
 8019bd8:	4b7b      	ldr	r3, [pc, #492]	; (8019dc8 <tcp_write+0x510>)
 8019bda:	497c      	ldr	r1, [pc, #496]	; (8019dcc <tcp_write+0x514>)
 8019bdc:	487c      	ldr	r0, [pc, #496]	; (8019dd0 <tcp_write+0x518>)
 8019bde:	f240 2241 	movw	r2, #577	; 0x241
 8019be2:	f002 f927 	bl	801be34 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8019be6:	9b08      	ldr	r3, [sp, #32]
 8019be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bea:	6860      	ldr	r0, [r4, #4]
 8019bec:	eb03 0108 	add.w	r1, r3, r8
 8019bf0:	f002 fc1b 	bl	801c42a <memcpy>
    queuelen += pbuf_clen(p);
 8019bf4:	4620      	mov	r0, r4
 8019bf6:	f7fd fa85 	bl	8017104 <pbuf_clen>
 8019bfa:	9b06      	ldr	r3, [sp, #24]
 8019bfc:	4403      	add	r3, r0
 8019bfe:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8019c00:	2b0b      	cmp	r3, #11
    queuelen += pbuf_clen(p);
 8019c02:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8019c04:	d949      	bls.n	8019c9a <tcp_write+0x3e2>
      pbuf_free(p);
 8019c06:	4620      	mov	r0, r4
 8019c08:	e01c      	b.n	8019c44 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019c0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019c0e:	b133      	cbz	r3, 8019c1e <tcp_write+0x366>
 8019c10:	4b6d      	ldr	r3, [pc, #436]	; (8019dc8 <tcp_write+0x510>)
 8019c12:	4970      	ldr	r1, [pc, #448]	; (8019dd4 <tcp_write+0x51c>)
 8019c14:	486e      	ldr	r0, [pc, #440]	; (8019dd0 <tcp_write+0x518>)
 8019c16:	f240 224b 	movw	r2, #587	; 0x24b
 8019c1a:	f002 f90b 	bl	801be34 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019c1e:	2201      	movs	r2, #1
 8019c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c22:	2000      	movs	r0, #0
 8019c24:	f7fd f922 	bl	8016e6c <pbuf_alloc>
 8019c28:	b170      	cbz	r0, 8019c48 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8019c2a:	9a08      	ldr	r2, [sp, #32]
 8019c2c:	900d      	str	r0, [sp, #52]	; 0x34
 8019c2e:	4442      	add	r2, r8
 8019c30:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019c32:	2200      	movs	r2, #0
 8019c34:	4611      	mov	r1, r2
 8019c36:	4610      	mov	r0, r2
 8019c38:	f7fd f918 	bl	8016e6c <pbuf_alloc>
 8019c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c3e:	4604      	mov	r4, r0
 8019c40:	bb38      	cbnz	r0, 8019c92 <tcp_write+0x3da>
        pbuf_free(p2);
 8019c42:	4618      	mov	r0, r3
      pbuf_free(p);
 8019c44:	f7fd f8a8 	bl	8016d98 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8019c48:	7eab      	ldrb	r3, [r5, #26]
 8019c4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019c4e:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8019c50:	f1b9 0f00 	cmp.w	r9, #0
 8019c54:	d002      	beq.n	8019c5c <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8019c56:	4648      	mov	r0, r9
 8019c58:	f7fd f89e 	bl	8016d98 <pbuf_free>
  if (queue != NULL) {
 8019c5c:	f1bb 0f00 	cmp.w	fp, #0
 8019c60:	d002      	beq.n	8019c68 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8019c62:	4658      	mov	r0, fp
 8019c64:	f7fd fcf0 	bl	8017648 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8019c68:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	f43f ae57 	beq.w	8019920 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019c72:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	f47f ae53 	bne.w	8019920 <tcp_write+0x68>
 8019c7a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	f47f ae4f 	bne.w	8019920 <tcp_write+0x68>
 8019c82:	4b51      	ldr	r3, [pc, #324]	; (8019dc8 <tcp_write+0x510>)
 8019c84:	4954      	ldr	r1, [pc, #336]	; (8019dd8 <tcp_write+0x520>)
 8019c86:	4852      	ldr	r0, [pc, #328]	; (8019dd0 <tcp_write+0x518>)
 8019c88:	f240 3202 	movw	r2, #770	; 0x302
 8019c8c:	f002 f8d2 	bl	801be34 <iprintf>
 8019c90:	e646      	b.n	8019920 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8019c92:	4619      	mov	r1, r3
 8019c94:	f7fd fa5a 	bl	801714c <pbuf_cat>
 8019c98:	e7ac      	b.n	8019bf4 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019c9a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	4621      	mov	r1, r4
 8019ca0:	9200      	str	r2, [sp, #0]
 8019ca2:	4443      	add	r3, r8
 8019ca4:	4628      	mov	r0, r5
 8019ca6:	f7ff fd63 	bl	8019770 <tcp_create_segment>
 8019caa:	4604      	mov	r4, r0
 8019cac:	2800      	cmp	r0, #0
 8019cae:	d0cb      	beq.n	8019c48 <tcp_write+0x390>
    if (queue == NULL) {
 8019cb0:	f1bb 0f00 	cmp.w	fp, #0
 8019cb4:	d010      	beq.n	8019cd8 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cb8:	b933      	cbnz	r3, 8019cc8 <tcp_write+0x410>
 8019cba:	4b43      	ldr	r3, [pc, #268]	; (8019dc8 <tcp_write+0x510>)
 8019cbc:	4947      	ldr	r1, [pc, #284]	; (8019ddc <tcp_write+0x524>)
 8019cbe:	4844      	ldr	r0, [pc, #272]	; (8019dd0 <tcp_write+0x518>)
 8019cc0:	f240 2285 	movw	r2, #645	; 0x285
 8019cc4:	f002 f8b6 	bl	801be34 <iprintf>
      prev_seg->next = seg;
 8019cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cca:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8019ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cce:	940b      	str	r4, [sp, #44]	; 0x2c
 8019cd0:	4498      	add	r8, r3
 8019cd2:	fa1f f888 	uxth.w	r8, r8
 8019cd6:	e6eb      	b.n	8019ab0 <tcp_write+0x1f8>
 8019cd8:	4683      	mov	fp, r0
 8019cda:	e7f7      	b.n	8019ccc <tcp_write+0x414>
  if (oversize_used > 0) {
 8019cdc:	f04f 0a00 	mov.w	sl, #0
 8019ce0:	46d1      	mov	r9, sl
 8019ce2:	e6e9      	b.n	8019ab8 <tcp_write+0x200>
      p->tot_len += oversize_used;
 8019ce4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8019ce8:	4433      	add	r3, r6
 8019cea:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8019cee:	f8d8 3000 	ldr.w	r3, [r8]
 8019cf2:	b96b      	cbnz	r3, 8019d10 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019cf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019cf8:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8019cfc:	9908      	ldr	r1, [sp, #32]
 8019cfe:	4418      	add	r0, r3
 8019d00:	4632      	mov	r2, r6
 8019d02:	f002 fb92 	bl	801c42a <memcpy>
        p->len += oversize_used;
 8019d06:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8019d0a:	4433      	add	r3, r6
 8019d0c:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019d10:	f8d8 8000 	ldr.w	r8, [r8]
 8019d14:	e6d2      	b.n	8019abc <tcp_write+0x204>
  } else if (extendlen > 0) {
 8019d16:	f1ba 0f00 	cmp.w	sl, #0
 8019d1a:	d019      	beq.n	8019d50 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019d1c:	b10f      	cbz	r7, 8019d22 <tcp_write+0x46a>
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	b933      	cbnz	r3, 8019d30 <tcp_write+0x478>
 8019d22:	4b29      	ldr	r3, [pc, #164]	; (8019dc8 <tcp_write+0x510>)
 8019d24:	492e      	ldr	r1, [pc, #184]	; (8019de0 <tcp_write+0x528>)
 8019d26:	482a      	ldr	r0, [pc, #168]	; (8019dd0 <tcp_write+0x518>)
 8019d28:	f240 22c1 	movw	r2, #705	; 0x2c1
 8019d2c:	f002 f882 	bl	801be34 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	891a      	ldrh	r2, [r3, #8]
 8019d34:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8019d36:	4452      	add	r2, sl
 8019d38:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019d3a:	b939      	cbnz	r1, 8019d4c <tcp_write+0x494>
    p->len += extendlen;
 8019d3c:	895a      	ldrh	r2, [r3, #10]
 8019d3e:	4452      	add	r2, sl
 8019d40:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019d42:	893b      	ldrh	r3, [r7, #8]
 8019d44:	449a      	add	sl, r3
 8019d46:	f8a7 a008 	strh.w	sl, [r7, #8]
 8019d4a:	e6d7      	b.n	8019afc <tcp_write+0x244>
      p->tot_len += extendlen;
 8019d4c:	460b      	mov	r3, r1
 8019d4e:	e7f0      	b.n	8019d32 <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8019d50:	2f00      	cmp	r7, #0
 8019d52:	f47f aed3 	bne.w	8019afc <tcp_write+0x244>
    pcb->unsent = queue;
 8019d56:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8019d5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8019d5c:	9a05      	ldr	r2, [sp, #20]
 8019d5e:	4413      	add	r3, r2
 8019d60:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8019d62:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8019d66:	1a9b      	subs	r3, r3, r2
 8019d68:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8019d6c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019d70:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8019d74:	9b06      	ldr	r3, [sp, #24]
 8019d76:	b153      	cbz	r3, 8019d8e <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019d78:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8019d7a:	b943      	cbnz	r3, 8019d8e <tcp_write+0x4d6>
 8019d7c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8019d7e:	b933      	cbnz	r3, 8019d8e <tcp_write+0x4d6>
 8019d80:	4b11      	ldr	r3, [pc, #68]	; (8019dc8 <tcp_write+0x510>)
 8019d82:	4915      	ldr	r1, [pc, #84]	; (8019dd8 <tcp_write+0x520>)
 8019d84:	4812      	ldr	r0, [pc, #72]	; (8019dd0 <tcp_write+0x518>)
 8019d86:	f240 22ed 	movw	r2, #749	; 0x2ed
 8019d8a:	f002 f853 	bl	801be34 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8019d8e:	b15c      	cbz	r4, 8019da8 <tcp_write+0x4f0>
 8019d90:	68e4      	ldr	r4, [r4, #12]
 8019d92:	b14c      	cbz	r4, 8019da8 <tcp_write+0x4f0>
 8019d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d96:	f013 0602 	ands.w	r6, r3, #2
 8019d9a:	d105      	bne.n	8019da8 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019d9c:	2008      	movs	r0, #8
 8019d9e:	89a5      	ldrh	r5, [r4, #12]
 8019da0:	f7fb f937 	bl	8015012 <lwip_htons>
 8019da4:	4328      	orrs	r0, r5
 8019da6:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8019da8:	2000      	movs	r0, #0
 8019daa:	e5a4      	b.n	80198f6 <tcp_write+0x3e>
      p->tot_len += extendlen;
 8019dac:	f04f 0900 	mov.w	r9, #0
 8019db0:	e74a      	b.n	8019c48 <tcp_write+0x390>
    return ERR_CONN;
 8019db2:	f06f 000a 	mvn.w	r0, #10
 8019db6:	e59e      	b.n	80198f6 <tcp_write+0x3e>
  if (oversize_used > 0) {
 8019db8:	2e00      	cmp	r6, #0
 8019dba:	d18f      	bne.n	8019cdc <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8019dbc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019dc0:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8019dc4:	e69a      	b.n	8019afc <tcp_write+0x244>
 8019dc6:	bf00      	nop
 8019dc8:	080203b7 	.word	0x080203b7
 8019dcc:	08020548 	.word	0x08020548
 8019dd0:	0801c6e3 	.word	0x0801c6e3
 8019dd4:	08020586 	.word	0x08020586
 8019dd8:	08020612 	.word	0x08020612
 8019ddc:	08020594 	.word	0x08020594
 8019de0:	080205dd 	.word	0x080205dd

08019de4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019de8:	f011 0803 	ands.w	r8, r1, #3
{
 8019dec:	4604      	mov	r4, r0
 8019dee:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019df0:	d106      	bne.n	8019e00 <tcp_enqueue_flags+0x1c>
 8019df2:	4b41      	ldr	r3, [pc, #260]	; (8019ef8 <tcp_enqueue_flags+0x114>)
 8019df4:	4941      	ldr	r1, [pc, #260]	; (8019efc <tcp_enqueue_flags+0x118>)
 8019df6:	4842      	ldr	r0, [pc, #264]	; (8019f00 <tcp_enqueue_flags+0x11c>)
 8019df8:	f240 321b 	movw	r2, #795	; 0x31b
 8019dfc:	f002 f81a 	bl	801be34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8019e00:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019e04:	2b0a      	cmp	r3, #10
 8019e06:	d90a      	bls.n	8019e1e <tcp_enqueue_flags+0x3a>
 8019e08:	07f1      	lsls	r1, r6, #31
 8019e0a:	d408      	bmi.n	8019e1e <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8019e0c:	7ea3      	ldrb	r3, [r4, #26]
 8019e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019e12:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019e14:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8019e18:	b003      	add	sp, #12
 8019e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e1e:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 8019e22:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019e24:	bf14      	ite	ne
 8019e26:	2704      	movne	r7, #4
 8019e28:	2700      	moveq	r7, #0
 8019e2a:	f04f 0200 	mov.w	r2, #0
 8019e2e:	4639      	mov	r1, r7
 8019e30:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8019e32:	bf14      	ite	ne
 8019e34:	f04f 0901 	movne.w	r9, #1
 8019e38:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019e3c:	f7fd f816 	bl	8016e6c <pbuf_alloc>
 8019e40:	4605      	mov	r5, r0
 8019e42:	2800      	cmp	r0, #0
 8019e44:	d0e2      	beq.n	8019e0c <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019e46:	8943      	ldrh	r3, [r0, #10]
 8019e48:	42bb      	cmp	r3, r7
 8019e4a:	d206      	bcs.n	8019e5a <tcp_enqueue_flags+0x76>
 8019e4c:	4b2a      	ldr	r3, [pc, #168]	; (8019ef8 <tcp_enqueue_flags+0x114>)
 8019e4e:	492d      	ldr	r1, [pc, #180]	; (8019f04 <tcp_enqueue_flags+0x120>)
 8019e50:	482b      	ldr	r0, [pc, #172]	; (8019f00 <tcp_enqueue_flags+0x11c>)
 8019e52:	f240 3241 	movw	r2, #833	; 0x341
 8019e56:	f001 ffed 	bl	801be34 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019e5a:	f8cd 9000 	str.w	r9, [sp]
 8019e5e:	4629      	mov	r1, r5
 8019e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019e62:	4632      	mov	r2, r6
 8019e64:	4620      	mov	r0, r4
 8019e66:	f7ff fc83 	bl	8019770 <tcp_create_segment>
 8019e6a:	4605      	mov	r5, r0
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	d0cd      	beq.n	8019e0c <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019e70:	68c3      	ldr	r3, [r0, #12]
 8019e72:	079a      	lsls	r2, r3, #30
 8019e74:	d006      	beq.n	8019e84 <tcp_enqueue_flags+0xa0>
 8019e76:	4b20      	ldr	r3, [pc, #128]	; (8019ef8 <tcp_enqueue_flags+0x114>)
 8019e78:	4923      	ldr	r1, [pc, #140]	; (8019f08 <tcp_enqueue_flags+0x124>)
 8019e7a:	4821      	ldr	r0, [pc, #132]	; (8019f00 <tcp_enqueue_flags+0x11c>)
 8019e7c:	f240 3249 	movw	r2, #841	; 0x349
 8019e80:	f001 ffd8 	bl	801be34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019e84:	892b      	ldrh	r3, [r5, #8]
 8019e86:	b133      	cbz	r3, 8019e96 <tcp_enqueue_flags+0xb2>
 8019e88:	4b1b      	ldr	r3, [pc, #108]	; (8019ef8 <tcp_enqueue_flags+0x114>)
 8019e8a:	4920      	ldr	r1, [pc, #128]	; (8019f0c <tcp_enqueue_flags+0x128>)
 8019e8c:	481c      	ldr	r0, [pc, #112]	; (8019f00 <tcp_enqueue_flags+0x11c>)
 8019e8e:	f240 324a 	movw	r2, #842	; 0x34a
 8019e92:	f001 ffcf 	bl	801be34 <iprintf>
  if (pcb->unsent == NULL) {
 8019e96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019e98:	bb4b      	cbnz	r3, 8019eee <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8019e9a:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019ea2:	f1b8 0f00 	cmp.w	r8, #0
 8019ea6:	d002      	beq.n	8019eae <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8019ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019eaa:	3301      	adds	r3, #1
 8019eac:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8019eae:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8019eb0:	bf42      	ittt	mi
 8019eb2:	7ea3      	ldrbmi	r3, [r4, #26]
 8019eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8019eb8:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019eba:	6868      	ldr	r0, [r5, #4]
 8019ebc:	f7fd f922 	bl	8017104 <pbuf_clen>
 8019ec0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019ec4:	4418      	add	r0, r3
 8019ec6:	b280      	uxth	r0, r0
 8019ec8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	d0a3      	beq.n	8019e18 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019ed0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8019ed2:	b948      	cbnz	r0, 8019ee8 <tcp_enqueue_flags+0x104>
 8019ed4:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8019ed6:	2c00      	cmp	r4, #0
 8019ed8:	d19e      	bne.n	8019e18 <tcp_enqueue_flags+0x34>
 8019eda:	4b07      	ldr	r3, [pc, #28]	; (8019ef8 <tcp_enqueue_flags+0x114>)
 8019edc:	490c      	ldr	r1, [pc, #48]	; (8019f10 <tcp_enqueue_flags+0x12c>)
 8019ede:	4808      	ldr	r0, [pc, #32]	; (8019f00 <tcp_enqueue_flags+0x11c>)
 8019ee0:	f240 326d 	movw	r2, #877	; 0x36d
 8019ee4:	f001 ffa6 	bl	801be34 <iprintf>
  return ERR_OK;
 8019ee8:	2000      	movs	r0, #0
 8019eea:	e795      	b.n	8019e18 <tcp_enqueue_flags+0x34>
 8019eec:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019eee:	681a      	ldr	r2, [r3, #0]
 8019ef0:	2a00      	cmp	r2, #0
 8019ef2:	d1fb      	bne.n	8019eec <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8019ef4:	601d      	str	r5, [r3, #0]
 8019ef6:	e7d1      	b.n	8019e9c <tcp_enqueue_flags+0xb8>
 8019ef8:	080203b7 	.word	0x080203b7
 8019efc:	08020254 	.word	0x08020254
 8019f00:	0801c6e3 	.word	0x0801c6e3
 8019f04:	080202a9 	.word	0x080202a9
 8019f08:	080202e2 	.word	0x080202e2
 8019f0c:	080202fa 	.word	0x080202fa
 8019f10:	08020324 	.word	0x08020324

08019f14 <tcp_send_fin>:
{
 8019f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8019f16:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8019f18:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8019f1a:	b934      	cbnz	r4, 8019f2a <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	2101      	movs	r1, #1
}
 8019f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019f24:	f7ff bf5e 	b.w	8019de4 <tcp_enqueue_flags>
 8019f28:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019f2a:	6823      	ldr	r3, [r4, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d1fb      	bne.n	8019f28 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019f30:	68e3      	ldr	r3, [r4, #12]
 8019f32:	8998      	ldrh	r0, [r3, #12]
 8019f34:	f7fb f86d 	bl	8015012 <lwip_htons>
 8019f38:	f010 0707 	ands.w	r7, r0, #7
 8019f3c:	d1ee      	bne.n	8019f1c <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019f3e:	68e6      	ldr	r6, [r4, #12]
 8019f40:	2001      	movs	r0, #1
 8019f42:	89b4      	ldrh	r4, [r6, #12]
 8019f44:	f7fb f865 	bl	8015012 <lwip_htons>
 8019f48:	4320      	orrs	r0, r4
 8019f4a:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8019f4c:	7eab      	ldrb	r3, [r5, #26]
 8019f4e:	f043 0320 	orr.w	r3, r3, #32
 8019f52:	76ab      	strb	r3, [r5, #26]
}
 8019f54:	4638      	mov	r0, r7
 8019f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019f58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019f58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019f5a:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019f5c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019f5e:	f7fb f85b 	bl	8015018 <lwip_htonl>
 8019f62:	2100      	movs	r1, #0
 8019f64:	4602      	mov	r2, r0
 8019f66:	4620      	mov	r0, r4
 8019f68:	f7ff fc6a 	bl	8019840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8019f6c:	4606      	mov	r6, r0
 8019f6e:	b940      	cbnz	r0, 8019f82 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8019f70:	7ea3      	ldrb	r3, [r4, #26]
 8019f72:	f043 0303 	orr.w	r3, r3, #3
 8019f76:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019f78:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8019f7c:	4628      	mov	r0, r5
 8019f7e:	b004      	add	sp, #16
 8019f80:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019f82:	1d25      	adds	r5, r4, #4
 8019f84:	4628      	mov	r0, r5
 8019f86:	f7fb fcdb 	bl	8015940 <ip4_route>
  if (netif == NULL) {
 8019f8a:	b1a0      	cbz	r0, 8019fb6 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8019f8c:	2206      	movs	r2, #6
 8019f8e:	9201      	str	r2, [sp, #4]
 8019f90:	7a62      	ldrb	r2, [r4, #9]
 8019f92:	9002      	str	r0, [sp, #8]
 8019f94:	9200      	str	r2, [sp, #0]
 8019f96:	7aa3      	ldrb	r3, [r4, #10]
 8019f98:	462a      	mov	r2, r5
 8019f9a:	4621      	mov	r1, r4
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f7fb fe35 	bl	8015c0c <ip4_output_if>
 8019fa2:	4605      	mov	r5, r0
  pbuf_free(p);
 8019fa4:	4630      	mov	r0, r6
 8019fa6:	f7fc fef7 	bl	8016d98 <pbuf_free>
 8019faa:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8019fac:	b135      	cbz	r5, 8019fbc <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8019fae:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8019fb2:	76a3      	strb	r3, [r4, #26]
 8019fb4:	e7e2      	b.n	8019f7c <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8019fb6:	f06f 0503 	mvn.w	r5, #3
 8019fba:	e7f3      	b.n	8019fa4 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8019fbc:	f023 0303 	bic.w	r3, r3, #3
 8019fc0:	e7f7      	b.n	8019fb2 <tcp_send_empty_ack+0x5a>
	...

08019fc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019fc8:	7d03      	ldrb	r3, [r0, #20]
 8019fca:	2b01      	cmp	r3, #1
{
 8019fcc:	b087      	sub	sp, #28
 8019fce:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019fd0:	d106      	bne.n	8019fe0 <tcp_output+0x1c>
 8019fd2:	4ba5      	ldr	r3, [pc, #660]	; (801a268 <tcp_output+0x2a4>)
 8019fd4:	49a5      	ldr	r1, [pc, #660]	; (801a26c <tcp_output+0x2a8>)
 8019fd6:	48a6      	ldr	r0, [pc, #664]	; (801a270 <tcp_output+0x2ac>)
 8019fd8:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8019fdc:	f001 ff2a 	bl	801be34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019fe0:	4ba4      	ldr	r3, [pc, #656]	; (801a274 <tcp_output+0x2b0>)
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	429c      	cmp	r4, r3
 8019fe6:	d052      	beq.n	801a08e <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019fe8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8019fec:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8019ff0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019ff2:	429f      	cmp	r7, r3
 8019ff4:	bf28      	it	cs
 8019ff6:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8019ff8:	7ea3      	ldrb	r3, [r4, #26]
 8019ffa:	0799      	lsls	r1, r3, #30
 8019ffc:	d510      	bpl.n	801a020 <tcp_output+0x5c>
 8019ffe:	b92d      	cbnz	r5, 801a00c <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 801a000:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 801a002:	b007      	add	sp, #28
 801a004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 801a008:	f7ff bfa6 	b.w	8019f58 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801a00c:	68eb      	ldr	r3, [r5, #12]
 801a00e:	6858      	ldr	r0, [r3, #4]
 801a010:	f7fb f802 	bl	8015018 <lwip_htonl>
 801a014:	892b      	ldrh	r3, [r5, #8]
 801a016:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801a018:	1a9b      	subs	r3, r3, r2
 801a01a:	4418      	add	r0, r3
     (seg == NULL ||
 801a01c:	4287      	cmp	r7, r0
 801a01e:	d3ef      	bcc.n	801a000 <tcp_output+0x3c>
  useg = pcb->unacked;
 801a020:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 801a022:	2e00      	cmp	r6, #0
 801a024:	d136      	bne.n	801a094 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a026:	f104 0804 	add.w	r8, r4, #4
 801a02a:	4640      	mov	r0, r8
 801a02c:	f7fb fc88 	bl	8015940 <ip4_route>
  if (netif == NULL) {
 801a030:	4681      	mov	r9, r0
 801a032:	2800      	cmp	r0, #0
 801a034:	f000 813c 	beq.w	801a2b0 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 801a038:	b10c      	cbz	r4, 801a03e <tcp_output+0x7a>
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	b913      	cbnz	r3, 801a044 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a03e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a042:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 801a044:	b1d5      	cbz	r5, 801a07c <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801a046:	68eb      	ldr	r3, [r5, #12]
 801a048:	6858      	ldr	r0, [r3, #4]
 801a04a:	f7fa ffe5 	bl	8015018 <lwip_htonl>
 801a04e:	892b      	ldrh	r3, [r5, #8]
 801a050:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801a052:	1a9b      	subs	r3, r3, r2
 801a054:	4418      	add	r0, r3
  if (seg != NULL &&
 801a056:	4287      	cmp	r7, r0
 801a058:	d26f      	bcs.n	801a13a <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801a05a:	2f00      	cmp	r7, #0
 801a05c:	d06d      	beq.n	801a13a <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801a05e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 801a062:	429f      	cmp	r7, r3
 801a064:	d169      	bne.n	801a13a <tcp_output+0x176>
 801a066:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d166      	bne.n	801a13a <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 801a06c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 801a070:	b923      	cbnz	r3, 801a07c <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 801a072:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 801a076:	2301      	movs	r3, #1
 801a078:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 801a07c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801a07e:	b913      	cbnz	r3, 801a086 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 801a080:	2300      	movs	r3, #0
 801a082:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 801a086:	7ea3      	ldrb	r3, [r4, #26]
 801a088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a08c:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 801a08e:	2000      	movs	r0, #0
 801a090:	e0e6      	b.n	801a260 <tcp_output+0x29c>
 801a092:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 801a094:	6833      	ldr	r3, [r6, #0]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d1fb      	bne.n	801a092 <tcp_output+0xce>
 801a09a:	e7c4      	b.n	801a026 <tcp_output+0x62>
    pcb->unsent = seg->next;
 801a09c:	682b      	ldr	r3, [r5, #0]
 801a09e:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801a0a0:	7d23      	ldrb	r3, [r4, #20]
 801a0a2:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801a0a4:	bf1e      	ittt	ne
 801a0a6:	7ea3      	ldrbne	r3, [r4, #26]
 801a0a8:	f023 0303 	bicne.w	r3, r3, #3
 801a0ac:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a0ae:	68eb      	ldr	r3, [r5, #12]
 801a0b0:	6858      	ldr	r0, [r3, #4]
 801a0b2:	f7fa ffb1 	bl	8015018 <lwip_htonl>
 801a0b6:	68e9      	ldr	r1, [r5, #12]
 801a0b8:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801a0bc:	4683      	mov	fp, r0
 801a0be:	8988      	ldrh	r0, [r1, #12]
 801a0c0:	f7fa ffa7 	bl	8015012 <lwip_htons>
 801a0c4:	f010 0003 	ands.w	r0, r0, #3
 801a0c8:	eb0b 030a 	add.w	r3, fp, sl
 801a0cc:	bf18      	it	ne
 801a0ce:	2001      	movne	r0, #1
 801a0d0:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a0d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 801a0d4:	68ea      	ldr	r2, [r5, #12]
 801a0d6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a0da:	1a1b      	subs	r3, r3, r0
 801a0dc:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 801a0de:	bfb8      	it	lt
 801a0e0:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 801a0e2:	8990      	ldrh	r0, [r2, #12]
 801a0e4:	f7fa ff95 	bl	8015012 <lwip_htons>
 801a0e8:	f010 0003 	ands.w	r0, r0, #3
 801a0ec:	bf18      	it	ne
 801a0ee:	2001      	movne	r0, #1
 801a0f0:	eb10 0f0a 	cmn.w	r0, sl
 801a0f4:	f000 80d8 	beq.w	801a2a8 <tcp_output+0x2e4>
      seg->next = NULL;
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801a0fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a0fe:	b913      	cbnz	r3, 801a106 <tcp_output+0x142>
        pcb->unacked = seg;
 801a100:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 801a102:	462e      	mov	r6, r5
 801a104:	e016      	b.n	801a134 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a106:	68eb      	ldr	r3, [r5, #12]
 801a108:	6858      	ldr	r0, [r3, #4]
 801a10a:	f7fa ff85 	bl	8015018 <lwip_htonl>
 801a10e:	68f2      	ldr	r2, [r6, #12]
 801a110:	4682      	mov	sl, r0
 801a112:	6850      	ldr	r0, [r2, #4]
 801a114:	f7fa ff80 	bl	8015018 <lwip_htonl>
 801a118:	ebaa 0000 	sub.w	r0, sl, r0
 801a11c:	2800      	cmp	r0, #0
 801a11e:	f280 80c1 	bge.w	801a2a4 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a122:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 801a126:	681a      	ldr	r2, [r3, #0]
 801a128:	2a00      	cmp	r2, #0
 801a12a:	f040 80a9 	bne.w	801a280 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 801a12e:	681a      	ldr	r2, [r3, #0]
 801a130:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 801a132:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 801a134:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 801a136:	2d00      	cmp	r5, #0
 801a138:	d0a2      	beq.n	801a080 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a13a:	68eb      	ldr	r3, [r5, #12]
 801a13c:	6858      	ldr	r0, [r3, #4]
 801a13e:	f7fa ff6b 	bl	8015018 <lwip_htonl>
 801a142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a144:	1ac0      	subs	r0, r0, r3
 801a146:	892b      	ldrh	r3, [r5, #8]
 801a148:	4418      	add	r0, r3
  while (seg != NULL &&
 801a14a:	4287      	cmp	r7, r0
 801a14c:	d396      	bcc.n	801a07c <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 801a14e:	68eb      	ldr	r3, [r5, #12]
 801a150:	8998      	ldrh	r0, [r3, #12]
 801a152:	f7fa ff5e 	bl	8015012 <lwip_htons>
 801a156:	0742      	lsls	r2, r0, #29
 801a158:	d506      	bpl.n	801a168 <tcp_output+0x1a4>
 801a15a:	4b43      	ldr	r3, [pc, #268]	; (801a268 <tcp_output+0x2a4>)
 801a15c:	4946      	ldr	r1, [pc, #280]	; (801a278 <tcp_output+0x2b4>)
 801a15e:	4844      	ldr	r0, [pc, #272]	; (801a270 <tcp_output+0x2ac>)
 801a160:	f240 4246 	movw	r2, #1094	; 0x446
 801a164:	f001 fe66 	bl	801be34 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a168:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a16a:	b19b      	cbz	r3, 801a194 <tcp_output+0x1d0>
 801a16c:	7ea2      	ldrb	r2, [r4, #26]
 801a16e:	f012 0f44 	tst.w	r2, #68	; 0x44
 801a172:	d10f      	bne.n	801a194 <tcp_output+0x1d0>
 801a174:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801a176:	b12b      	cbz	r3, 801a184 <tcp_output+0x1c0>
 801a178:	6819      	ldr	r1, [r3, #0]
 801a17a:	b959      	cbnz	r1, 801a194 <tcp_output+0x1d0>
 801a17c:	8919      	ldrh	r1, [r3, #8]
 801a17e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a180:	4299      	cmp	r1, r3
 801a182:	d207      	bcs.n	801a194 <tcp_output+0x1d0>
 801a184:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801a188:	b123      	cbz	r3, 801a194 <tcp_output+0x1d0>
 801a18a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a18e:	2b0a      	cmp	r3, #10
 801a190:	f240 8091 	bls.w	801a2b6 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 801a194:	7d23      	ldrb	r3, [r4, #20]
 801a196:	2b02      	cmp	r3, #2
 801a198:	d00a      	beq.n	801a1b0 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a19a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801a19e:	2010      	movs	r0, #16
 801a1a0:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 801a1a4:	f7fa ff35 	bl	8015012 <lwip_htons>
 801a1a8:	ea4b 0000 	orr.w	r0, fp, r0
 801a1ac:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801a1b0:	686b      	ldr	r3, [r5, #4]
 801a1b2:	89db      	ldrh	r3, [r3, #14]
 801a1b4:	2b01      	cmp	r3, #1
 801a1b6:	f47f af71 	bne.w	801a09c <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a1ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a1bc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801a1c0:	f7fa ff2a 	bl	8015018 <lwip_htonl>
 801a1c4:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a1c8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801a1ca:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801a1ce:	f7fa ff20 	bl	8015012 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a1d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801a1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a1d6:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a1da:	4413      	add	r3, r2
 801a1dc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a1de:	7aab      	ldrb	r3, [r5, #10]
 801a1e0:	07db      	lsls	r3, r3, #31
 801a1e2:	d50c      	bpl.n	801a1fe <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801a1e4:	4641      	mov	r1, r8
 801a1e6:	f44f 7034 	mov.w	r0, #720	; 0x2d0
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a1ea:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801a1ee:	f7fd ffc7 	bl	8018180 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a1f2:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801a1f6:	f7fa ff0f 	bl	8015018 <lwip_htonl>
 801a1fa:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a1fe:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801a202:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 801a204:	bfbc      	itt	lt
 801a206:	2300      	movlt	r3, #0
 801a208:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a20c:	b93b      	cbnz	r3, 801a21e <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 801a20e:	4b1b      	ldr	r3, [pc, #108]	; (801a27c <tcp_output+0x2b8>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a214:	68eb      	ldr	r3, [r5, #12]
 801a216:	6858      	ldr	r0, [r3, #4]
 801a218:	f7fa fefe 	bl	8015018 <lwip_htonl>
 801a21c:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a21e:	6868      	ldr	r0, [r5, #4]
 801a220:	68ea      	ldr	r2, [r5, #12]
 801a222:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a224:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 801a226:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a228:	1ad3      	subs	r3, r2, r3
 801a22a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 801a22c:	1ac9      	subs	r1, r1, r3
 801a22e:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801a230:	8901      	ldrh	r1, [r0, #8]
 801a232:	1acb      	subs	r3, r1, r3
 801a234:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 801a236:	2300      	movs	r3, #0
 801a238:	7413      	strb	r3, [r2, #16]
 801a23a:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a23c:	2206      	movs	r2, #6
 801a23e:	9201      	str	r2, [sp, #4]
 801a240:	7a62      	ldrb	r2, [r4, #9]
 801a242:	9200      	str	r2, [sp, #0]
 801a244:	7aa3      	ldrb	r3, [r4, #10]
 801a246:	f8cd 9008 	str.w	r9, [sp, #8]
 801a24a:	4642      	mov	r2, r8
 801a24c:	4621      	mov	r1, r4
 801a24e:	f7fb fcdd 	bl	8015c0c <ip4_output_if>
    if (err != ERR_OK) {
 801a252:	2800      	cmp	r0, #0
 801a254:	f43f af22 	beq.w	801a09c <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 801a258:	7ea3      	ldrb	r3, [r4, #26]
 801a25a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a25e:	76a3      	strb	r3, [r4, #26]
}
 801a260:	b007      	add	sp, #28
 801a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a266:	bf00      	nop
 801a268:	080203b7 	.word	0x080203b7
 801a26c:	0802034c 	.word	0x0802034c
 801a270:	0801c6e3 	.word	0x0801c6e3
 801a274:	20008af0 	.word	0x20008af0
 801a278:	08020372 	.word	0x08020372
 801a27c:	20008ae0 	.word	0x20008ae0
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a280:	68d2      	ldr	r2, [r2, #12]
 801a282:	9305      	str	r3, [sp, #20]
 801a284:	6850      	ldr	r0, [r2, #4]
 801a286:	f7fa fec7 	bl	8015018 <lwip_htonl>
 801a28a:	68e9      	ldr	r1, [r5, #12]
 801a28c:	4682      	mov	sl, r0
 801a28e:	6848      	ldr	r0, [r1, #4]
 801a290:	f7fa fec2 	bl	8015018 <lwip_htonl>
 801a294:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 801a298:	2800      	cmp	r0, #0
 801a29a:	9b05      	ldr	r3, [sp, #20]
 801a29c:	f6bf af47 	bge.w	801a12e <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	e740      	b.n	801a126 <tcp_output+0x162>
          useg->next = seg;
 801a2a4:	6035      	str	r5, [r6, #0]
 801a2a6:	e72c      	b.n	801a102 <tcp_output+0x13e>
      tcp_seg_free(seg);
 801a2a8:	4628      	mov	r0, r5
 801a2aa:	f7fd f9bf 	bl	801762c <tcp_seg_free>
 801a2ae:	e741      	b.n	801a134 <tcp_output+0x170>
    return ERR_RTE;
 801a2b0:	f06f 0003 	mvn.w	r0, #3
 801a2b4:	e7d4      	b.n	801a260 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a2b6:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 801a2ba:	f47f af6b 	bne.w	801a194 <tcp_output+0x1d0>
 801a2be:	e6dd      	b.n	801a07c <tcp_output+0xb8>

0801a2c0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2c4:	b085      	sub	sp, #20
 801a2c6:	4681      	mov	r9, r0
 801a2c8:	460d      	mov	r5, r1
 801a2ca:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801a2cc:	2114      	movs	r1, #20
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	2001      	movs	r0, #1
{
 801a2d2:	461f      	mov	r7, r3
 801a2d4:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 801a2d8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801a2dc:	f7fc fdc6 	bl	8016e6c <pbuf_alloc>
  if (p == NULL) {
 801a2e0:	4606      	mov	r6, r0
 801a2e2:	2800      	cmp	r0, #0
 801a2e4:	d03b      	beq.n	801a35e <tcp_rst+0x9e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a2e6:	8943      	ldrh	r3, [r0, #10]
 801a2e8:	2b13      	cmp	r3, #19
 801a2ea:	d806      	bhi.n	801a2fa <tcp_rst+0x3a>
 801a2ec:	4b1d      	ldr	r3, [pc, #116]	; (801a364 <tcp_rst+0xa4>)
 801a2ee:	491e      	ldr	r1, [pc, #120]	; (801a368 <tcp_rst+0xa8>)
 801a2f0:	481e      	ldr	r0, [pc, #120]	; (801a36c <tcp_rst+0xac>)
 801a2f2:	f240 524d 	movw	r2, #1357	; 0x54d
 801a2f6:	f001 fd9d 	bl	801be34 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 801a2fa:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 801a2fc:	6874      	ldr	r4, [r6, #4]
  tcphdr->src = lwip_htons(local_port);
 801a2fe:	f7fa fe88 	bl	8015012 <lwip_htons>
 801a302:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801a304:	4650      	mov	r0, sl
 801a306:	f7fa fe84 	bl	8015012 <lwip_htons>
 801a30a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801a30c:	4648      	mov	r0, r9
 801a30e:	f7fa fe83 	bl	8015018 <lwip_htonl>
 801a312:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801a314:	4628      	mov	r0, r5
 801a316:	f7fa fe7f 	bl	8015018 <lwip_htonl>
 801a31a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801a31c:	f245 0014 	movw	r0, #20500	; 0x5014
 801a320:	f7fa fe77 	bl	8015012 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801a324:	2500      	movs	r5, #0
 801a326:	2310      	movs	r3, #16
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801a328:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801a32a:	73a3      	strb	r3, [r4, #14]
 801a32c:	73e5      	strb	r5, [r4, #15]
#endif
  tcphdr->chksum = 0;
 801a32e:	7425      	strb	r5, [r4, #16]
 801a330:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 801a332:	74a5      	strb	r5, [r4, #18]
 801a334:	74e5      	strb	r5, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801a336:	4638      	mov	r0, r7
 801a338:	f7fb fb02 	bl	8015940 <ip4_route>
  if (netif != NULL) {
 801a33c:	b148      	cbz	r0, 801a352 <tcp_rst+0x92>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801a33e:	2306      	movs	r3, #6
 801a340:	9002      	str	r0, [sp, #8]
 801a342:	9301      	str	r3, [sp, #4]
 801a344:	9500      	str	r5, [sp, #0]
 801a346:	23ff      	movs	r3, #255	; 0xff
 801a348:	463a      	mov	r2, r7
 801a34a:	4641      	mov	r1, r8
 801a34c:	4630      	mov	r0, r6
 801a34e:	f7fb fc5d 	bl	8015c0c <ip4_output_if>
  }
  pbuf_free(p);
 801a352:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a354:	b005      	add	sp, #20
 801a356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801a35a:	f7fc bd1d 	b.w	8016d98 <pbuf_free>
}
 801a35e:	b005      	add	sp, #20
 801a360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a364:	080203b7 	.word	0x080203b7
 801a368:	08020389 	.word	0x08020389
 801a36c:	0801c6e3 	.word	0x0801c6e3

0801a370 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801a370:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 801a372:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 801a374:	b1aa      	cbz	r2, 801a3a2 <tcp_rexmit_rto+0x32>
 801a376:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801a378:	680b      	ldr	r3, [r1, #0]
 801a37a:	b983      	cbnz	r3, 801a39e <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a37c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801a37e:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a380:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a382:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 801a386:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 801a388:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 801a38a:	bf1c      	itt	ne
 801a38c:	3301      	addne	r3, #1
 801a38e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a392:	2300      	movs	r3, #0
 801a394:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 801a396:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 801a39a:	f7ff be13 	b.w	8019fc4 <tcp_output>
 801a39e:	4619      	mov	r1, r3
 801a3a0:	e7ea      	b.n	801a378 <tcp_rexmit_rto+0x8>
}
 801a3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3a6:	4770      	bx	lr

0801a3a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801a3aa:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 801a3ac:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 801a3ae:	b1ad      	cbz	r5, 801a3dc <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 801a3b0:	682b      	ldr	r3, [r5, #0]
 801a3b2:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801a3b4:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 801a3b8:	6833      	ldr	r3, [r6, #0]
 801a3ba:	b983      	cbnz	r3, 801a3de <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 801a3bc:	6833      	ldr	r3, [r6, #0]
 801a3be:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 801a3c0:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a3c2:	682b      	ldr	r3, [r5, #0]
 801a3c4:	b90b      	cbnz	r3, 801a3ca <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a3c6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a3ca:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a3ce:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 801a3d0:	bf1c      	itt	ne
 801a3d2:	3301      	addne	r3, #1
 801a3d4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	6363      	str	r3, [r4, #52]	; 0x34
 801a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a3de:	68db      	ldr	r3, [r3, #12]
 801a3e0:	6858      	ldr	r0, [r3, #4]
 801a3e2:	f7fa fe19 	bl	8015018 <lwip_htonl>
 801a3e6:	68eb      	ldr	r3, [r5, #12]
 801a3e8:	4607      	mov	r7, r0
 801a3ea:	6858      	ldr	r0, [r3, #4]
 801a3ec:	f7fa fe14 	bl	8015018 <lwip_htonl>
 801a3f0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	dae2      	bge.n	801a3bc <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 801a3f6:	6836      	ldr	r6, [r6, #0]
 801a3f8:	e7de      	b.n	801a3b8 <tcp_rexmit+0x10>

0801a3fa <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a3fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 801a3fc:	b510      	push	{r4, lr}
 801a3fe:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a400:	b30b      	cbz	r3, 801a446 <tcp_rexmit_fast+0x4c>
 801a402:	7e83      	ldrb	r3, [r0, #26]
 801a404:	075b      	lsls	r3, r3, #29
 801a406:	d41e      	bmi.n	801a446 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801a408:	f7ff ffce 	bl	801a3a8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a40c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 801a410:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801a414:	4293      	cmp	r3, r2
 801a416:	bf38      	it	cc
 801a418:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801a41a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a41c:	bf28      	it	cs
 801a41e:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801a420:	0059      	lsls	r1, r3, #1
 801a422:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a424:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801a428:	bf38      	it	cc
 801a42a:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a42e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801a432:	440b      	add	r3, r1
 801a434:	4413      	add	r3, r2
 801a436:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801a43a:	7ea3      	ldrb	r3, [r4, #26]
 801a43c:	f043 0304 	orr.w	r3, r3, #4
 801a440:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801a442:	2300      	movs	r3, #0
 801a444:	8623      	strh	r3, [r4, #48]	; 0x30
 801a446:	bd10      	pop	{r4, pc}

0801a448 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a44a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a44c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801a44e:	3801      	subs	r0, #1
 801a450:	f7fa fde2 	bl	8015018 <lwip_htonl>
 801a454:	2100      	movs	r1, #0
 801a456:	4602      	mov	r2, r0
 801a458:	4620      	mov	r0, r4
 801a45a:	f7ff f9f1 	bl	8019840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801a45e:	4605      	mov	r5, r0
 801a460:	b1c8      	cbz	r0, 801a496 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a462:	1d26      	adds	r6, r4, #4
 801a464:	4630      	mov	r0, r6
 801a466:	f7fb fa6b 	bl	8015940 <ip4_route>
  if (netif == NULL) {
 801a46a:	b188      	cbz	r0, 801a490 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801a46c:	2100      	movs	r1, #0
 801a46e:	2206      	movs	r2, #6
 801a470:	7aa3      	ldrb	r3, [r4, #10]
 801a472:	9002      	str	r0, [sp, #8]
 801a474:	e88d 0006 	stmia.w	sp, {r1, r2}
 801a478:	4628      	mov	r0, r5
 801a47a:	4621      	mov	r1, r4
 801a47c:	4632      	mov	r2, r6
 801a47e:	f7fb fbc5 	bl	8015c0c <ip4_output_if>
 801a482:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801a484:	4628      	mov	r0, r5
 801a486:	f7fc fc87 	bl	8016d98 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801a48a:	4620      	mov	r0, r4
 801a48c:	b004      	add	sp, #16
 801a48e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 801a490:	f06f 0403 	mvn.w	r4, #3
 801a494:	e7f6      	b.n	801a484 <tcp_keepalive+0x3c>
    return ERR_MEM;
 801a496:	f04f 34ff 	mov.w	r4, #4294967295
 801a49a:	e7f6      	b.n	801a48a <tcp_keepalive+0x42>

0801a49c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a49c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801a4a0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 801a4a2:	4606      	mov	r6, r0

  if (seg == NULL) {
 801a4a4:	b914      	cbnz	r4, 801a4ac <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 801a4a6:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 801a4a8:	2c00      	cmp	r4, #0
 801a4aa:	d042      	beq.n	801a532 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a4ac:	68e3      	ldr	r3, [r4, #12]
 801a4ae:	8998      	ldrh	r0, [r3, #12]
 801a4b0:	f7fa fdaf 	bl	8015012 <lwip_htons>
 801a4b4:	f010 0501 	ands.w	r5, r0, #1
 801a4b8:	bf18      	it	ne
 801a4ba:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801a4bc:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a4be:	bf1c      	itt	ne
 801a4c0:	fab5 f585 	clzne	r5, r5
 801a4c4:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801a4c6:	685a      	ldr	r2, [r3, #4]
 801a4c8:	f085 0101 	eor.w	r1, r5, #1
 801a4cc:	4630      	mov	r0, r6
 801a4ce:	f7ff f9b7 	bl	8019840 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801a4d2:	4607      	mov	r7, r0
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	d03e      	beq.n	801a556 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a4d8:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 801a4dc:	b36d      	cbz	r5, 801a53a <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a4de:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 801a4e2:	2011      	movs	r0, #17
 801a4e4:	f7fa fd95 	bl	8015012 <lwip_htons>
 801a4e8:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801a4ec:	b2ad      	uxth	r5, r5
 801a4ee:	4328      	orrs	r0, r5
 801a4f0:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a4f4:	68e3      	ldr	r3, [r4, #12]
 801a4f6:	6858      	ldr	r0, [r3, #4]
 801a4f8:	f7fa fd8e 	bl	8015018 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a4fc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a4fe:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a500:	1a1b      	subs	r3, r3, r0
 801a502:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a504:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 801a508:	bfb8      	it	lt
 801a50a:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a50c:	4620      	mov	r0, r4
 801a50e:	f7fb fa17 	bl	8015940 <ip4_route>
  if (netif == NULL) {
 801a512:	b1e8      	cbz	r0, 801a550 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a514:	2100      	movs	r1, #0
 801a516:	2206      	movs	r2, #6
 801a518:	e88d 0006 	stmia.w	sp, {r1, r2}
 801a51c:	9002      	str	r0, [sp, #8]
 801a51e:	4622      	mov	r2, r4
 801a520:	7ab3      	ldrb	r3, [r6, #10]
 801a522:	4631      	mov	r1, r6
 801a524:	4638      	mov	r0, r7
 801a526:	f7fb fb71 	bl	8015c0c <ip4_output_if>
 801a52a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801a52c:	4638      	mov	r0, r7
 801a52e:	f7fc fc33 	bl	8016d98 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801a532:	4620      	mov	r0, r4
 801a534:	b004      	add	sp, #16
 801a536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a53a:	6860      	ldr	r0, [r4, #4]
 801a53c:	8922      	ldrh	r2, [r4, #8]
 801a53e:	8903      	ldrh	r3, [r0, #8]
 801a540:	1a9b      	subs	r3, r3, r2
 801a542:	b29b      	uxth	r3, r3
 801a544:	2201      	movs	r2, #1
 801a546:	f108 0114 	add.w	r1, r8, #20
 801a54a:	f7fc fec3 	bl	80172d4 <pbuf_copy_partial>
 801a54e:	e7d1      	b.n	801a4f4 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 801a550:	f06f 0403 	mvn.w	r4, #3
 801a554:	e7ea      	b.n	801a52c <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 801a556:	f04f 34ff 	mov.w	r4, #4294967295
 801a55a:	e7ea      	b.n	801a532 <tcp_zero_window_probe+0x96>

0801a55c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a560:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a562:	200a      	movs	r0, #10
{
 801a564:	460f      	mov	r7, r1
 801a566:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a568:	f7fc fa74 	bl	8016a54 <memp_malloc>
  if (timeout == NULL) {
 801a56c:	4604      	mov	r4, r0
 801a56e:	b938      	cbnz	r0, 801a580 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a570:	4b1e      	ldr	r3, [pc, #120]	; (801a5ec <sys_timeout+0x90>)
 801a572:	491f      	ldr	r1, [pc, #124]	; (801a5f0 <sys_timeout+0x94>)
 801a574:	481f      	ldr	r0, [pc, #124]	; (801a5f4 <sys_timeout+0x98>)
 801a576:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 801a578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a57c:	f001 bc5a 	b.w	801be34 <iprintf>
  now = sys_now();
 801a580:	f000 ffc0 	bl	801b504 <sys_now>
  if (next_timeout == NULL) {
 801a584:	4a1c      	ldr	r2, [pc, #112]	; (801a5f8 <sys_timeout+0x9c>)
 801a586:	491d      	ldr	r1, [pc, #116]	; (801a5fc <sys_timeout+0xa0>)
 801a588:	6813      	ldr	r3, [r2, #0]
 801a58a:	b95b      	cbnz	r3, 801a5a4 <sys_timeout+0x48>
    timeouts_last_time = now;
 801a58c:	6008      	str	r0, [r1, #0]
    diff = 0;
 801a58e:	4618      	mov	r0, r3
  timeout->next = NULL;
 801a590:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 801a592:	4428      	add	r0, r5
  timeout->next = NULL;
 801a594:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 801a596:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 801a598:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 801a59a:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 801a59c:	b92b      	cbnz	r3, 801a5aa <sys_timeout+0x4e>
    next_timeout = timeout;
 801a59e:	6014      	str	r4, [r2, #0]
 801a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 801a5a4:	6809      	ldr	r1, [r1, #0]
 801a5a6:	1a40      	subs	r0, r0, r1
 801a5a8:	e7f2      	b.n	801a590 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 801a5aa:	6859      	ldr	r1, [r3, #4]
 801a5ac:	428d      	cmp	r5, r1
 801a5ae:	d217      	bcs.n	801a5e0 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 801a5b0:	1b4d      	subs	r5, r1, r5
 801a5b2:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 801a5b4:	6023      	str	r3, [r4, #0]
 801a5b6:	e7f2      	b.n	801a59e <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 801a5b8:	684e      	ldr	r6, [r1, #4]
 801a5ba:	42b2      	cmp	r2, r6
 801a5bc:	d312      	bcc.n	801a5e4 <sys_timeout+0x88>
 801a5be:	4608      	mov	r0, r1
      timeout->time -= t->time;
 801a5c0:	6841      	ldr	r1, [r0, #4]
 801a5c2:	6862      	ldr	r2, [r4, #4]
 801a5c4:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 801a5c6:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 801a5c8:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801a5ca:	2900      	cmp	r1, #0
 801a5cc:	d1f4      	bne.n	801a5b8 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 801a5ce:	4295      	cmp	r5, r2
 801a5d0:	d202      	bcs.n	801a5d8 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 801a5d2:	685b      	ldr	r3, [r3, #4]
 801a5d4:	441d      	add	r5, r3
 801a5d6:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 801a5d8:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 801a5da:	6004      	str	r4, [r0, #0]
        break;
 801a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	e7ed      	b.n	801a5c0 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 801a5e4:	1ab2      	subs	r2, r6, r2
 801a5e6:	604a      	str	r2, [r1, #4]
 801a5e8:	e7f6      	b.n	801a5d8 <sys_timeout+0x7c>
 801a5ea:	bf00      	nop
 801a5ec:	08020648 	.word	0x08020648
 801a5f0:	0802067c 	.word	0x0802067c
 801a5f4:	0801c6e3 	.word	0x0801c6e3
 801a5f8:	200040fc 	.word	0x200040fc
 801a5fc:	20004104 	.word	0x20004104

0801a600 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a600:	4b08      	ldr	r3, [pc, #32]	; (801a624 <tcp_timer_needed+0x24>)
 801a602:	681a      	ldr	r2, [r3, #0]
 801a604:	b962      	cbnz	r2, 801a620 <tcp_timer_needed+0x20>
 801a606:	4a08      	ldr	r2, [pc, #32]	; (801a628 <tcp_timer_needed+0x28>)
 801a608:	6812      	ldr	r2, [r2, #0]
 801a60a:	b912      	cbnz	r2, 801a612 <tcp_timer_needed+0x12>
 801a60c:	4a07      	ldr	r2, [pc, #28]	; (801a62c <tcp_timer_needed+0x2c>)
 801a60e:	6812      	ldr	r2, [r2, #0]
 801a610:	b132      	cbz	r2, 801a620 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801a612:	2201      	movs	r2, #1
 801a614:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a616:	4906      	ldr	r1, [pc, #24]	; (801a630 <tcp_timer_needed+0x30>)
 801a618:	2200      	movs	r2, #0
 801a61a:	20fa      	movs	r0, #250	; 0xfa
 801a61c:	f7ff bf9e 	b.w	801a55c <sys_timeout>
 801a620:	4770      	bx	lr
 801a622:	bf00      	nop
 801a624:	20004100 	.word	0x20004100
 801a628:	20008adc 	.word	0x20008adc
 801a62c:	20008aec 	.word	0x20008aec
 801a630:	0801a635 	.word	0x0801a635

0801a634 <tcpip_tcp_timer>:
{
 801a634:	b508      	push	{r3, lr}
  tcp_tmr();
 801a636:	f7fd fc15 	bl	8017e64 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a63a:	4b08      	ldr	r3, [pc, #32]	; (801a65c <tcpip_tcp_timer+0x28>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	b913      	cbnz	r3, 801a646 <tcpip_tcp_timer+0x12>
 801a640:	4b07      	ldr	r3, [pc, #28]	; (801a660 <tcpip_tcp_timer+0x2c>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	b133      	cbz	r3, 801a654 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a646:	2200      	movs	r2, #0
 801a648:	4906      	ldr	r1, [pc, #24]	; (801a664 <tcpip_tcp_timer+0x30>)
 801a64a:	20fa      	movs	r0, #250	; 0xfa
}
 801a64c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a650:	f7ff bf84 	b.w	801a55c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 801a654:	4a04      	ldr	r2, [pc, #16]	; (801a668 <tcpip_tcp_timer+0x34>)
 801a656:	6013      	str	r3, [r2, #0]
 801a658:	bd08      	pop	{r3, pc}
 801a65a:	bf00      	nop
 801a65c:	20008adc 	.word	0x20008adc
 801a660:	20008aec 	.word	0x20008aec
 801a664:	0801a635 	.word	0x0801a635
 801a668:	20004100 	.word	0x20004100

0801a66c <sys_timeouts_init>:
{
 801a66c:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801a66e:	4d0a      	ldr	r5, [pc, #40]	; (801a698 <sys_timeouts_init+0x2c>)
 801a670:	4c0a      	ldr	r4, [pc, #40]	; (801a69c <sys_timeouts_init+0x30>)
 801a672:	f105 0208 	add.w	r2, r5, #8
 801a676:	4621      	mov	r1, r4
 801a678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a67c:	f7ff ff6e 	bl	801a55c <sys_timeout>
 801a680:	f105 0210 	add.w	r2, r5, #16
 801a684:	4621      	mov	r1, r4
 801a686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a68a:	f7ff ff67 	bl	801a55c <sys_timeout>
  timeouts_last_time = sys_now();
 801a68e:	f000 ff39 	bl	801b504 <sys_now>
 801a692:	4b03      	ldr	r3, [pc, #12]	; (801a6a0 <sys_timeouts_init+0x34>)
 801a694:	6018      	str	r0, [r3, #0]
 801a696:	bd38      	pop	{r3, r4, r5, pc}
 801a698:	08020630 	.word	0x08020630
 801a69c:	0801a6a5 	.word	0x0801a6a5
 801a6a0:	20004104 	.word	0x20004104

0801a6a4 <cyclic_timer>:
{
 801a6a4:	b510      	push	{r4, lr}
 801a6a6:	4604      	mov	r4, r0
  cyclic->handler();
 801a6a8:	6843      	ldr	r3, [r0, #4]
 801a6aa:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	6820      	ldr	r0, [r4, #0]
 801a6b0:	4902      	ldr	r1, [pc, #8]	; (801a6bc <cyclic_timer+0x18>)
}
 801a6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801a6b6:	f7ff bf51 	b.w	801a55c <sys_timeout>
 801a6ba:	bf00      	nop
 801a6bc:	0801a6a5 	.word	0x0801a6a5

0801a6c0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801a6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801a6c4:	4d24      	ldr	r5, [pc, #144]	; (801a758 <sys_timeouts_mbox_fetch+0x98>)
  diff = sys_now() - timeouts_last_time;
 801a6c6:	4c25      	ldr	r4, [pc, #148]	; (801a75c <sys_timeouts_mbox_fetch+0x9c>)
{
 801a6c8:	4681      	mov	r9, r0
 801a6ca:	468a      	mov	sl, r1
 801a6cc:	462e      	mov	r6, r5
  if (!next_timeout) {
 801a6ce:	682a      	ldr	r2, [r5, #0]
 801a6d0:	b932      	cbnz	r2, 801a6e0 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801a6d2:	4651      	mov	r1, sl
 801a6d4:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 801a6d6:	b003      	add	sp, #12
 801a6d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 801a6dc:	f000 ba26 	b.w	801ab2c <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 801a6e0:	f000 ff10 	bl	801b504 <sys_now>
 801a6e4:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 801a6e6:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 801a6e8:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 801a6ea:	685a      	ldr	r2, [r3, #4]
 801a6ec:	4290      	cmp	r0, r2
 801a6ee:	d928      	bls.n	801a742 <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 801a6f0:	6833      	ldr	r3, [r6, #0]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d0eb      	beq.n	801a6ce <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 801a6f6:	f000 ff05 	bl	801b504 <sys_now>
    diff = now - timeouts_last_time;
 801a6fa:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 801a6fc:	4f18      	ldr	r7, [pc, #96]	; (801a760 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 801a6fe:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 801a702:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801a704:	2900      	cmp	r1, #0
 801a706:	d0e2      	beq.n	801a6ce <sys_timeouts_mbox_fetch+0xe>
 801a708:	684a      	ldr	r2, [r1, #4]
 801a70a:	455a      	cmp	r2, fp
 801a70c:	d8df      	bhi.n	801a6ce <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 801a70e:	6820      	ldr	r0, [r4, #0]
        handler = tmptimeout->h;
 801a710:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 801a714:	68cb      	ldr	r3, [r1, #12]
 801a716:	9301      	str	r3, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 801a718:	4410      	add	r0, r2
 801a71a:	6020      	str	r0, [r4, #0]
        diff -= tmptimeout->time;
 801a71c:	ebab 0b02 	sub.w	fp, fp, r2
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a720:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 801a722:	680a      	ldr	r2, [r1, #0]
 801a724:	6032      	str	r2, [r6, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a726:	f7fc f9b1 	bl	8016a8c <memp_free>
        if (handler != NULL) {
 801a72a:	f1b8 0f00 	cmp.w	r8, #0
 801a72e:	d0e8      	beq.n	801a702 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 801a730:	4638      	mov	r0, r7
 801a732:	f000 fa92 	bl	801ac5a <sys_mutex_lock>
          handler(arg);
 801a736:	9801      	ldr	r0, [sp, #4]
 801a738:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 801a73a:	4638      	mov	r0, r7
 801a73c:	f000 fa92 	bl	801ac64 <sys_mutex_unlock>
 801a740:	e7df      	b.n	801a702 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801a742:	1a12      	subs	r2, r2, r0
 801a744:	d0d4      	beq.n	801a6f0 <sys_timeouts_mbox_fetch+0x30>
 801a746:	4651      	mov	r1, sl
 801a748:	4648      	mov	r0, r9
 801a74a:	f000 f9ef 	bl	801ab2c <sys_arch_mbox_fetch>
 801a74e:	3001      	adds	r0, #1
 801a750:	d0ce      	beq.n	801a6f0 <sys_timeouts_mbox_fetch+0x30>
}
 801a752:	b003      	add	sp, #12
 801a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a758:	200040fc 	.word	0x200040fc
 801a75c:	20004104 	.word	0x20004104
 801a760:	200044bc 	.word	0x200044bc

0801a764 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a764:	4770      	bx	lr
	...

0801a768 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a76c:	8943      	ldrh	r3, [r0, #10]
 801a76e:	2b07      	cmp	r3, #7
{
 801a770:	b085      	sub	sp, #20
 801a772:	4605      	mov	r5, r0
 801a774:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 801a776:	d805      	bhi.n	801a784 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a778:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a77a:	b005      	add	sp, #20
 801a77c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801a780:	f7fc bb0a 	b.w	8016d98 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a784:	4e3e      	ldr	r6, [pc, #248]	; (801a880 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 801a786:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a788:	6831      	ldr	r1, [r6, #0]
 801a78a:	6970      	ldr	r0, [r6, #20]
 801a78c:	f7fb fa4f 	bl	8015c2e <ip4_addr_isbroadcast_u32>
 801a790:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 801a792:	8820      	ldrh	r0, [r4, #0]
 801a794:	f7fa fc3d 	bl	8015012 <lwip_htons>
 801a798:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 801a79a:	8860      	ldrh	r0, [r4, #2]
 801a79c:	f7fa fc39 	bl	8015012 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a7a0:	4a38      	ldr	r2, [pc, #224]	; (801a884 <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a7a2:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a7a4:	f8d6 e010 	ldr.w	lr, [r6, #16]
 801a7a8:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801a7aa:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a7ac:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 801a7ae:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a7b0:	4603      	mov	r3, r0
  prev = NULL;
 801a7b2:	46a4      	mov	ip, r4
 801a7b4:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a7b6:	b92b      	cbnz	r3, 801a7c4 <udp_input+0x5c>
  if (pcb != NULL) {
 801a7b8:	bb0c      	cbnz	r4, 801a7fe <udp_input+0x96>
  if (for_us) {
 801a7ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a7be:	428b      	cmp	r3, r1
 801a7c0:	d1da      	bne.n	801a778 <udp_input+0x10>
 801a7c2:	e01c      	b.n	801a7fe <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 801a7c4:	8a5a      	ldrh	r2, [r3, #18]
 801a7c6:	4552      	cmp	r2, sl
 801a7c8:	d12b      	bne.n	801a822 <udp_input+0xba>
 801a7ca:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 801a7cc:	b32f      	cbz	r7, 801a81a <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a7ce:	b13a      	cbz	r2, 801a7e0 <udp_input+0x78>
 801a7d0:	1c4e      	adds	r6, r1, #1
 801a7d2:	d005      	beq.n	801a7e0 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a7d4:	404a      	eors	r2, r1
 801a7d6:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a7d8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801a7dc:	4216      	tst	r6, r2
 801a7de:	d120      	bne.n	801a822 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801a7e0:	7c1a      	ldrb	r2, [r3, #16]
 801a7e2:	0752      	lsls	r2, r2, #29
 801a7e4:	d402      	bmi.n	801a7ec <udp_input+0x84>
 801a7e6:	2c00      	cmp	r4, #0
 801a7e8:	bf08      	it	eq
 801a7ea:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 801a7ec:	8a9a      	ldrh	r2, [r3, #20]
 801a7ee:	4542      	cmp	r2, r8
 801a7f0:	d117      	bne.n	801a822 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a7f2:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a7f4:	b9c2      	cbnz	r2, 801a828 <udp_input+0xc0>
        if (prev != NULL) {
 801a7f6:	f1bc 0f00 	cmp.w	ip, #0
 801a7fa:	d118      	bne.n	801a82e <udp_input+0xc6>
 801a7fc:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 801a7fe:	f06f 0107 	mvn.w	r1, #7
 801a802:	4628      	mov	r0, r5
 801a804:	f7fc fac2 	bl	8016d8c <pbuf_header>
 801a808:	b1c0      	cbz	r0, 801a83c <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801a80a:	4b1f      	ldr	r3, [pc, #124]	; (801a888 <udp_input+0x120>)
 801a80c:	491f      	ldr	r1, [pc, #124]	; (801a88c <udp_input+0x124>)
 801a80e:	4820      	ldr	r0, [pc, #128]	; (801a890 <udp_input+0x128>)
 801a810:	f240 1255 	movw	r2, #341	; 0x155
 801a814:	f001 fb0e 	bl	801be34 <iprintf>
 801a818:	e7ae      	b.n	801a778 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a81a:	2a00      	cmp	r2, #0
 801a81c:	d0e0      	beq.n	801a7e0 <udp_input+0x78>
 801a81e:	428a      	cmp	r2, r1
 801a820:	d0de      	beq.n	801a7e0 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a822:	469c      	mov	ip, r3
 801a824:	68db      	ldr	r3, [r3, #12]
 801a826:	e7c6      	b.n	801a7b6 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a828:	4572      	cmp	r2, lr
 801a82a:	d1fa      	bne.n	801a822 <udp_input+0xba>
 801a82c:	e7e3      	b.n	801a7f6 <udp_input+0x8e>
          prev->next = pcb->next;
 801a82e:	68da      	ldr	r2, [r3, #12]
 801a830:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 801a834:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 801a838:	60d8      	str	r0, [r3, #12]
 801a83a:	e7df      	b.n	801a7fc <udp_input+0x94>
    if (pcb != NULL) {
 801a83c:	b164      	cbz	r4, 801a858 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 801a83e:	69a6      	ldr	r6, [r4, #24]
 801a840:	2e00      	cmp	r6, #0
 801a842:	d099      	beq.n	801a778 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a844:	f8cd 8000 	str.w	r8, [sp]
 801a848:	4b12      	ldr	r3, [pc, #72]	; (801a894 <udp_input+0x12c>)
 801a84a:	69e0      	ldr	r0, [r4, #28]
 801a84c:	462a      	mov	r2, r5
 801a84e:	4621      	mov	r1, r4
 801a850:	47b0      	blx	r6
}
 801a852:	b005      	add	sp, #20
 801a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a858:	2f00      	cmp	r7, #0
 801a85a:	d18d      	bne.n	801a778 <udp_input+0x10>
 801a85c:	9b03      	ldr	r3, [sp, #12]
 801a85e:	695b      	ldr	r3, [r3, #20]
 801a860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a864:	2be0      	cmp	r3, #224	; 0xe0
 801a866:	d087      	beq.n	801a778 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a868:	9b03      	ldr	r3, [sp, #12]
 801a86a:	8999      	ldrh	r1, [r3, #12]
 801a86c:	3108      	adds	r1, #8
 801a86e:	b209      	sxth	r1, r1
 801a870:	4628      	mov	r0, r5
 801a872:	f7fc fa8e 	bl	8016d92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a876:	2103      	movs	r1, #3
 801a878:	4628      	mov	r0, r5
 801a87a:	f7fb f857 	bl	801592c <icmp_dest_unreach>
 801a87e:	e77b      	b.n	801a778 <udp_input+0x10>
 801a880:	200044c0 	.word	0x200044c0
 801a884:	20008af4 	.word	0x20008af4
 801a888:	080206b9 	.word	0x080206b9
 801a88c:	080206e8 	.word	0x080206e8
 801a890:	0801c6e3 	.word	0x0801c6e3
 801a894:	200044d0 	.word	0x200044d0

0801a898 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801a898:	4b26      	ldr	r3, [pc, #152]	; (801a934 <udp_bind+0x9c>)
{
 801a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801a89e:	2900      	cmp	r1, #0
 801a8a0:	bf08      	it	eq
 801a8a2:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	d040      	beq.n	801a92a <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a8a8:	4e23      	ldr	r6, [pc, #140]	; (801a938 <udp_bind+0xa0>)
 801a8aa:	f8d6 e000 	ldr.w	lr, [r6]
 801a8ae:	4675      	mov	r5, lr
 801a8b0:	b96d      	cbnz	r5, 801a8ce <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 801a8b2:	b192      	cbz	r2, 801a8da <udp_bind+0x42>
 801a8b4:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a8b6:	b1fb      	cbz	r3, 801a8f8 <udp_bind+0x60>
      if (pcb != ipcb) {
 801a8b8:	4283      	cmp	r3, r0
 801a8ba:	d006      	beq.n	801a8ca <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a8bc:	8a5c      	ldrh	r4, [r3, #18]
 801a8be:	4294      	cmp	r4, r2
 801a8c0:	d103      	bne.n	801a8ca <udp_bind+0x32>
 801a8c2:	681f      	ldr	r7, [r3, #0]
 801a8c4:	680c      	ldr	r4, [r1, #0]
 801a8c6:	42a7      	cmp	r7, r4
 801a8c8:	d029      	beq.n	801a91e <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a8ca:	68db      	ldr	r3, [r3, #12]
 801a8cc:	e7f3      	b.n	801a8b6 <udp_bind+0x1e>
    if (pcb == ipcb) {
 801a8ce:	4285      	cmp	r5, r0
 801a8d0:	d001      	beq.n	801a8d6 <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a8d2:	68ed      	ldr	r5, [r5, #12]
 801a8d4:	e7ec      	b.n	801a8b0 <udp_bind+0x18>
      rebind = 1;
 801a8d6:	2501      	movs	r5, #1
 801a8d8:	e7eb      	b.n	801a8b2 <udp_bind+0x1a>
 801a8da:	4b18      	ldr	r3, [pc, #96]	; (801a93c <udp_bind+0xa4>)
 801a8dc:	881a      	ldrh	r2, [r3, #0]
  if (port == 0) {
 801a8de:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a8e2:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801a8e6:	4562      	cmp	r2, ip
 801a8e8:	bf1a      	itte	ne
 801a8ea:	3201      	addne	r2, #1
 801a8ec:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a8ee:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a8f2:	4677      	mov	r7, lr
 801a8f4:	b957      	cbnz	r7, 801a90c <udp_bind+0x74>
 801a8f6:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a8f8:	680b      	ldr	r3, [r1, #0]
 801a8fa:	6003      	str	r3, [r0, #0]

  pcb->local_port = port;
 801a8fc:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a8fe:	b915      	cbnz	r5, 801a906 <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a900:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 801a904:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a906:	2000      	movs	r0, #0
 801a908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 801a90c:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 801a910:	4590      	cmp	r8, r2
 801a912:	d108      	bne.n	801a926 <udp_bind+0x8e>
 801a914:	3c01      	subs	r4, #1
 801a916:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a918:	2c00      	cmp	r4, #0
 801a91a:	d1e4      	bne.n	801a8e6 <udp_bind+0x4e>
 801a91c:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 801a91e:	f06f 0007 	mvn.w	r0, #7
 801a922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a926:	68ff      	ldr	r7, [r7, #12]
 801a928:	e7e4      	b.n	801a8f4 <udp_bind+0x5c>
    return ERR_VAL;
 801a92a:	f06f 0005 	mvn.w	r0, #5
}
 801a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a932:	bf00      	nop
 801a934:	0801f2e4 	.word	0x0801f2e4
 801a938:	20008af4 	.word	0x20008af4
 801a93c:	2000000e 	.word	0x2000000e

0801a940 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a940:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 801a942:	61c2      	str	r2, [r0, #28]
 801a944:	4770      	bx	lr
	...

0801a948 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a948:	4a0a      	ldr	r2, [pc, #40]	; (801a974 <udp_remove+0x2c>)
 801a94a:	6813      	ldr	r3, [r2, #0]
 801a94c:	4283      	cmp	r3, r0
{
 801a94e:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 801a950:	d104      	bne.n	801a95c <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a952:	68c3      	ldr	r3, [r0, #12]
 801a954:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a956:	2000      	movs	r0, #0
 801a958:	f7fc b898 	b.w	8016a8c <memp_free>
{
 801a95c:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d0f9      	beq.n	801a956 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a962:	68db      	ldr	r3, [r3, #12]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d0f6      	beq.n	801a956 <udp_remove+0xe>
 801a968:	4299      	cmp	r1, r3
 801a96a:	d1f7      	bne.n	801a95c <udp_remove+0x14>
        pcb2->next = pcb->next;
 801a96c:	68cb      	ldr	r3, [r1, #12]
 801a96e:	60d3      	str	r3, [r2, #12]
        break;
 801a970:	e7f1      	b.n	801a956 <udp_remove+0xe>
 801a972:	bf00      	nop
 801a974:	20008af4 	.word	0x20008af4

0801a978 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a978:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a97a:	2000      	movs	r0, #0
 801a97c:	f7fc f86a 	bl	8016a54 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a980:	4604      	mov	r4, r0
 801a982:	b128      	cbz	r0, 801a990 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a984:	2220      	movs	r2, #32
 801a986:	2100      	movs	r1, #0
 801a988:	f001 fd5a 	bl	801c440 <memset>
    pcb->ttl = UDP_TTL;
 801a98c:	23ff      	movs	r3, #255	; 0xff
 801a98e:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801a990:	4620      	mov	r0, r4
 801a992:	bd10      	pop	{r4, pc}

0801a994 <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 801a994:	f7ff bff0 	b.w	801a978 <udp_new>

0801a998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801a998:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a99a:	b138      	cbz	r0, 801a9ac <udp_netif_ip_addr_changed+0x14>
 801a99c:	6803      	ldr	r3, [r0, #0]
 801a99e:	b12b      	cbz	r3, 801a9ac <udp_netif_ip_addr_changed+0x14>
 801a9a0:	b121      	cbz	r1, 801a9ac <udp_netif_ip_addr_changed+0x14>
 801a9a2:	680b      	ldr	r3, [r1, #0]
 801a9a4:	b113      	cbz	r3, 801a9ac <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a9a6:	4b06      	ldr	r3, [pc, #24]	; (801a9c0 <udp_netif_ip_addr_changed+0x28>)
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	b903      	cbnz	r3, 801a9ae <udp_netif_ip_addr_changed+0x16>
 801a9ac:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a9ae:	681c      	ldr	r4, [r3, #0]
 801a9b0:	6802      	ldr	r2, [r0, #0]
 801a9b2:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a9b4:	bf04      	itt	eq
 801a9b6:	680a      	ldreq	r2, [r1, #0]
 801a9b8:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a9ba:	68db      	ldr	r3, [r3, #12]
 801a9bc:	e7f5      	b.n	801a9aa <udp_netif_ip_addr_changed+0x12>
 801a9be:	bf00      	nop
 801a9c0:	20008af4 	.word	0x20008af4

0801a9c4 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801a9c4:	8943      	ldrh	r3, [r0, #10]
 801a9c6:	2b0e      	cmp	r3, #14
{
 801a9c8:	b570      	push	{r4, r5, r6, lr}
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 801a9ce:	d914      	bls.n	801a9fa <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a9d0:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a9d2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801a9d4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801a9d6:	07d9      	lsls	r1, r3, #31
 801a9d8:	d50a      	bpl.n	801a9f0 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a9da:	2b01      	cmp	r3, #1
 801a9dc:	d111      	bne.n	801aa02 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a9de:	7843      	ldrb	r3, [r0, #1]
 801a9e0:	b933      	cbnz	r3, 801a9f0 <ethernet_input+0x2c>
 801a9e2:	7883      	ldrb	r3, [r0, #2]
 801a9e4:	2b5e      	cmp	r3, #94	; 0x5e
 801a9e6:	d103      	bne.n	801a9f0 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a9e8:	7b63      	ldrb	r3, [r4, #13]
 801a9ea:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a9ee:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801a9f0:	2e08      	cmp	r6, #8
 801a9f2:	d010      	beq.n	801aa16 <ethernet_input+0x52>
 801a9f4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801a9f8:	d01e      	beq.n	801aa38 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f7fc f9cc 	bl	8016d98 <pbuf_free>
  return ERR_OK;
 801aa00:	e018      	b.n	801aa34 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aa02:	2206      	movs	r2, #6
 801aa04:	4914      	ldr	r1, [pc, #80]	; (801aa58 <ethernet_input+0x94>)
 801aa06:	f001 fd01 	bl	801c40c <memcmp>
 801aa0a:	2800      	cmp	r0, #0
 801aa0c:	d1f0      	bne.n	801a9f0 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 801aa0e:	7b63      	ldrb	r3, [r4, #13]
 801aa10:	f043 0308 	orr.w	r3, r3, #8
 801aa14:	e7eb      	b.n	801a9ee <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa16:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 801aa1a:	071a      	lsls	r2, r3, #28
 801aa1c:	d5ed      	bpl.n	801a9fa <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801aa1e:	f06f 010d 	mvn.w	r1, #13
 801aa22:	4620      	mov	r0, r4
 801aa24:	f7fc f9b2 	bl	8016d8c <pbuf_header>
 801aa28:	2800      	cmp	r0, #0
 801aa2a:	d1e6      	bne.n	801a9fa <ethernet_input+0x36>
        ip4_input(p, netif);
 801aa2c:	4629      	mov	r1, r5
 801aa2e:	4620      	mov	r0, r4
 801aa30:	f7fa ffb2 	bl	8015998 <ip4_input>
}
 801aa34:	2000      	movs	r0, #0
 801aa36:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa38:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 801aa3c:	071b      	lsls	r3, r3, #28
 801aa3e:	d5dc      	bpl.n	801a9fa <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801aa40:	f06f 010d 	mvn.w	r1, #13
 801aa44:	4620      	mov	r0, r4
 801aa46:	f7fc f9a1 	bl	8016d8c <pbuf_header>
 801aa4a:	2800      	cmp	r0, #0
 801aa4c:	d1d5      	bne.n	801a9fa <ethernet_input+0x36>
        etharp_input(p, netif);
 801aa4e:	4629      	mov	r1, r5
 801aa50:	4620      	mov	r0, r4
 801aa52:	f7fa fc13 	bl	801527c <etharp_input>
      break;
 801aa56:	e7ed      	b.n	801aa34 <ethernet_input+0x70>
 801aa58:	080206fc 	.word	0x080206fc

0801aa5c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa60:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801aa62:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 801aa66:	460d      	mov	r5, r1
 801aa68:	4616      	mov	r6, r2
 801aa6a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801aa6c:	f7fa fad1 	bl	8015012 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801aa70:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801aa72:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801aa74:	4628      	mov	r0, r5
 801aa76:	f7fc f989 	bl	8016d8c <pbuf_header>
 801aa7a:	b9e0      	cbnz	r0, 801aab6 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801aa7c:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 801aa7e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	600b      	str	r3, [r1, #0]
 801aa86:	88bb      	ldrh	r3, [r7, #4]
 801aa88:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801aa8a:	6833      	ldr	r3, [r6, #0]
 801aa8c:	f8c1 3006 	str.w	r3, [r1, #6]
 801aa90:	88b3      	ldrh	r3, [r6, #4]
 801aa92:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801aa94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801aa98:	2b06      	cmp	r3, #6
 801aa9a:	d006      	beq.n	801aaaa <ethernet_output+0x4e>
 801aa9c:	4b08      	ldr	r3, [pc, #32]	; (801aac0 <ethernet_output+0x64>)
 801aa9e:	4909      	ldr	r1, [pc, #36]	; (801aac4 <ethernet_output+0x68>)
 801aaa0:	4809      	ldr	r0, [pc, #36]	; (801aac8 <ethernet_output+0x6c>)
 801aaa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801aaa6:	f001 f9c5 	bl	801be34 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801aaaa:	69a3      	ldr	r3, [r4, #24]
 801aaac:	4629      	mov	r1, r5
 801aaae:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801aab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801aab4:	4718      	bx	r3
}
 801aab6:	f06f 0001 	mvn.w	r0, #1
 801aaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aabe:	bf00      	nop
 801aac0:	08020702 	.word	0x08020702
 801aac4:	08020737 	.word	0x08020737
 801aac8:	0801c6e3 	.word	0x0801c6e3

0801aacc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801aacc:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 801aace:	2304      	movs	r3, #4
{
 801aad0:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801aad2:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801aad4:	4668      	mov	r0, sp
 801aad6:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 801aad8:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801aada:	f7f7 fbb9 	bl	8012250 <osMessageCreate>
 801aade:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801aae0:	fab0 f080 	clz	r0, r0
 801aae4:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 801aae6:	4240      	negs	r0, r0
 801aae8:	b002      	add	sp, #8
 801aaea:	bd10      	pop	{r4, pc}

0801aaec <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801aaec:	b510      	push	{r4, lr}
 801aaee:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 801aaf0:	6800      	ldr	r0, [r0, #0]
 801aaf2:	f7f7 fc13 	bl	801231c <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 801aaf6:	6820      	ldr	r0, [r4, #0]

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osMessageDelete(*mbox);
 801aafc:	f7f7 bc15 	b.w	801232a <osMessageDelete>

0801ab00 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801ab00:	b538      	push	{r3, r4, r5, lr}
 801ab02:	4604      	mov	r4, r0
 801ab04:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801ab06:	f04f 32ff 	mov.w	r2, #4294967295
 801ab0a:	4629      	mov	r1, r5
 801ab0c:	6820      	ldr	r0, [r4, #0]
 801ab0e:	f7f7 fba3 	bl	8012258 <osMessagePut>
 801ab12:	2800      	cmp	r0, #0
 801ab14:	d1f7      	bne.n	801ab06 <sys_mbox_post+0x6>
}
 801ab16:	bd38      	pop	{r3, r4, r5, pc}

0801ab18 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ab18:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	6800      	ldr	r0, [r0, #0]
 801ab1e:	f7f7 fb9b 	bl	8012258 <osMessagePut>
 801ab22:	3000      	adds	r0, #0
 801ab24:	bf18      	it	ne
 801ab26:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 801ab28:	4240      	negs	r0, r0
 801ab2a:	bd08      	pop	{r3, pc}

0801ab2c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab2e:	b085      	sub	sp, #20
 801ab30:	4606      	mov	r6, r0
 801ab32:	460d      	mov	r5, r1
 801ab34:	4617      	mov	r7, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801ab36:	f7f7 fad6 	bl	80120e6 <osKernelSysTick>
 801ab3a:	4604      	mov	r4, r0
  
  if(timeout != 0)
 801ab3c:	b177      	cbz	r7, 801ab5c <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 801ab3e:	463a      	mov	r2, r7
 801ab40:	6831      	ldr	r1, [r6, #0]
 801ab42:	a801      	add	r0, sp, #4
 801ab44:	f7f7 fbb0 	bl	80122a8 <osMessageGet>
    
    if(event.status == osEventMessage)
 801ab48:	9b01      	ldr	r3, [sp, #4]
 801ab4a:	2b10      	cmp	r3, #16
 801ab4c:	d10d      	bne.n	801ab6a <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 801ab4e:	9b02      	ldr	r3, [sp, #8]
 801ab50:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 801ab52:	f7f7 fac8 	bl	80120e6 <osKernelSysTick>
 801ab56:	1b00      	subs	r0, r0, r4
  }
}
 801ab58:	b005      	add	sp, #20
 801ab5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801ab5c:	f04f 32ff 	mov.w	r2, #4294967295
 801ab60:	6831      	ldr	r1, [r6, #0]
 801ab62:	a801      	add	r0, sp, #4
 801ab64:	f7f7 fba0 	bl	80122a8 <osMessageGet>
 801ab68:	e7f1      	b.n	801ab4e <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 801ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab6e:	e7f3      	b.n	801ab58 <sys_arch_mbox_fetch+0x2c>

0801ab70 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab72:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 801ab74:	2200      	movs	r2, #0
 801ab76:	6801      	ldr	r1, [r0, #0]
 801ab78:	a801      	add	r0, sp, #4
 801ab7a:	f7f7 fb95 	bl	80122a8 <osMessageGet>
  
  if(event.status == osEventMessage)
 801ab7e:	9b01      	ldr	r3, [sp, #4]
 801ab80:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 801ab82:	bf03      	ittte	eq
 801ab84:	9b02      	ldreq	r3, [sp, #8]
 801ab86:	6023      	streq	r3, [r4, #0]
    return ERR_OK;
 801ab88:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ab8a:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 801ab8e:	b004      	add	sp, #16
 801ab90:	bd10      	pop	{r4, pc}

0801ab92 <sys_mbox_valid>:
 801ab92:	6800      	ldr	r0, [r0, #0]
 801ab94:	3000      	adds	r0, #0
 801ab96:	bf18      	it	ne
 801ab98:	2001      	movne	r0, #1
 801ab9a:	4770      	bx	lr

0801ab9c <sys_mbox_set_invalid>:
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	6003      	str	r3, [r0, #0]
 801aba0:	4770      	bx	lr

0801aba2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801aba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aba4:	4606      	mov	r6, r0
  osSemaphoreDef(SEM);
 801aba6:	a802      	add	r0, sp, #8
 801aba8:	2400      	movs	r4, #0
{
 801abaa:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 801abac:	f840 4d04 	str.w	r4, [r0, #-4]!

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801abb0:	2101      	movs	r1, #1
 801abb2:	f7f7 faeb 	bl	801218c <osSemaphoreCreate>
 801abb6:	6030      	str	r0, [r6, #0]
	
  if(*sem == NULL)
 801abb8:	b130      	cbz	r0, 801abc8 <sys_sem_new+0x26>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 801abba:	b945      	cbnz	r5, 801abce <sys_sem_new+0x2c>
  {
    osSemaphoreWait(*sem,0);
 801abbc:	4629      	mov	r1, r5
 801abbe:	f7f7 faf9 	bl	80121b4 <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 801abc2:	4628      	mov	r0, r5
}
 801abc4:	b002      	add	sp, #8
 801abc6:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
 801abc8:	f04f 30ff 	mov.w	r0, #4294967295
 801abcc:	e7fa      	b.n	801abc4 <sys_sem_new+0x22>
	return ERR_OK;
 801abce:	4620      	mov	r0, r4
 801abd0:	e7f8      	b.n	801abc4 <sys_sem_new+0x22>

0801abd2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801abd2:	b570      	push	{r4, r5, r6, lr}
 801abd4:	4605      	mov	r5, r0
 801abd6:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 801abd8:	f7f7 fa85 	bl	80120e6 <osKernelSysTick>
 801abdc:	4604      	mov	r4, r0
  
  if(timeout != 0)
 801abde:	b146      	cbz	r6, 801abf2 <sys_arch_sem_wait+0x20>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801abe0:	4631      	mov	r1, r6
 801abe2:	6828      	ldr	r0, [r5, #0]
 801abe4:	f7f7 fae6 	bl	80121b4 <osSemaphoreWait>
 801abe8:	b958      	cbnz	r0, 801ac02 <sys_arch_sem_wait+0x30>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 801abea:	f7f7 fa7c 	bl	80120e6 <osKernelSysTick>
 801abee:	1b00      	subs	r0, r0, r4
 801abf0:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801abf2:	f04f 31ff 	mov.w	r1, #4294967295
 801abf6:	6828      	ldr	r0, [r5, #0]
 801abf8:	f7f7 fadc 	bl	80121b4 <osSemaphoreWait>
 801abfc:	2800      	cmp	r0, #0
 801abfe:	d1f8      	bne.n	801abf2 <sys_arch_sem_wait+0x20>
 801ac00:	e7f3      	b.n	801abea <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 801ac02:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801ac06:	bd70      	pop	{r4, r5, r6, pc}

0801ac08 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 801ac08:	6800      	ldr	r0, [r0, #0]
 801ac0a:	f7f7 bafb 	b.w	8012204 <osSemaphoreRelease>

0801ac0e <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 801ac0e:	6800      	ldr	r0, [r0, #0]
 801ac10:	f7f7 bb95 	b.w	801233e <osSemaphoreDelete>

0801ac14 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 801ac14:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;                                       
}
 801ac16:	3000      	adds	r0, #0
 801ac18:	bf18      	it	ne
 801ac1a:	2001      	movne	r0, #1
 801ac1c:	4770      	bx	lr

0801ac1e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 801ac1e:	2300      	movs	r3, #0
 801ac20:	6003      	str	r3, [r0, #0]
 801ac22:	4770      	bx	lr

0801ac24 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801ac24:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ac26:	4803      	ldr	r0, [pc, #12]	; (801ac34 <sys_init+0x10>)
 801ac28:	f7f7 fa84 	bl	8012134 <osMutexCreate>
 801ac2c:	4b02      	ldr	r3, [pc, #8]	; (801ac38 <sys_init+0x14>)
 801ac2e:	6018      	str	r0, [r3, #0]
 801ac30:	bd08      	pop	{r3, pc}
 801ac32:	bf00      	nop
 801ac34:	08020770 	.word	0x08020770
 801ac38:	20008afc 	.word	0x20008afc

0801ac3c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ac3c:	b513      	push	{r0, r1, r4, lr}
 801ac3e:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 801ac40:	a802      	add	r0, sp, #8
 801ac42:	2300      	movs	r3, #0
 801ac44:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ac48:	f7f7 fa74 	bl	8012134 <osMutexCreate>
 801ac4c:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801ac4e:	fab0 f080 	clz	r0, r0
 801ac52:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 801ac54:	4240      	negs	r0, r0
 801ac56:	b002      	add	sp, #8
 801ac58:	bd10      	pop	{r4, pc}

0801ac5a <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 801ac5a:	f04f 31ff 	mov.w	r1, #4294967295
 801ac5e:	6800      	ldr	r0, [r0, #0]
 801ac60:	f7f7 ba6c 	b.w	801213c <osMutexWait>

0801ac64 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801ac64:	6800      	ldr	r0, [r0, #0]
 801ac66:	f7f7 baf1 	b.w	801224c <osMutexRelease>

0801ac6a <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ac6a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ac6c:	9102      	str	r1, [sp, #8]
 801ac6e:	9908      	ldr	r1, [sp, #32]
 801ac70:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ac74:	2100      	movs	r1, #0
 801ac76:	9001      	str	r0, [sp, #4]
 801ac78:	9104      	str	r1, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 801ac7a:	a801      	add	r0, sp, #4
 801ac7c:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ac7e:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 801ac80:	f7f7 fa38 	bl	80120f4 <osThreadCreate>
}
 801ac84:	b007      	add	sp, #28
 801ac86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ac8c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ac8c:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ac8e:	4b04      	ldr	r3, [pc, #16]	; (801aca0 <sys_arch_protect+0x14>)
 801ac90:	f04f 31ff 	mov.w	r1, #4294967295
 801ac94:	6818      	ldr	r0, [r3, #0]
 801ac96:	f7f7 fa51 	bl	801213c <osMutexWait>
  return (sys_prot_t)1;
}
 801ac9a:	2001      	movs	r0, #1
 801ac9c:	bd08      	pop	{r3, pc}
 801ac9e:	bf00      	nop
 801aca0:	20008afc 	.word	0x20008afc

0801aca4 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801aca4:	4b01      	ldr	r3, [pc, #4]	; (801acac <sys_arch_unprotect+0x8>)
 801aca6:	6818      	ldr	r0, [r3, #0]
 801aca8:	f7f7 bad0 	b.w	801224c <osMutexRelease>
 801acac:	20008afc 	.word	0x20008afc

0801acb0 <CB_Init>:

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
    return ( n & (n - 1) ) == 0;
 801acb0:	1e4b      	subs	r3, r1, #1
}

/* Circular buffer initiation function ----------------------------------- */

cb_err CB_Init(circbuff *cb, uint32_t buf_size) {
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801acb2:	400b      	ands	r3, r1
cb_err CB_Init(circbuff *cb, uint32_t buf_size) {
 801acb4:	b510      	push	{r4, lr}
 801acb6:	4604      	mov	r4, r0
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801acb8:	d10a      	bne.n	801acd0 <CB_Init+0x20>
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 801acba:	6041      	str	r1, [r0, #4]
	cb->read_pos = 0;
 801acbc:	6083      	str	r3, [r0, #8]
	cb->write_pos = 0;
 801acbe:	60c3      	str	r3, [r0, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 801acc0:	4608      	mov	r0, r1
 801acc2:	f7f7 fd39 	bl	8012738 <pvPortMalloc>
 801acc6:	6020      	str	r0, [r4, #0]
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801acc8:	fab0 f080 	clz	r0, r0
 801accc:	0940      	lsrs	r0, r0, #5
 801acce:	bd10      	pop	{r4, pc}
 801acd0:	2004      	movs	r0, #4
	if (cb->buf == NULL) {
		return MEM_ERR;
	}
	return NO_ERR;
}
 801acd2:	bd10      	pop	{r4, pc}

0801acd4 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 801acd4:	68c3      	ldr	r3, [r0, #12]
 801acd6:	6882      	ldr	r2, [r0, #8]
 801acd8:	1a9a      	subs	r2, r3, r2
 801acda:	6843      	ldr	r3, [r0, #4]
 801acdc:	3b01      	subs	r3, #1
}
 801acde:	ea02 0003 	and.w	r0, r2, r3
 801ace2:	4770      	bx	lr

0801ace4 <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

cb_err CB_Write(circbuff *cb, uint8_t item){
 801ace4:	b510      	push	{r4, lr}
 801ace6:	4604      	mov	r4, r0
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 801ace8:	f7ff fff4 	bl	801acd4 <CB_Data_Length>
 801acec:	6863      	ldr	r3, [r4, #4]
 801acee:	3b01      	subs	r3, #1
 801acf0:	4298      	cmp	r0, r3
 801acf2:	d20a      	bcs.n	801ad0a <CB_Write+0x26>
		return FULL_ERR;
	}
	cb->buf[cb->write_pos] = item;
 801acf4:	68e3      	ldr	r3, [r4, #12]
 801acf6:	6822      	ldr	r2, [r4, #0]
 801acf8:	54d1      	strb	r1, [r2, r3]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 801acfa:	68e3      	ldr	r3, [r4, #12]
 801acfc:	6862      	ldr	r2, [r4, #4]
 801acfe:	3301      	adds	r3, #1
 801ad00:	3a01      	subs	r2, #1
 801ad02:	4013      	ands	r3, r2
 801ad04:	60e3      	str	r3, [r4, #12]
	return NO_ERR;
 801ad06:	2000      	movs	r0, #0
 801ad08:	bd10      	pop	{r4, pc}
		return FULL_ERR;
 801ad0a:	2003      	movs	r0, #3
}
 801ad0c:	bd10      	pop	{r4, pc}

0801ad0e <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

cb_err CB_Read(circbuff *cb, uint8_t * item){
 801ad0e:	b510      	push	{r4, lr}
 801ad10:	4604      	mov	r4, r0
	if (CB_Data_Length(cb) == 0){
 801ad12:	f7ff ffdf 	bl	801acd4 <CB_Data_Length>
 801ad16:	b158      	cbz	r0, 801ad30 <CB_Read+0x22>
		return EMPTY_ERR;
	}
	*item = cb->buf[cb->read_pos];
 801ad18:	6822      	ldr	r2, [r4, #0]
 801ad1a:	68a3      	ldr	r3, [r4, #8]
 801ad1c:	5cd3      	ldrb	r3, [r2, r3]
 801ad1e:	700b      	strb	r3, [r1, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 801ad20:	68a3      	ldr	r3, [r4, #8]
 801ad22:	6862      	ldr	r2, [r4, #4]
 801ad24:	3301      	adds	r3, #1
 801ad26:	3a01      	subs	r2, #1
 801ad28:	4013      	ands	r3, r2
 801ad2a:	60a3      	str	r3, [r4, #8]
	return NO_ERR;
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	bd10      	pop	{r4, pc}
		return EMPTY_ERR;
 801ad30:	2002      	movs	r0, #2
}
 801ad32:	bd10      	pop	{r4, pc}

0801ad34 <init_FLASH_AI>:
RESERVED01,
RESERVED02,
RESERVED03,
RESERVED04, };

void init_FLASH_AI() {
 801ad34:	b507      	push	{r0, r1, r2, lr}

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 801ad36:	2000      	movs	r0, #0
 801ad38:	f10d 0102 	add.w	r1, sp, #2
 801ad3c:	f000 f8bc 	bl	801aeb8 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 801ad40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ad44:	f64b 61af 	movw	r1, #48815	; 0xbeaf
 801ad48:	428b      	cmp	r3, r1
 801ad4a:	d019      	beq.n	801ad80 <init_FLASH_AI+0x4c>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 801ad4c:	2000      	movs	r0, #0
 801ad4e:	f000 f9b1 	bl	801b0b4 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801ad52:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801ad56:	2001      	movs	r0, #1
 801ad58:	f000 f9ac 	bl	801b0b4 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801ad5c:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801ad60:	2002      	movs	r0, #2
 801ad62:	f000 f9a7 	bl	801b0b4 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 801ad66:	2102      	movs	r1, #2
 801ad68:	2003      	movs	r0, #3
 801ad6a:	f000 f9a3 	bl	801b0b4 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 801ad6e:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 801ad72:	2004      	movs	r0, #4
 801ad74:	f000 f99e 	bl	801b0b4 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 801ad78:	2101      	movs	r1, #1
 801ad7a:	2005      	movs	r0, #5
 801ad7c:	f000 f99a 	bl	801b0b4 <EE_WriteVariable>
		uint32_t ui32;
		uint16_t ui16[2];
	} br;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &br.ui16[1]);
 801ad80:	f10d 0106 	add.w	r1, sp, #6
 801ad84:	2003      	movs	r0, #3
 801ad86:	f000 f897 	bl	801aeb8 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &br.ui16[0]);
 801ad8a:	a901      	add	r1, sp, #4
 801ad8c:	2004      	movs	r0, #4
 801ad8e:	f000 f893 	bl	801aeb8 <EE_ReadVariable>
	huart5.Init.BaudRate = br.ui32;
 801ad92:	4b08      	ldr	r3, [pc, #32]	; (801adb4 <init_FLASH_AI+0x80>)
 801ad94:	9a01      	ldr	r2, [sp, #4]
 801ad96:	605a      	str	r2, [r3, #4]
    /* IP-address */
	EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801ad98:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801ad9c:	2001      	movs	r0, #1
 801ad9e:	f000 f989 	bl	801b0b4 <EE_WriteVariable>
	EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801ada2:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801ada6:	2002      	movs	r0, #2
 801ada8:	f000 f984 	bl	801b0b4 <EE_WriteVariable>

	/* ------------------------------------------------------- */
}
 801adac:	b003      	add	sp, #12
 801adae:	f85d fb04 	ldr.w	pc, [sp], #4
 801adb2:	bf00      	nop
 801adb4:	2000bd08 	.word	0x2000bd08

0801adb8 <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 801adb8:	4a07      	ldr	r2, [pc, #28]	; (801add8 <EE_VerifyPageFullyErased+0x20>)
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801adba:	f64f 71ff 	movw	r1, #65535	; 0xffff
  while (Address <= PAGE0_END_ADDRESS)
 801adbe:	4290      	cmp	r0, r2
 801adc0:	d901      	bls.n	801adc6 <EE_VerifyPageFullyErased+0xe>
  uint32_t ReadStatus = 1;
 801adc2:	2001      	movs	r0, #1
 801adc4:	4770      	bx	lr
    AddressValue = (*(__IO uint16_t*)Address);
 801adc6:	8803      	ldrh	r3, [r0, #0]
 801adc8:	b29b      	uxth	r3, r3
    if (AddressValue != ERASED)
 801adca:	428b      	cmp	r3, r1
 801adcc:	d101      	bne.n	801add2 <EE_VerifyPageFullyErased+0x1a>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 801adce:	3004      	adds	r0, #4
 801add0:	e7f5      	b.n	801adbe <EE_VerifyPageFullyErased+0x6>
      ReadStatus = 0;
 801add2:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop
 801add8:	0800bfff 	.word	0x0800bfff

0801addc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801addc:	b538      	push	{r3, r4, r5, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801adde:	4b1b      	ldr	r3, [pc, #108]	; (801ae4c <EE_VerifyPageFullWriteVariable+0x70>)
 801ade0:	881b      	ldrh	r3, [r3, #0]
{
 801ade2:	4605      	mov	r5, r0
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801ade4:	b298      	uxth	r0, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801ade6:	4b1a      	ldr	r3, [pc, #104]	; (801ae50 <EE_VerifyPageFullWriteVariable+0x74>)
 801ade8:	881b      	ldrh	r3, [r3, #0]
 801adea:	b29b      	uxth	r3, r3
      if (PageStatus1 == VALID_PAGE)
 801adec:	b96b      	cbnz	r3, 801ae0a <EE_VerifyPageFullWriteVariable+0x2e>
          return PAGE1;         /* Page1 valid */
 801adee:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801adf2:	1ac3      	subs	r3, r0, r3
 801adf4:	bf18      	it	ne
 801adf6:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801adf8:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801adfc:	4815      	ldr	r0, [pc, #84]	; (801ae54 <EE_VerifyPageFullWriteVariable+0x78>)
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801adfe:	3402      	adds	r4, #2
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801ae00:	3301      	adds	r3, #1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801ae02:	03a4      	lsls	r4, r4, #14
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801ae04:	eb00 3383 	add.w	r3, r0, r3, lsl #14

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801ae08:	e01a      	b.n	801ae40 <EE_VerifyPageFullWriteVariable+0x64>
      else if (PageStatus0 == VALID_PAGE)
 801ae0a:	b9e8      	cbnz	r0, 801ae48 <EE_VerifyPageFullWriteVariable+0x6c>
          return PAGE1;         /* Page1 valid */
 801ae0c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801ae10:	1a9a      	subs	r2, r3, r2
 801ae12:	4253      	negs	r3, r2
 801ae14:	4153      	adcs	r3, r2
 801ae16:	e7ef      	b.n	801adf8 <EE_VerifyPageFullWriteVariable+0x1c>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801ae18:	6822      	ldr	r2, [r4, #0]
 801ae1a:	3201      	adds	r2, #1
 801ae1c:	d10f      	bne.n	801ae3e <EE_VerifyPageFullWriteVariable+0x62>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 801ae1e:	460a      	mov	r2, r1
 801ae20:	2300      	movs	r3, #0
 801ae22:	4621      	mov	r1, r4
 801ae24:	2001      	movs	r0, #1
 801ae26:	f7f5 ffbd 	bl	8010da4 <HAL_FLASH_Program>
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 801ae2a:	b108      	cbz	r0, 801ae30 <EE_VerifyPageFullWriteVariable+0x54>
        return FlashStatus;
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
      /* Return program operation status */
      return FlashStatus;
 801ae2c:	b280      	uxth	r0, r0
 801ae2e:	bd38      	pop	{r3, r4, r5, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 801ae30:	462a      	mov	r2, r5
 801ae32:	2300      	movs	r3, #0
 801ae34:	1ca1      	adds	r1, r4, #2
 801ae36:	2001      	movs	r0, #1
 801ae38:	f7f5 ffb4 	bl	8010da4 <HAL_FLASH_Program>
 801ae3c:	e7f6      	b.n	801ae2c <EE_VerifyPageFullWriteVariable+0x50>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801ae3e:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 801ae40:	429c      	cmp	r4, r3
 801ae42:	d3e9      	bcc.n	801ae18 <EE_VerifyPageFullWriteVariable+0x3c>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801ae44:	2080      	movs	r0, #128	; 0x80
 801ae46:	bd38      	pop	{r3, r4, r5, pc}
    return  NO_VALID_PAGE;
 801ae48:	20ab      	movs	r0, #171	; 0xab
 801ae4a:	bd38      	pop	{r3, r4, r5, pc}
 801ae4c:	08008000 	.word	0x08008000
 801ae50:	0800c000 	.word	0x0800c000
 801ae54:	08007fff 	.word	0x08007fff

0801ae58 <EE_Format>:
{
 801ae58:	b510      	push	{r4, lr}
 801ae5a:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	9300      	str	r3, [sp, #0]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 801ae60:	9301      	str	r3, [sp, #4]
  pEraseInit.NbSectors = 1;
 801ae62:	2201      	movs	r2, #1
  pEraseInit.Sector = PAGE0_ID;
 801ae64:	2302      	movs	r3, #2
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ae66:	4812      	ldr	r0, [pc, #72]	; (801aeb0 <EE_Format+0x58>)
  pEraseInit.Sector = PAGE0_ID;
 801ae68:	9303      	str	r3, [sp, #12]
  pEraseInit.NbSectors = 1;
 801ae6a:	9204      	str	r2, [sp, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801ae6c:	9305      	str	r3, [sp, #20]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ae6e:	f7ff ffa3 	bl	801adb8 <EE_VerifyPageFullyErased>
 801ae72:	b198      	cbz	r0, 801ae9c <EE_Format+0x44>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 801ae74:	2200      	movs	r2, #0
 801ae76:	2300      	movs	r3, #0
 801ae78:	490d      	ldr	r1, [pc, #52]	; (801aeb0 <EE_Format+0x58>)
 801ae7a:	2001      	movs	r0, #1
 801ae7c:	f7f5 ff92 	bl	8010da4 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801ae80:	4604      	mov	r4, r0
 801ae82:	b990      	cbnz	r0, 801aeaa <EE_Format+0x52>
  pEraseInit.Sector = PAGE1_ID;
 801ae84:	2303      	movs	r3, #3
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ae86:	480b      	ldr	r0, [pc, #44]	; (801aeb4 <EE_Format+0x5c>)
  pEraseInit.Sector = PAGE1_ID;
 801ae88:	9303      	str	r3, [sp, #12]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ae8a:	f7ff ff95 	bl	801adb8 <EE_VerifyPageFullyErased>
 801ae8e:	b960      	cbnz	r0, 801aeaa <EE_Format+0x52>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ae90:	4669      	mov	r1, sp
 801ae92:	a801      	add	r0, sp, #4
 801ae94:	f7f6 f832 	bl	8010efc <HAL_FLASHEx_Erase>
 801ae98:	4604      	mov	r4, r0
 801ae9a:	e006      	b.n	801aeaa <EE_Format+0x52>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ae9c:	4669      	mov	r1, sp
 801ae9e:	a801      	add	r0, sp, #4
 801aea0:	f7f6 f82c 	bl	8010efc <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 801aea4:	4604      	mov	r4, r0
 801aea6:	2800      	cmp	r0, #0
 801aea8:	d0e4      	beq.n	801ae74 <EE_Format+0x1c>
}
 801aeaa:	4620      	mov	r0, r4
 801aeac:	b006      	add	sp, #24
 801aeae:	bd10      	pop	{r4, pc}
 801aeb0:	08008000 	.word	0x08008000
 801aeb4:	0800c000 	.word	0x0800c000

0801aeb8 <EE_ReadVariable>:
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801aeb8:	4b0f      	ldr	r3, [pc, #60]	; (801aef8 <EE_ReadVariable+0x40>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801aeba:	4a10      	ldr	r2, [pc, #64]	; (801aefc <EE_ReadVariable+0x44>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801aebc:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801aebe:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801aec0:	b29b      	uxth	r3, r3
{
 801aec2:	b510      	push	{r4, lr}
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801aec4:	b292      	uxth	r2, r2
      if (PageStatus0 == VALID_PAGE)
 801aec6:	b18b      	cbz	r3, 801aeec <EE_ReadVariable+0x34>
      else if (PageStatus1 == VALID_PAGE)
 801aec8:	b17a      	cbz	r2, 801aeea <EE_ReadVariable+0x32>
    return  NO_VALID_PAGE;
 801aeca:	20ab      	movs	r0, #171	; 0xab
 801aecc:	bd10      	pop	{r4, pc}
    AddressValue = (*(__IO uint16_t*)Address);
 801aece:	8814      	ldrh	r4, [r2, #0]
 801aed0:	b2a4      	uxth	r4, r4
    if (AddressValue == VirtAddress)
 801aed2:	4284      	cmp	r4, r0
 801aed4:	d104      	bne.n	801aee0 <EE_ReadVariable+0x28>
      *Data = (*(__IO uint16_t*)(Address - 2));
 801aed6:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 801aeda:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 801aedc:	2000      	movs	r0, #0
      break;
 801aede:	bd10      	pop	{r4, pc}
      Address = Address - 4;
 801aee0:	3a04      	subs	r2, #4
  while (Address > (PageStartAddress + 2))
 801aee2:	429a      	cmp	r2, r3
 801aee4:	d8f3      	bhi.n	801aece <EE_ReadVariable+0x16>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801aee6:	2001      	movs	r0, #1
 801aee8:	bd10      	pop	{r4, pc}
        return PAGE1;           /* Page1 valid */
 801aeea:	2301      	movs	r3, #1
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801aeec:	039c      	lsls	r4, r3, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801aeee:	4a04      	ldr	r2, [pc, #16]	; (801af00 <EE_ReadVariable+0x48>)
  while (Address > (PageStartAddress + 2))
 801aef0:	4b04      	ldr	r3, [pc, #16]	; (801af04 <EE_ReadVariable+0x4c>)
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801aef2:	4422      	add	r2, r4
  while (Address > (PageStartAddress + 2))
 801aef4:	4423      	add	r3, r4
 801aef6:	e7f4      	b.n	801aee2 <EE_ReadVariable+0x2a>
 801aef8:	08008000 	.word	0x08008000
 801aefc:	0800c000 	.word	0x0800c000
 801af00:	0800bffe 	.word	0x0800bffe
 801af04:	08008002 	.word	0x08008002

0801af08 <EE_Init>:
{
 801af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801af0c:	4863      	ldr	r0, [pc, #396]	; (801b09c <EE_Init+0x194>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801af0e:	4a64      	ldr	r2, [pc, #400]	; (801b0a0 <EE_Init+0x198>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801af10:	8804      	ldrh	r4, [r0, #0]
{
 801af12:	b086      	sub	sp, #24
  pEraseInit.NbSectors = 1;
 801af14:	2501      	movs	r5, #1
  uint32_t SectorError = 0;
 801af16:	2100      	movs	r1, #0
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801af18:	b2a3      	uxth	r3, r4
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801af1a:	8814      	ldrh	r4, [r2, #0]
  pEraseInit.NbSectors = 1;
 801af1c:	9504      	str	r5, [sp, #16]
  switch (PageStatus0)
 801af1e:	f64e 65ee 	movw	r5, #61166	; 0xeeee
  uint32_t SectorError = 0;
 801af22:	9100      	str	r1, [sp, #0]
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801af24:	9101      	str	r1, [sp, #4]
  switch (PageStatus0)
 801af26:	42ab      	cmp	r3, r5
  pEraseInit.Sector = PAGE0_ID;
 801af28:	f04f 0102 	mov.w	r1, #2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801af2c:	b2a4      	uxth	r4, r4
  pEraseInit.Sector = PAGE0_ID;
 801af2e:	9103      	str	r1, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801af30:	9105      	str	r1, [sp, #20]
  switch (PageStatus0)
 801af32:	d028      	beq.n	801af86 <EE_Init+0x7e>
 801af34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801af38:	428b      	cmp	r3, r1
 801af3a:	d005      	beq.n	801af48 <EE_Init+0x40>
 801af3c:	b90b      	cbnz	r3, 801af42 <EE_Init+0x3a>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801af3e:	2c00      	cmp	r4, #0
 801af40:	d16c      	bne.n	801b01c <EE_Init+0x114>
      FlashStatus = EE_Format();
 801af42:	f7ff ff89 	bl	801ae58 <EE_Format>
 801af46:	e01b      	b.n	801af80 <EE_Init+0x78>
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801af48:	b944      	cbnz	r4, 801af5c <EE_Init+0x54>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801af4a:	f7ff ff35 	bl	801adb8 <EE_VerifyPageFullyErased>
 801af4e:	2800      	cmp	r0, #0
 801af50:	f000 809e 	beq.w	801b090 <EE_Init+0x188>
  return HAL_OK;
 801af54:	2000      	movs	r0, #0
}
 801af56:	b006      	add	sp, #24
 801af58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801af5c:	42ac      	cmp	r4, r5
 801af5e:	d1f0      	bne.n	801af42 <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801af60:	f7ff ff2a 	bl	801adb8 <EE_VerifyPageFullyErased>
 801af64:	b930      	cbnz	r0, 801af74 <EE_Init+0x6c>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801af66:	4669      	mov	r1, sp
 801af68:	a801      	add	r0, sp, #4
 801af6a:	f7f5 ffc7 	bl	8010efc <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801af6e:	b108      	cbz	r0, 801af74 <EE_Init+0x6c>
        return FlashStatus;
 801af70:	b280      	uxth	r0, r0
 801af72:	e7f0      	b.n	801af56 <EE_Init+0x4e>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 801af74:	494a      	ldr	r1, [pc, #296]	; (801b0a0 <EE_Init+0x198>)
 801af76:	2200      	movs	r2, #0
 801af78:	2300      	movs	r3, #0
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801af7a:	2001      	movs	r0, #1
 801af7c:	f7f5 ff12 	bl	8010da4 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 801af80:	2800      	cmp	r0, #0
 801af82:	d1f5      	bne.n	801af70 <EE_Init+0x68>
 801af84:	e7e6      	b.n	801af54 <EE_Init+0x4c>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801af86:	2c00      	cmp	r4, #0
 801af88:	d134      	bne.n	801aff4 <EE_Init+0xec>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801af8a:	4e46      	ldr	r6, [pc, #280]	; (801b0a4 <EE_Init+0x19c>)
 801af8c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 801b0a8 <EE_Init+0x1a0>
 801af90:	f04f 35ff 	mov.w	r5, #4294967295
 801af94:	4637      	mov	r7, r6
 801af96:	f8b8 3000 	ldrh.w	r3, [r8]
 801af9a:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	4283      	cmp	r3, r0
            x = VarIdx;
 801afa2:	bf08      	it	eq
 801afa4:	b225      	sxtheq	r5, r4
          if (VarIdx != x)
 801afa6:	42ac      	cmp	r4, r5
 801afa8:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801afac:	d112      	bne.n	801afd4 <EE_Init+0xcc>
 801afae:	3401      	adds	r4, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801afb0:	2c0a      	cmp	r4, #10
 801afb2:	d1f0      	bne.n	801af96 <EE_Init+0x8e>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801afb4:	2200      	movs	r2, #0
 801afb6:	2300      	movs	r3, #0
 801afb8:	4938      	ldr	r1, [pc, #224]	; (801b09c <EE_Init+0x194>)
 801afba:	2001      	movs	r0, #1
 801afbc:	f7f5 fef2 	bl	8010da4 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801afc0:	2800      	cmp	r0, #0
 801afc2:	d1d5      	bne.n	801af70 <EE_Init+0x68>
        pEraseInit.Sector = PAGE1_ID;
 801afc4:	2303      	movs	r3, #3
 801afc6:	9303      	str	r3, [sp, #12]
        pEraseInit.NbSectors = 1;
 801afc8:	2301      	movs	r3, #1
 801afca:	9304      	str	r3, [sp, #16]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801afcc:	2302      	movs	r3, #2
 801afce:	9305      	str	r3, [sp, #20]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801afd0:	4833      	ldr	r0, [pc, #204]	; (801b0a0 <EE_Init+0x198>)
 801afd2:	e7ba      	b.n	801af4a <EE_Init+0x42>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801afd4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801b0ac <EE_Init+0x1a4>
 801afd8:	4649      	mov	r1, r9
 801afda:	f7ff ff6d 	bl	801aeb8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801afde:	2801      	cmp	r0, #1
 801afe0:	d0e5      	beq.n	801afae <EE_Init+0xa6>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801afe2:	f8b9 1000 	ldrh.w	r1, [r9]
 801afe6:	f837 000a 	ldrh.w	r0, [r7, sl]
 801afea:	f7ff fef7 	bl	801addc <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801afee:	2800      	cmp	r0, #0
 801aff0:	d0dd      	beq.n	801afae <EE_Init+0xa6>
 801aff2:	e7b0      	b.n	801af56 <EE_Init+0x4e>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801aff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aff8:	429c      	cmp	r4, r3
 801affa:	d1a2      	bne.n	801af42 <EE_Init+0x3a>
        pEraseInit.Sector = PAGE1_ID;
 801affc:	2303      	movs	r3, #3
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801affe:	4610      	mov	r0, r2
        pEraseInit.Sector = PAGE1_ID;
 801b000:	9303      	str	r3, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801b002:	f7ff fed9 	bl	801adb8 <EE_VerifyPageFullyErased>
 801b006:	b928      	cbnz	r0, 801b014 <EE_Init+0x10c>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801b008:	4669      	mov	r1, sp
 801b00a:	a801      	add	r0, sp, #4
 801b00c:	f7f5 ff76 	bl	8010efc <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801b010:	2800      	cmp	r0, #0
 801b012:	d1ad      	bne.n	801af70 <EE_Init+0x68>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801b014:	2200      	movs	r2, #0
 801b016:	2300      	movs	r3, #0
 801b018:	4920      	ldr	r1, [pc, #128]	; (801b09c <EE_Init+0x194>)
 801b01a:	e7ae      	b.n	801af7a <EE_Init+0x72>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801b01c:	428c      	cmp	r4, r1
 801b01e:	d102      	bne.n	801b026 <EE_Init+0x11e>
        pEraseInit.Sector = PAGE1_ID;
 801b020:	2303      	movs	r3, #3
 801b022:	9303      	str	r3, [sp, #12]
 801b024:	e7d4      	b.n	801afd0 <EE_Init+0xc8>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801b026:	4e1f      	ldr	r6, [pc, #124]	; (801b0a4 <EE_Init+0x19c>)
 801b028:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801b0b0 <EE_Init+0x1a8>
 801b02c:	461c      	mov	r4, r3
 801b02e:	f04f 35ff 	mov.w	r5, #4294967295
 801b032:	4637      	mov	r7, r6
 801b034:	f8b8 3000 	ldrh.w	r3, [r8]
 801b038:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 801b03c:	b29b      	uxth	r3, r3
 801b03e:	4283      	cmp	r3, r0
            x = VarIdx;
 801b040:	bf08      	it	eq
 801b042:	b225      	sxtheq	r5, r4
          if (VarIdx != x)
 801b044:	42ac      	cmp	r4, r5
 801b046:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801b04a:	d111      	bne.n	801b070 <EE_Init+0x168>
 801b04c:	3401      	adds	r4, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801b04e:	2c0a      	cmp	r4, #10
 801b050:	d1f0      	bne.n	801b034 <EE_Init+0x12c>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 801b052:	2200      	movs	r2, #0
 801b054:	2300      	movs	r3, #0
 801b056:	4912      	ldr	r1, [pc, #72]	; (801b0a0 <EE_Init+0x198>)
 801b058:	2001      	movs	r0, #1
 801b05a:	f7f5 fea3 	bl	8010da4 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801b05e:	2800      	cmp	r0, #0
 801b060:	d186      	bne.n	801af70 <EE_Init+0x68>
        pEraseInit.Sector = PAGE0_ID;
 801b062:	2302      	movs	r3, #2
        pEraseInit.NbSectors = 1;
 801b064:	2201      	movs	r2, #1
        pEraseInit.Sector = PAGE0_ID;
 801b066:	9303      	str	r3, [sp, #12]
        pEraseInit.NbSectors = 1;
 801b068:	9204      	str	r2, [sp, #16]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801b06a:	9305      	str	r3, [sp, #20]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801b06c:	480b      	ldr	r0, [pc, #44]	; (801b09c <EE_Init+0x194>)
 801b06e:	e76c      	b.n	801af4a <EE_Init+0x42>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801b070:	f8df 9038 	ldr.w	r9, [pc, #56]	; 801b0ac <EE_Init+0x1a4>
 801b074:	4649      	mov	r1, r9
 801b076:	f7ff ff1f 	bl	801aeb8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801b07a:	2801      	cmp	r0, #1
 801b07c:	d0e6      	beq.n	801b04c <EE_Init+0x144>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801b07e:	f8b9 1000 	ldrh.w	r1, [r9]
 801b082:	f837 000a 	ldrh.w	r0, [r7, sl]
 801b086:	f7ff fea9 	bl	801addc <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801b08a:	2800      	cmp	r0, #0
 801b08c:	d0de      	beq.n	801b04c <EE_Init+0x144>
 801b08e:	e762      	b.n	801af56 <EE_Init+0x4e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801b090:	4669      	mov	r1, sp
 801b092:	a801      	add	r0, sp, #4
 801b094:	f7f5 ff32 	bl	8010efc <HAL_FLASHEx_Erase>
 801b098:	e772      	b.n	801af80 <EE_Init+0x78>
 801b09a:	bf00      	nop
 801b09c:	08008000 	.word	0x08008000
 801b0a0:	0800c000 	.word	0x0800c000
 801b0a4:	20000010 	.word	0x20000010
 801b0a8:	08008006 	.word	0x08008006
 801b0ac:	20004108 	.word	0x20004108
 801b0b0:	0800c006 	.word	0x0800c006

0801b0b4 <EE_WriteVariable>:
{
 801b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0b8:	b086      	sub	sp, #24
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801b0be:	f7ff fe8d 	bl	801addc <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 801b0c2:	2880      	cmp	r0, #128	; 0x80
 801b0c4:	d14d      	bne.n	801b162 <EE_WriteVariable+0xae>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801b0c6:	4929      	ldr	r1, [pc, #164]	; (801b16c <EE_WriteVariable+0xb8>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801b0c8:	4c29      	ldr	r4, [pc, #164]	; (801b170 <EE_WriteVariable+0xbc>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801b0ca:	880a      	ldrh	r2, [r1, #0]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	9300      	str	r3, [sp, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801b0d0:	8823      	ldrh	r3, [r4, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801b0d2:	b292      	uxth	r2, r2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801b0d4:	b29b      	uxth	r3, r3
      if (PageStatus0 == VALID_PAGE)
 801b0d6:	b16a      	cbz	r2, 801b0f4 <EE_WriteVariable+0x40>
      else if (PageStatus1 == VALID_PAGE)
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d145      	bne.n	801b168 <EE_WriteVariable+0xb4>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 801b0dc:	2703      	movs	r7, #3
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801b0de:	460c      	mov	r4, r1
  {
    return NO_VALID_PAGE;       /* No valid Page */
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 801b0e0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	4621      	mov	r1, r4
 801b0e8:	2001      	movs	r0, #1
 801b0ea:	f7f5 fe5b 	bl	8010da4 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 801b0ee:	b118      	cbz	r0, 801b0f8 <EE_WriteVariable+0x44>
  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
  {
    return FlashStatus;
 801b0f0:	b280      	uxth	r0, r0
 801b0f2:	e036      	b.n	801b162 <EE_WriteVariable+0xae>
    OldPageId = PAGE0_ID;
 801b0f4:	2702      	movs	r7, #2
 801b0f6:	e7f3      	b.n	801b0e0 <EE_WriteVariable+0x2c>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801b0f8:	4629      	mov	r1, r5
 801b0fa:	4630      	mov	r0, r6
 801b0fc:	f7ff fe6e 	bl	801addc <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 801b100:	bb78      	cbnz	r0, 801b162 <EE_WriteVariable+0xae>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801b102:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801b178 <EE_WriteVariable+0xc4>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801b106:	f8df 906c 	ldr.w	r9, [pc, #108]	; 801b174 <EE_WriteVariable+0xc0>
  if (EepromStatus != HAL_OK)
 801b10a:	4605      	mov	r5, r0
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801b10c:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
 801b110:	4286      	cmp	r6, r0
 801b112:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 801b116:	d117      	bne.n	801b148 <EE_WriteVariable+0x94>
 801b118:	3501      	adds	r5, #1
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801b11a:	2d0a      	cmp	r5, #10
 801b11c:	d1f6      	bne.n	801b10c <EE_WriteVariable+0x58>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801b11e:	2300      	movs	r3, #0
 801b120:	9301      	str	r3, [sp, #4]
  pEraseInit.NbSectors = 1;
 801b122:	2501      	movs	r5, #1
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801b124:	2302      	movs	r3, #2
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 801b126:	4669      	mov	r1, sp
 801b128:	a801      	add	r0, sp, #4
  pEraseInit.Sector = OldPageId;
 801b12a:	9703      	str	r7, [sp, #12]
  pEraseInit.NbSectors = 1;
 801b12c:	9504      	str	r5, [sp, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801b12e:	9305      	str	r3, [sp, #20]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 801b130:	f7f5 fee4 	bl	8010efc <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 801b134:	2800      	cmp	r0, #0
 801b136:	d1db      	bne.n	801b0f0 <EE_WriteVariable+0x3c>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 801b138:	2200      	movs	r2, #0
 801b13a:	2300      	movs	r3, #0
 801b13c:	4621      	mov	r1, r4
 801b13e:	4628      	mov	r0, r5
 801b140:	f7f5 fe30 	bl	8010da4 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801b144:	b168      	cbz	r0, 801b162 <EE_WriteVariable+0xae>
 801b146:	e7d3      	b.n	801b0f0 <EE_WriteVariable+0x3c>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801b148:	490a      	ldr	r1, [pc, #40]	; (801b174 <EE_WriteVariable+0xc0>)
 801b14a:	f7ff feb5 	bl	801aeb8 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 801b14e:	2801      	cmp	r0, #1
 801b150:	d0e2      	beq.n	801b118 <EE_WriteVariable+0x64>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801b152:	f8b9 1000 	ldrh.w	r1, [r9]
 801b156:	f838 000a 	ldrh.w	r0, [r8, sl]
 801b15a:	f7ff fe3f 	bl	801addc <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 801b15e:	2800      	cmp	r0, #0
 801b160:	d0da      	beq.n	801b118 <EE_WriteVariable+0x64>
}
 801b162:	b006      	add	sp, #24
 801b164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NO_VALID_PAGE;       /* No valid Page */
 801b168:	20ab      	movs	r0, #171	; 0xab
 801b16a:	e7fa      	b.n	801b162 <EE_WriteVariable+0xae>
 801b16c:	08008000 	.word	0x08008000
 801b170:	0800c000 	.word	0x0800c000
 801b174:	20004108 	.word	0x20004108
 801b178:	20000010 	.word	0x20000010

0801b17c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801b17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801b180:	4a25      	ldr	r2, [pc, #148]	; (801b218 <low_level_output+0x9c>)
 801b182:	9200      	str	r2, [sp, #0]
 801b184:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 801b186:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801b18a:	68ab      	ldr	r3, [r5, #8]
{
 801b18c:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 801b18e:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801b190:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 801b194:	b92c      	cbnz	r4, 801b1a2 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 801b196:	4639      	mov	r1, r7
 801b198:	481f      	ldr	r0, [pc, #124]	; (801b218 <low_level_output+0x9c>)
 801b19a:	f7f5 fab9 	bl	8010710 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801b19e:	4620      	mov	r0, r4
 801b1a0:	e004      	b.n	801b1ac <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801b1a2:	682a      	ldr	r2, [r5, #0]
 801b1a4:	2a00      	cmp	r2, #0
 801b1a6:	da11      	bge.n	801b1cc <low_level_output+0x50>
        errval = ERR_USE;
 801b1a8:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801b1ac:	9b00      	ldr	r3, [sp, #0]
 801b1ae:	f241 0214 	movw	r2, #4116	; 0x1014
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	5899      	ldr	r1, [r3, r2]
 801b1b6:	0689      	lsls	r1, r1, #26
 801b1b8:	d505      	bpl.n	801b1c6 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801b1ba:	2120      	movs	r1, #32
 801b1bc:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801b1be:	f241 0204 	movw	r2, #4100	; 0x1004
 801b1c2:	2100      	movs	r1, #0
 801b1c4:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 801b1c6:	b003      	add	sp, #12
 801b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 801b1cc:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801b1d0:	4646      	mov	r6, r8
      payloadoffset = 0;
 801b1d2:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801b1d6:	eb06 0809 	add.w	r8, r6, r9
 801b1da:	45d8      	cmp	r8, fp
 801b1dc:	eb03 0006 	add.w	r0, r3, r6
 801b1e0:	6861      	ldr	r1, [r4, #4]
 801b1e2:	d808      	bhi.n	801b1f6 <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801b1e4:	464a      	mov	r2, r9
 801b1e6:	4451      	add	r1, sl
 801b1e8:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 801b1ea:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801b1ec:	f001 f91d 	bl	801c42a <memcpy>
  for(q = p; q != NULL; q = q->next)
 801b1f0:	6824      	ldr	r4, [r4, #0]
 801b1f2:	9b01      	ldr	r3, [sp, #4]
 801b1f4:	e7ce      	b.n	801b194 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801b1f6:	ebab 0606 	sub.w	r6, fp, r6
 801b1fa:	4632      	mov	r2, r6
 801b1fc:	4451      	add	r1, sl
 801b1fe:	f001 f914 	bl	801c42a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801b202:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801b204:	682b      	ldr	r3, [r5, #0]
 801b206:	2b00      	cmp	r3, #0
 801b208:	dbce      	blt.n	801b1a8 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801b20a:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801b20c:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801b20e:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801b210:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 801b214:	2600      	movs	r6, #0
 801b216:	e7de      	b.n	801b1d6 <low_level_output+0x5a>
 801b218:	2000a3d0 	.word	0x2000a3d0

0801b21c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 801b21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b220:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 801b222:	4c37      	ldr	r4, [pc, #220]	; (801b300 <ethernetif_input+0xe4>)
 801b224:	6820      	ldr	r0, [r4, #0]
 801b226:	f04f 31ff 	mov.w	r1, #4294967295
 801b22a:	f7f6 ffc3 	bl	80121b4 <osSemaphoreWait>
 801b22e:	2800      	cmp	r0, #0
 801b230:	d1f8      	bne.n	801b224 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801b232:	4c34      	ldr	r4, [pc, #208]	; (801b304 <ethernetif_input+0xe8>)
 801b234:	4620      	mov	r0, r4
 801b236:	f7f5 fadf 	bl	80107f8 <HAL_ETH_GetReceivedFrame_IT>
 801b23a:	4605      	mov	r5, r0
 801b23c:	2800      	cmp	r0, #0
 801b23e:	d1f0      	bne.n	801b222 <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 801b240:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801b242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b244:	9301      	str	r3, [sp, #4]
  if (len > 0)
 801b246:	bb01      	cbnz	r1, 801b28a <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 801b248:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801b24a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801b24c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b24e:	2200      	movs	r2, #0
 801b250:	4282      	cmp	r2, r0
 801b252:	d14d      	bne.n	801b2f0 <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 801b254:	2300      	movs	r3, #0
 801b256:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801b258:	f241 0214 	movw	r2, #4116	; 0x1014
 801b25c:	6823      	ldr	r3, [r4, #0]
 801b25e:	5899      	ldr	r1, [r3, r2]
 801b260:	0609      	lsls	r1, r1, #24
 801b262:	d505      	bpl.n	801b270 <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801b264:	2180      	movs	r1, #128	; 0x80
 801b266:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 801b268:	f241 0208 	movw	r2, #4104	; 0x1008
 801b26c:	2100      	movs	r1, #0
 801b26e:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 801b270:	2f00      	cmp	r7, #0
 801b272:	d0d6      	beq.n	801b222 <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 801b274:	f8da 3010 	ldr.w	r3, [sl, #16]
 801b278:	4651      	mov	r1, sl
 801b27a:	4638      	mov	r0, r7
 801b27c:	4798      	blx	r3
 801b27e:	2800      	cmp	r0, #0
 801b280:	d0d7      	beq.n	801b232 <ethernetif_input+0x16>
          {
            pbuf_free(p);
 801b282:	4638      	mov	r0, r7
 801b284:	f7fb fd88 	bl	8016d98 <pbuf_free>
 801b288:	e7d3      	b.n	801b232 <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801b28a:	2203      	movs	r2, #3
 801b28c:	2004      	movs	r0, #4
 801b28e:	f7fb fded 	bl	8016e6c <pbuf_alloc>
  if (p != NULL)
 801b292:	4607      	mov	r7, r0
 801b294:	2800      	cmp	r0, #0
 801b296:	d0d7      	beq.n	801b248 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801b298:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 801b29c:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 801b29e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801b2a2:	462e      	mov	r6, r5
      payloadoffset = 0;
 801b2a4:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801b2a8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801b2ac:	18b5      	adds	r5, r6, r2
 801b2ae:	429d      	cmp	r5, r3
 801b2b0:	9b01      	ldr	r3, [sp, #4]
 801b2b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b2b6:	eb03 0106 	add.w	r1, r3, r6
 801b2ba:	d808      	bhi.n	801b2ce <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801b2bc:	4448      	add	r0, r9
 801b2be:	f001 f8b4 	bl	801c42a <memcpy>
    for(q = p; q != NULL; q = q->next)
 801b2c2:	f8d8 8000 	ldr.w	r8, [r8]
 801b2c6:	f1b8 0f00 	cmp.w	r8, #0
 801b2ca:	d1e8      	bne.n	801b29e <ethernetif_input+0x82>
 801b2cc:	e7bd      	b.n	801b24a <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801b2ce:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 801b2d2:	3604      	adds	r6, #4
 801b2d4:	4632      	mov	r2, r6
 801b2d6:	4448      	add	r0, r9
 801b2d8:	f001 f8a7 	bl	801c42a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801b2dc:	f8db b00c 	ldr.w	fp, [fp, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801b2e0:	f8db 3008 	ldr.w	r3, [fp, #8]
 801b2e4:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801b2e6:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801b2e8:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 801b2ec:	2600      	movs	r6, #0
 801b2ee:	e7db      	b.n	801b2a8 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801b2f0:	6819      	ldr	r1, [r3, #0]
 801b2f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 801b2f6:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801b2f8:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801b2fa:	3201      	adds	r2, #1
 801b2fc:	e7a8      	b.n	801b250 <ethernetif_input+0x34>
 801b2fe:	bf00      	nop
 801b300:	2000410c 	.word	0x2000410c
 801b304:	2000a3d0 	.word	0x2000a3d0

0801b308 <HAL_ETH_MspInit>:
{
 801b308:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 801b30a:	6802      	ldr	r2, [r0, #0]
 801b30c:	4b28      	ldr	r3, [pc, #160]	; (801b3b0 <HAL_ETH_MspInit+0xa8>)
 801b30e:	429a      	cmp	r2, r3
{
 801b310:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 801b312:	d14a      	bne.n	801b3aa <HAL_ETH_MspInit+0xa2>
    __HAL_RCC_ETH_CLK_ENABLE();
 801b314:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 801b318:	2400      	movs	r4, #0
 801b31a:	9400      	str	r4, [sp, #0]
 801b31c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801b31e:	4825      	ldr	r0, [pc, #148]	; (801b3b4 <HAL_ETH_MspInit+0xac>)
    __HAL_RCC_ETH_CLK_ENABLE();
 801b320:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801b324:	631a      	str	r2, [r3, #48]	; 0x30
 801b326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b328:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801b32c:	9200      	str	r2, [sp, #0]
 801b32e:	9a00      	ldr	r2, [sp, #0]
 801b330:	9401      	str	r4, [sp, #4]
 801b332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b334:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801b338:	631a      	str	r2, [r3, #48]	; 0x30
 801b33a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b33c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801b340:	9201      	str	r2, [sp, #4]
 801b342:	9a01      	ldr	r2, [sp, #4]
 801b344:	9402      	str	r4, [sp, #8]
 801b346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b348:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801b34c:	631a      	str	r2, [r3, #48]	; 0x30
 801b34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b350:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ETH_CLK_ENABLE();
 801b352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b356:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b358:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b35a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b35c:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 801b35e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b360:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801b362:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801b364:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801b366:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b368:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b36a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801b36c:	f7f5 fe14 	bl	8010f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801b370:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b372:	a903      	add	r1, sp, #12
 801b374:	4810      	ldr	r0, [pc, #64]	; (801b3b8 <HAL_ETH_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801b376:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b378:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b37a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b37c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b37e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b380:	f7f5 fe0a 	bl	8010f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 801b384:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b388:	a903      	add	r1, sp, #12
 801b38a:	480c      	ldr	r0, [pc, #48]	; (801b3bc <HAL_ETH_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 801b38c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b38e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b390:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b392:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801b394:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b396:	f7f5 fdff 	bl	8010f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801b39a:	203d      	movs	r0, #61	; 0x3d
 801b39c:	4622      	mov	r2, r4
 801b39e:	2105      	movs	r1, #5
 801b3a0:	f7f5 f83a 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801b3a4:	203d      	movs	r0, #61	; 0x3d
 801b3a6:	f7f5 f86b 	bl	8010480 <HAL_NVIC_EnableIRQ>
}
 801b3aa:	b009      	add	sp, #36	; 0x24
 801b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3ae:	bf00      	nop
 801b3b0:	40028000 	.word	0x40028000
 801b3b4:	40020800 	.word	0x40020800
 801b3b8:	40020000 	.word	0x40020000
 801b3bc:	40020400 	.word	0x40020400

0801b3c0 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 801b3c0:	4b01      	ldr	r3, [pc, #4]	; (801b3c8 <HAL_ETH_RxCpltCallback+0x8>)
 801b3c2:	6818      	ldr	r0, [r3, #0]
 801b3c4:	f7f6 bf1e 	b.w	8012204 <osSemaphoreRelease>
 801b3c8:	2000410c 	.word	0x2000410c

0801b3cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801b3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801b3ce:	4604      	mov	r4, r0
{
 801b3d0:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801b3d2:	b930      	cbnz	r0, 801b3e2 <ethernetif_init+0x16>
 801b3d4:	4b3e      	ldr	r3, [pc, #248]	; (801b4d0 <ethernetif_init+0x104>)
 801b3d6:	493f      	ldr	r1, [pc, #252]	; (801b4d4 <ethernetif_init+0x108>)
 801b3d8:	483f      	ldr	r0, [pc, #252]	; (801b4d8 <ethernetif_init+0x10c>)
 801b3da:	f240 2235 	movw	r2, #565	; 0x235
 801b3de:	f000 fd29 	bl	801be34 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801b3e2:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x02;
 801b3e4:	2102      	movs	r1, #2
  netif->name[0] = IFNAME0;
 801b3e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 801b3ea:	2374      	movs	r3, #116	; 0x74
 801b3ec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  MACAddr[1] = 0x02;
 801b3f0:	f88d 1005 	strb.w	r1, [sp, #5]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801b3f4:	4b39      	ldr	r3, [pc, #228]	; (801b4dc <ethernetif_init+0x110>)
  heth.Instance = ETH;
 801b3f6:	4d3a      	ldr	r5, [pc, #232]	; (801b4e0 <ethernetif_init+0x114>)
  netif->output = etharp_output;
 801b3f8:	6163      	str	r3, [r4, #20]
  MACAddr[2] = 0xA2;
 801b3fa:	21a2      	movs	r1, #162	; 0xa2
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801b3fc:	4b39      	ldr	r3, [pc, #228]	; (801b4e4 <ethernetif_init+0x118>)
  MACAddr[2] = 0xA2;
 801b3fe:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x42;
 801b402:	2142      	movs	r1, #66	; 0x42
  netif->linkoutput = low_level_output;
 801b404:	61a3      	str	r3, [r4, #24]
  MACAddr[3] = 0x42;
 801b406:	f88d 1007 	strb.w	r1, [sp, #7]
  heth.Instance = ETH;
 801b40a:	4b37      	ldr	r3, [pc, #220]	; (801b4e8 <ethernetif_init+0x11c>)
 801b40c:	602b      	str	r3, [r5, #0]
  MACAddr[4] = 0x50;
 801b40e:	2150      	movs	r1, #80	; 0x50
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801b410:	2301      	movs	r3, #1
  MACAddr[4] = 0x50;
 801b412:	f88d 1008 	strb.w	r1, [sp, #8]
  MACAddr[5] = 0xE4;
 801b416:	21e4      	movs	r1, #228	; 0xe4
  MACAddr[0] = 0x00;
 801b418:	2200      	movs	r2, #0
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801b41a:	606b      	str	r3, [r5, #4]
  heth.Init.PhyAddress = DP83848I_PHY_ADDRESS;
 801b41c:	822b      	strh	r3, [r5, #16]
  MACAddr[5] = 0xE4;
 801b41e:	f88d 1009 	strb.w	r1, [sp, #9]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801b422:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 801b424:	a901      	add	r1, sp, #4
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801b426:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801b42a:	4628      	mov	r0, r5
  MACAddr[0] = 0x00;
 801b42c:	f88d 2004 	strb.w	r2, [sp, #4]
  heth.Init.MACAddr = &MACAddr[0];
 801b430:	6169      	str	r1, [r5, #20]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801b432:	61ea      	str	r2, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801b434:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801b436:	f7f5 facf 	bl	80109d8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801b43a:	b928      	cbnz	r0, 801b448 <ethernetif_init+0x7c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801b43c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801b440:	f043 0304 	orr.w	r3, r3, #4
 801b444:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801b448:	2304      	movs	r3, #4
 801b44a:	4a28      	ldr	r2, [pc, #160]	; (801b4ec <ethernetif_init+0x120>)
 801b44c:	4928      	ldr	r1, [pc, #160]	; (801b4f0 <ethernetif_init+0x124>)
 801b44e:	4824      	ldr	r0, [pc, #144]	; (801b4e0 <ethernetif_init+0x114>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801b450:	4e28      	ldr	r6, [pc, #160]	; (801b4f4 <ethernetif_init+0x128>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801b452:	f7f5 f8e3 	bl	801061c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801b456:	2304      	movs	r3, #4
 801b458:	4a27      	ldr	r2, [pc, #156]	; (801b4f8 <ethernetif_init+0x12c>)
 801b45a:	4928      	ldr	r1, [pc, #160]	; (801b4fc <ethernetif_init+0x130>)
 801b45c:	4820      	ldr	r0, [pc, #128]	; (801b4e0 <ethernetif_init+0x114>)
 801b45e:	f7f5 f91a 	bl	8010696 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801b462:	2306      	movs	r3, #6
 801b464:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801b468:	696b      	ldr	r3, [r5, #20]
 801b46a:	781a      	ldrb	r2, [r3, #0]
 801b46c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801b470:	785a      	ldrb	r2, [r3, #1]
 801b472:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801b476:	789a      	ldrb	r2, [r3, #2]
 801b478:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801b47c:	78da      	ldrb	r2, [r3, #3]
 801b47e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801b482:	791a      	ldrb	r2, [r3, #4]
 801b484:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801b488:	795b      	ldrb	r3, [r3, #5]
 801b48a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 801b48e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801b492:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801b494:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 801b498:	a808      	add	r0, sp, #32
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801b49a:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 801b49e:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801b4a0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 801b4a4:	f840 7d20 	str.w	r7, [r0, #-32]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 801b4a8:	2101      	movs	r1, #1
 801b4aa:	f7f6 fe6f 	bl	801218c <osSemaphoreCreate>
 801b4ae:	4b14      	ldr	r3, [pc, #80]	; (801b500 <ethernetif_init+0x134>)
 801b4b0:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801b4b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b4b4:	ad03      	add	r5, sp, #12
 801b4b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b4b8:	6833      	ldr	r3, [r6, #0]
 801b4ba:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 801b4bc:	4621      	mov	r1, r4
 801b4be:	a803      	add	r0, sp, #12
 801b4c0:	f7f6 fe18 	bl	80120f4 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801b4c4:	4806      	ldr	r0, [pc, #24]	; (801b4e0 <ethernetif_init+0x114>)
 801b4c6:	f7f5 fb83 	bl	8010bd0 <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 801b4ca:	4638      	mov	r0, r7
 801b4cc:	b009      	add	sp, #36	; 0x24
 801b4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4d0:	08020774 	.word	0x08020774
 801b4d4:	0801f0ec 	.word	0x0801f0ec
 801b4d8:	0801c6e3 	.word	0x0801c6e3
 801b4dc:	08015641 	.word	0x08015641
 801b4e0:	2000a3d0 	.word	0x2000a3d0
 801b4e4:	0801b17d 	.word	0x0801b17d
 801b4e8:	40028000 	.word	0x40028000
 801b4ec:	2000a418 	.word	0x2000a418
 801b4f0:	20008b00 	.word	0x20008b00
 801b4f4:	0801c5fc 	.word	0x0801c5fc
 801b4f8:	20008b80 	.word	0x20008b80
 801b4fc:	2000a350 	.word	0x2000a350
 801b500:	2000410c 	.word	0x2000410c

0801b504 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 801b504:	f7f4 bf5c 	b.w	80103c0 <HAL_GetTick>

0801b508 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801b508:	b530      	push	{r4, r5, lr}
 801b50a:	b085      	sub	sp, #20
  /* init code for LWIP */
  MX_LWIP_Init();
 801b50c:	f000 f900 	bl	801b710 <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 801b510:	4830      	ldr	r0, [pc, #192]	; (801b5d4 <StartDefaultTask+0xcc>)
 801b512:	f000 fcb3 	bl	801be7c <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 801b516:	2200      	movs	r2, #0
 801b518:	4611      	mov	r1, r2
 801b51a:	2010      	movs	r0, #16
 801b51c:	f7f8 fad0 	bl	8013ac0 <netconn_new_with_proto_and_callback>
	if (conn != NULL) {
 801b520:	4604      	mov	r4, r0
 801b522:	b1c0      	cbz	r0, 801b556 <StartDefaultTask+0x4e>
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 801b524:	2250      	movs	r2, #80	; 0x50
 801b526:	492c      	ldr	r1, [pc, #176]	; (801b5d8 <StartDefaultTask+0xd0>)
 801b528:	f7f8 fb3c 	bl	8013ba4 <netconn_bind>
		if (err == ERR_OK) {
 801b52c:	2800      	cmp	r0, #0
 801b52e:	d149      	bne.n	801b5c4 <StartDefaultTask+0xbc>
			netconn_listen(conn);
 801b530:	21ff      	movs	r1, #255	; 0xff
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 801b532:	2501      	movs	r5, #1
			netconn_listen(conn);
 801b534:	4620      	mov	r0, r4
 801b536:	f7f8 fb59 	bl	8013bec <netconn_listen_with_backlog>
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 801b53a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b53e:	4622      	mov	r2, r4
 801b540:	4926      	ldr	r1, [pc, #152]	; (801b5dc <StartDefaultTask+0xd4>)
 801b542:	9500      	str	r5, [sp, #0]
 801b544:	4826      	ldr	r0, [pc, #152]	; (801b5e0 <StartDefaultTask+0xd8>)
 801b546:	f7ff fb90 	bl	801ac6a <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE / 4, osPriorityAboveNormal);
			printf("Binding ... OK\n");
 801b54a:	4826      	ldr	r0, [pc, #152]	; (801b5e4 <StartDefaultTask+0xdc>)
 801b54c:	f000 fc96 	bl	801be7c <puts>
			osDelay(1);
 801b550:	4628      	mov	r0, r5
 801b552:	f7f6 fde7 	bl	8012124 <osDelay>
	}

	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 801b556:	4d24      	ldr	r5, [pc, #144]	; (801b5e8 <StartDefaultTask+0xe0>)
		osDelay(1999);

		osDelay(1);
		uint16_t tmp;
		EE_ReadVariable(IP_02_01_ADDR, &tmp);
		printf("IP_02_01: %x\n", tmp);
 801b558:	4c24      	ldr	r4, [pc, #144]	; (801b5ec <StartDefaultTask+0xe4>)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 801b55a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b55e:	4628      	mov	r0, r5
 801b560:	f7f5 fe97 	bl	8011292 <HAL_GPIO_TogglePin>
		osDelay(1999);
 801b564:	f240 70cf 	movw	r0, #1999	; 0x7cf
 801b568:	f7f6 fddc 	bl	8012124 <osDelay>
		osDelay(1);
 801b56c:	2001      	movs	r0, #1
 801b56e:	f7f6 fdd9 	bl	8012124 <osDelay>
		EE_ReadVariable(IP_02_01_ADDR, &tmp);
 801b572:	f10d 010e 	add.w	r1, sp, #14
 801b576:	2001      	movs	r0, #1
 801b578:	f7ff fc9e 	bl	801aeb8 <EE_ReadVariable>
		printf("IP_02_01: %x\n", tmp);
 801b57c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801b580:	4620      	mov	r0, r4
 801b582:	f000 fc57 	bl	801be34 <iprintf>
		EE_ReadVariable(IP_04_03_ADDR, &tmp);
 801b586:	f10d 010e 	add.w	r1, sp, #14
 801b58a:	2002      	movs	r0, #2
 801b58c:	f7ff fc94 	bl	801aeb8 <EE_ReadVariable>
		printf("IP_02_01: %x\n", tmp);
 801b590:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801b594:	4620      	mov	r0, r4
 801b596:	f000 fc4d 	bl	801be34 <iprintf>
		EE_ReadVariable(BR_MS_ADDR, &tmp);
 801b59a:	f10d 010e 	add.w	r1, sp, #14
 801b59e:	2003      	movs	r0, #3
 801b5a0:	f7ff fc8a 	bl	801aeb8 <EE_ReadVariable>
		printf("BR_MS: %x\n", tmp);
 801b5a4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801b5a8:	4811      	ldr	r0, [pc, #68]	; (801b5f0 <StartDefaultTask+0xe8>)
 801b5aa:	f000 fc43 	bl	801be34 <iprintf>
		EE_ReadVariable(BR_LS_ADDR, &tmp);
 801b5ae:	f10d 010e 	add.w	r1, sp, #14
 801b5b2:	2004      	movs	r0, #4
 801b5b4:	f7ff fc80 	bl	801aeb8 <EE_ReadVariable>
		printf("BR_LS: %x\n", tmp);
 801b5b8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801b5bc:	480d      	ldr	r0, [pc, #52]	; (801b5f4 <StartDefaultTask+0xec>)
 801b5be:	f000 fc39 	bl	801be34 <iprintf>
 801b5c2:	e7ca      	b.n	801b55a <StartDefaultTask+0x52>
			netconn_delete(conn);
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f7f8 fad5 	bl	8013b74 <netconn_delete>
			printf("Binding ... Err\n");
 801b5ca:	480b      	ldr	r0, [pc, #44]	; (801b5f8 <StartDefaultTask+0xf0>)
 801b5cc:	f000 fc56 	bl	801be7c <puts>
			osDelay(1);
 801b5d0:	2001      	movs	r0, #1
 801b5d2:	e7be      	b.n	801b552 <StartDefaultTask+0x4a>
 801b5d4:	0802078e 	.word	0x0802078e
 801b5d8:	0801f2e4 	.word	0x0801f2e4
 801b5dc:	0801c0a5 	.word	0x0801c0a5
 801b5e0:	080207a3 	.word	0x080207a3
 801b5e4:	080207b5 	.word	0x080207b5
 801b5e8:	40020400 	.word	0x40020400
 801b5ec:	080207d4 	.word	0x080207d4
 801b5f0:	080207e2 	.word	0x080207e2
 801b5f4:	080207ed 	.word	0x080207ed
 801b5f8:	080207c4 	.word	0x080207c4

0801b5fc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801b5fc:	b570      	push	{r4, r5, r6, lr}
	osThreadDef(processTask, StartProcessTask, osPriorityNormal, 0, 1024);
 801b5fe:	4c11      	ldr	r4, [pc, #68]	; (801b644 <MX_FREERTOS_Init+0x48>)
 801b600:	4626      	mov	r6, r4
 801b602:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 801b604:	b08a      	sub	sp, #40	; 0x28
	osThreadDef(processTask, StartProcessTask, osPriorityNormal, 0, 1024);
 801b606:	466d      	mov	r5, sp
 801b608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b60a:	6833      	ldr	r3, [r6, #0]
 801b60c:	602b      	str	r3, [r5, #0]
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 801b60e:	2100      	movs	r1, #0
 801b610:	4668      	mov	r0, sp
 801b612:	f7f6 fd6f 	bl	80120f4 <osThreadCreate>
 801b616:	4b0c      	ldr	r3, [pc, #48]	; (801b648 <MX_FREERTOS_Init+0x4c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801b618:	3414      	adds	r4, #20
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 801b61a:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801b61c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b61e:	ad05      	add	r5, sp, #20
 801b620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b622:	6823      	ldr	r3, [r4, #0]
 801b624:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801b626:	2100      	movs	r1, #0
 801b628:	a805      	add	r0, sp, #20
 801b62a:	f7f6 fd63 	bl	80120f4 <osThreadCreate>
 801b62e:	4b07      	ldr	r3, [pc, #28]	; (801b64c <MX_FREERTOS_Init+0x50>)
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 801b630:	2200      	movs	r2, #0
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801b632:	6018      	str	r0, [r3, #0]
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 801b634:	2102      	movs	r1, #2
 801b636:	2010      	movs	r0, #16
 801b638:	f7f7 fa04 	bl	8012a44 <xQueueGenericCreate>
 801b63c:	4b04      	ldr	r3, [pc, #16]	; (801b650 <MX_FREERTOS_Init+0x54>)
 801b63e:	6018      	str	r0, [r3, #0]
}
 801b640:	b00a      	add	sp, #40	; 0x28
 801b642:	bd70      	pop	{r4, r5, r6, pc}
 801b644:	0801c610 	.word	0x0801c610
 801b648:	2000bbf4 	.word	0x2000bbf4
 801b64c:	2000bbe8 	.word	0x2000bbe8
 801b650:	2000bbec 	.word	0x2000bbec

0801b654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801b654:	b530      	push	{r4, r5, lr}
 801b656:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b658:	2214      	movs	r2, #20
 801b65a:	2100      	movs	r1, #0
 801b65c:	a807      	add	r0, sp, #28
 801b65e:	f000 feef 	bl	801c440 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801b662:	2400      	movs	r4, #0
 801b664:	4b28      	ldr	r3, [pc, #160]	; (801b708 <MX_GPIO_Init+0xb4>)
 801b666:	9401      	str	r4, [sp, #4]
 801b668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801b66a:	4d28      	ldr	r5, [pc, #160]	; (801b70c <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801b66c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801b670:	631a      	str	r2, [r3, #48]	; 0x30
 801b672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b674:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801b678:	9201      	str	r2, [sp, #4]
 801b67a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801b67c:	9402      	str	r4, [sp, #8]
 801b67e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b680:	f042 0204 	orr.w	r2, r2, #4
 801b684:	631a      	str	r2, [r3, #48]	; 0x30
 801b686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b688:	f002 0204 	and.w	r2, r2, #4
 801b68c:	9202      	str	r2, [sp, #8]
 801b68e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801b690:	9403      	str	r4, [sp, #12]
 801b692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b694:	f042 0201 	orr.w	r2, r2, #1
 801b698:	631a      	str	r2, [r3, #48]	; 0x30
 801b69a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b69c:	f002 0201 	and.w	r2, r2, #1
 801b6a0:	9203      	str	r2, [sp, #12]
 801b6a2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801b6a4:	9404      	str	r4, [sp, #16]
 801b6a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b6a8:	f042 0210 	orr.w	r2, r2, #16
 801b6ac:	631a      	str	r2, [r3, #48]	; 0x30
 801b6ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b6b0:	f002 0210 	and.w	r2, r2, #16
 801b6b4:	9204      	str	r2, [sp, #16]
 801b6b6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801b6b8:	9405      	str	r4, [sp, #20]
 801b6ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b6bc:	f042 0202 	orr.w	r2, r2, #2
 801b6c0:	631a      	str	r2, [r3, #48]	; 0x30
 801b6c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b6c4:	f002 0202 	and.w	r2, r2, #2
 801b6c8:	9205      	str	r2, [sp, #20]
 801b6ca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801b6cc:	9406      	str	r4, [sp, #24]
 801b6ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b6d0:	f042 0208 	orr.w	r2, r2, #8
 801b6d4:	631a      	str	r2, [r3, #48]	; 0x30
 801b6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6d8:	f003 0308 	and.w	r3, r3, #8
 801b6dc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801b6de:	4622      	mov	r2, r4
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	f240 6101 	movw	r1, #1537	; 0x601
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801b6e6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801b6e8:	f7f5 fdce 	bl	8011288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 801b6ec:	f240 6301 	movw	r3, #1537	; 0x601
 801b6f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801b6f2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b6f4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801b6f6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b6f8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b6fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b6fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801b6fe:	f7f5 fc4b 	bl	8010f98 <HAL_GPIO_Init>

}
 801b702:	b00d      	add	sp, #52	; 0x34
 801b704:	bd30      	pop	{r4, r5, pc}
 801b706:	bf00      	nop
 801b708:	40023800 	.word	0x40023800
 801b70c:	40021000 	.word	0x40021000

0801b710 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801b710:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801b712:	4f2e      	ldr	r7, [pc, #184]	; (801b7cc <MX_LWIP_Init+0xbc>)
  IP_ADDRESS[3] = 253;
  NETMASK_ADDRESS[0] = 255;
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 0;
 801b714:	4d2e      	ldr	r5, [pc, #184]	; (801b7d0 <MX_LWIP_Init+0xc0>)
  NETMASK_ADDRESS[0] = 255;
 801b716:	4e2f      	ldr	r6, [pc, #188]	; (801b7d4 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 192;
 801b718:	23c0      	movs	r3, #192	; 0xc0
 801b71a:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 168;
 801b71c:	23a8      	movs	r3, #168	; 0xa8
 801b71e:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 4;
 801b720:	2304      	movs	r3, #4
  NETMASK_ADDRESS[3] = 0;
 801b722:	2400      	movs	r4, #0
  IP_ADDRESS[2] = 4;
 801b724:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 253;
 801b726:	23fd      	movs	r3, #253	; 0xfd
{
 801b728:	b085      	sub	sp, #20
  IP_ADDRESS[3] = 253;
 801b72a:	70fb      	strb	r3, [r7, #3]
  GATEWAY_ADDRESS[1] = 0;
  GATEWAY_ADDRESS[2] = 0;
  GATEWAY_ADDRESS[3] = 0;
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801b72c:	4621      	mov	r1, r4
  NETMASK_ADDRESS[0] = 255;
 801b72e:	23ff      	movs	r3, #255	; 0xff
  tcpip_init( NULL, NULL );
 801b730:	4620      	mov	r0, r4
  NETMASK_ADDRESS[0] = 255;
 801b732:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 801b734:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 801b736:	70b3      	strb	r3, [r6, #2]
  GATEWAY_ADDRESS[0] = 0;
 801b738:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 801b73a:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 801b73c:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 801b73e:	70ec      	strb	r4, [r5, #3]
  NETMASK_ADDRESS[3] = 0;
 801b740:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 801b742:	f7f9 fc05 	bl	8014f50 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801b746:	787b      	ldrb	r3, [r7, #1]
 801b748:	783a      	ldrb	r2, [r7, #0]
 801b74a:	4923      	ldr	r1, [pc, #140]	; (801b7d8 <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801b74c:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801b74e:	041b      	lsls	r3, r3, #16
 801b750:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b754:	78fa      	ldrb	r2, [r7, #3]
 801b756:	4313      	orrs	r3, r2
 801b758:	78ba      	ldrb	r2, [r7, #2]
 801b75a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b75e:	ba1b      	rev	r3, r3
 801b760:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801b762:	7873      	ldrb	r3, [r6, #1]
 801b764:	7832      	ldrb	r2, [r6, #0]
 801b766:	041b      	lsls	r3, r3, #16
 801b768:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b76c:	78f2      	ldrb	r2, [r6, #3]
 801b76e:	4313      	orrs	r3, r2
 801b770:	78b2      	ldrb	r2, [r6, #2]
 801b772:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b776:	4a19      	ldr	r2, [pc, #100]	; (801b7dc <MX_LWIP_Init+0xcc>)
 801b778:	ba1b      	rev	r3, r3
 801b77a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801b77c:	782b      	ldrb	r3, [r5, #0]
 801b77e:	0400      	lsls	r0, r0, #16
 801b780:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801b784:	78eb      	ldrb	r3, [r5, #3]
 801b786:	4318      	orrs	r0, r3
 801b788:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801b78a:	4d15      	ldr	r5, [pc, #84]	; (801b7e0 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801b78c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801b790:	4b14      	ldr	r3, [pc, #80]	; (801b7e4 <MX_LWIP_Init+0xd4>)
 801b792:	ba00      	rev	r0, r0
 801b794:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801b796:	4814      	ldr	r0, [pc, #80]	; (801b7e8 <MX_LWIP_Init+0xd8>)
 801b798:	9002      	str	r0, [sp, #8]
 801b79a:	4814      	ldr	r0, [pc, #80]	; (801b7ec <MX_LWIP_Init+0xdc>)
 801b79c:	9001      	str	r0, [sp, #4]
 801b79e:	9400      	str	r4, [sp, #0]
 801b7a0:	4628      	mov	r0, r5
 801b7a2:	f7fb f9d5 	bl	8016b50 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801b7a6:	4628      	mov	r0, r5
 801b7a8:	f7fb fa10 	bl	8016bcc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801b7ac:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 801b7b0:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801b7b2:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 801b7b4:	d504      	bpl.n	801b7c0 <MX_LWIP_Init+0xb0>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801b7b6:	b005      	add	sp, #20
 801b7b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 801b7bc:	f7fb ba0c 	b.w	8016bd8 <netif_set_up>
}
 801b7c0:	b005      	add	sp, #20
 801b7c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 801b7c6:	f7fb ba16 	b.w	8016bf6 <netif_set_down>
 801b7ca:	bf00      	nop
 801b7cc:	2000bc34 	.word	0x2000bc34
 801b7d0:	2000bbf8 	.word	0x2000bbf8
 801b7d4:	2000bc30 	.word	0x2000bc30
 801b7d8:	2000bc2c 	.word	0x2000bc2c
 801b7dc:	2000bc38 	.word	0x2000bc38
 801b7e0:	2000bbfc 	.word	0x2000bbfc
 801b7e4:	2000bc3c 	.word	0x2000bc3c
 801b7e8:	08014eb5 	.word	0x08014eb5
 801b7ec:	0801b3cd 	.word	0x0801b3cd

0801b7f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801b7f0:	b570      	push	{r4, r5, r6, lr}
 801b7f2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801b7f4:	2230      	movs	r2, #48	; 0x30
 801b7f6:	2100      	movs	r1, #0
 801b7f8:	a808      	add	r0, sp, #32
 801b7fa:	f000 fe21 	bl	801c440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801b7fe:	2100      	movs	r1, #0
 801b800:	2214      	movs	r2, #20
 801b802:	a803      	add	r0, sp, #12
 801b804:	f000 fe1c 	bl	801c440 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801b808:	2400      	movs	r4, #0
 801b80a:	4b1d      	ldr	r3, [pc, #116]	; (801b880 <SystemClock_Config+0x90>)
 801b80c:	9401      	str	r4, [sp, #4]
 801b80e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b810:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801b814:	641a      	str	r2, [r3, #64]	; 0x40
 801b816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b81c:	9301      	str	r3, [sp, #4]
 801b81e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801b820:	4b18      	ldr	r3, [pc, #96]	; (801b884 <SystemClock_Config+0x94>)
 801b822:	9402      	str	r4, [sp, #8]
 801b824:	681a      	ldr	r2, [r3, #0]
 801b826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b82a:	601a      	str	r2, [r3, #0]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b832:	9302      	str	r3, [sp, #8]
 801b834:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801b836:	2301      	movs	r3, #1
 801b838:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801b83a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b83e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801b840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b844:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 801b846:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801b848:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
 801b84a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
 801b84c:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 336;
 801b84e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801b852:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 336;
 801b854:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801b856:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801b858:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 801b85a:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801b85c:	f7f5 fd1e 	bl	801129c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801b860:	230f      	movs	r3, #15
 801b862:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801b864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801b868:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801b86a:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801b86c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801b870:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801b872:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801b874:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801b876:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801b878:	f7f5 fec0 	bl	80115fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 801b87c:	b014      	add	sp, #80	; 0x50
 801b87e:	bd70      	pop	{r4, r5, r6, pc}
 801b880:	40023800 	.word	0x40023800
 801b884:	40007000 	.word	0x40007000

0801b888 <main>:
{
 801b888:	b508      	push	{r3, lr}
  HAL_Init();
 801b88a:	f7f4 fd73 	bl	8010374 <HAL_Init>
  SystemClock_Config();
 801b88e:	f7ff ffaf 	bl	801b7f0 <SystemClock_Config>
  HAL_FLASH_Unlock();
 801b892:	f7f5 fa4b 	bl	8010d2c <HAL_FLASH_Unlock>
  if (EE_Init() == HAL_OK){
 801b896:	f7ff fb37 	bl	801af08 <EE_Init>
 801b89a:	b998      	cbnz	r0, 801b8c4 <main+0x3c>
	  printf("EEPROM emulation init ... OK\n");
 801b89c:	480a      	ldr	r0, [pc, #40]	; (801b8c8 <main+0x40>)
	  printf("EEPROM emulation init ... ERROR\n");
 801b89e:	f000 faed 	bl	801be7c <puts>
  init_FLASH_AI();
 801b8a2:	f7ff fa47 	bl	801ad34 <init_FLASH_AI>
  MX_GPIO_Init();
 801b8a6:	f7ff fed5 	bl	801b654 <MX_GPIO_Init>
  MX_UART5_Init();
 801b8aa:	f000 fb01 	bl	801beb0 <MX_UART5_Init>
  MX_TIM8_Init();
 801b8ae:	f000 f99b 	bl	801bbe8 <MX_TIM8_Init>
  MX_TIM7_Init();
 801b8b2:	f000 f979 	bl	801bba8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 801b8b6:	f000 fb1b 	bl	801bef0 <MX_USART1_UART_Init>
  MX_FREERTOS_Init();
 801b8ba:	f7ff fe9f 	bl	801b5fc <MX_FREERTOS_Init>
  osKernelStart();
 801b8be:	f7f6 fc0d 	bl	80120dc <osKernelStart>
 801b8c2:	e7fe      	b.n	801b8c2 <main+0x3a>
	  printf("EEPROM emulation init ... ERROR\n");
 801b8c4:	4801      	ldr	r0, [pc, #4]	; (801b8cc <main+0x44>)
 801b8c6:	e7ea      	b.n	801b89e <main+0x16>
 801b8c8:	08020810 	.word	0x08020810
 801b8cc:	0802082d 	.word	0x0802082d

0801b8d0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 801b8d0:	6802      	ldr	r2, [r0, #0]
 801b8d2:	4b08      	ldr	r3, [pc, #32]	; (801b8f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 801b8d4:	429a      	cmp	r2, r3
{
 801b8d6:	b510      	push	{r4, lr}
 801b8d8:	4604      	mov	r4, r0
  if (htim->Instance == TIM1) {
 801b8da:	d101      	bne.n	801b8e0 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 801b8dc:	f7f4 fd64 	bl	80103a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM8) {
 801b8e0:	6822      	ldr	r2, [r4, #0]
 801b8e2:	4b05      	ldr	r3, [pc, #20]	; (801b8f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d103      	bne.n	801b8f0 <HAL_TIM_PeriodElapsedCallback+0x20>
    CommandProcess();
  }
  /* USER CODE END Callback 1 */
}
 801b8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CommandProcess();
 801b8ec:	f000 b808 	b.w	801b900 <CommandProcess>
 801b8f0:	bd10      	pop	{r4, pc}
 801b8f2:	bf00      	nop
 801b8f4:	40010000 	.word	0x40010000
 801b8f8:	40010400 	.word	0x40010400

0801b8fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801b8fc:	4770      	bx	lr
	...

0801b900 <CommandProcess>:
uint8_t received_byte;
circbuff inbuf_UART;

extern xQueueHandle frames_queue;

inline void CommandProcess() {
 801b900:	b537      	push	{r0, r1, r2, r4, r5, lr}
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 801b902:	4c0f      	ldr	r4, [pc, #60]	; (801b940 <CommandProcess+0x40>)
	HAL_TIM_Base_Stop_IT(&htim8);
 801b904:	480f      	ldr	r0, [pc, #60]	; (801b944 <CommandProcess+0x44>)
	xHigherPriorityTaskWoken = pdFALSE;
 801b906:	2500      	movs	r5, #0
 801b908:	6025      	str	r5, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 801b90a:	f7f5 ff60 	bl	80117ce <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 801b90e:	480e      	ldr	r0, [pc, #56]	; (801b948 <CommandProcess+0x48>)
 801b910:	f7ff f9e0 	bl	801acd4 <CB_Data_Length>
 801b914:	a902      	add	r1, sp, #8
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 801b916:	462b      	mov	r3, r5
	len = CB_Data_Length(&inbuf_UART);
 801b918:	f841 0d04 	str.w	r0, [r1, #-4]!
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 801b91c:	480b      	ldr	r0, [pc, #44]	; (801b94c <CommandProcess+0x4c>)
 801b91e:	4622      	mov	r2, r4
 801b920:	6800      	ldr	r0, [r0, #0]
 801b922:	f7f7 f979 	bl	8012c18 <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 801b926:	6823      	ldr	r3, [r4, #0]
 801b928:	2b01      	cmp	r3, #1
 801b92a:	d107      	bne.n	801b93c <CommandProcess+0x3c>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801b92c:	4b08      	ldr	r3, [pc, #32]	; (801b950 <CommandProcess+0x50>)
 801b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b932:	601a      	str	r2, [r3, #0]
 801b934:	f3bf 8f4f 	dsb	sy
 801b938:	f3bf 8f6f 	isb	sy
	}
}
 801b93c:	b003      	add	sp, #12
 801b93e:	bd30      	pop	{r4, r5, pc}
 801b940:	20004110 	.word	0x20004110
 801b944:	2000bc90 	.word	0x2000bc90
 801b948:	2000bc44 	.word	0x2000bc44
 801b94c:	2000bbec 	.word	0x2000bbec
 801b950:	e000ed04 	.word	0xe000ed04

0801b954 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801b954:	b510      	push	{r4, lr}
	CB_Write(&inbuf_UART, received_byte);
 801b956:	4c09      	ldr	r4, [pc, #36]	; (801b97c <HAL_UART_RxCpltCallback+0x28>)
 801b958:	4809      	ldr	r0, [pc, #36]	; (801b980 <HAL_UART_RxCpltCallback+0x2c>)
 801b95a:	7821      	ldrb	r1, [r4, #0]
 801b95c:	f7ff f9c2 	bl	801ace4 <CB_Write>
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801b960:	2201      	movs	r2, #1
 801b962:	4621      	mov	r1, r4
 801b964:	4807      	ldr	r0, [pc, #28]	; (801b984 <HAL_UART_RxCpltCallback+0x30>)
 801b966:	f7f6 fab2 	bl	8011ece <HAL_UART_Receive_IT>
	__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 801b96a:	4807      	ldr	r0, [pc, #28]	; (801b988 <HAL_UART_RxCpltCallback+0x34>)
 801b96c:	6803      	ldr	r3, [r0, #0]
 801b96e:	2200      	movs	r2, #0
 801b970:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim8);
}
 801b972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim8);
 801b976:	f7f5 bf1f 	b.w	80117b8 <HAL_TIM_Base_Start_IT>
 801b97a:	bf00      	nop
 801b97c:	2000bc40 	.word	0x2000bc40
 801b980:	2000bc44 	.word	0x2000bc44
 801b984:	2000bd08 	.word	0x2000bd08
 801b988:	2000bc90 	.word	0x2000bc90

0801b98c <StartProcessTask>:

void StartProcessTask(void const * argument) {
 801b98c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t len;
	cb_err err = NO_ERR;
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 801b98e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b992:	481d      	ldr	r0, [pc, #116]	; (801ba08 <StartProcessTask+0x7c>)
 801b994:	f7ff f98c 	bl	801acb0 <CB_Init>
	if (err != NO_ERR) {
 801b998:	b110      	cbz	r0, 801b9a0 <StartProcessTask+0x14>
		printf("Buffer allocation error");
 801b99a:	481c      	ldr	r0, [pc, #112]	; (801ba0c <StartProcessTask+0x80>)
 801b99c:	f000 fa4a 	bl	801be34 <iprintf>
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801b9a0:	2201      	movs	r2, #1
 801b9a2:	491b      	ldr	r1, [pc, #108]	; (801ba10 <StartProcessTask+0x84>)
 801b9a4:	481b      	ldr	r0, [pc, #108]	; (801ba14 <StartProcessTask+0x88>)
	for (;;) {
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 801b9a6:	4d1c      	ldr	r5, [pc, #112]	; (801ba18 <StartProcessTask+0x8c>)
		while (len) {
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801b9a8:	4c1c      	ldr	r4, [pc, #112]	; (801ba1c <StartProcessTask+0x90>)
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 801b9aa:	4e17      	ldr	r6, [pc, #92]	; (801ba08 <StartProcessTask+0x7c>)
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801b9ac:	f7f6 fa8f 	bl	8011ece <HAL_UART_Receive_IT>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	f04f 32ff 	mov.w	r2, #4294967295
 801b9b6:	a902      	add	r1, sp, #8
 801b9b8:	6828      	ldr	r0, [r5, #0]
 801b9ba:	f7f7 f9e3 	bl	8012d84 <xQueueGenericReceive>
		while (len) {
 801b9be:	9b02      	ldr	r3, [sp, #8]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d0f5      	beq.n	801b9b0 <StartProcessTask+0x24>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801b9c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	f7f5 fc62 	bl	8011292 <HAL_GPIO_TogglePin>
			CB_Read(&inbuf_UART, &ch);
 801b9ce:	f10d 0107 	add.w	r1, sp, #7
 801b9d2:	4630      	mov	r0, r6
 801b9d4:	f7ff f99b 	bl	801ad0e <CB_Read>

			--len;
 801b9d8:	9b02      	ldr	r3, [sp, #8]
 801b9da:	3b01      	subs	r3, #1
 801b9dc:	9302      	str	r3, [sp, #8]
			volatile int i = 50;
 801b9de:	2332      	movs	r3, #50	; 0x32
			while (i) {
				--i;
 801b9e0:	9303      	str	r3, [sp, #12]
			while (i) {
 801b9e2:	9b03      	ldr	r3, [sp, #12]
 801b9e4:	b963      	cbnz	r3, 801ba00 <StartProcessTask+0x74>
			}
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801b9e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f7f5 fc51 	bl	8011292 <HAL_GPIO_TogglePin>
			i = 50;
 801b9f0:	2332      	movs	r3, #50	; 0x32
			while (i) {
				--i;
 801b9f2:	9303      	str	r3, [sp, #12]
			while (i) {
 801b9f4:	9b03      	ldr	r3, [sp, #12]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d0e1      	beq.n	801b9be <StartProcessTask+0x32>
				--i;
 801b9fa:	9b03      	ldr	r3, [sp, #12]
 801b9fc:	3b01      	subs	r3, #1
 801b9fe:	e7f8      	b.n	801b9f2 <StartProcessTask+0x66>
				--i;
 801ba00:	9b03      	ldr	r3, [sp, #12]
 801ba02:	3b01      	subs	r3, #1
 801ba04:	e7ec      	b.n	801b9e0 <StartProcessTask+0x54>
 801ba06:	bf00      	nop
 801ba08:	2000bc44 	.word	0x2000bc44
 801ba0c:	0802084d 	.word	0x0802084d
 801ba10:	2000bc40 	.word	0x2000bc40
 801ba14:	2000bd08 	.word	0x2000bd08
 801ba18:	2000bbec 	.word	0x2000bbec
 801ba1c:	40021000 	.word	0x40021000

0801ba20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801ba20:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ba22:	4b0f      	ldr	r3, [pc, #60]	; (801ba60 <HAL_MspInit+0x40>)
 801ba24:	2200      	movs	r2, #0
 801ba26:	9200      	str	r2, [sp, #0]
 801ba28:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ba2a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 801ba2e:	6459      	str	r1, [r3, #68]	; 0x44
 801ba30:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ba32:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 801ba36:	9100      	str	r1, [sp, #0]
 801ba38:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ba3a:	9201      	str	r2, [sp, #4]
 801ba3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801ba3e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801ba42:	6419      	str	r1, [r3, #64]	; 0x40
 801ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba4a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801ba4c:	210f      	movs	r1, #15
 801ba4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 801ba52:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801ba54:	f7f4 fce0 	bl	8010418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ba58:	b003      	add	sp, #12
 801ba5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba5e:	bf00      	nop
 801ba60:	40023800 	.word	0x40023800

0801ba64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ba64:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801ba66:	4601      	mov	r1, r0
{
 801ba68:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	2019      	movs	r0, #25
 801ba6e:	f7f4 fcd3 	bl	8010418 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801ba72:	2019      	movs	r0, #25
 801ba74:	f7f4 fd04 	bl	8010480 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801ba78:	2500      	movs	r5, #0
 801ba7a:	4b15      	ldr	r3, [pc, #84]	; (801bad0 <HAL_InitTick+0x6c>)
 801ba7c:	9502      	str	r5, [sp, #8]
 801ba7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801ba80:	4c14      	ldr	r4, [pc, #80]	; (801bad4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 801ba82:	f042 0201 	orr.w	r2, r2, #1
 801ba86:	645a      	str	r2, [r3, #68]	; 0x44
 801ba88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba8a:	f003 0301 	and.w	r3, r3, #1
 801ba8e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801ba90:	a901      	add	r1, sp, #4
 801ba92:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 801ba94:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801ba96:	f7f5 fe71 	bl	801177c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801ba9a:	f7f5 fe5f 	bl	801175c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 801ba9e:	4b0e      	ldr	r3, [pc, #56]	; (801bad8 <HAL_InitTick+0x74>)
 801baa0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801baa2:	f240 33e7 	movw	r3, #999	; 0x3e7
 801baa6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801baa8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801baaa:	4b0c      	ldr	r3, [pc, #48]	; (801badc <HAL_InitTick+0x78>)
 801baac:	fbb0 f0f3 	udiv	r0, r0, r3
 801bab0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 801bab2:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801bab4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 801bab6:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bab8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801baba:	f7f6 f861 	bl	8011b80 <HAL_TIM_Base_Init>
 801babe:	b920      	cbnz	r0, 801baca <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801bac0:	4620      	mov	r0, r4
 801bac2:	f7f5 fe79 	bl	80117b8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 801bac6:	b009      	add	sp, #36	; 0x24
 801bac8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 801baca:	2001      	movs	r0, #1
 801bacc:	e7fb      	b.n	801bac6 <HAL_InitTick+0x62>
 801bace:	bf00      	nop
 801bad0:	40023800 	.word	0x40023800
 801bad4:	2000bc54 	.word	0x2000bc54
 801bad8:	40010000 	.word	0x40010000
 801badc:	000f4240 	.word	0x000f4240

0801bae0 <NMI_Handler>:
 801bae0:	4770      	bx	lr

0801bae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801bae2:	e7fe      	b.n	801bae2 <HardFault_Handler>

0801bae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801bae4:	e7fe      	b.n	801bae4 <MemManage_Handler>

0801bae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801bae6:	e7fe      	b.n	801bae6 <BusFault_Handler>

0801bae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801bae8:	e7fe      	b.n	801bae8 <UsageFault_Handler>

0801baea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801baea:	4770      	bx	lr

0801baec <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801baec:	4801      	ldr	r0, [pc, #4]	; (801baf4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 801baee:	f7f5 bf40 	b.w	8011972 <HAL_TIM_IRQHandler>
 801baf2:	bf00      	nop
 801baf4:	2000bc54 	.word	0x2000bc54

0801baf8 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801baf8:	4801      	ldr	r0, [pc, #4]	; (801bb00 <TIM8_UP_TIM13_IRQHandler+0x8>)
 801bafa:	f7f5 bf3a 	b.w	8011972 <HAL_TIM_IRQHandler>
 801bafe:	bf00      	nop
 801bb00:	2000bc90 	.word	0x2000bc90

0801bb04 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801bb04:	4801      	ldr	r0, [pc, #4]	; (801bb0c <UART5_IRQHandler+0x8>)
 801bb06:	f7f6 ba41 	b.w	8011f8c <HAL_UART_IRQHandler>
 801bb0a:	bf00      	nop
 801bb0c:	2000bd08 	.word	0x2000bd08

0801bb10 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801bb10:	4801      	ldr	r0, [pc, #4]	; (801bb18 <TIM7_IRQHandler+0x8>)
 801bb12:	f7f5 bf2e 	b.w	8011972 <HAL_TIM_IRQHandler>
 801bb16:	bf00      	nop
 801bb18:	2000bccc 	.word	0x2000bccc

0801bb1c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801bb1c:	4801      	ldr	r0, [pc, #4]	; (801bb24 <ETH_IRQHandler+0x8>)
 801bb1e:	f7f4 beb2 	b.w	8010886 <HAL_ETH_IRQHandler>
 801bb22:	bf00      	nop
 801bb24:	2000a3d0 	.word	0x2000a3d0

0801bb28 <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 801bb28:	b510      	push	{r4, lr}
	int i = 0;
	for (i = 0; i < len; i++)
 801bb2a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801bb2c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 801bb30:	4293      	cmp	r3, r2
 801bb32:	db01      	blt.n	801bb38 <_write+0x10>
		ITM_SendChar((*ptr++));
	return len;
}
 801bb34:	4610      	mov	r0, r2
 801bb36:	bd10      	pop	{r4, pc}
 801bb38:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 801bb3c:	07c0      	lsls	r0, r0, #31
 801bb3e:	d503      	bpl.n	801bb48 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801bb40:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801bb44:	07c0      	lsls	r0, r0, #31
 801bb46:	d402      	bmi.n	801bb4e <_write+0x26>
	for (i = 0; i < len; i++)
 801bb48:	3301      	adds	r3, #1
 801bb4a:	e7f1      	b.n	801bb30 <_write+0x8>
  __ASM volatile ("nop");
 801bb4c:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801bb4e:	6820      	ldr	r0, [r4, #0]
 801bb50:	2800      	cmp	r0, #0
 801bb52:	d0fb      	beq.n	801bb4c <_write+0x24>
		ITM_SendChar((*ptr++));
 801bb54:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801bb56:	7020      	strb	r0, [r4, #0]
 801bb58:	e7f6      	b.n	801bb48 <_write+0x20>
	...

0801bb5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801bb5c:	490f      	ldr	r1, [pc, #60]	; (801bb9c <SystemInit+0x40>)
 801bb5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801bb62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801bb66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801bb6a:	4b0d      	ldr	r3, [pc, #52]	; (801bba0 <SystemInit+0x44>)
 801bb6c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801bb6e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 801bb70:	f042 0201 	orr.w	r2, r2, #1
 801bb74:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 801bb76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801bb78:	681a      	ldr	r2, [r3, #0]
 801bb7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801bb7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801bb82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801bb84:	4a07      	ldr	r2, [pc, #28]	; (801bba4 <SystemInit+0x48>)
 801bb86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801bb88:	681a      	ldr	r2, [r3, #0]
 801bb8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801bb8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801bb90:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801bb92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801bb96:	608b      	str	r3, [r1, #8]
 801bb98:	4770      	bx	lr
 801bb9a:	bf00      	nop
 801bb9c:	e000ed00 	.word	0xe000ed00
 801bba0:	40023800 	.word	0x40023800
 801bba4:	24003010 	.word	0x24003010

0801bba8 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801bba8:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 801bbaa:	4b0d      	ldr	r3, [pc, #52]	; (801bbe0 <MX_TIM7_Init+0x38>)
 801bbac:	480d      	ldr	r0, [pc, #52]	; (801bbe4 <MX_TIM7_Init+0x3c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801bbae:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 0;
 801bbb0:	e880 0018 	stmia.w	r0, {r3, r4}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 840;
 801bbb4:	f44f 7352 	mov.w	r3, #840	; 0x348
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801bbb8:	9400      	str	r4, [sp, #0]
 801bbba:	9401      	str	r4, [sp, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bbbc:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 840;
 801bbbe:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801bbc0:	f7f5 ffde 	bl	8011b80 <HAL_TIM_Base_Init>
 801bbc4:	b108      	cbz	r0, 801bbca <MX_TIM7_Init+0x22>
  {
    Error_Handler();
 801bbc6:	f7ff fe99 	bl	801b8fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801bbca:	4669      	mov	r1, sp
 801bbcc:	4805      	ldr	r0, [pc, #20]	; (801bbe4 <MX_TIM7_Init+0x3c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801bbce:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801bbd0:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801bbd2:	f7f5 ffef 	bl	8011bb4 <HAL_TIMEx_MasterConfigSynchronization>
 801bbd6:	b108      	cbz	r0, 801bbdc <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 801bbd8:	f7ff fe90 	bl	801b8fc <Error_Handler>
  }

}
 801bbdc:	b002      	add	sp, #8
 801bbde:	bd10      	pop	{r4, pc}
 801bbe0:	40001400 	.word	0x40001400
 801bbe4:	2000bccc 	.word	0x2000bccc

0801bbe8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801bbe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801bbea:	2210      	movs	r2, #16
 801bbec:	2100      	movs	r1, #0
 801bbee:	a802      	add	r0, sp, #8
 801bbf0:	f000 fc26 	bl	801c440 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim8.Instance = TIM8;
 801bbf4:	4814      	ldr	r0, [pc, #80]	; (801bc48 <MX_TIM8_Init+0x60>)
 801bbf6:	4a15      	ldr	r2, [pc, #84]	; (801bc4c <MX_TIM8_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801bbf8:	2300      	movs	r3, #0
  htim8.Init.Prescaler = 0;
 801bbfa:	e880 000c 	stmia.w	r0, {r2, r3}
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 27720;
 801bbfe:	f646 4248 	movw	r2, #27720	; 0x6c48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801bc02:	9300      	str	r3, [sp, #0]
 801bc04:	9301      	str	r3, [sp, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bc06:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 27720;
 801bc08:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801bc0a:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 801bc0c:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801bc0e:	f7f5 ffb7 	bl	8011b80 <HAL_TIM_Base_Init>
 801bc12:	b108      	cbz	r0, 801bc18 <MX_TIM8_Init+0x30>
  {
    Error_Handler();
 801bc14:	f7ff fe72 	bl	801b8fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801bc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801bc1c:	a902      	add	r1, sp, #8
 801bc1e:	480a      	ldr	r0, [pc, #40]	; (801bc48 <MX_TIM8_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801bc20:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801bc22:	f7f5 fde9 	bl	80117f8 <HAL_TIM_ConfigClockSource>
 801bc26:	b108      	cbz	r0, 801bc2c <MX_TIM8_Init+0x44>
  {
    Error_Handler();
 801bc28:	f7ff fe68 	bl	801b8fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801bc2c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801bc2e:	4669      	mov	r1, sp
 801bc30:	4805      	ldr	r0, [pc, #20]	; (801bc48 <MX_TIM8_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801bc32:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801bc34:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801bc36:	f7f5 ffbd 	bl	8011bb4 <HAL_TIMEx_MasterConfigSynchronization>
 801bc3a:	b108      	cbz	r0, 801bc40 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 801bc3c:	f7ff fe5e 	bl	801b8fc <Error_Handler>
  }

}
 801bc40:	b007      	add	sp, #28
 801bc42:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc46:	bf00      	nop
 801bc48:	2000bc90 	.word	0x2000bc90
 801bc4c:	40010400 	.word	0x40010400

0801bc50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801bc50:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM7)
 801bc52:	6803      	ldr	r3, [r0, #0]
 801bc54:	4a16      	ldr	r2, [pc, #88]	; (801bcb0 <HAL_TIM_Base_MspInit+0x60>)
 801bc56:	4293      	cmp	r3, r2
 801bc58:	d115      	bne.n	801bc86 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801bc5a:	4b16      	ldr	r3, [pc, #88]	; (801bcb4 <HAL_TIM_Base_MspInit+0x64>)
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	9200      	str	r2, [sp, #0]
 801bc60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801bc62:	f041 0120 	orr.w	r1, r1, #32
 801bc66:	6419      	str	r1, [r3, #64]	; 0x40
 801bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc6a:	f003 0320 	and.w	r3, r3, #32
 801bc6e:	9300      	str	r3, [sp, #0]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801bc70:	2037      	movs	r0, #55	; 0x37
 801bc72:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 801bc74:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801bc76:	f7f4 fbcf 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801bc7a:	2037      	movs	r0, #55	; 0x37
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801bc7c:	f7f4 fc00 	bl	8010480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801bc80:	b003      	add	sp, #12
 801bc82:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM8)
 801bc86:	4a0c      	ldr	r2, [pc, #48]	; (801bcb8 <HAL_TIM_Base_MspInit+0x68>)
 801bc88:	4293      	cmp	r3, r2
 801bc8a:	d1f9      	bne.n	801bc80 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801bc8c:	4b09      	ldr	r3, [pc, #36]	; (801bcb4 <HAL_TIM_Base_MspInit+0x64>)
 801bc8e:	2200      	movs	r2, #0
 801bc90:	9201      	str	r2, [sp, #4]
 801bc92:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bc94:	f041 0102 	orr.w	r1, r1, #2
 801bc98:	6459      	str	r1, [r3, #68]	; 0x44
 801bc9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc9c:	f003 0302 	and.w	r3, r3, #2
 801bca0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801bca2:	202c      	movs	r0, #44	; 0x2c
 801bca4:	2105      	movs	r1, #5
    __HAL_RCC_TIM8_CLK_ENABLE();
 801bca6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801bca8:	f7f4 fbb6 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801bcac:	202c      	movs	r0, #44	; 0x2c
 801bcae:	e7e5      	b.n	801bc7c <HAL_TIM_Base_MspInit+0x2c>
 801bcb0:	40001400 	.word	0x40001400
 801bcb4:	40023800 	.word	0x40023800
 801bcb8:	40010400 	.word	0x40010400

0801bcbc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 801bcbc:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 801bcbe:	2301      	movs	r3, #1
	while (d/div >= base)
 801bcc0:	fbb1 f4f3 	udiv	r4, r1, r3
 801bcc4:	4294      	cmp	r4, r2
 801bcc6:	d201      	bcs.n	801bccc <ts_itoa+0x10>
		div *= base;

	while (div != 0)
 801bcc8:	b913      	cbnz	r3, 801bcd0 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 801bcca:	bd70      	pop	{r4, r5, r6, pc}
		div *= base;
 801bccc:	4353      	muls	r3, r2
 801bcce:	e7f7      	b.n	801bcc0 <ts_itoa+0x4>
 801bcd0:	6805      	ldr	r5, [r0, #0]
		int num = d/div;
 801bcd2:	fbb1 f4f3 	udiv	r4, r1, r3
		if (num > 9)
 801bcd6:	2c09      	cmp	r4, #9
		d = d%div;
 801bcd8:	fb03 1114 	mls	r1, r3, r4, r1
			*((*buf)++) = (num-10) + 'A';
 801bcdc:	f105 0601 	add.w	r6, r5, #1
 801bce0:	bfcc      	ite	gt
 801bce2:	3437      	addgt	r4, #55	; 0x37
			*((*buf)++) = num + '0';
 801bce4:	3430      	addle	r4, #48	; 0x30
			*((*buf)++) = (num-10) + 'A';
 801bce6:	6006      	str	r6, [r0, #0]
		div /= base;
 801bce8:	fb93 f3f2 	sdiv	r3, r3, r2
			*((*buf)++) = num + '0';
 801bcec:	702c      	strb	r4, [r5, #0]
 801bcee:	e7eb      	b.n	801bcc8 <ts_itoa+0xc>

0801bcf0 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801bcf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801bcf4:	ad02      	add	r5, sp, #8
 801bcf6:	460c      	mov	r4, r1
 801bcf8:	f845 0d04 	str.w	r0, [r5, #-4]!
 801bcfc:	4613      	mov	r3, r2
	char *start_buf = buf;
 801bcfe:	4606      	mov	r6, r0
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 801bd00:	272d      	movs	r7, #45	; 0x2d
	while(*fmt)
 801bd02:	7822      	ldrb	r2, [r4, #0]
 801bd04:	b932      	cbnz	r2, 801bd14 <ts_formatstring+0x24>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 801bd06:	9b01      	ldr	r3, [sp, #4]
 801bd08:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 801bd0a:	9801      	ldr	r0, [sp, #4]
 801bd0c:	1b80      	subs	r0, r0, r6
 801bd0e:	b002      	add	sp, #8
 801bd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*fmt == '%')
 801bd14:	2a25      	cmp	r2, #37	; 0x25
 801bd16:	d146      	bne.n	801bda6 <ts_formatstring+0xb6>
			switch (*(++fmt))
 801bd18:	7862      	ldrb	r2, [r4, #1]
 801bd1a:	2a64      	cmp	r2, #100	; 0x64
 801bd1c:	d021      	beq.n	801bd62 <ts_formatstring+0x72>
 801bd1e:	d80a      	bhi.n	801bd36 <ts_formatstring+0x46>
 801bd20:	2a58      	cmp	r2, #88	; 0x58
 801bd22:	d013      	beq.n	801bd4c <ts_formatstring+0x5c>
 801bd24:	2a63      	cmp	r2, #99	; 0x63
 801bd26:	d015      	beq.n	801bd54 <ts_formatstring+0x64>
 801bd28:	2a25      	cmp	r2, #37	; 0x25
 801bd2a:	d109      	bne.n	801bd40 <ts_formatstring+0x50>
				  *buf++ = '%';
 801bd2c:	9901      	ldr	r1, [sp, #4]
 801bd2e:	1c48      	adds	r0, r1, #1
 801bd30:	9001      	str	r0, [sp, #4]
 801bd32:	700a      	strb	r2, [r1, #0]
				  break;
 801bd34:	e004      	b.n	801bd40 <ts_formatstring+0x50>
			switch (*(++fmt))
 801bd36:	2a73      	cmp	r2, #115	; 0x73
 801bd38:	d023      	beq.n	801bd82 <ts_formatstring+0x92>
 801bd3a:	d803      	bhi.n	801bd44 <ts_formatstring+0x54>
 801bd3c:	2a69      	cmp	r2, #105	; 0x69
 801bd3e:	d010      	beq.n	801bd62 <ts_formatstring+0x72>
			fmt++;
 801bd40:	3402      	adds	r4, #2
 801bd42:	e7de      	b.n	801bd02 <ts_formatstring+0x12>
			switch (*(++fmt))
 801bd44:	2a75      	cmp	r2, #117	; 0x75
 801bd46:	d029      	beq.n	801bd9c <ts_formatstring+0xac>
 801bd48:	2a78      	cmp	r2, #120	; 0x78
 801bd4a:	d1f9      	bne.n	801bd40 <ts_formatstring+0x50>
					ts_itoa(&buf, va_arg(va, int), 16);
 801bd4c:	f103 0804 	add.w	r8, r3, #4
 801bd50:	2210      	movs	r2, #16
 801bd52:	e026      	b.n	801bda2 <ts_formatstring+0xb2>
				*buf++ = va_arg(va, int);
 801bd54:	9a01      	ldr	r2, [sp, #4]
 801bd56:	1c51      	adds	r1, r2, #1
 801bd58:	9101      	str	r1, [sp, #4]
 801bd5a:	6819      	ldr	r1, [r3, #0]
 801bd5c:	7011      	strb	r1, [r2, #0]
 801bd5e:	3304      	adds	r3, #4
				break;
 801bd60:	e7ee      	b.n	801bd40 <ts_formatstring+0x50>
					signed int val = va_arg(va, signed int);
 801bd62:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 801bd64:	2900      	cmp	r1, #0
					signed int val = va_arg(va, signed int);
 801bd66:	f103 0804 	add.w	r8, r3, #4
					if (val < 0)
 801bd6a:	da04      	bge.n	801bd76 <ts_formatstring+0x86>
						*buf++ = '-';
 801bd6c:	9b01      	ldr	r3, [sp, #4]
 801bd6e:	1c5a      	adds	r2, r3, #1
 801bd70:	9201      	str	r2, [sp, #4]
						val *= -1;
 801bd72:	4249      	negs	r1, r1
						*buf++ = '-';
 801bd74:	701f      	strb	r7, [r3, #0]
					ts_itoa(&buf, val, 10);
 801bd76:	220a      	movs	r2, #10
					ts_itoa(&buf, va_arg(va, int), 16);
 801bd78:	4628      	mov	r0, r5
 801bd7a:	f7ff ff9f 	bl	801bcbc <ts_itoa>
 801bd7e:	4643      	mov	r3, r8
				break;
 801bd80:	e7de      	b.n	801bd40 <ts_formatstring+0x50>
					char * arg = va_arg(va, char *);
 801bd82:	1d19      	adds	r1, r3, #4
 801bd84:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 801bd86:	781a      	ldrb	r2, [r3, #0]
 801bd88:	b90a      	cbnz	r2, 801bd8e <ts_formatstring+0x9e>
					char * arg = va_arg(va, char *);
 801bd8a:	460b      	mov	r3, r1
 801bd8c:	e7d8      	b.n	801bd40 <ts_formatstring+0x50>
						*buf++ = *arg++;
 801bd8e:	9a01      	ldr	r2, [sp, #4]
 801bd90:	1c50      	adds	r0, r2, #1
 801bd92:	9001      	str	r0, [sp, #4]
 801bd94:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bd98:	7010      	strb	r0, [r2, #0]
 801bd9a:	e7f4      	b.n	801bd86 <ts_formatstring+0x96>
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801bd9c:	f103 0804 	add.w	r8, r3, #4
 801bda0:	220a      	movs	r2, #10
					ts_itoa(&buf, va_arg(va, int), 16);
 801bda2:	6819      	ldr	r1, [r3, #0]
 801bda4:	e7e8      	b.n	801bd78 <ts_formatstring+0x88>
			*buf++ = *fmt++;
 801bda6:	9901      	ldr	r1, [sp, #4]
 801bda8:	1c48      	adds	r0, r1, #1
 801bdaa:	9001      	str	r0, [sp, #4]
 801bdac:	3401      	adds	r4, #1
 801bdae:	700a      	strb	r2, [r1, #0]
 801bdb0:	e7a7      	b.n	801bd02 <ts_formatstring+0x12>

0801bdb2 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 801bdb2:	b530      	push	{r4, r5, lr}
 801bdb4:	4602      	mov	r2, r0
	int length = 0;
 801bdb6:	2000      	movs	r0, #0
	while (*fmt)
 801bdb8:	7813      	ldrb	r3, [r2, #0]
 801bdba:	b903      	cbnz	r3, 801bdbe <ts_formatlength+0xc>
			++length;
		}
		++fmt;
	}
	return length;
}
 801bdbc:	bd30      	pop	{r4, r5, pc}
		if (*fmt == '%')
 801bdbe:	2b25      	cmp	r3, #37	; 0x25
 801bdc0:	d128      	bne.n	801be14 <ts_formatlength+0x62>
			switch (*fmt)
 801bdc2:	7853      	ldrb	r3, [r2, #1]
 801bdc4:	2b69      	cmp	r3, #105	; 0x69
			++fmt;
 801bdc6:	f102 0401 	add.w	r4, r2, #1
			switch (*fmt)
 801bdca:	d013      	beq.n	801bdf4 <ts_formatlength+0x42>
 801bdcc:	d808      	bhi.n	801bde0 <ts_formatlength+0x2e>
 801bdce:	2b63      	cmp	r3, #99	; 0x63
 801bdd0:	d00e      	beq.n	801bdf0 <ts_formatlength+0x3e>
 801bdd2:	2b64      	cmp	r3, #100	; 0x64
 801bdd4:	d00e      	beq.n	801bdf4 <ts_formatlength+0x42>
 801bdd6:	2b58      	cmp	r3, #88	; 0x58
 801bdd8:	d108      	bne.n	801bdec <ts_formatlength+0x3a>
				  length += 8;
 801bdda:	f100 0308 	add.w	r3, r0, #8
 801bdde:	e00b      	b.n	801bdf8 <ts_formatlength+0x46>
			switch (*fmt)
 801bde0:	2b75      	cmp	r3, #117	; 0x75
 801bde2:	d007      	beq.n	801bdf4 <ts_formatlength+0x42>
 801bde4:	2b78      	cmp	r3, #120	; 0x78
 801bde6:	d0f8      	beq.n	801bdda <ts_formatlength+0x28>
 801bde8:	2b73      	cmp	r3, #115	; 0x73
 801bdea:	d007      	beq.n	801bdfc <ts_formatlength+0x4a>
				  ++length;
 801bdec:	1c43      	adds	r3, r0, #1
				  break;
 801bdee:	e00e      	b.n	801be0e <ts_formatlength+0x5c>
		  		  va_arg(va, int);
 801bdf0:	3104      	adds	r1, #4
 801bdf2:	e7fb      	b.n	801bdec <ts_formatlength+0x3a>
				  length += 11;
 801bdf4:	f100 030b 	add.w	r3, r0, #11
				  va_arg(va, unsigned int);
 801bdf8:	3104      	adds	r1, #4
 801bdfa:	e008      	b.n	801be0e <ts_formatlength+0x5c>
			  		  char * str = va_arg(va, char *);
 801bdfc:	680a      	ldr	r2, [r1, #0]
 801bdfe:	1d0d      	adds	r5, r1, #4
 801be00:	1a80      	subs	r0, r0, r2
 801be02:	1813      	adds	r3, r2, r0
			  		  while (*str++)
 801be04:	f812 1b01 	ldrb.w	r1, [r2], #1
 801be08:	2900      	cmp	r1, #0
 801be0a:	d1fa      	bne.n	801be02 <ts_formatlength+0x50>
			  		  char * str = va_arg(va, char *);
 801be0c:	4629      	mov	r1, r5
		++fmt;
 801be0e:	1c62      	adds	r2, r4, #1
 801be10:	4618      	mov	r0, r3
 801be12:	e7d1      	b.n	801bdb8 <ts_formatlength+0x6>
			++length;
 801be14:	1c43      	adds	r3, r0, #1
 801be16:	4614      	mov	r4, r2
 801be18:	e7f9      	b.n	801be0e <ts_formatlength+0x5c>

0801be1a <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 801be1a:	b40e      	push	{r1, r2, r3}
 801be1c:	b503      	push	{r0, r1, lr}
 801be1e:	aa03      	add	r2, sp, #12
 801be20:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 801be24:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 801be26:	f7ff ff63 	bl	801bcf0 <ts_formatstring>
	va_end(va);
	return length;
}
 801be2a:	b002      	add	sp, #8
 801be2c:	f85d eb04 	ldr.w	lr, [sp], #4
 801be30:	b003      	add	sp, #12
 801be32:	4770      	bx	lr

0801be34 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801be34:	b40f      	push	{r0, r1, r2, r3}
 801be36:	b5b0      	push	{r4, r5, r7, lr}
 801be38:	b082      	sub	sp, #8
 801be3a:	af00      	add	r7, sp, #0
 801be3c:	f107 0418 	add.w	r4, r7, #24
 801be40:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 801be44:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 801be46:	4621      	mov	r1, r4
 801be48:	4628      	mov	r0, r5
 801be4a:	f7ff ffb2 	bl	801bdb2 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 801be4e:	3007      	adds	r0, #7
 801be50:	f020 0007 	bic.w	r0, r0, #7
 801be54:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 801be58:	4622      	mov	r2, r4
 801be5a:	4629      	mov	r1, r5
 801be5c:	4668      	mov	r0, sp
		va_start(va, fmt);
 801be5e:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 801be60:	f7ff ff46 	bl	801bcf0 <ts_formatstring>
		length = _write(1, buf, length);
 801be64:	4669      	mov	r1, sp
 801be66:	4602      	mov	r2, r0
 801be68:	2001      	movs	r0, #1
 801be6a:	f7ff fe5d 	bl	801bb28 <_write>
		va_end(va);
	}
	return length;
}
 801be6e:	3708      	adds	r7, #8
 801be70:	46bd      	mov	sp, r7
 801be72:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801be76:	b004      	add	sp, #16
 801be78:	4770      	bx	lr
	...

0801be7c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 801be7c:	b538      	push	{r3, r4, r5, lr}
 801be7e:	4605      	mov	r5, r0
	int length = strlen(s);
 801be80:	f7f4 f8e8 	bl	8010054 <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 801be84:	4629      	mov	r1, r5
 801be86:	4602      	mov	r2, r0
	int length = strlen(s);
 801be88:	4604      	mov	r4, r0
	numbytes = _write(1, (char*)s, length);
 801be8a:	2001      	movs	r0, #1
 801be8c:	f7ff fe4c 	bl	801bb28 <_write>
	numbytes += _write(1, "\n", 1);
 801be90:	2201      	movs	r2, #1
	numbytes = _write(1, (char*)s, length);
 801be92:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 801be94:	4905      	ldr	r1, [pc, #20]	; (801beac <puts+0x30>)
 801be96:	4610      	mov	r0, r2
 801be98:	f7ff fe46 	bl	801bb28 <_write>

	if (numbytes == (length+1))
 801be9c:	3401      	adds	r4, #1
	numbytes += _write(1, "\n", 1);
 801be9e:	4428      	add	r0, r5
	{
		res = EOF;
	}

	return res;
}
 801bea0:	1b00      	subs	r0, r0, r4
 801bea2:	bf18      	it	ne
 801bea4:	f04f 30ff 	movne.w	r0, #4294967295
 801bea8:	bd38      	pop	{r3, r4, r5, pc}
 801beaa:	bf00      	nop
 801beac:	0801fdba 	.word	0x0801fdba

0801beb0 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 801beb0:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 801beb2:	480c      	ldr	r0, [pc, #48]	; (801bee4 <MX_UART5_Init+0x34>)
  huart5.Init.BaudRate = 187500;
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 801beb4:	4a0c      	ldr	r2, [pc, #48]	; (801bee8 <MX_UART5_Init+0x38>)
 801beb6:	4b0d      	ldr	r3, [pc, #52]	; (801beec <MX_UART5_Init+0x3c>)
 801beb8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 801bebc:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_EVEN;
 801bec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart5.Init.StopBits = UART_STOPBITS_1;
 801bec4:	2300      	movs	r3, #0
  huart5.Init.Parity = UART_PARITY_EVEN;
 801bec6:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 801bec8:	220c      	movs	r2, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 801beca:	60c3      	str	r3, [r0, #12]
  huart5.Init.Mode = UART_MODE_TX_RX;
 801becc:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801bece:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 801bed0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 801bed2:	f7f5 ffbb 	bl	8011e4c <HAL_UART_Init>
 801bed6:	b118      	cbz	r0, 801bee0 <MX_UART5_Init+0x30>
  {
    Error_Handler();
  }

}
 801bed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801bedc:	f7ff bd0e 	b.w	801b8fc <Error_Handler>
 801bee0:	bd08      	pop	{r3, pc}
 801bee2:	bf00      	nop
 801bee4:	2000bd08 	.word	0x2000bd08
 801bee8:	40005000 	.word	0x40005000
 801beec:	0002dc6c 	.word	0x0002dc6c

0801bef0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801bef0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 801bef2:	480b      	ldr	r0, [pc, #44]	; (801bf20 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 460800;
 801bef4:	4b0b      	ldr	r3, [pc, #44]	; (801bf24 <MX_USART1_UART_Init+0x34>)
 801bef6:	f44f 2ee1 	mov.w	lr, #460800	; 0x70800
 801befa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX;
 801befe:	2208      	movs	r2, #8
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801bf00:	2300      	movs	r3, #0
 801bf02:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801bf04:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801bf06:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 801bf08:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801bf0a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801bf0c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801bf0e:	f7f5 ff9d 	bl	8011e4c <HAL_UART_Init>
 801bf12:	b118      	cbz	r0, 801bf1c <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 801bf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801bf18:	f7ff bcf0 	b.w	801b8fc <Error_Handler>
 801bf1c:	bd08      	pop	{r3, pc}
 801bf1e:	bf00      	nop
 801bf20:	2000bd48 	.word	0x2000bd48
 801bf24:	40011000 	.word	0x40011000

0801bf28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bf2c:	2214      	movs	r2, #20
{
 801bf2e:	b08a      	sub	sp, #40	; 0x28
 801bf30:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bf32:	2100      	movs	r1, #0
 801bf34:	eb0d 0002 	add.w	r0, sp, r2
 801bf38:	f000 fa82 	bl	801c440 <memset>
  if(uartHandle->Instance==UART5)
 801bf3c:	6823      	ldr	r3, [r4, #0]
 801bf3e:	4a39      	ldr	r2, [pc, #228]	; (801c024 <HAL_UART_MspInit+0xfc>)
 801bf40:	4293      	cmp	r3, r2
 801bf42:	d146      	bne.n	801bfd2 <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 801bf44:	4b38      	ldr	r3, [pc, #224]	; (801c028 <HAL_UART_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bf46:	4839      	ldr	r0, [pc, #228]	; (801c02c <HAL_UART_MspInit+0x104>)
    __HAL_RCC_UART5_CLK_ENABLE();
 801bf48:	2400      	movs	r4, #0
 801bf4a:	9400      	str	r4, [sp, #0]
 801bf4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bf4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801bf52:	641a      	str	r2, [r3, #64]	; 0x40
 801bf54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bf56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801bf5a:	9200      	str	r2, [sp, #0]
 801bf5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801bf5e:	9401      	str	r4, [sp, #4]
 801bf60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bf62:	f042 0204 	orr.w	r2, r2, #4
 801bf66:	631a      	str	r2, [r3, #48]	; 0x30
 801bf68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bf6a:	f002 0204 	and.w	r2, r2, #4
 801bf6e:	9201      	str	r2, [sp, #4]
 801bf70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801bf72:	9402      	str	r4, [sp, #8]
 801bf74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bf76:	f042 0208 	orr.w	r2, r2, #8
 801bf7a:	631a      	str	r2, [r3, #48]	; 0x30
 801bf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf7e:	f003 0308 	and.w	r3, r3, #8
 801bf82:	9302      	str	r3, [sp, #8]
 801bf84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bf86:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801bf8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bf8e:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bf90:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801bf92:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bf94:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801bf96:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bf98:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bf9c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bf9e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801bfa0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bfa2:	f7f4 fff9 	bl	8010f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801bfa6:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801bfa8:	a905      	add	r1, sp, #20
 801bfaa:	4821      	ldr	r0, [pc, #132]	; (801c030 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801bfac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bfae:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801bfb2:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bfb4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801bfb6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801bfb8:	f7f4 ffee 	bl	8010f98 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 801bfbc:	2035      	movs	r0, #53	; 0x35
 801bfbe:	4622      	mov	r2, r4
 801bfc0:	2105      	movs	r1, #5
 801bfc2:	f7f4 fa29 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801bfc6:	2035      	movs	r0, #53	; 0x35
 801bfc8:	f7f4 fa5a 	bl	8010480 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801bfcc:	b00a      	add	sp, #40	; 0x28
 801bfce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(uartHandle->Instance==USART1)
 801bfd2:	4a18      	ldr	r2, [pc, #96]	; (801c034 <HAL_UART_MspInit+0x10c>)
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d1f9      	bne.n	801bfcc <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART1_CLK_ENABLE();
 801bfd8:	4b13      	ldr	r3, [pc, #76]	; (801c028 <HAL_UART_MspInit+0x100>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bfda:	4817      	ldr	r0, [pc, #92]	; (801c038 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 801bfdc:	2100      	movs	r1, #0
 801bfde:	9103      	str	r1, [sp, #12]
 801bfe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bfe2:	f042 0210 	orr.w	r2, r2, #16
 801bfe6:	645a      	str	r2, [r3, #68]	; 0x44
 801bfe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bfea:	f002 0210 	and.w	r2, r2, #16
 801bfee:	9203      	str	r2, [sp, #12]
 801bff0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bff2:	9104      	str	r1, [sp, #16]
 801bff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bff6:	f042 0201 	orr.w	r2, r2, #1
 801bffa:	631a      	str	r2, [r3, #48]	; 0x30
 801bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bffe:	f003 0301 	and.w	r3, r3, #1
 801c002:	9304      	str	r3, [sp, #16]
 801c004:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801c006:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801c00a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c00c:	2302      	movs	r3, #2
 801c00e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c010:	2301      	movs	r3, #1
 801c012:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c014:	2303      	movs	r3, #3
 801c016:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c018:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801c01a:	2307      	movs	r3, #7
 801c01c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c01e:	f7f4 ffbb 	bl	8010f98 <HAL_GPIO_Init>
}
 801c022:	e7d3      	b.n	801bfcc <HAL_UART_MspInit+0xa4>
 801c024:	40005000 	.word	0x40005000
 801c028:	40023800 	.word	0x40023800
 801c02c:	40020800 	.word	0x40020800
 801c030:	40020c00 	.word	0x40020c00
 801c034:	40011000 	.word	0x40011000
 801c038:	40020000 	.word	0x40020000

0801c03c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 801c03c:	b508      	push	{r3, lr}

  if(uartHandle->Instance==UART5)
 801c03e:	4a14      	ldr	r2, [pc, #80]	; (801c090 <HAL_UART_MspDeInit+0x54>)
 801c040:	6803      	ldr	r3, [r0, #0]
 801c042:	4293      	cmp	r3, r2
 801c044:	d113      	bne.n	801c06e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 801c046:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 801c04a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_DISABLE();
 801c04e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 801c050:	4810      	ldr	r0, [pc, #64]	; (801c094 <HAL_UART_MspDeInit+0x58>)
    __HAL_RCC_UART5_CLK_DISABLE();
 801c052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c056:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 801c058:	f7f5 f87e 	bl	8011158 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801c05c:	480e      	ldr	r0, [pc, #56]	; (801c098 <HAL_UART_MspDeInit+0x5c>)
 801c05e:	2104      	movs	r1, #4
 801c060:	f7f5 f87a 	bl	8011158 <HAL_GPIO_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 801c064:	2035      	movs	r0, #53	; 0x35

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 801c066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 801c06a:	f7f4 ba15 	b.w	8010498 <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART1)
 801c06e:	4a0b      	ldr	r2, [pc, #44]	; (801c09c <HAL_UART_MspDeInit+0x60>)
 801c070:	4293      	cmp	r3, r2
 801c072:	d10c      	bne.n	801c08e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 801c074:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 801c078:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 801c07c:	6c53      	ldr	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 801c07e:	4808      	ldr	r0, [pc, #32]	; (801c0a0 <HAL_UART_MspDeInit+0x64>)
    __HAL_RCC_USART1_CLK_DISABLE();
 801c080:	f023 0310 	bic.w	r3, r3, #16
 801c084:	6453      	str	r3, [r2, #68]	; 0x44
} 
 801c086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 801c08a:	f7f5 b865 	b.w	8011158 <HAL_GPIO_DeInit>
 801c08e:	bd08      	pop	{r3, pc}
 801c090:	40005000 	.word	0x40005000
 801c094:	40020800 	.word	0x40020800
 801c098:	40020c00 	.word	0x40020c00
 801c09c:	40011000 	.word	0x40011000
 801c0a0:	40020000 	.word	0x40020000

0801c0a4 <web_server_thread>:
			break;
		}
	}
}

void web_server_thread(void *arg) {
 801c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a8:	4607      	mov	r7, r0
 801c0aa:	b091      	sub	sp, #68	; 0x44
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char* buf;
	struct fs_file file;

	printf("Net task created.\n");
 801c0ac:	4896      	ldr	r0, [pc, #600]	; (801c308 <web_server_thread+0x264>)
			HAL_UART_DeInit(&huart5);
 801c0ae:	4e97      	ldr	r6, [pc, #604]	; (801c30c <web_server_thread+0x268>)
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
						} else if (strncmp((char const *) buf, "AI.shtml?led=1",
								14) == 0) {
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 801c0b0:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 801c360 <web_server_thread+0x2bc>
	printf("Net task created.\n");
 801c0b4:	f7ff fee2 	bl	801be7c <puts>
	osDelay(1);
 801c0b8:	2001      	movs	r0, #1
 801c0ba:	f7f6 f833 	bl	8012124 <osDelay>
		err = netconn_accept(arg_conn, &newconn);
 801c0be:	a904      	add	r1, sp, #16
 801c0c0:	4638      	mov	r0, r7
 801c0c2:	f7f7 fdb1 	bl	8013c28 <netconn_accept>
		if (err == ERR_OK) {
 801c0c6:	2800      	cmp	r0, #0
 801c0c8:	d1f9      	bne.n	801c0be <web_server_thread+0x1a>
			printf("Accept.\n");
 801c0ca:	4891      	ldr	r0, [pc, #580]	; (801c310 <web_server_thread+0x26c>)
 801c0cc:	f7ff fed6 	bl	801be7c <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 801c0d0:	a903      	add	r1, sp, #12
 801c0d2:	9804      	ldr	r0, [sp, #16]
 801c0d4:	f7f7 fdf8 	bl	8013cc8 <netconn_recv>
			if (recv_err == ERR_OK) {
 801c0d8:	2800      	cmp	r0, #0
 801c0da:	d15d      	bne.n	801c198 <web_server_thread+0xf4>
				if (netconn_err(newconn) == ERR_OK) {
 801c0dc:	9b04      	ldr	r3, [sp, #16]
 801c0de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d158      	bne.n	801c198 <web_server_thread+0xf4>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 801c0e6:	f10d 020a 	add.w	r2, sp, #10
 801c0ea:	a905      	add	r1, sp, #20
 801c0ec:	9803      	ldr	r0, [sp, #12]
 801c0ee:	f7f8 fe3f 	bl	8014d70 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 801c0f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c0f6:	2b04      	cmp	r3, #4
 801c0f8:	d94e      	bls.n	801c198 <web_server_thread+0xf4>
 801c0fa:	9c05      	ldr	r4, [sp, #20]
 801c0fc:	4985      	ldr	r1, [pc, #532]	; (801c314 <web_server_thread+0x270>)
 801c0fe:	2205      	movs	r2, #5
 801c100:	4620      	mov	r0, r4
 801c102:	f000 f9a5 	bl	801c450 <strncmp>
 801c106:	2800      	cmp	r0, #0
 801c108:	d146      	bne.n	801c198 <web_server_thread+0xf4>
						if ((strncmp((char const *) buf, " ", 1) == 0)
 801c10a:	f894 a005 	ldrb.w	sl, [r4, #5]
						buf += 5;
 801c10e:	1d65      	adds	r5, r4, #5
						if ((strncmp((char const *) buf, " ", 1) == 0)
 801c110:	f1ba 0f20 	cmp.w	sl, #32
						buf += 5;
 801c114:	9505      	str	r5, [sp, #20]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 801c116:	d005      	beq.n	801c124 <web_server_thread+0x80>
								|| (strncmp((char const *) buf, "index.shtml",
 801c118:	220b      	movs	r2, #11
 801c11a:	497f      	ldr	r1, [pc, #508]	; (801c318 <web_server_thread+0x274>)
 801c11c:	4628      	mov	r0, r5
 801c11e:	f000 f997 	bl	801c450 <strncmp>
 801c122:	b908      	cbnz	r0, 801c128 <web_server_thread+0x84>
							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,(uint)huart5.Init.BaudRate);
							netconn_write(newconn, PAGE_BODY,
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (*buf == '?') {
							form_data_parser(++buf);
							fs_open(&file, "/index.shtml");
 801c124:	497d      	ldr	r1, [pc, #500]	; (801c31c <web_server_thread+0x278>)
 801c126:	e026      	b.n	801c176 <web_server_thread+0xd2>
						} else if (strncmp((char const *) buf, "img/logo.png",
 801c128:	220c      	movs	r2, #12
 801c12a:	497d      	ldr	r1, [pc, #500]	; (801c320 <web_server_thread+0x27c>)
 801c12c:	4628      	mov	r0, r5
 801c12e:	f000 f98f 	bl	801c450 <strncmp>
 801c132:	4681      	mov	r9, r0
 801c134:	b978      	cbnz	r0, 801c156 <web_server_thread+0xb2>
							fs_open(&file, "/img/logo.png");
 801c136:	497b      	ldr	r1, [pc, #492]	; (801c324 <web_server_thread+0x280>)
							fs_open(&file, "/img/icon.png");
 801c138:	a80b      	add	r0, sp, #44	; 0x2c
 801c13a:	f7f8 ff49 	bl	8014fd0 <fs_open>
							netconn_write(newconn,
 801c13e:	f8cd 9000 	str.w	r9, [sp]
 801c142:	464b      	mov	r3, r9
							netconn_write(newconn,
 801c144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c148:	9804      	ldr	r0, [sp, #16]
 801c14a:	f7f7 fe0d 	bl	8013d68 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 801c14e:	a80b      	add	r0, sp, #44	; 0x2c
 801c150:	f7f8 ff5e 	bl	8015010 <fs_close>
 801c154:	e020      	b.n	801c198 <web_server_thread+0xf4>
						} else if (strncmp((char const *) buf, "img/icon.png",
 801c156:	220c      	movs	r2, #12
 801c158:	4973      	ldr	r1, [pc, #460]	; (801c328 <web_server_thread+0x284>)
 801c15a:	4628      	mov	r0, r5
 801c15c:	f000 f978 	bl	801c450 <strncmp>
 801c160:	4681      	mov	r9, r0
 801c162:	b908      	cbnz	r0, 801c168 <web_server_thread+0xc4>
							fs_open(&file, "/img/icon.png");
 801c164:	4971      	ldr	r1, [pc, #452]	; (801c32c <web_server_thread+0x288>)
 801c166:	e7e7      	b.n	801c138 <web_server_thread+0x94>
						} else if (strncmp((char const *) buf, "style.css", 9)
 801c168:	2209      	movs	r2, #9
 801c16a:	4971      	ldr	r1, [pc, #452]	; (801c330 <web_server_thread+0x28c>)
 801c16c:	4628      	mov	r0, r5
 801c16e:	f000 f96f 	bl	801c450 <strncmp>
 801c172:	b930      	cbnz	r0, 801c182 <web_server_thread+0xde>
							fs_open(&file, "/style.css");
 801c174:	496f      	ldr	r1, [pc, #444]	; (801c334 <web_server_thread+0x290>)
							fs_open(&file, "/index.shtml");
 801c176:	a80b      	add	r0, sp, #44	; 0x2c
 801c178:	f7f8 ff2a 	bl	8014fd0 <fs_open>
							netconn_write(newconn,
 801c17c:	2300      	movs	r3, #0
 801c17e:	9300      	str	r3, [sp, #0]
 801c180:	e7e0      	b.n	801c144 <web_server_thread+0xa0>
						} else if (strncmp((char const *) buf, "AI.shtml?led=1",
 801c182:	220e      	movs	r2, #14
 801c184:	496c      	ldr	r1, [pc, #432]	; (801c338 <web_server_thread+0x294>)
 801c186:	4628      	mov	r0, r5
 801c188:	f000 f962 	bl	801c450 <strncmp>
 801c18c:	b970      	cbnz	r0, 801c1ac <web_server_thread+0x108>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 801c18e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c192:	4640      	mov	r0, r8
 801c194:	f7f5 f87d 	bl	8011292 <HAL_GPIO_TogglePin>
							osDelay(1);
						}
					}
				}
			}
			netconn_close(newconn);
 801c198:	9804      	ldr	r0, [sp, #16]
 801c19a:	f7f7 fe2f 	bl	8013dfc <netconn_close>
			netbuf_delete(inbuf);
 801c19e:	9803      	ldr	r0, [sp, #12]
 801c1a0:	f7f8 fdd4 	bl	8014d4c <netbuf_delete>
			netconn_delete(newconn);
 801c1a4:	9804      	ldr	r0, [sp, #16]
 801c1a6:	f7f7 fce5 	bl	8013b74 <netconn_delete>
 801c1aa:	e788      	b.n	801c0be <web_server_thread+0x1a>
						} else if (strncmp((char const *) buf, "AI.shtml?IP=",
 801c1ac:	220c      	movs	r2, #12
 801c1ae:	4963      	ldr	r1, [pc, #396]	; (801c33c <web_server_thread+0x298>)
 801c1b0:	4628      	mov	r0, r5
 801c1b2:	f000 f94d 	bl	801c450 <strncmp>
 801c1b6:	4681      	mov	r9, r0
 801c1b8:	b9a0      	cbnz	r0, 801c1e4 <web_server_thread+0x140>
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 801c1ba:	4861      	ldr	r0, [pc, #388]	; (801c340 <web_server_thread+0x29c>)
 801c1bc:	f7f9 fe36 	bl	8015e2c <ip4addr_ntoa>
 801c1c0:	4a60      	ldr	r2, [pc, #384]	; (801c344 <web_server_thread+0x2a0>)
 801c1c2:	4961      	ldr	r1, [pc, #388]	; (801c348 <web_server_thread+0x2a4>)
 801c1c4:	4603      	mov	r3, r0
 801c1c6:	4861      	ldr	r0, [pc, #388]	; (801c34c <web_server_thread+0x2a8>)
 801c1c8:	f7ff fe27 	bl	801be1a <siprintf>
							netconn_write(newconn, PAGE_BODY,
 801c1cc:	485f      	ldr	r0, [pc, #380]	; (801c34c <web_server_thread+0x2a8>)
 801c1ce:	f7f3 ff41 	bl	8010054 <strlen>
 801c1d2:	f8cd 9000 	str.w	r9, [sp]
							netconn_write(newconn, PAGE_BODY,
 801c1d6:	4602      	mov	r2, r0
 801c1d8:	2301      	movs	r3, #1
 801c1da:	495c      	ldr	r1, [pc, #368]	; (801c34c <web_server_thread+0x2a8>)
 801c1dc:	9804      	ldr	r0, [sp, #16]
 801c1de:	f7f7 fdc3 	bl	8013d68 <netconn_write_partly>
 801c1e2:	e7d9      	b.n	801c198 <web_server_thread+0xf4>
						} else if (strncmp((char const *) buf, "AI.shtml?BR=",
 801c1e4:	4628      	mov	r0, r5
 801c1e6:	220c      	movs	r2, #12
 801c1e8:	4959      	ldr	r1, [pc, #356]	; (801c350 <web_server_thread+0x2ac>)
 801c1ea:	f000 f931 	bl	801c450 <strncmp>
 801c1ee:	4605      	mov	r5, r0
 801c1f0:	b950      	cbnz	r0, 801c208 <web_server_thread+0x164>
							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,(uint)huart5.Init.BaudRate);
 801c1f2:	6873      	ldr	r3, [r6, #4]
 801c1f4:	4a53      	ldr	r2, [pc, #332]	; (801c344 <web_server_thread+0x2a0>)
 801c1f6:	4957      	ldr	r1, [pc, #348]	; (801c354 <web_server_thread+0x2b0>)
 801c1f8:	4854      	ldr	r0, [pc, #336]	; (801c34c <web_server_thread+0x2a8>)
 801c1fa:	f7ff fe0e 	bl	801be1a <siprintf>
							netconn_write(newconn, PAGE_BODY,
 801c1fe:	4853      	ldr	r0, [pc, #332]	; (801c34c <web_server_thread+0x2a8>)
 801c200:	f7f3 ff28 	bl	8010054 <strlen>
 801c204:	9500      	str	r5, [sp, #0]
 801c206:	e7e6      	b.n	801c1d6 <web_server_thread+0x132>
						} else if (*buf == '?') {
 801c208:	f1ba 0f3f 	cmp.w	sl, #63	; 0x3f
 801c20c:	d166      	bne.n	801c2dc <web_server_thread+0x238>
							form_data_parser(++buf);
 801c20e:	3406      	adds	r4, #6
			netif_set_ipaddr(&gnetif,&new_ip);
 801c210:	f8df a150 	ldr.w	sl, [pc, #336]	; 801c364 <web_server_thread+0x2c0>
							form_data_parser(++buf);
 801c214:	9405      	str	r4, [sp, #20]
 801c216:	f10d 091c 	add.w	r9, sp, #28
	while (*in_buf != ' ') {
 801c21a:	7823      	ldrb	r3, [r4, #0]
 801c21c:	2b20      	cmp	r3, #32
 801c21e:	d081      	beq.n	801c124 <web_server_thread+0x80>
		if (*in_buf == '&') {
 801c220:	2b26      	cmp	r3, #38	; 0x26
			in_buf++;
 801c222:	bf08      	it	eq
 801c224:	3401      	addeq	r4, #1
		int param_num = atoi(in_buf);
 801c226:	4620      	mov	r0, r4
 801c228:	f000 f8c7 	bl	801c3ba <atoi>
		if (param_num < 9){
 801c22c:	2808      	cmp	r0, #8
			in_buf += 2;
 801c22e:	bfd4      	ite	le
 801c230:	3402      	addle	r4, #2
			in_buf += 3;
 801c232:	3403      	addgt	r4, #3
		switch(param_num){
 801c234:	2801      	cmp	r0, #1
 801c236:	d028      	beq.n	801c28a <web_server_thread+0x1e6>
 801c238:	2802      	cmp	r0, #2
 801c23a:	d1ee      	bne.n	801c21a <web_server_thread+0x176>
 801c23c:	2500      	movs	r5, #0
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 801c23e:	5d63      	ldrb	r3, [r4, r5]
 801c240:	2b20      	cmp	r3, #32
 801c242:	d003      	beq.n	801c24c <web_server_thread+0x1a8>
 801c244:	2b26      	cmp	r3, #38	; 0x26
 801c246:	d001      	beq.n	801c24c <web_server_thread+0x1a8>
 801c248:	2d10      	cmp	r5, #16
 801c24a:	d143      	bne.n	801c2d4 <web_server_thread+0x230>
			par_str[par_len] = '\0';
 801c24c:	ab10      	add	r3, sp, #64	; 0x40
 801c24e:	442b      	add	r3, r5
 801c250:	2200      	movs	r2, #0
			baudrate = atoi(par_str);
 801c252:	4648      	mov	r0, r9
			par_str[par_len] = '\0';
 801c254:	f803 2c24 	strb.w	r2, [r3, #-36]
			baudrate = atoi(par_str);
 801c258:	f000 f8af 	bl	801c3ba <atoi>
 801c25c:	4683      	mov	fp, r0
			HAL_UART_DeInit(&huart5);
 801c25e:	4630      	mov	r0, r6
 801c260:	f7f5 fe22 	bl	8011ea8 <HAL_UART_DeInit>
			EE_WriteVariable(BR_LS_ADDR,(uint16_t)(baudrate & 0x0000FFFF));
 801c264:	fa1f f18b 	uxth.w	r1, fp
 801c268:	2004      	movs	r0, #4
			huart5.Init.BaudRate = baudrate;
 801c26a:	f8c6 b004 	str.w	fp, [r6, #4]
			EE_WriteVariable(BR_LS_ADDR,(uint16_t)(baudrate & 0x0000FFFF));
 801c26e:	f7fe ff21 	bl	801b0b4 <EE_WriteVariable>
			EE_WriteVariable(BR_MS_ADDR,(uint16_t)((baudrate >> 16) & 0x0000FFFF));
 801c272:	ea4f 411b 	mov.w	r1, fp, lsr #16
 801c276:	2003      	movs	r0, #3
 801c278:	f7fe ff1c 	bl	801b0b4 <EE_WriteVariable>
			if (HAL_UART_Init(&huart5) != HAL_OK)
 801c27c:	4630      	mov	r0, r6
 801c27e:	f7f5 fde5 	bl	8011e4c <HAL_UART_Init>
 801c282:	b308      	cbz	r0, 801c2c8 <web_server_thread+0x224>
			   Error_Handler();
 801c284:	f7ff fb3a 	bl	801b8fc <Error_Handler>
 801c288:	e01e      	b.n	801c2c8 <web_server_thread+0x224>
		switch(param_num){
 801c28a:	2500      	movs	r5, #0
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 801c28c:	5d63      	ldrb	r3, [r4, r5]
 801c28e:	2b20      	cmp	r3, #32
 801c290:	d003      	beq.n	801c29a <web_server_thread+0x1f6>
 801c292:	2b26      	cmp	r3, #38	; 0x26
 801c294:	d001      	beq.n	801c29a <web_server_thread+0x1f6>
 801c296:	2d10      	cmp	r5, #16
 801c298:	d118      	bne.n	801c2cc <web_server_thread+0x228>
			par_str[par_len] = '\0';
 801c29a:	ab10      	add	r3, sp, #64	; 0x40
 801c29c:	442b      	add	r3, r5
 801c29e:	2200      	movs	r2, #0
			ipaddr_aton(par_str,&new_ip);
 801c2a0:	a906      	add	r1, sp, #24
 801c2a2:	4648      	mov	r0, r9
			par_str[par_len] = '\0';
 801c2a4:	f803 2c24 	strb.w	r2, [r3, #-36]
			ipaddr_aton(par_str,&new_ip);
 801c2a8:	f7f9 fcda 	bl	8015c60 <ip4addr_aton>
			EE_WriteVariable(IP_02_01_ADDR,(uint16_t)(new_ip.addr & 0x0000FFFF));
 801c2ac:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c2b0:	2001      	movs	r0, #1
 801c2b2:	f7fe feff 	bl	801b0b4 <EE_WriteVariable>
			EE_WriteVariable(IP_04_03_ADDR,(uint16_t)((new_ip.addr >> 16) & 0x0000FFFF));
 801c2b6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c2ba:	2002      	movs	r0, #2
 801c2bc:	f7fe fefa 	bl	801b0b4 <EE_WriteVariable>
			netif_set_ipaddr(&gnetif,&new_ip);
 801c2c0:	a906      	add	r1, sp, #24
 801c2c2:	4650      	mov	r0, sl
 801c2c4:	f7fa fc06 	bl	8016ad4 <netif_set_ipaddr>
			in_buf += par_len;
 801c2c8:	442c      	add	r4, r5
 801c2ca:	e7a6      	b.n	801c21a <web_server_thread+0x176>
		*out_buf++ = *tmp_p;
 801c2cc:	f809 3005 	strb.w	r3, [r9, r5]
		len++;
 801c2d0:	3501      	adds	r5, #1
 801c2d2:	e7db      	b.n	801c28c <web_server_thread+0x1e8>
		*out_buf++ = *tmp_p;
 801c2d4:	f809 3005 	strb.w	r3, [r9, r5]
		len++;
 801c2d8:	3501      	adds	r5, #1
 801c2da:	e7b0      	b.n	801c23e <web_server_thread+0x19a>
							fs_open(&file, "/404.html");
 801c2dc:	491e      	ldr	r1, [pc, #120]	; (801c358 <web_server_thread+0x2b4>)
 801c2de:	a80b      	add	r0, sp, #44	; 0x2c
 801c2e0:	f7f8 fe76 	bl	8014fd0 <fs_open>
							netconn_write(newconn,
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	9300      	str	r3, [sp, #0]
 801c2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c2ec:	9804      	ldr	r0, [sp, #16]
 801c2ee:	f7f7 fd3b 	bl	8013d68 <netconn_write_partly>
							fs_close(&file);
 801c2f2:	a80b      	add	r0, sp, #44	; 0x2c
 801c2f4:	f7f8 fe8c 	bl	8015010 <fs_close>
							printf("File not found\n");
 801c2f8:	4818      	ldr	r0, [pc, #96]	; (801c35c <web_server_thread+0x2b8>)
 801c2fa:	f7ff fdbf 	bl	801be7c <puts>
							osDelay(1);
 801c2fe:	2001      	movs	r0, #1
 801c300:	f7f5 ff10 	bl	8012124 <osDelay>
 801c304:	e748      	b.n	801c198 <web_server_thread+0xf4>
 801c306:	bf00      	nop
 801c308:	080208e9 	.word	0x080208e9
 801c30c:	2000bd08 	.word	0x2000bd08
 801c310:	080208fb 	.word	0x080208fb
 801c314:	08020903 	.word	0x08020903
 801c318:	0802090a 	.word	0x0802090a
 801c31c:	08020909 	.word	0x08020909
 801c320:	08020917 	.word	0x08020917
 801c324:	08020916 	.word	0x08020916
 801c328:	08020925 	.word	0x08020925
 801c32c:	08020924 	.word	0x08020924
 801c330:	08020933 	.word	0x08020933
 801c334:	08020932 	.word	0x08020932
 801c338:	0802093d 	.word	0x0802093d
 801c33c:	0802094c 	.word	0x0802094c
 801c340:	2000bc00 	.word	0x2000bc00
 801c344:	0802087d 	.word	0x0802087d
 801c348:	08020959 	.word	0x08020959
 801c34c:	20004114 	.word	0x20004114
 801c350:	0802095e 	.word	0x0802095e
 801c354:	0802096b 	.word	0x0802096b
 801c358:	08020970 	.word	0x08020970
 801c35c:	0802097a 	.word	0x0802097a
 801c360:	40020400 	.word	0x40020400
 801c364:	2000bbfc 	.word	0x2000bbfc

0801c368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801c368:	f8df d034 	ldr.w	sp, [pc, #52]	; 801c3a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801c36c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801c36e:	e003      	b.n	801c378 <LoopCopyDataInit>

0801c370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801c370:	4b0c      	ldr	r3, [pc, #48]	; (801c3a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801c372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801c374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801c376:	3104      	adds	r1, #4

0801c378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801c378:	480b      	ldr	r0, [pc, #44]	; (801c3a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801c37a:	4b0c      	ldr	r3, [pc, #48]	; (801c3ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801c37c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801c37e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801c380:	d3f6      	bcc.n	801c370 <CopyDataInit>
  ldr  r2, =_sbss
 801c382:	4a0b      	ldr	r2, [pc, #44]	; (801c3b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801c384:	e002      	b.n	801c38c <LoopFillZerobss>

0801c386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801c386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801c388:	f842 3b04 	str.w	r3, [r2], #4

0801c38c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801c38c:	4b09      	ldr	r3, [pc, #36]	; (801c3b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801c38e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801c390:	d3f9      	bcc.n	801c386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801c392:	f7ff fbe3 	bl	801bb5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801c396:	f000 f815 	bl	801c3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801c39a:	f7ff fa75 	bl	801b888 <main>
  bx  lr    
 801c39e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801c3a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801c3a4:	08020aa4 	.word	0x08020aa4
  ldr  r0, =_sdata
 801c3a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801c3ac:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 801c3b0:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 801c3b4:	2000bd88 	.word	0x2000bd88

0801c3b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801c3b8:	e7fe      	b.n	801c3b8 <ADC_IRQHandler>

0801c3ba <atoi>:
 801c3ba:	220a      	movs	r2, #10
 801c3bc:	2100      	movs	r1, #0
 801c3be:	f000 b8d9 	b.w	801c574 <strtol>
	...

0801c3c4 <__libc_init_array>:
 801c3c4:	b570      	push	{r4, r5, r6, lr}
 801c3c6:	4e0d      	ldr	r6, [pc, #52]	; (801c3fc <__libc_init_array+0x38>)
 801c3c8:	4c0d      	ldr	r4, [pc, #52]	; (801c400 <__libc_init_array+0x3c>)
 801c3ca:	1ba4      	subs	r4, r4, r6
 801c3cc:	10a4      	asrs	r4, r4, #2
 801c3ce:	2500      	movs	r5, #0
 801c3d0:	42a5      	cmp	r5, r4
 801c3d2:	d109      	bne.n	801c3e8 <__libc_init_array+0x24>
 801c3d4:	4e0b      	ldr	r6, [pc, #44]	; (801c404 <__libc_init_array+0x40>)
 801c3d6:	4c0c      	ldr	r4, [pc, #48]	; (801c408 <__libc_init_array+0x44>)
 801c3d8:	f000 f904 	bl	801c5e4 <_init>
 801c3dc:	1ba4      	subs	r4, r4, r6
 801c3de:	10a4      	asrs	r4, r4, #2
 801c3e0:	2500      	movs	r5, #0
 801c3e2:	42a5      	cmp	r5, r4
 801c3e4:	d105      	bne.n	801c3f2 <__libc_init_array+0x2e>
 801c3e6:	bd70      	pop	{r4, r5, r6, pc}
 801c3e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c3ec:	4798      	blx	r3
 801c3ee:	3501      	adds	r5, #1
 801c3f0:	e7ee      	b.n	801c3d0 <__libc_init_array+0xc>
 801c3f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c3f6:	4798      	blx	r3
 801c3f8:	3501      	adds	r5, #1
 801c3fa:	e7f2      	b.n	801c3e2 <__libc_init_array+0x1e>
 801c3fc:	08020a9c 	.word	0x08020a9c
 801c400:	08020a9c 	.word	0x08020a9c
 801c404:	08020a9c 	.word	0x08020a9c
 801c408:	08020aa0 	.word	0x08020aa0

0801c40c <memcmp>:
 801c40c:	b510      	push	{r4, lr}
 801c40e:	3901      	subs	r1, #1
 801c410:	4402      	add	r2, r0
 801c412:	4290      	cmp	r0, r2
 801c414:	d101      	bne.n	801c41a <memcmp+0xe>
 801c416:	2000      	movs	r0, #0
 801c418:	bd10      	pop	{r4, pc}
 801c41a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c41e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c422:	42a3      	cmp	r3, r4
 801c424:	d0f5      	beq.n	801c412 <memcmp+0x6>
 801c426:	1b18      	subs	r0, r3, r4
 801c428:	bd10      	pop	{r4, pc}

0801c42a <memcpy>:
 801c42a:	b510      	push	{r4, lr}
 801c42c:	1e43      	subs	r3, r0, #1
 801c42e:	440a      	add	r2, r1
 801c430:	4291      	cmp	r1, r2
 801c432:	d100      	bne.n	801c436 <memcpy+0xc>
 801c434:	bd10      	pop	{r4, pc}
 801c436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c43e:	e7f7      	b.n	801c430 <memcpy+0x6>

0801c440 <memset>:
 801c440:	4402      	add	r2, r0
 801c442:	4603      	mov	r3, r0
 801c444:	4293      	cmp	r3, r2
 801c446:	d100      	bne.n	801c44a <memset+0xa>
 801c448:	4770      	bx	lr
 801c44a:	f803 1b01 	strb.w	r1, [r3], #1
 801c44e:	e7f9      	b.n	801c444 <memset+0x4>

0801c450 <strncmp>:
 801c450:	b510      	push	{r4, lr}
 801c452:	b16a      	cbz	r2, 801c470 <strncmp+0x20>
 801c454:	3901      	subs	r1, #1
 801c456:	1884      	adds	r4, r0, r2
 801c458:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c45c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c460:	4293      	cmp	r3, r2
 801c462:	d103      	bne.n	801c46c <strncmp+0x1c>
 801c464:	42a0      	cmp	r0, r4
 801c466:	d001      	beq.n	801c46c <strncmp+0x1c>
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d1f5      	bne.n	801c458 <strncmp+0x8>
 801c46c:	1a98      	subs	r0, r3, r2
 801c46e:	bd10      	pop	{r4, pc}
 801c470:	4610      	mov	r0, r2
 801c472:	bd10      	pop	{r4, pc}

0801c474 <_strtol_l.isra.0>:
 801c474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c478:	4680      	mov	r8, r0
 801c47a:	4689      	mov	r9, r1
 801c47c:	4692      	mov	sl, r2
 801c47e:	461f      	mov	r7, r3
 801c480:	468b      	mov	fp, r1
 801c482:	465d      	mov	r5, fp
 801c484:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c486:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c48a:	f000 f889 	bl	801c5a0 <__locale_ctype_ptr_l>
 801c48e:	4420      	add	r0, r4
 801c490:	7846      	ldrb	r6, [r0, #1]
 801c492:	f016 0608 	ands.w	r6, r6, #8
 801c496:	d10b      	bne.n	801c4b0 <_strtol_l.isra.0+0x3c>
 801c498:	2c2d      	cmp	r4, #45	; 0x2d
 801c49a:	d10b      	bne.n	801c4b4 <_strtol_l.isra.0+0x40>
 801c49c:	782c      	ldrb	r4, [r5, #0]
 801c49e:	2601      	movs	r6, #1
 801c4a0:	f10b 0502 	add.w	r5, fp, #2
 801c4a4:	b167      	cbz	r7, 801c4c0 <_strtol_l.isra.0+0x4c>
 801c4a6:	2f10      	cmp	r7, #16
 801c4a8:	d114      	bne.n	801c4d4 <_strtol_l.isra.0+0x60>
 801c4aa:	2c30      	cmp	r4, #48	; 0x30
 801c4ac:	d00a      	beq.n	801c4c4 <_strtol_l.isra.0+0x50>
 801c4ae:	e011      	b.n	801c4d4 <_strtol_l.isra.0+0x60>
 801c4b0:	46ab      	mov	fp, r5
 801c4b2:	e7e6      	b.n	801c482 <_strtol_l.isra.0+0xe>
 801c4b4:	2c2b      	cmp	r4, #43	; 0x2b
 801c4b6:	bf04      	itt	eq
 801c4b8:	782c      	ldrbeq	r4, [r5, #0]
 801c4ba:	f10b 0502 	addeq.w	r5, fp, #2
 801c4be:	e7f1      	b.n	801c4a4 <_strtol_l.isra.0+0x30>
 801c4c0:	2c30      	cmp	r4, #48	; 0x30
 801c4c2:	d127      	bne.n	801c514 <_strtol_l.isra.0+0xa0>
 801c4c4:	782b      	ldrb	r3, [r5, #0]
 801c4c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c4ca:	2b58      	cmp	r3, #88	; 0x58
 801c4cc:	d14b      	bne.n	801c566 <_strtol_l.isra.0+0xf2>
 801c4ce:	786c      	ldrb	r4, [r5, #1]
 801c4d0:	2710      	movs	r7, #16
 801c4d2:	3502      	adds	r5, #2
 801c4d4:	2e00      	cmp	r6, #0
 801c4d6:	bf0c      	ite	eq
 801c4d8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801c4dc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	fbb1 fef7 	udiv	lr, r1, r7
 801c4e6:	4610      	mov	r0, r2
 801c4e8:	fb07 1c1e 	mls	ip, r7, lr, r1
 801c4ec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801c4f0:	2b09      	cmp	r3, #9
 801c4f2:	d811      	bhi.n	801c518 <_strtol_l.isra.0+0xa4>
 801c4f4:	461c      	mov	r4, r3
 801c4f6:	42a7      	cmp	r7, r4
 801c4f8:	dd1d      	ble.n	801c536 <_strtol_l.isra.0+0xc2>
 801c4fa:	1c53      	adds	r3, r2, #1
 801c4fc:	d007      	beq.n	801c50e <_strtol_l.isra.0+0x9a>
 801c4fe:	4586      	cmp	lr, r0
 801c500:	d316      	bcc.n	801c530 <_strtol_l.isra.0+0xbc>
 801c502:	d101      	bne.n	801c508 <_strtol_l.isra.0+0x94>
 801c504:	45a4      	cmp	ip, r4
 801c506:	db13      	blt.n	801c530 <_strtol_l.isra.0+0xbc>
 801c508:	fb00 4007 	mla	r0, r0, r7, r4
 801c50c:	2201      	movs	r2, #1
 801c50e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c512:	e7eb      	b.n	801c4ec <_strtol_l.isra.0+0x78>
 801c514:	270a      	movs	r7, #10
 801c516:	e7dd      	b.n	801c4d4 <_strtol_l.isra.0+0x60>
 801c518:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801c51c:	2b19      	cmp	r3, #25
 801c51e:	d801      	bhi.n	801c524 <_strtol_l.isra.0+0xb0>
 801c520:	3c37      	subs	r4, #55	; 0x37
 801c522:	e7e8      	b.n	801c4f6 <_strtol_l.isra.0+0x82>
 801c524:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801c528:	2b19      	cmp	r3, #25
 801c52a:	d804      	bhi.n	801c536 <_strtol_l.isra.0+0xc2>
 801c52c:	3c57      	subs	r4, #87	; 0x57
 801c52e:	e7e2      	b.n	801c4f6 <_strtol_l.isra.0+0x82>
 801c530:	f04f 32ff 	mov.w	r2, #4294967295
 801c534:	e7eb      	b.n	801c50e <_strtol_l.isra.0+0x9a>
 801c536:	1c53      	adds	r3, r2, #1
 801c538:	d108      	bne.n	801c54c <_strtol_l.isra.0+0xd8>
 801c53a:	2322      	movs	r3, #34	; 0x22
 801c53c:	f8c8 3000 	str.w	r3, [r8]
 801c540:	4608      	mov	r0, r1
 801c542:	f1ba 0f00 	cmp.w	sl, #0
 801c546:	d107      	bne.n	801c558 <_strtol_l.isra.0+0xe4>
 801c548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c54c:	b106      	cbz	r6, 801c550 <_strtol_l.isra.0+0xdc>
 801c54e:	4240      	negs	r0, r0
 801c550:	f1ba 0f00 	cmp.w	sl, #0
 801c554:	d00c      	beq.n	801c570 <_strtol_l.isra.0+0xfc>
 801c556:	b122      	cbz	r2, 801c562 <_strtol_l.isra.0+0xee>
 801c558:	3d01      	subs	r5, #1
 801c55a:	f8ca 5000 	str.w	r5, [sl]
 801c55e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c562:	464d      	mov	r5, r9
 801c564:	e7f9      	b.n	801c55a <_strtol_l.isra.0+0xe6>
 801c566:	2430      	movs	r4, #48	; 0x30
 801c568:	2f00      	cmp	r7, #0
 801c56a:	d1b3      	bne.n	801c4d4 <_strtol_l.isra.0+0x60>
 801c56c:	2708      	movs	r7, #8
 801c56e:	e7b1      	b.n	801c4d4 <_strtol_l.isra.0+0x60>
 801c570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c574 <strtol>:
 801c574:	4b08      	ldr	r3, [pc, #32]	; (801c598 <strtol+0x24>)
 801c576:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c578:	681c      	ldr	r4, [r3, #0]
 801c57a:	4d08      	ldr	r5, [pc, #32]	; (801c59c <strtol+0x28>)
 801c57c:	6a23      	ldr	r3, [r4, #32]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	bf08      	it	eq
 801c582:	462b      	moveq	r3, r5
 801c584:	9300      	str	r3, [sp, #0]
 801c586:	4613      	mov	r3, r2
 801c588:	460a      	mov	r2, r1
 801c58a:	4601      	mov	r1, r0
 801c58c:	4620      	mov	r0, r4
 801c58e:	f7ff ff71 	bl	801c474 <_strtol_l.isra.0>
 801c592:	b003      	add	sp, #12
 801c594:	bd30      	pop	{r4, r5, pc}
 801c596:	bf00      	nop
 801c598:	20000028 	.word	0x20000028
 801c59c:	2000008c 	.word	0x2000008c

0801c5a0 <__locale_ctype_ptr_l>:
 801c5a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801c5a4:	4770      	bx	lr

0801c5a6 <__ascii_mbtowc>:
 801c5a6:	b082      	sub	sp, #8
 801c5a8:	b901      	cbnz	r1, 801c5ac <__ascii_mbtowc+0x6>
 801c5aa:	a901      	add	r1, sp, #4
 801c5ac:	b142      	cbz	r2, 801c5c0 <__ascii_mbtowc+0x1a>
 801c5ae:	b14b      	cbz	r3, 801c5c4 <__ascii_mbtowc+0x1e>
 801c5b0:	7813      	ldrb	r3, [r2, #0]
 801c5b2:	600b      	str	r3, [r1, #0]
 801c5b4:	7812      	ldrb	r2, [r2, #0]
 801c5b6:	1c10      	adds	r0, r2, #0
 801c5b8:	bf18      	it	ne
 801c5ba:	2001      	movne	r0, #1
 801c5bc:	b002      	add	sp, #8
 801c5be:	4770      	bx	lr
 801c5c0:	4610      	mov	r0, r2
 801c5c2:	e7fb      	b.n	801c5bc <__ascii_mbtowc+0x16>
 801c5c4:	f06f 0001 	mvn.w	r0, #1
 801c5c8:	e7f8      	b.n	801c5bc <__ascii_mbtowc+0x16>

0801c5ca <__ascii_wctomb>:
 801c5ca:	b149      	cbz	r1, 801c5e0 <__ascii_wctomb+0x16>
 801c5cc:	2aff      	cmp	r2, #255	; 0xff
 801c5ce:	bf85      	ittet	hi
 801c5d0:	238a      	movhi	r3, #138	; 0x8a
 801c5d2:	6003      	strhi	r3, [r0, #0]
 801c5d4:	700a      	strbls	r2, [r1, #0]
 801c5d6:	f04f 30ff 	movhi.w	r0, #4294967295
 801c5da:	bf98      	it	ls
 801c5dc:	2001      	movls	r0, #1
 801c5de:	4770      	bx	lr
 801c5e0:	4608      	mov	r0, r1
 801c5e2:	4770      	bx	lr

0801c5e4 <_init>:
 801c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5e6:	bf00      	nop
 801c5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5ea:	bc08      	pop	{r3}
 801c5ec:	469e      	mov	lr, r3
 801c5ee:	4770      	bx	lr

0801c5f0 <_fini>:
 801c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5f2:	bf00      	nop
 801c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5f6:	bc08      	pop	{r3}
 801c5f8:	469e      	mov	lr, r3
 801c5fa:	4770      	bx	lr
