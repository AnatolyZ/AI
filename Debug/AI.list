
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043e0  0800e594  0800e594  0001e594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012974  08012974  00022974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801297c  0801297c  0002297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012980  08012980  00022980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08012984  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030014  2**0
                  CONTENTS
  8 .bss          0000ba60  20000014  20000014  00030014  2**2
                  ALLOC
  9 ._user_heap_stack 0000c000  2000ba74  2000ba74  00030014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030014  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005922c  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a880  00000000  00000000  00089270  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00024c6a  00000000  00000000  00093af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  000b8760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000046e0  00000000  00000000  000ba158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00016f0f  00000000  00000000  000be838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000987f  00000000  00000000  000d5747  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000defc6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000056d4  00000000  00000000  000df044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e57c 	.word	0x0800e57c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800e57c 	.word	0x0800e57c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b97a 	b.w	8000500 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <HAL_Init+0x30>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000516:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f82d 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	2000      	movs	r0, #0
 8000528:	f00d fbee 	bl	800dd08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800052c:	f00d fbca 	bl	800dcc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000530:	2000      	movs	r0, #0
 8000532:	bd08      	pop	{r3, pc}
 8000534:	40023c00 	.word	0x40023c00

08000538 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <HAL_IncTick+0x10>)
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <HAL_IncTick+0x14>)
 800053c:	6811      	ldr	r1, [r2, #0]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	440b      	add	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20004228 	.word	0x20004228
 800054c:	20000000 	.word	0x20000000

08000550 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <HAL_GetTick+0x8>)
 8000552:	6818      	ldr	r0, [r3, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20004228 	.word	0x20004228

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
 800055e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000560:	f7ff fff6 	bl	8000550 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000564:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000566:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000568:	d002      	beq.n	8000570 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <HAL_Delay+0x20>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000570:	f7ff ffee 	bl	8000550 <HAL_GetTick>
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	4284      	cmp	r4, r0
 8000578:	d8fa      	bhi.n	8000570 <HAL_Delay+0x14>
  {
  }
}
 800057a:	bd38      	pop	{r3, r4, r5, pc}
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000588:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800058a:	0200      	lsls	r0, r0, #8
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000598:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059a:	60d3      	str	r3, [r2, #12]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a6:	b470      	push	{r4, r5, r6}
 80005a8:	68dc      	ldr	r4, [r3, #12]
 80005aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c4 0607 	rsb	r6, r4, #7
 80005b2:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b8:	bf28      	it	cs
 80005ba:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005bc:	2b06      	cmp	r3, #6
 80005be:	d917      	bls.n	80005f0 <HAL_NVIC_SetPriority+0x4c>
 80005c0:	3c03      	subs	r4, #3
 80005c2:	2501      	movs	r5, #1
 80005c4:	40a5      	lsls	r5, r4
 80005c6:	3d01      	subs	r5, #1
 80005c8:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ca:	2301      	movs	r3, #1
 80005cc:	40b3      	lsls	r3, r6
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4019      	ands	r1, r3
 80005d2:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80005d4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80005da:	db0c      	blt.n	80005f6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005e4:	0109      	lsls	r1, r1, #4
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005ec:	bc70      	pop	{r4, r5, r6}
 80005ee:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f0:	2200      	movs	r2, #0
 80005f2:	4614      	mov	r4, r2
 80005f4:	e7e9      	b.n	80005ca <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_NVIC_SetPriority+0x68>)
 80005f8:	f000 000f 	and.w	r0, r0, #15
 80005fc:	0109      	lsls	r1, r1, #4
 80005fe:	4403      	add	r3, r0
 8000600:	b2c9      	uxtb	r1, r1
 8000602:	7619      	strb	r1, [r3, #24]
 8000604:	bc70      	pop	{r4, r5, r6}
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	e000ecfc 	.word	0xe000ecfc

08000610 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000610:	f000 011f 	and.w	r1, r0, #31
 8000614:	2301      	movs	r3, #1
 8000616:	0940      	lsrs	r0, r0, #5
 8000618:	4a02      	ldr	r2, [pc, #8]	; (8000624 <HAL_NVIC_EnableIRQ+0x14>)
 800061a:	408b      	lsls	r3, r1
 800061c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e100 	.word	0xe000e100

08000628 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000628:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800062c:	2b02      	cmp	r3, #2
 800062e:	d003      	beq.n	8000638 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000634:	2001      	movs	r0, #1
 8000636:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000638:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800063a:	2305      	movs	r3, #5
 800063c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000640:	6813      	ldr	r3, [r2, #0]
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000648:	2000      	movs	r0, #0
}
 800064a:	4770      	bx	lr

0800064c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000650:	2900      	cmp	r1, #0
 8000652:	d166      	bne.n	8000722 <ETH_MACDMAConfig+0xd6>
 8000654:	68c1      	ldr	r1, [r0, #12]
 8000656:	6883      	ldr	r3, [r0, #8]
 8000658:	430b      	orrs	r3, r1
 800065a:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0U;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800065e:	6822      	ldr	r2, [r4, #0]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000660:	69e0      	ldr	r0, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000662:	6815      	ldr	r5, [r2, #0]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000664:	4b33      	ldr	r3, [pc, #204]	; (8000734 <ETH_MACDMAConfig+0xe8>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000666:	2800      	cmp	r0, #0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000668:	ea03 0305 	and.w	r3, r3, r5
 800066c:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000670:	bf14      	ite	ne
 8000672:	2100      	movne	r1, #0
 8000674:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000678:	430b      	orrs	r3, r1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800067a:	6013      	str	r3, [r2, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800067c:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 800067e:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000680:	f7ff ff6c 	bl	800055c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000684:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000686:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8000688:	601d      	str	r5, [r3, #0]
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800068a:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800068c:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 800068e:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000690:	f7ff ff64 	bl	800055c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000694:	6823      	ldr	r3, [r4, #0]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000696:	2500      	movs	r5, #0
   (heth->Instance)->MACFFR = tmpreg1;
 8000698:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800069a:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800069c:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800069e:	699a      	ldr	r2, [r3, #24]
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80006a0:	f64f 7141 	movw	r1, #65345	; 0xff41
 80006a4:	400a      	ands	r2, r1
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80006a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80006aa:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ac:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80006ae:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b0:	f7ff ff54 	bl	800055c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80006b4:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b6:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80006b8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006ba:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80006bc:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006be:	f7ff ff4d 	bl	800055c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006c2:	6822      	ldr	r2, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006c6:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006c8:	f241 0518 	movw	r5, #4120	; 0x1018
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006cc:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006ce:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80006d0:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80006d2:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80006d6:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80006da:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006dc:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006de:	f7ff ff3d 	bl	800055c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80006e2:	6823      	ldr	r3, [r4, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80006e4:	4a15      	ldr	r2, [pc, #84]	; (800073c <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80006e6:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80006e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80006ec:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80006ee:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80006f0:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f2:	f7ff ff33 	bl	800055c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80006f6:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80006f8:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg1;
 80006fa:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80006fe:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg1;
 8000700:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000702:	d107      	bne.n	8000714 <ETH_MACDMAConfig+0xc8>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000704:	f241 011c 	movw	r1, #4124	; 0x101c
 8000708:	585a      	ldr	r2, [r3, r1]
 800070a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800070e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000712:	505a      	str	r2, [r3, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000714:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <ETH_MACDMAConfig+0xf4>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000718:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800071a:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800071c:	681b      	ldr	r3, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800071e:	6053      	str	r3, [r2, #4]
 8000720:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000722:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8000726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800072a:	60c2      	str	r2, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 800072c:	6083      	str	r3, [r0, #8]
 800072e:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 8000732:	e794      	b.n	800065e <ETH_MACDMAConfig+0x12>
 8000734:	ff20810f 	.word	0xff20810f
 8000738:	f8de3f23 	.word	0xf8de3f23
 800073c:	02c12080 	.word	0x02c12080
 8000740:	40028040 	.word	0x40028040

08000744 <HAL_ETH_DMATxDescListInit>:
{
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000746:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800074a:	2c01      	cmp	r4, #1
 800074c:	d043      	beq.n	80007d6 <HAL_ETH_DMATxDescListInit+0x92>
 800074e:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000750:	2402      	movs	r4, #2
  heth->TxDesc = DMATxDescTab;
 8000752:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(heth);
 8000754:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000758:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0U; i < TxBuffCount; i++)
 800075c:	b1bb      	cbz	r3, 800078e <HAL_ETH_DMATxDescListInit+0x4a>
 800075e:	69c6      	ldr	r6, [r0, #28]
 8000760:	f103 3eff 	add.w	lr, r3, #4294967295
 8000764:	460c      	mov	r4, r1
 8000766:	b1fe      	cbz	r6, 80007a8 <HAL_ETH_DMATxDescListInit+0x64>
 8000768:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800076a:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800076e:	f104 0620 	add.w	r6, r4, #32
 8000772:	45ae      	cmp	lr, r5
 8000774:	bf94      	ite	ls
 8000776:	460f      	movls	r7, r1
 8000778:	4637      	movhi	r7, r6
 800077a:	3501      	adds	r5, #1
  for(i=0U; i < TxBuffCount; i++)
 800077c:	42ab      	cmp	r3, r5
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800077e:	60a2      	str	r2, [r4, #8]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000780:	f8c4 c000 	str.w	ip, [r4]
 8000784:	60e7      	str	r7, [r4, #12]
 8000786:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800078a:	4634      	mov	r4, r6
  for(i=0U; i < TxBuffCount; i++)
 800078c:	d1ef      	bne.n	800076e <HAL_ETH_DMATxDescListInit+0x2a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800078e:	6805      	ldr	r5, [r0, #0]
 8000790:	f241 0310 	movw	r3, #4112	; 0x1010
  __HAL_UNLOCK(heth);
 8000794:	2200      	movs	r2, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000796:	50e9      	str	r1, [r5, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000798:	2401      	movs	r4, #1
  return HAL_OK;
 800079a:	4613      	mov	r3, r2
  heth->State= HAL_ETH_STATE_READY;
 800079c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80007a0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80007a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80007ac:	f8c4 c000 	str.w	ip, [r4]
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80007b0:	6827      	ldr	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80007b2:	60a2      	str	r2, [r4, #8]
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80007b4:	4625      	mov	r5, r4
 80007b6:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 80007ba:	f845 7b20 	str.w	r7, [r5], #32
 80007be:	4576      	cmp	r6, lr
 80007c0:	bf2c      	ite	cs
 80007c2:	460f      	movcs	r7, r1
 80007c4:	462f      	movcc	r7, r5
 80007c6:	3601      	adds	r6, #1
  for(i=0U; i < TxBuffCount; i++)
 80007c8:	42b3      	cmp	r3, r6
 80007ca:	60e7      	str	r7, [r4, #12]
 80007cc:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80007d0:	462c      	mov	r4, r5
 80007d2:	d1eb      	bne.n	80007ac <HAL_ETH_DMATxDescListInit+0x68>
 80007d4:	e7db      	b.n	800078e <HAL_ETH_DMATxDescListInit+0x4a>
  __HAL_LOCK(heth);
 80007d6:	2302      	movs	r3, #2
}
 80007d8:	4618      	mov	r0, r3
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007dc <HAL_ETH_DMARxDescListInit>:
{
 80007dc:	4684      	mov	ip, r0
  __HAL_LOCK(heth);
 80007de:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80007e2:	2801      	cmp	r0, #1
 80007e4:	d031      	beq.n	800084a <HAL_ETH_DMARxDescListInit+0x6e>
{
 80007e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 80007ea:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 80007ec:	2401      	movs	r4, #1
  heth->RxDesc = DMARxDescTab; 
 80007ee:	f8cc 1028 	str.w	r1, [ip, #40]	; 0x28
  __HAL_LOCK(heth);
 80007f2:	f88c 4045 	strb.w	r4, [ip, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80007f6:	f88c 0044 	strb.w	r0, [ip, #68]	; 0x44
  for(i=0U; i < RxBuffCount; i++)
 80007fa:	b1c3      	cbz	r3, 800082e <HAL_ETH_DMARxDescListInit+0x52>
 80007fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000800:	460c      	mov	r4, r1
 8000802:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000804:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000808:	f244 50f4 	movw	r0, #17908	; 0x45f4
 800080c:	f104 0620 	add.w	r6, r4, #32
 8000810:	45a8      	cmp	r8, r5
 8000812:	bf8c      	ite	hi
 8000814:	4637      	movhi	r7, r6
 8000816:	460f      	movls	r7, r1
 8000818:	3501      	adds	r5, #1
  for(i=0U; i < RxBuffCount; i++)
 800081a:	42ab      	cmp	r3, r5
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800081c:	60a2      	str	r2, [r4, #8]
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800081e:	f8c4 e000 	str.w	lr, [r4]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000822:	6060      	str	r0, [r4, #4]
 8000824:	60e7      	str	r7, [r4, #12]
 8000826:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800082a:	4634      	mov	r4, r6
  for(i=0U; i < RxBuffCount; i++)
 800082c:	d1ee      	bne.n	800080c <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800082e:	f8dc 4000 	ldr.w	r4, [ip]
 8000832:	f241 000c 	movw	r0, #4108	; 0x100c
  __HAL_UNLOCK(heth);
 8000836:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 8000838:	2201      	movs	r2, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800083a:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 800083c:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800083e:	f88c 2044 	strb.w	r2, [ip, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000842:	f88c 3045 	strb.w	r3, [ip, #69]	; 0x45
  return HAL_OK;
 8000846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800084a:	2002      	movs	r0, #2
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <HAL_ETH_Init>:
  if(heth == NULL)
 8000850:	2800      	cmp	r0, #0
 8000852:	f000 80e0 	beq.w	8000a16 <HAL_ETH_Init+0x1c6>
{
 8000856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(heth->State == HAL_ETH_STATE_RESET)
 800085a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 800085e:	b082      	sub	sp, #8
 8000860:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000862:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 80a7 	beq.w	80009ba <HAL_ETH_Init+0x16a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	49bd      	ldr	r1, [pc, #756]	; (8000b64 <HAL_ETH_Init+0x314>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800086e:	4abe      	ldr	r2, [pc, #760]	; (8000b68 <HAL_ETH_Init+0x318>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	6c48      	ldr	r0, [r1, #68]	; 0x44
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000876:	6823      	ldr	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800087c:	6448      	str	r0, [r1, #68]	; 0x44
 800087e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000880:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000884:	9101      	str	r1, [sp, #4]
 8000886:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000888:	6851      	ldr	r1, [r2, #4]
 800088a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800088e:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000890:	6851      	ldr	r1, [r2, #4]
 8000892:	6a20      	ldr	r0, [r4, #32]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000898:	4301      	orrs	r1, r0
 800089a:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	f042 0201 	orr.w	r2, r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008a4:	f7ff fe54 	bl	8000550 <HAL_GetTick>
 80008a8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008aa:	e005      	b.n	80008b8 <HAL_ETH_Init+0x68>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008ac:	f7ff fe50 	bl	8000550 <HAL_GetTick>
 80008b0:	1b40      	subs	r0, r0, r5
 80008b2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80008b6:	d846      	bhi.n	8000946 <HAL_ETH_Init+0xf6>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	07d1      	lsls	r1, r2, #31
 80008c2:	d4f3      	bmi.n	80008ac <HAL_ETH_Init+0x5c>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008c4:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80008c6:	f000 fef3 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008ca:	4ba8      	ldr	r3, [pc, #672]	; (8000b6c <HAL_ETH_Init+0x31c>)
 80008cc:	4aa8      	ldr	r2, [pc, #672]	; (8000b70 <HAL_ETH_Init+0x320>)
 80008ce:	4403      	add	r3, r0
 80008d0:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008d2:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008d6:	d875      	bhi.n	80009c4 <HAL_ETH_Init+0x174>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80008d8:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80008dc:	6822      	ldr	r2, [r4, #0]
 80008de:	6115      	str	r5, [r2, #16]
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80008e4:	2b42      	cmp	r3, #66	; 0x42
 80008e6:	d024      	beq.n	8000932 <HAL_ETH_Init+0xe2>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008e8:	2342      	movs	r3, #66	; 0x42
 80008ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80008ee:	6911      	ldr	r1, [r2, #16]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80008f0:	8a23      	ldrh	r3, [r4, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80008f2:	f001 011c 	and.w	r1, r1, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80008f6:	02db      	lsls	r3, r3, #11
 80008f8:	f041 0103 	orr.w	r1, r1, #3
 80008fc:	b29b      	uxth	r3, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80008fe:	430b      	orrs	r3, r1
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000904:	6151      	str	r1, [r2, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000906:	6113      	str	r3, [r2, #16]
  tickstart = HAL_GetTick();
 8000908:	f7ff fe22 	bl	8000550 <HAL_GetTick>
 800090c:	4606      	mov	r6, r0
 800090e:	e004      	b.n	800091a <HAL_ETH_Init+0xca>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	691d      	ldr	r5, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000914:	f015 0501 	ands.w	r5, r5, #1
 8000918:	d01e      	beq.n	8000958 <HAL_ETH_Init+0x108>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800091a:	f7ff fe19 	bl	8000550 <HAL_GetTick>
 800091e:	1b80      	subs	r0, r0, r6
 8000920:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000924:	d3f4      	bcc.n	8000910 <HAL_ETH_Init+0xc0>
      heth->State= HAL_ETH_STATE_READY;
 8000926:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8000928:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_READY;
 800092a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800092e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      ETH_MACDMAConfig(heth, err);
 8000932:	4620      	mov	r0, r4
 8000934:	2101      	movs	r1, #1
 8000936:	f7ff fe89 	bl	800064c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800093a:	2001      	movs	r0, #1
 800093c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
}
 8000940:	b002      	add	sp, #8
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000946:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 8000948:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800094a:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800094e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000952:	b002      	add	sp, #8
 8000954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000958:	2701      	movs	r7, #1
 800095a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  HAL_Delay(PHY_RESET_DELAY);
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	f7ff fdfc 	bl	800055c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000964:	6863      	ldr	r3, [r4, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d157      	bne.n	8000a1a <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800096a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800096e:	2b42      	cmp	r3, #66	; 0x42
 8000970:	d0df      	beq.n	8000932 <HAL_ETH_Init+0xe2>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000972:	6825      	ldr	r5, [r4, #0]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000974:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000976:	68e0      	ldr	r0, [r4, #12]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000978:	2342      	movs	r3, #66	; 0x42
 800097a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800097e:	6929      	ldr	r1, [r5, #16]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000980:	8a23      	ldrh	r3, [r4, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000982:	f001 011c 	and.w	r1, r1, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000986:	02db      	lsls	r3, r3, #11
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000988:	0852      	lsrs	r2, r2, #1
 800098a:	f041 0103 	orr.w	r1, r1, #3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800098e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000992:	b29b      	uxth	r3, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000994:	430b      	orrs	r3, r1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000996:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000998:	616a      	str	r2, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 800099a:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 800099c:	f7ff fdd8 	bl	8000550 <HAL_GetTick>
 80009a0:	4605      	mov	r5, r0
 80009a2:	e003      	b.n	80009ac <HAL_ETH_Init+0x15c>
    tmpreg1 = heth->Instance->MACMIIAR;
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	691b      	ldr	r3, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80009a8:	07db      	lsls	r3, r3, #31
 80009aa:	d522      	bpl.n	80009f2 <HAL_ETH_Init+0x1a2>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80009ac:	f7ff fdd0 	bl	8000550 <HAL_GetTick>
 80009b0:	1b40      	subs	r0, r0, r5
 80009b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80009b6:	d3f5      	bcc.n	80009a4 <HAL_ETH_Init+0x154>
 80009b8:	e7b5      	b.n	8000926 <HAL_ETH_Init+0xd6>
    heth->Lock = HAL_UNLOCKED;
 80009ba:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80009be:	f00c fee7 	bl	800d790 <HAL_ETH_MspInit>
 80009c2:	e753      	b.n	800086c <HAL_ETH_Init+0x1c>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80009c4:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <HAL_ETH_Init+0x324>)
 80009c6:	4a6c      	ldr	r2, [pc, #432]	; (8000b78 <HAL_ETH_Init+0x328>)
 80009c8:	4403      	add	r3, r0
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d90e      	bls.n	80009ec <HAL_ETH_Init+0x19c>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80009ce:	4b6b      	ldr	r3, [pc, #428]	; (8000b7c <HAL_ETH_Init+0x32c>)
 80009d0:	4a6b      	ldr	r2, [pc, #428]	; (8000b80 <HAL_ETH_Init+0x330>)
 80009d2:	4403      	add	r3, r0
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d981      	bls.n	80008dc <HAL_ETH_Init+0x8c>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009d8:	4b6a      	ldr	r3, [pc, #424]	; (8000b84 <HAL_ETH_Init+0x334>)
 80009da:	4a6b      	ldr	r2, [pc, #428]	; (8000b88 <HAL_ETH_Init+0x338>)
 80009dc:	4403      	add	r3, r0
 80009de:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009e0:	bf94      	ite	ls
 80009e2:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009e6:	f045 0510 	orrhi.w	r5, r5, #16
 80009ea:	e777      	b.n	80008dc <HAL_ETH_Init+0x8c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009ec:	f045 050c 	orr.w	r5, r5, #12
 80009f0:	e774      	b.n	80008dc <HAL_ETH_Init+0x8c>
  heth->State = HAL_ETH_STATE_READY;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    HAL_Delay(PHY_CONFIG_DELAY);
 80009f8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80009fc:	f7ff fdae 	bl	800055c <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000a00:	4620      	mov	r0, r4
 8000a02:	2100      	movs	r1, #0
 8000a04:	f7ff fe22 	bl	800064c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000a08:	2301      	movs	r3, #1
  return HAL_OK;
 8000a0a:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 8000a0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8000a10:	b002      	add	sp, #8
 8000a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8000a16:	2001      	movs	r0, #1
 8000a18:	4770      	bx	lr
    tickstart = HAL_GetTick();
 8000a1a:	f7ff fd99 	bl	8000550 <HAL_GetTick>
      __HAL_UNLOCK(heth);
 8000a1e:	46aa      	mov	sl, r5
    tickstart = HAL_GetTick();
 8000a20:	4680      	mov	r8, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000a22:	f04f 0982 	mov.w	r9, #130	; 0x82
 8000a26:	e009      	b.n	8000a3c <HAL_ETH_Init+0x1ec>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a28:	f7ff fd92 	bl	8000550 <HAL_GetTick>
 8000a2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a30:	eba0 0008 	sub.w	r0, r0, r8
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d82a      	bhi.n	8000a8e <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a38:	076e      	lsls	r6, r5, #29
 8000a3a:	d434      	bmi.n	8000aa6 <HAL_ETH_Init+0x256>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000a3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000a40:	2b82      	cmp	r3, #130	; 0x82
 8000a42:	d0f1      	beq.n	8000a28 <HAL_ETH_Init+0x1d8>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a44:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000a46:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000a4a:	8a23      	ldrh	r3, [r4, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a4c:	690a      	ldr	r2, [r1, #16]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000a4e:	02db      	lsls	r3, r3, #11
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000a50:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000a58:	f043 0341 	orr.w	r3, r3, #65	; 0x41
  heth->Instance->MACMIIAR = tmpreg1;
 8000a5c:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8000a5e:	f7ff fd77 	bl	8000550 <HAL_GetTick>
 8000a62:	4606      	mov	r6, r0
 8000a64:	e003      	b.n	8000a6e <HAL_ETH_Init+0x21e>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	691a      	ldr	r2, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000a6a:	07d2      	lsls	r2, r2, #31
 8000a6c:	d50a      	bpl.n	8000a84 <HAL_ETH_Init+0x234>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000a6e:	f7ff fd6f 	bl	8000550 <HAL_GetTick>
 8000a72:	1b80      	subs	r0, r0, r6
 8000a74:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000a78:	d3f5      	bcc.n	8000a66 <HAL_ETH_Init+0x216>
      heth->State= HAL_ETH_STATE_READY;
 8000a7a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a7e:	f884 a045 	strb.w	sl, [r4, #69]	; 0x45
 8000a82:	e7d1      	b.n	8000a28 <HAL_ETH_Init+0x1d8>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000a84:	695d      	ldr	r5, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 8000a86:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8000a8a:	b2ad      	uxth	r5, r5
 8000a8c:	e7cc      	b.n	8000a28 <HAL_ETH_Init+0x1d8>
        ETH_MACDMAConfig(heth, err);
 8000a8e:	4620      	mov	r0, r4
 8000a90:	2101      	movs	r1, #1
 8000a92:	f7ff fddb 	bl	800064c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a96:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8000a98:	2300      	movs	r3, #0
        heth->State= HAL_ETH_STATE_READY;
 8000a9a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	e74c      	b.n	8000940 <HAL_ETH_Init+0xf0>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000aa6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000aaa:	2b42      	cmp	r3, #66	; 0x42
 8000aac:	f43f af41 	beq.w	8000932 <HAL_ETH_Init+0xe2>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ab0:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000ab2:	2342      	movs	r3, #66	; 0x42
 8000ab4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ab8:	690a      	ldr	r2, [r1, #16]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000aba:	8a23      	ldrh	r3, [r4, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000abc:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ac0:	02db      	lsls	r3, r3, #11
 8000ac2:	f042 0203 	orr.w	r2, r2, #3
 8000ac6:	b29b      	uxth	r3, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000ac8:	4313      	orrs	r3, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ace:	614a      	str	r2, [r1, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000ad0:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8000ad2:	f7ff fd3d 	bl	8000550 <HAL_GetTick>
 8000ad6:	4606      	mov	r6, r0
 8000ad8:	e004      	b.n	8000ae4 <HAL_ETH_Init+0x294>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	691f      	ldr	r7, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000ade:	f017 0701 	ands.w	r7, r7, #1
 8000ae2:	d006      	beq.n	8000af2 <HAL_ETH_Init+0x2a2>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000ae4:	f7ff fd34 	bl	8000550 <HAL_GetTick>
 8000ae8:	1b80      	subs	r0, r0, r6
 8000aea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000aee:	d3f4      	bcc.n	8000ada <HAL_ETH_Init+0x28a>
 8000af0:	e719      	b.n	8000926 <HAL_ETH_Init+0xd6>
  heth->State = HAL_ETH_STATE_READY;
 8000af2:	f04f 0901 	mov.w	r9, #1
 8000af6:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
    tickstart = HAL_GetTick();
 8000afa:	f7ff fd29 	bl	8000550 <HAL_GetTick>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000afe:	f04f 0a82 	mov.w	sl, #130	; 0x82
    tickstart = HAL_GetTick();
 8000b02:	4680      	mov	r8, r0
 8000b04:	e009      	b.n	8000b1a <HAL_ETH_Init+0x2ca>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000b06:	f7ff fd23 	bl	8000550 <HAL_GetTick>
 8000b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b0e:	eba0 0008 	sub.w	r0, r0, r8
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d8bb      	bhi.n	8000a8e <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b16:	06a9      	lsls	r1, r5, #26
 8000b18:	d43d      	bmi.n	8000b96 <HAL_ETH_Init+0x346>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000b1e:	2b82      	cmp	r3, #130	; 0x82
 8000b20:	d0f1      	beq.n	8000b06 <HAL_ETH_Init+0x2b6>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b22:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b24:	f884 a044 	strb.w	sl, [r4, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b28:	8a23      	ldrh	r3, [r4, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b2a:	690a      	ldr	r2, [r1, #16]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b2c:	02db      	lsls	r3, r3, #11
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b2e:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b36:	f043 0341 	orr.w	r3, r3, #65	; 0x41
  heth->Instance->MACMIIAR = tmpreg1;
 8000b3a:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8000b3c:	f7ff fd08 	bl	8000550 <HAL_GetTick>
 8000b40:	4606      	mov	r6, r0
 8000b42:	e003      	b.n	8000b4c <HAL_ETH_Init+0x2fc>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b48:	07d0      	lsls	r0, r2, #31
 8000b4a:	d51f      	bpl.n	8000b8c <HAL_ETH_Init+0x33c>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b4c:	f7ff fd00 	bl	8000550 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b56:	d3f5      	bcc.n	8000b44 <HAL_ETH_Init+0x2f4>
      heth->State= HAL_ETH_STATE_READY;
 8000b58:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000b60:	e7d1      	b.n	8000b06 <HAL_ETH_Init+0x2b6>
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	feced300 	.word	0xfeced300
 8000b70:	00e4e1bf 	.word	0x00e4e1bf
 8000b74:	fde9f140 	.word	0xfde9f140
 8000b78:	017d783f 	.word	0x017d783f
 8000b7c:	fc6c7900 	.word	0xfc6c7900
 8000b80:	026259ff 	.word	0x026259ff
 8000b84:	fa0a1f00 	.word	0xfa0a1f00
 8000b88:	02faf07f 	.word	0x02faf07f
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b8c:	695d      	ldr	r5, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 8000b8e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8000b92:	b2ad      	uxth	r5, r5
 8000b94:	e7b7      	b.n	8000b06 <HAL_ETH_Init+0x2b6>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b96:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000b9a:	2b82      	cmp	r3, #130	; 0x82
 8000b9c:	f43f aec9 	beq.w	8000932 <HAL_ETH_Init+0xe2>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ba0:	6821      	ldr	r1, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ba2:	2382      	movs	r3, #130	; 0x82
 8000ba4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000ba8:	8a23      	ldrh	r3, [r4, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8000baa:	690a      	ldr	r2, [r1, #16]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bac:	02db      	lsls	r3, r3, #11
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bae:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bbe:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 8000bc0:	f7ff fcc6 	bl	8000550 <HAL_GetTick>
 8000bc4:	4605      	mov	r5, r0
 8000bc6:	e004      	b.n	8000bd2 <HAL_ETH_Init+0x382>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	6913      	ldr	r3, [r2, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bcc:	f013 0301 	ands.w	r3, r3, #1
 8000bd0:	d006      	beq.n	8000be0 <HAL_ETH_Init+0x390>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bd2:	f7ff fcbd 	bl	8000550 <HAL_GetTick>
 8000bd6:	1b40      	subs	r0, r0, r5
 8000bd8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bdc:	d3f4      	bcc.n	8000bc8 <HAL_ETH_Init+0x378>
 8000bde:	e6a2      	b.n	8000926 <HAL_ETH_Init+0xd6>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000be0:	6952      	ldr	r2, [r2, #20]
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000be2:	f012 0f04 	tst.w	r2, #4
 8000be6:	bf14      	ite	ne
 8000be8:	f44f 6000 	movne.w	r0, #2048	; 0x800
 8000bec:	2000      	moveq	r0, #0
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000bee:	0792      	lsls	r2, r2, #30
  heth->State = HAL_ETH_STATE_READY;
 8000bf0:	f04f 0101 	mov.w	r1, #1
      (heth->Init).Speed = ETH_SPEED_100M;
 8000bf4:	bf58      	it	pl
 8000bf6:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8000bfa:	60e0      	str	r0, [r4, #12]
  heth->State = HAL_ETH_STATE_READY;
 8000bfc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
      (heth->Init).Speed = ETH_SPEED_100M;
 8000c00:	60a3      	str	r3, [r4, #8]
 8000c02:	e6fd      	b.n	8000a00 <HAL_ETH_Init+0x1b0>

08000c04 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000c04:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d042      	beq.n	8000c92 <HAL_ETH_TransmitFrame+0x8e>
{
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	4604      	mov	r4, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8000c10:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000c18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  if (FrameLength == 0U) 
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d033      	beq.n	8000c88 <HAL_ETH_TransmitFrame+0x84>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	db5a      	blt.n	8000cde <HAL_ETH_TransmitFrame+0xda>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000c28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c2c:	4291      	cmp	r1, r2
 8000c2e:	d934      	bls.n	8000c9a <HAL_ETH_TransmitFrame+0x96>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000c30:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <HAL_ETH_TransmitFrame+0xf4>)
 8000c32:	fba0 5001 	umull	r5, r0, r0, r1
 8000c36:	0a80      	lsrs	r0, r0, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000c38:	fb02 1210 	mls	r2, r2, r0, r1
 8000c3c:	b35a      	cbz	r2, 8000c96 <HAL_ETH_TransmitFrame+0x92>
      bufcount++;
 8000c3e:	3001      	adds	r0, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <HAL_ETH_TransmitFrame+0xf8>)
 8000c42:	f201 5ef4 	addw	lr, r1, #1524	; 0x5f4
 8000c46:	fb02 ee00 	mla	lr, r2, r0, lr
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000c4a:	f3ce 0e0c 	ubfx	lr, lr, #0, #13
 8000c4e:	2200      	movs	r2, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000c50:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8000c54:	1e47      	subs	r7, r0, #1
 8000c56:	e007      	b.n	8000c68 <HAL_ETH_TransmitFrame+0x64>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000c58:	6819      	ldr	r1, [r3, #0]
    for (i=0U; i< bufcount; i++)
 8000c5a:	3201      	adds	r2, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000c5c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8000c60:	4282      	cmp	r2, r0
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000c62:	6019      	str	r1, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000c64:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8000c66:	d038      	beq.n	8000cda <HAL_ETH_TransmitFrame+0xd6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000c68:	6819      	ldr	r1, [r3, #0]
 8000c6a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8000c6e:	6019      	str	r1, [r3, #0]
      if (i == 0U) 
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	d03b      	beq.n	8000cec <HAL_ETH_TransmitFrame+0xe8>
      if (i == (bufcount-1U))
 8000c74:	4297      	cmp	r7, r2
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000c76:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1U))
 8000c78:	d1ee      	bne.n	8000c58 <HAL_ETH_TransmitFrame+0x54>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000c7a:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000c7c:	f8c3 e004 	str.w	lr, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000c80:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8000c84:	601d      	str	r5, [r3, #0]
 8000c86:	e7e7      	b.n	8000c58 <HAL_ETH_TransmitFrame+0x54>
    heth->State = HAL_ETH_STATE_READY;
 8000c88:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000c8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 8000c92:	2002      	movs	r0, #2
 8000c94:	4770      	bx	lr
  if (bufcount == 1U)
 8000c96:	2801      	cmp	r0, #1
 8000c98:	d1d2      	bne.n	8000c40 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000c9a:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000c9c:	68d8      	ldr	r0, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000c9e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000ca2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000ca4:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000ca6:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000caa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000cae:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000cb0:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000cb2:	62e0      	str	r0, [r4, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	f241 0214 	movw	r2, #4116	; 0x1014
 8000cba:	5899      	ldr	r1, [r3, r2]
 8000cbc:	0749      	lsls	r1, r1, #29
 8000cbe:	d505      	bpl.n	8000ccc <HAL_ETH_TransmitFrame+0xc8>
    (heth->Instance)->DMATPDR = 0U;
 8000cc0:	f241 0104 	movw	r1, #4100	; 0x1004
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000cc4:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0U;
 8000cc6:	2000      	movs	r0, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000cc8:	509d      	str	r5, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000cca:	5058      	str	r0, [r3, r1]
  heth->State = HAL_ETH_STATE_READY;
 8000ccc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000cce:	2000      	movs	r0, #0
  heth->State = HAL_ETH_STATE_READY;
 8000cd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000cd4:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cdc:	e7ea      	b.n	8000cb4 <HAL_ETH_TransmitFrame+0xb0>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000cde:	2212      	movs	r2, #18
    __HAL_UNLOCK(heth);
 8000ce0:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000ce2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    return HAL_ERROR;
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000cec:	6819      	ldr	r1, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000cee:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000cf0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000cf4:	6019      	str	r1, [r3, #0]
 8000cf6:	e7af      	b.n	8000c58 <HAL_ETH_TransmitFrame+0x54>
 8000cf8:	ac02b00b 	.word	0xac02b00b
 8000cfc:	fffffa0c 	.word	0xfffffa0c

08000d00 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000d00:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d058      	beq.n	8000dba <HAL_ETH_GetReceivedFrame_IT+0xba>
 8000d08:	6a83      	ldr	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_BUSY;
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	4602      	mov	r2, r0
 8000d14:	2900      	cmp	r1, #0
  __HAL_LOCK(heth);
 8000d16:	f04f 0001 	mov.w	r0, #1
 8000d1a:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000d1e:	db45      	blt.n	8000dac <HAL_ETH_GetReceivedFrame_IT+0xac>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000d26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000d2a:	d048      	beq.n	8000dbe <HAL_ETH_GetReceivedFrame_IT+0xbe>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8000d32:	d15b      	bne.n	8000dec <HAL_ETH_GetReceivedFrame_IT+0xec>
      (heth->RxFrameInfos.SegCount)++;
 8000d34:	6b91      	ldr	r1, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8000d3a:	4401      	add	r1, r0
 8000d3c:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000d3e:	6819      	ldr	r1, [r3, #0]
 8000d40:	2900      	cmp	r1, #0
 8000d42:	db33      	blt.n	8000dac <HAL_ETH_GetReceivedFrame_IT+0xac>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000d4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000d4e:	d03b      	beq.n	8000dc8 <HAL_ETH_GetReceivedFrame_IT+0xc8>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	f411 7f40 	tst.w	r1, #768	; 0x300
 8000d56:	d149      	bne.n	8000dec <HAL_ETH_GetReceivedFrame_IT+0xec>
      (heth->RxFrameInfos.SegCount)++;
 8000d58:	6b91      	ldr	r1, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8000d5e:	3101      	adds	r1, #1
 8000d60:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	2900      	cmp	r1, #0
 8000d66:	db21      	blt.n	8000dac <HAL_ETH_GetReceivedFrame_IT+0xac>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000d68:	6819      	ldr	r1, [r3, #0]
 8000d6a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000d6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000d72:	d02f      	beq.n	8000dd4 <HAL_ETH_GetReceivedFrame_IT+0xd4>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	f411 7f40 	tst.w	r1, #768	; 0x300
 8000d7a:	d137      	bne.n	8000dec <HAL_ETH_GetReceivedFrame_IT+0xec>
      (heth->RxFrameInfos.SegCount)++;
 8000d7c:	6b91      	ldr	r1, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8000d82:	3101      	adds	r1, #1
 8000d84:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	db0f      	blt.n	8000dac <HAL_ETH_GetReceivedFrame_IT+0xac>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000d92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000d96:	d023      	beq.n	8000de0 <HAL_ETH_GetReceivedFrame_IT+0xe0>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	f411 7f40 	tst.w	r1, #768	; 0x300
 8000d9e:	d125      	bne.n	8000dec <HAL_ETH_GetReceivedFrame_IT+0xec>
      (heth->RxFrameInfos.SegCount)++;
 8000da0:	6b90      	ldr	r0, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000da2:	68d9      	ldr	r1, [r3, #12]
 8000da4:	6291      	str	r1, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8000da6:	3001      	adds	r0, #1
 8000da8:	6390      	str	r0, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000daa:	680b      	ldr	r3, [r1, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000dac:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 8000dae:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8000db0:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000db4:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
  return HAL_ERROR;
 8000db8:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	6293      	str	r3, [r2, #40]	; 0x28
      heth->RxFrameInfos.SegCount = 1U;   
 8000dc4:	6390      	str	r0, [r2, #56]	; 0x38
 8000dc6:	e7ba      	b.n	8000d3e <HAL_ETH_GetReceivedFrame_IT+0x3e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000dca:	2101      	movs	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	6293      	str	r3, [r2, #40]	; 0x28
      heth->RxFrameInfos.SegCount = 1U;   
 8000dd0:	6391      	str	r1, [r2, #56]	; 0x38
 8000dd2:	e7c6      	b.n	8000d62 <HAL_ETH_GetReceivedFrame_IT+0x62>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000dd6:	2101      	movs	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	6293      	str	r3, [r2, #40]	; 0x28
      heth->RxFrameInfos.SegCount = 1U;   
 8000ddc:	6391      	str	r1, [r2, #56]	; 0x38
 8000dde:	e7d2      	b.n	8000d86 <HAL_ETH_GetReceivedFrame_IT+0x86>
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000de0:	68d9      	ldr	r1, [r3, #12]
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000de4:	2301      	movs	r3, #1
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000de6:	6291      	str	r1, [r2, #40]	; 0x28
      heth->RxFrameInfos.SegCount = 1U;   
 8000de8:	6393      	str	r3, [r2, #56]	; 0x38
 8000dea:	e7de      	b.n	8000daa <HAL_ETH_GetReceivedFrame_IT+0xaa>
      (heth->RxFrameInfos.SegCount)++;
 8000dec:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000dee:	3101      	adds	r1, #1
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000df0:	2901      	cmp	r1, #1
{
 8000df2:	b410      	push	{r4}
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000df4:	bf08      	it	eq
 8000df6:	4618      	moveq	r0, r3
      (heth->RxFrameInfos.SegCount)++;
 8000df8:	6391      	str	r1, [r2, #56]	; 0x38
 8000dfa:	bf18      	it	ne
 8000dfc:	6b10      	ldrne	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000dfe:	6819      	ldr	r1, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000e00:	68dc      	ldr	r4, [r3, #12]
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000e02:	6880      	ldr	r0, [r0, #8]
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000e04:	6353      	str	r3, [r2, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000e06:	bf08      	it	eq
 8000e08:	6313      	streq	r3, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000e0a:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000e0e:	6410      	str	r0, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000e10:	3b04      	subs	r3, #4
      __HAL_UNLOCK(heth);
 8000e12:	2000      	movs	r0, #0
      heth->State = HAL_ETH_STATE_READY;
 8000e14:	2101      	movs	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000e16:	6294      	str	r4, [r2, #40]	; 0x28
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000e18:	63d3      	str	r3, [r2, #60]	; 0x3c
      heth->State = HAL_ETH_STATE_READY;
 8000e1a:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000e1e:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
}
 8000e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_ETH_TxCpltCallback>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <HAL_ETH_ErrorCallback>:
{
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <HAL_ETH_IRQHandler>:
{
 8000e30:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000e32:	6803      	ldr	r3, [r0, #0]
 8000e34:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000e38:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000e3a:	599d      	ldr	r5, [r3, r6]
 8000e3c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e40:	d118      	bne.n	8000e74 <HAL_ETH_IRQHandler+0x44>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000e42:	599a      	ldr	r2, [r3, r6]
 8000e44:	07d2      	lsls	r2, r2, #31
 8000e46:	d421      	bmi.n	8000e8c <HAL_ETH_IRQHandler+0x5c>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000e48:	f241 0514 	movw	r5, #4116	; 0x1014
 8000e4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e50:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000e52:	595b      	ldr	r3, [r3, r5]
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	d50c      	bpl.n	8000e72 <HAL_ETH_IRQHandler+0x42>
    HAL_ETH_ErrorCallback(heth);
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff ffe7 	bl	8000e2c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000e5e:	6821      	ldr	r1, [r4, #0]
 8000e60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8000e64:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8000e66:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000e68:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000e6a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000e74:	f00c fce8 	bl	800d848 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8000e7c:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8000e7e:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000e80:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000e82:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000e86:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000e8a:	e7dd      	b.n	8000e48 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_TxCpltCallback(heth);
 8000e8c:	f7ff ffcc 	bl	8000e28 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	2201      	movs	r2, #1
 8000e94:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000e96:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000e9a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000e9e:	e7d3      	b.n	8000e48 <HAL_ETH_IRQHandler+0x18>

08000ea0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000ea0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d102      	bne.n	8000eae <HAL_ETH_Start+0xe>
 8000ea8:	2202      	movs	r2, #2
}
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4770      	bx	lr
{  
 8000eae:	b430      	push	{r4, r5}
 8000eb0:	b086      	sub	sp, #24
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg1 = 0U;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000eb2:	6801      	ldr	r1, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000eb4:	2202      	movs	r2, #2
  __IO uint32_t tmpreg1 = 0U;
 8000eb6:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_BUSY;
 8000eb8:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000ebc:	9304      	str	r3, [sp, #16]
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_ETH_Start+0xb4>)
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000ec0:	680b      	ldr	r3, [r1, #0]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ec2:	6814      	ldr	r4, [r2, #0]
 8000ec4:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <HAL_ETH_Start+0xb8>)
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	600b      	str	r3, [r1, #0]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ecc:	fba2 3404 	umull	r3, r4, r2, r4
 8000ed0:	0a64      	lsrs	r4, r4, #9
  tmpreg1 = (heth->Instance)->MACCR;
 8000ed2:	680b      	ldr	r3, [r1, #0]
 8000ed4:	9304      	str	r3, [sp, #16]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ed6:	9405      	str	r4, [sp, #20]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ed8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000eda:	9b05      	ldr	r3, [sp, #20]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	9205      	str	r2, [sp, #20]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f9      	bne.n	8000ed8 <HAL_ETH_Start+0x38>
  (heth->Instance)->MACCR = tmpreg1;
 8000ee4:	9a04      	ldr	r2, [sp, #16]
 8000ee6:	600a      	str	r2, [r1, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000ee8:	9302      	str	r3, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000eea:	680b      	ldr	r3, [r1, #0]
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000ef2:	680b      	ldr	r3, [r1, #0]
 8000ef4:	9302      	str	r3, [sp, #8]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ef6:	9403      	str	r4, [sp, #12]
 8000ef8:	bf00      	nop
  while (Delay --);
 8000efa:	9b03      	ldr	r3, [sp, #12]
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	9203      	str	r2, [sp, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f9      	bne.n	8000ef8 <HAL_ETH_Start+0x58>
  (heth->Instance)->MACCR = tmpreg1;
 8000f04:	9a02      	ldr	r2, [sp, #8]
 8000f06:	600a      	str	r2, [r1, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000f08:	f241 0218 	movw	r2, #4120	; 0x1018
  __IO uint32_t tmpreg1 = 0U;
 8000f0c:	9300      	str	r3, [sp, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000f0e:	588b      	ldr	r3, [r1, r2]
 8000f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f14:	508b      	str	r3, [r1, r2]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000f16:	588b      	ldr	r3, [r1, r2]
 8000f18:	9300      	str	r3, [sp, #0]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f1a:	9401      	str	r4, [sp, #4]
 8000f1c:	bf00      	nop
  while (Delay --);
 8000f1e:	9b01      	ldr	r3, [sp, #4]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	9201      	str	r2, [sp, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f9      	bne.n	8000f1c <HAL_ETH_Start+0x7c>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000f28:	f241 0218 	movw	r2, #4120	; 0x1018
 8000f2c:	9c00      	ldr	r4, [sp, #0]
 8000f2e:	508c      	str	r4, [r1, r2]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000f30:	588c      	ldr	r4, [r1, r2]
 8000f32:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000f36:	508c      	str	r4, [r1, r2]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000f38:	588c      	ldr	r4, [r1, r2]
  heth->State= HAL_ETH_STATE_READY;
 8000f3a:	2501      	movs	r5, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000f3c:	f044 0402 	orr.w	r4, r4, #2
 8000f40:	508c      	str	r4, [r1, r2]
  __HAL_UNLOCK(heth);
 8000f42:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_READY;
 8000f46:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	b006      	add	sp, #24
 8000f4e:	bc30      	pop	{r4, r5}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000010 	.word	0x20000010
 8000f58:	10624dd3 	.word	0x10624dd3

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f60:	f8d1 c000 	ldr.w	ip, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f64:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800117c <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f68:	f8df e214 	ldr.w	lr, [pc, #532]	; 8001180 <HAL_GPIO_Init+0x224>
{
 8000f6c:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_Init+0x1e>
 8000f72:	3501      	adds	r5, #1
 8000f74:	2d10      	cmp	r5, #16
 8000f76:	f000 809b 	beq.w	80010b0 <HAL_GPIO_Init+0x154>
    ioposition = 0x01U << position;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	ea03 020c 	and.w	r2, r3, ip
    if(iocurrent == ioposition)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d1f5      	bne.n	8000f72 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f86:	684e      	ldr	r6, [r1, #4]
 8000f88:	f026 0a10 	bic.w	sl, r6, #16
 8000f8c:	f1ba 0f02 	cmp.w	sl, #2
 8000f90:	f000 8091 	beq.w	80010b6 <HAL_GPIO_Init+0x15a>
 8000f94:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f98:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000f9a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	fa04 f409 	lsl.w	r4, r4, r9
 8000fa2:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa8:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fac:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb0:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000fbc:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fbe:	f240 80a0 	bls.w	8001102 <HAL_GPIO_Init+0x1a6>
      temp = GPIOx->PUPDR;
 8000fc2:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	fa03 f309 	lsl.w	r3, r3, r9
 8000fcc:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 8000fce:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd0:	00f3      	lsls	r3, r6, #3
 8000fd2:	d5ce      	bpl.n	8000f72 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	f04f 0900 	mov.w	r9, #0
 8000fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8000fdc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8000fe8:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
 8000fec:	f025 0303 	bic.w	r3, r5, #3
 8000ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ff4:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000ff8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000ffc:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffe:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001004:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	00a4      	lsls	r4, r4, #2
 800100a:	270f      	movs	r7, #15
 800100c:	40a7      	lsls	r7, r4
 800100e:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	4f54      	ldr	r7, [pc, #336]	; (8001164 <HAL_GPIO_Init+0x208>)
 8001014:	42b8      	cmp	r0, r7
 8001016:	d022      	beq.n	800105e <HAL_GPIO_Init+0x102>
 8001018:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800101c:	42b8      	cmp	r0, r7
 800101e:	f000 8083 	beq.w	8001128 <HAL_GPIO_Init+0x1cc>
 8001022:	4f51      	ldr	r7, [pc, #324]	; (8001168 <HAL_GPIO_Init+0x20c>)
 8001024:	42b8      	cmp	r0, r7
 8001026:	f000 8084 	beq.w	8001132 <HAL_GPIO_Init+0x1d6>
 800102a:	4f50      	ldr	r7, [pc, #320]	; (800116c <HAL_GPIO_Init+0x210>)
 800102c:	42b8      	cmp	r0, r7
 800102e:	f000 8085 	beq.w	800113c <HAL_GPIO_Init+0x1e0>
 8001032:	4f4f      	ldr	r7, [pc, #316]	; (8001170 <HAL_GPIO_Init+0x214>)
 8001034:	42b8      	cmp	r0, r7
 8001036:	f000 8086 	beq.w	8001146 <HAL_GPIO_Init+0x1ea>
 800103a:	4f4e      	ldr	r7, [pc, #312]	; (8001174 <HAL_GPIO_Init+0x218>)
 800103c:	42b8      	cmp	r0, r7
 800103e:	f000 8087 	beq.w	8001150 <HAL_GPIO_Init+0x1f4>
 8001042:	4f4d      	ldr	r7, [pc, #308]	; (8001178 <HAL_GPIO_Init+0x21c>)
 8001044:	42b8      	cmp	r0, r7
 8001046:	f000 8088 	beq.w	800115a <HAL_GPIO_Init+0x1fe>
 800104a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001184 <HAL_GPIO_Init+0x228>
 800104e:	4548      	cmp	r0, r9
 8001050:	bf0c      	ite	eq
 8001052:	f04f 0907 	moveq.w	r9, #7
 8001056:	f04f 0908 	movne.w	r9, #8
 800105a:	fa09 f904 	lsl.w	r9, r9, r4
 800105e:	ea4a 0709 	orr.w	r7, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001062:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8001064:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001068:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800106c:	bf54      	ite	pl
 800106e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001070:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8001072:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001076:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107a:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800107c:	bf54      	ite	pl
 800107e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001080:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8001082:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108a:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800108c:	bf54      	ite	pl
 800108e:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8001090:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8001092:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001096:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109a:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109c:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 80010a0:	bf54      	ite	pl
 80010a2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80010a4:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80010a8:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ac:	f47f af65 	bne.w	8000f7a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80010b0:	b003      	add	sp, #12
 80010b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80010b6:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80010ba:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80010c2:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	00bf      	lsls	r7, r7, #2
 80010c8:	f04f 0b0f 	mov.w	fp, #15
 80010cc:	fa0b fb07 	lsl.w	fp, fp, r7
 80010d0:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	690c      	ldr	r4, [r1, #16]
 80010d6:	40bc      	lsls	r4, r7
 80010d8:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80010dc:	f8c9 4020 	str.w	r4, [r9, #32]
 80010e0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e4:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80010e6:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	fa04 f409 	lsl.w	r4, r4, r9
 80010ee:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f4:	ea04 0a0a 	and.w	sl, r4, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	fa07 f709 	lsl.w	r7, r7, r9
 80010fc:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 8001100:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001102:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	ea07 0a04 	and.w	sl, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001108:	68cf      	ldr	r7, [r1, #12]
 800110a:	fa07 f709 	lsl.w	r7, r7, r9
 800110e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001112:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001114:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001118:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001120:	40af      	lsls	r7, r5
 8001122:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8001124:	6047      	str	r7, [r0, #4]
 8001126:	e74c      	b.n	8000fc2 <HAL_GPIO_Init+0x66>
 8001128:	f04f 0901 	mov.w	r9, #1
 800112c:	fa09 f904 	lsl.w	r9, r9, r4
 8001130:	e795      	b.n	800105e <HAL_GPIO_Init+0x102>
 8001132:	f04f 0902 	mov.w	r9, #2
 8001136:	fa09 f904 	lsl.w	r9, r9, r4
 800113a:	e790      	b.n	800105e <HAL_GPIO_Init+0x102>
 800113c:	f04f 0903 	mov.w	r9, #3
 8001140:	fa09 f904 	lsl.w	r9, r9, r4
 8001144:	e78b      	b.n	800105e <HAL_GPIO_Init+0x102>
 8001146:	f04f 0904 	mov.w	r9, #4
 800114a:	fa09 f904 	lsl.w	r9, r9, r4
 800114e:	e786      	b.n	800105e <HAL_GPIO_Init+0x102>
 8001150:	f04f 0905 	mov.w	r9, #5
 8001154:	fa09 f904 	lsl.w	r9, r9, r4
 8001158:	e781      	b.n	800105e <HAL_GPIO_Init+0x102>
 800115a:	f04f 0906 	mov.w	r9, #6
 800115e:	fa09 f904 	lsl.w	r9, r9, r4
 8001162:	e77c      	b.n	800105e <HAL_GPIO_Init+0x102>
 8001164:	40020000 	.word	0x40020000
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40023800 	.word	0x40023800
 8001180:	40013c00 	.word	0x40013c00
 8001184:	40021c00 	.word	0x40021c00

08001188 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	b902      	cbnz	r2, 800118c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	0409      	lsls	r1, r1, #16
 800118c:	6181      	str	r1, [r0, #24]
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001190:	6943      	ldr	r3, [r0, #20]
 8001192:	4059      	eors	r1, r3
 8001194:	6141      	str	r1, [r0, #20]
 8001196:	4770      	bx	lr

08001198 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	2800      	cmp	r0, #0
 800119a:	f000 81b2 	beq.w	8001502 <HAL_RCC_OscConfig+0x36a>
{
 800119e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	6803      	ldr	r3, [r0, #0]
 80011a4:	07dd      	lsls	r5, r3, #31
{
 80011a6:	b082      	sub	sp, #8
 80011a8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	d52f      	bpl.n	800120c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ac:	49ab      	ldr	r1, [pc, #684]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 80011ae:	688a      	ldr	r2, [r1, #8]
 80011b0:	f002 020c 	and.w	r2, r2, #12
 80011b4:	2a04      	cmp	r2, #4
 80011b6:	f000 8123 	beq.w	8001400 <HAL_RCC_OscConfig+0x268>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	688a      	ldr	r2, [r1, #8]
 80011bc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c0:	2a08      	cmp	r2, #8
 80011c2:	f000 8119 	beq.w	80013f8 <HAL_RCC_OscConfig+0x260>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	6863      	ldr	r3, [r4, #4]
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011cc:	f000 815a 	beq.w	8001484 <HAL_RCC_OscConfig+0x2ec>
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	f000 80e5 	beq.w	80013a2 <HAL_RCC_OscConfig+0x20a>
 80011d8:	4da0      	ldr	r5, [pc, #640]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 80011da:	682a      	ldr	r2, [r5, #0]
 80011dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011e0:	602a      	str	r2, [r5, #0]
 80011e2:	682a      	ldr	r2, [r5, #0]
 80011e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011e8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 80e2 	bne.w	80013b4 <HAL_RCC_OscConfig+0x21c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff f9ae 	bl	8000550 <HAL_GetTick>
 80011f4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e005      	b.n	8001204 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff f9aa 	bl	8000550 <HAL_GetTick>
 80011fc:	1b80      	subs	r0, r0, r6
 80011fe:	2864      	cmp	r0, #100	; 0x64
 8001200:	f200 80f6 	bhi.w	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	039b      	lsls	r3, r3, #14
 8001208:	d4f6      	bmi.n	80011f8 <HAL_RCC_OscConfig+0x60>
 800120a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120c:	079f      	lsls	r7, r3, #30
 800120e:	d528      	bpl.n	8001262 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001210:	4a92      	ldr	r2, [pc, #584]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 8001212:	6891      	ldr	r1, [r2, #8]
 8001214:	f011 0f0c 	tst.w	r1, #12
 8001218:	f000 8090 	beq.w	800133c <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121c:	6891      	ldr	r1, [r2, #8]
 800121e:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001222:	2908      	cmp	r1, #8
 8001224:	f000 8086 	beq.w	8001334 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001228:	68e3      	ldr	r3, [r4, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 810f 	beq.w	800144e <HAL_RCC_OscConfig+0x2b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4d8a      	ldr	r5, [pc, #552]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001238:	f7ff f98a 	bl	8000550 <HAL_GetTick>
 800123c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123e:	e005      	b.n	800124c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff f986 	bl	8000550 <HAL_GetTick>
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	2802      	cmp	r0, #2
 8001248:	f200 80d2 	bhi.w	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	0798      	lsls	r0, r3, #30
 8001250:	d5f6      	bpl.n	8001240 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	682b      	ldr	r3, [r5, #0]
 8001254:	6922      	ldr	r2, [r4, #16]
 8001256:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800125a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800125e:	602b      	str	r3, [r5, #0]
 8001260:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	071a      	lsls	r2, r3, #28
 8001264:	d452      	bmi.n	800130c <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001266:	0758      	lsls	r0, r3, #29
 8001268:	d530      	bpl.n	80012cc <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126a:	4a7c      	ldr	r2, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 800126c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800126e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001272:	d07e      	beq.n	8001372 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8001274:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4d7b      	ldr	r5, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x2cc>)
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	05d9      	lsls	r1, r3, #23
 800127c:	f140 80a8 	bpl.w	80013d0 <HAL_RCC_OscConfig+0x238>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	68a3      	ldr	r3, [r4, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f000 8104 	beq.w	8001490 <HAL_RCC_OscConfig+0x2f8>
 8001288:	2b05      	cmp	r3, #5
 800128a:	f000 80c3 	beq.w	8001414 <HAL_RCC_OscConfig+0x27c>
 800128e:	4d73      	ldr	r5, [pc, #460]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 8001290:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	672a      	str	r2, [r5, #112]	; 0x70
 8001298:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800129a:	f022 0204 	bic.w	r2, r2, #4
 800129e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f040 80c0 	bne.w	8001426 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff f953 	bl	8000550 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012ae:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b0:	e006      	b.n	80012c0 <HAL_RCC_OscConfig+0x128>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff f94d 	bl	8000550 <HAL_GetTick>
 80012b6:	eba0 0008 	sub.w	r0, r0, r8
 80012ba:	42b8      	cmp	r0, r7
 80012bc:	f200 8098 	bhi.w	80013f0 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012c2:	0798      	lsls	r0, r3, #30
 80012c4:	d4f5      	bmi.n	80012b2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	f040 80e8 	bne.w	800149c <HAL_RCC_OscConfig+0x304>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012cc:	69a3      	ldr	r3, [r4, #24]
 80012ce:	b1cb      	cbz	r3, 8001304 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d0:	4d62      	ldr	r5, [pc, #392]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 80012d2:	68aa      	ldr	r2, [r5, #8]
 80012d4:	f002 020c 	and.w	r2, r2, #12
 80012d8:	2a08      	cmp	r2, #8
 80012da:	d036      	beq.n	800134a <HAL_RCC_OscConfig+0x1b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012dc:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012de:	4b62      	ldr	r3, [pc, #392]	; (8001468 <HAL_RCC_OscConfig+0x2d0>)
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e6:	f000 80df 	beq.w	80014a8 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff f931 	bl	8000550 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80012f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f2:	e004      	b.n	80012fe <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff f92c 	bl	8000550 <HAL_GetTick>
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	2802      	cmp	r0, #2
 80012fc:	d878      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	019b      	lsls	r3, r3, #6
 8001302:	d4f7      	bmi.n	80012f4 <HAL_RCC_OscConfig+0x15c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001304:	2000      	movs	r0, #0
}
 8001306:	b002      	add	sp, #8
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130c:	6963      	ldr	r3, [r4, #20]
 800130e:	b303      	cbz	r3, 8001352 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001310:	4b56      	ldr	r3, [pc, #344]	; (800146c <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4d52      	ldr	r5, [pc, #328]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001318:	f7ff f91a 	bl	8000550 <HAL_GetTick>
 800131c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e004      	b.n	800132a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff f916 	bl	8000550 <HAL_GetTick>
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	2802      	cmp	r0, #2
 8001328:	d862      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800132c:	079b      	lsls	r3, r3, #30
 800132e:	d5f7      	bpl.n	8001320 <HAL_RCC_OscConfig+0x188>
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	e798      	b.n	8001266 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001334:	6852      	ldr	r2, [r2, #4]
 8001336:	0256      	lsls	r6, r2, #9
 8001338:	f53f af76 	bmi.w	8001228 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133c:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	0795      	lsls	r5, r2, #30
 8001342:	d522      	bpl.n	800138a <HAL_RCC_OscConfig+0x1f2>
 8001344:	68e2      	ldr	r2, [r4, #12]
 8001346:	2a01      	cmp	r2, #1
 8001348:	d01f      	beq.n	800138a <HAL_RCC_OscConfig+0x1f2>
    return HAL_ERROR;
 800134a:	2001      	movs	r0, #1
}
 800134c:	b002      	add	sp, #8
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001352:	4a46      	ldr	r2, [pc, #280]	; (800146c <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4d41      	ldr	r5, [pc, #260]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 8001356:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001358:	f7ff f8fa 	bl	8000550 <HAL_GetTick>
 800135c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	e004      	b.n	800136a <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff f8f6 	bl	8000550 <HAL_GetTick>
 8001364:	1b80      	subs	r0, r0, r6
 8001366:	2802      	cmp	r0, #2
 8001368:	d842      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800136c:	079f      	lsls	r7, r3, #30
 800136e:	d4f7      	bmi.n	8001360 <HAL_RCC_OscConfig+0x1c8>
 8001370:	e7de      	b.n	8001330 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
 800137c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001386:	2601      	movs	r6, #1
 8001388:	e775      	b.n	8001276 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4934      	ldr	r1, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 800138c:	6920      	ldr	r0, [r4, #16]
 800138e:	680a      	ldr	r2, [r1, #0]
 8001390:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001394:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001398:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	071a      	lsls	r2, r3, #28
 800139c:	f57f af63 	bpl.w	8001266 <HAL_RCC_OscConfig+0xce>
 80013a0:	e7b4      	b.n	800130c <HAL_RCC_OscConfig+0x174>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013b4:	f7ff f8cc 	bl	8000550 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b8:	4d28      	ldr	r5, [pc, #160]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 80013ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013bc:	e004      	b.n	80013c8 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013be:	f7ff f8c7 	bl	8000550 <HAL_GetTick>
 80013c2:	1b80      	subs	r0, r0, r6
 80013c4:	2864      	cmp	r0, #100	; 0x64
 80013c6:	d813      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	039a      	lsls	r2, r3, #14
 80013cc:	d5f7      	bpl.n	80013be <HAL_RCC_OscConfig+0x226>
 80013ce:	e71c      	b.n	800120a <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013d8:	f7ff f8ba 	bl	8000550 <HAL_GetTick>
 80013dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	05da      	lsls	r2, r3, #23
 80013e2:	f53f af4d 	bmi.w	8001280 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff f8b3 	bl	8000550 <HAL_GetTick>
 80013ea:	1bc0      	subs	r0, r0, r7
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f6      	bls.n	80013de <HAL_RCC_OscConfig+0x246>
            return HAL_TIMEOUT;
 80013f0:	2003      	movs	r0, #3
}
 80013f2:	b002      	add	sp, #8
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f8:	684a      	ldr	r2, [r1, #4]
 80013fa:	0250      	lsls	r0, r2, #9
 80013fc:	f57f aee3 	bpl.w	80011c6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	0391      	lsls	r1, r2, #14
 8001406:	f57f af01 	bpl.w	800120c <HAL_RCC_OscConfig+0x74>
 800140a:	6862      	ldr	r2, [r4, #4]
 800140c:	2a00      	cmp	r2, #0
 800140e:	f47f aefd 	bne.w	800120c <HAL_RCC_OscConfig+0x74>
 8001412:	e79a      	b.n	800134a <HAL_RCC_OscConfig+0x1b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
 8001416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001418:	f042 0204 	orr.w	r2, r2, #4
 800141c:	671a      	str	r2, [r3, #112]	; 0x70
 800141e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001426:	f7ff f893 	bl	8000550 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142a:	4d0c      	ldr	r5, [pc, #48]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 800142c:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e005      	b.n	8001440 <HAL_RCC_OscConfig+0x2a8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff f88c 	bl	8000550 <HAL_GetTick>
 8001438:	eba0 0008 	sub.w	r0, r0, r8
 800143c:	42b8      	cmp	r0, r7
 800143e:	d8d7      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001442:	079b      	lsls	r3, r3, #30
 8001444:	d5f6      	bpl.n	8001434 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001446:	2e00      	cmp	r6, #0
 8001448:	f43f af40 	beq.w	80012cc <HAL_RCC_OscConfig+0x134>
 800144c:	e026      	b.n	800149c <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_HSI_DISABLE();
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001450:	4d02      	ldr	r5, [pc, #8]	; (800145c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_DISABLE();
 8001452:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001454:	f7ff f87c 	bl	8000550 <HAL_GetTick>
 8001458:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	e00e      	b.n	800147a <HAL_RCC_OscConfig+0x2e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	42470000 	.word	0x42470000
 8001464:	40007000 	.word	0x40007000
 8001468:	42470060 	.word	0x42470060
 800146c:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff f86e 	bl	8000550 <HAL_GetTick>
 8001474:	1b80      	subs	r0, r0, r6
 8001476:	2802      	cmp	r0, #2
 8001478:	d8ba      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	0799      	lsls	r1, r3, #30
 800147e:	d4f7      	bmi.n	8001470 <HAL_RCC_OscConfig+0x2d8>
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	e6ee      	b.n	8001262 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <HAL_RCC_OscConfig+0x370>)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e791      	b.n	80013b4 <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x370>)
 8001492:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
 800149a:	e7c4      	b.n	8001426 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x370>)
 800149e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	e711      	b.n	80012cc <HAL_RCC_OscConfig+0x134>
        tickstart = HAL_GetTick();
 80014a8:	f7ff f852 	bl	8000550 <HAL_GetTick>
 80014ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e004      	b.n	80014ba <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff f84e 	bl	8000550 <HAL_GetTick>
 80014b4:	1b80      	subs	r0, r0, r6
 80014b6:	2802      	cmp	r0, #2
 80014b8:	d89a      	bhi.n	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	0199      	lsls	r1, r3, #6
 80014be:	d4f7      	bmi.n	80014b0 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c0:	69e3      	ldr	r3, [r4, #28]
 80014c2:	6a27      	ldr	r7, [r4, #32]
 80014c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80014c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80014ca:	4910      	ldr	r1, [pc, #64]	; (800150c <HAL_RCC_OscConfig+0x374>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	4c0e      	ldr	r4, [pc, #56]	; (8001508 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ce:	433b      	orrs	r3, r7
 80014d0:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80014d4:	0852      	lsrs	r2, r2, #1
 80014d6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014da:	3a01      	subs	r2, #1
 80014dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80014e0:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014e4:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80014e6:	f7ff f833 	bl	8000550 <HAL_GetTick>
 80014ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	e005      	b.n	80014fa <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff f82f 	bl	8000550 <HAL_GetTick>
 80014f2:	1b40      	subs	r0, r0, r5
 80014f4:	2802      	cmp	r0, #2
 80014f6:	f63f af7b 	bhi.w	80013f0 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	019a      	lsls	r2, r3, #6
 80014fe:	d5f6      	bpl.n	80014ee <HAL_RCC_OscConfig+0x356>
 8001500:	e700      	b.n	8001304 <HAL_RCC_OscConfig+0x16c>
    return HAL_ERROR;
 8001502:	2001      	movs	r0, #1
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	42470060 	.word	0x42470060

08001510 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001510:	4917      	ldr	r1, [pc, #92]	; (8001570 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001512:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001514:	688b      	ldr	r3, [r1, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b04      	cmp	r3, #4
 800151c:	d01b      	beq.n	8001556 <HAL_RCC_GetSysClockFreq+0x46>
 800151e:	2b08      	cmp	r3, #8
 8001520:	d117      	bne.n	8001552 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001522:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001524:	684b      	ldr	r3, [r1, #4]
 8001526:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152e:	d114      	bne.n	800155a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001530:	6849      	ldr	r1, [r1, #4]
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <HAL_RCC_GetSysClockFreq+0x64>)
 8001534:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001538:	fba1 0100 	umull	r0, r1, r1, r0
 800153c:	f7fe fe5a 	bl	80001f4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_GetSysClockFreq+0x60>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001548:	3301      	adds	r3, #1
 800154a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800154c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001550:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001554:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001556:	4808      	ldr	r0, [pc, #32]	; (8001578 <HAL_RCC_GetSysClockFreq+0x68>)
 8001558:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800155a:	684b      	ldr	r3, [r1, #4]
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <HAL_RCC_GetSysClockFreq+0x68>)
 800155e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001562:	fba3 0100 	umull	r0, r1, r3, r0
 8001566:	2300      	movs	r3, #0
 8001568:	f7fe fe44 	bl	80001f4 <__aeabi_uldivmod>
 800156c:	e7e8      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x30>
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	00f42400 	.word	0x00f42400
 8001578:	017d7840 	.word	0x017d7840

0800157c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800157c:	b160      	cbz	r0, 8001598 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157e:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_RCC_ClockConfig+0x124>)
 8001580:	6813      	ldr	r3, [r2, #0]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	428b      	cmp	r3, r1
 8001588:	d208      	bcs.n	800159c <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	b2cb      	uxtb	r3, r1
 800158c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	4299      	cmp	r1, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001598:	2001      	movs	r0, #1
}
 800159a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	6803      	ldr	r3, [r0, #0]
{
 800159e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a2:	079d      	lsls	r5, r3, #30
 80015a4:	d514      	bpl.n	80015d0 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a6:	075c      	lsls	r4, r3, #29
 80015a8:	d504      	bpl.n	80015b4 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015aa:	4c3e      	ldr	r4, [pc, #248]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 80015ac:	68a2      	ldr	r2, [r4, #8]
 80015ae:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80015b2:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	071a      	lsls	r2, r3, #28
 80015b6:	d504      	bpl.n	80015c2 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4c3a      	ldr	r4, [pc, #232]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 80015ba:	68a2      	ldr	r2, [r4, #8]
 80015bc:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80015c0:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c2:	4c38      	ldr	r4, [pc, #224]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 80015c4:	6885      	ldr	r5, [r0, #8]
 80015c6:	68a2      	ldr	r2, [r4, #8]
 80015c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015cc:	432a      	orrs	r2, r5
 80015ce:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d0:	07df      	lsls	r7, r3, #31
 80015d2:	4604      	mov	r4, r0
 80015d4:	460d      	mov	r5, r1
 80015d6:	d522      	bpl.n	800161e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d8:	6842      	ldr	r2, [r0, #4]
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d05b      	beq.n	8001696 <HAL_RCC_ClockConfig+0x11a>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	1e93      	subs	r3, r2, #2
 80015e0:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 80015e4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	d950      	bls.n	800168a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	0799      	lsls	r1, r3, #30
 80015ea:	d525      	bpl.n	8001638 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ec:	4e2d      	ldr	r6, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 80015ee:	68b3      	ldr	r3, [r6, #8]
 80015f0:	f023 0303 	bic.w	r3, r3, #3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015f8:	f7fe ffaa 	bl	8000550 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001600:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e005      	b.n	8001610 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7fe ffa4 	bl	8000550 <HAL_GetTick>
 8001608:	eba0 0008 	sub.w	r0, r0, r8
 800160c:	42b8      	cmp	r0, r7
 800160e:	d83f      	bhi.n	8001690 <HAL_RCC_ClockConfig+0x114>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	68b3      	ldr	r3, [r6, #8]
 8001612:	6862      	ldr	r2, [r4, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800161c:	d1f2      	bne.n	8001604 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x124>)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	429d      	cmp	r5, r3
 8001628:	d209      	bcs.n	800163e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	b2eb      	uxtb	r3, r5
 800162c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	429d      	cmp	r5, r3
 8001636:	d002      	beq.n	800163e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
 800163a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	075a      	lsls	r2, r3, #29
 8001642:	d506      	bpl.n	8001652 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4917      	ldr	r1, [pc, #92]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 8001646:	68e0      	ldr	r0, [r4, #12]
 8001648:	688a      	ldr	r2, [r1, #8]
 800164a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800164e:	4302      	orrs	r2, r0
 8001650:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001652:	071b      	lsls	r3, r3, #28
 8001654:	d507      	bpl.n	8001666 <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 8001658:	6921      	ldr	r1, [r4, #16]
 800165a:	6893      	ldr	r3, [r2, #8]
 800165c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001660:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001664:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001666:	f7ff ff53 	bl	8001510 <HAL_RCC_GetSysClockFreq>
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 800166c:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_RCC_ClockConfig+0x12c>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_RCC_ClockConfig+0x130>)
 8001672:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 800167c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167e:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001680:	f00c fb42 	bl	800dd08 <HAL_InitTick>
  return HAL_OK;
 8001684:	2000      	movs	r0, #0
 8001686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	0198      	lsls	r0, r3, #6
 800168c:	d4ae      	bmi.n	80015ec <HAL_RCC_ClockConfig+0x70>
 800168e:	e7d3      	b.n	8001638 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001690:	2003      	movs	r0, #3
}
 8001692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_ClockConfig+0x128>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	039e      	lsls	r6, r3, #14
 800169c:	d4a6      	bmi.n	80015ec <HAL_RCC_ClockConfig+0x70>
 800169e:	e7cb      	b.n	8001638 <HAL_RCC_ClockConfig+0xbc>
 80016a0:	40023c00 	.word	0x40023c00
 80016a4:	40023800 	.word	0x40023800
 80016a8:	080127e4 	.word	0x080127e4
 80016ac:	20000010 	.word	0x20000010

080016b0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80016b0:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000010 	.word	0x20000010

080016bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80016c0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80016c2:	4905      	ldr	r1, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016c4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016c8:	6808      	ldr	r0, [r1, #0]
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
}
 80016cc:	40d8      	lsrs	r0, r3
 80016ce:	4770      	bx	lr
 80016d0:	40023800 	.word	0x40023800
 80016d4:	080127f4 	.word	0x080127f4
 80016d8:	20000010 	.word	0x20000010

080016dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016e0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80016e2:	4905      	ldr	r1, [pc, #20]	; (80016f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016e4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016e8:	6808      	ldr	r0, [r1, #0]
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80016ec:	40d8      	lsrs	r0, r3
 80016ee:	4770      	bx	lr
 80016f0:	40023800 	.word	0x40023800
 80016f4:	080127f4 	.word	0x080127f4
 80016f8:	20000010 	.word	0x20000010

080016fc <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016fe:	220f      	movs	r2, #15
 8001700:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001710:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001718:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	08db      	lsrs	r3, r3, #3
{
 800171e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001720:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001724:	4c05      	ldr	r4, [pc, #20]	; (800173c <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001726:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001728:	6823      	ldr	r3, [r4, #0]
}
 800172a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	600b      	str	r3, [r1, #0]
}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_TIM_Base_MspInit>:
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001744:	2800      	cmp	r0, #0
 8001746:	d075      	beq.n	8001834 <HAL_TIM_Base_Init+0xf0>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001748:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{ 
 800174c:	b570      	push	{r4, r5, r6, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 800174e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001752:	4604      	mov	r4, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d068      	beq.n	800182a <HAL_TIM_Base_Init+0xe6>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001758:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800175a:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_TIM_Base_Init+0xf4>)
  htim->State= HAL_TIM_STATE_BUSY;
 800175c:	2202      	movs	r2, #2
 800175e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001762:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8001764:	681a      	ldr	r2, [r3, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001766:	d050      	beq.n	800180a <HAL_TIM_Base_Init+0xc6>
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176c:	d02d      	beq.n	80017ca <HAL_TIM_Base_Init+0x86>
 800176e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8001772:	428b      	cmp	r3, r1
 8001774:	d029      	beq.n	80017ca <HAL_TIM_Base_Init+0x86>
 8001776:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800177a:	428b      	cmp	r3, r1
 800177c:	d025      	beq.n	80017ca <HAL_TIM_Base_Init+0x86>
 800177e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001782:	428b      	cmp	r3, r1
 8001784:	d021      	beq.n	80017ca <HAL_TIM_Base_Init+0x86>
 8001786:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800178a:	428b      	cmp	r3, r1
 800178c:	d01d      	beq.n	80017ca <HAL_TIM_Base_Init+0x86>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800178e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8001792:	428b      	cmp	r3, r1
 8001794:	d02f      	beq.n	80017f6 <HAL_TIM_Base_Init+0xb2>
 8001796:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800179a:	428b      	cmp	r3, r1
 800179c:	d02b      	beq.n	80017f6 <HAL_TIM_Base_Init+0xb2>
 800179e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80017a2:	428b      	cmp	r3, r1
 80017a4:	d027      	beq.n	80017f6 <HAL_TIM_Base_Init+0xb2>
 80017a6:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80017aa:	428b      	cmp	r3, r1
 80017ac:	d023      	beq.n	80017f6 <HAL_TIM_Base_Init+0xb2>
 80017ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80017b2:	428b      	cmp	r3, r1
 80017b4:	d01f      	beq.n	80017f6 <HAL_TIM_Base_Init+0xb2>
 80017b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80017ba:	428b      	cmp	r3, r1
 80017bc:	d01b      	beq.n	80017f6 <HAL_TIM_Base_Init+0xb2>
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017be:	68e0      	ldr	r0, [r4, #12]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017c0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80017c2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017c4:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017c6:	6299      	str	r1, [r3, #40]	; 0x28
 80017c8:	e00f      	b.n	80017ea <HAL_TIM_Base_Init+0xa6>
    tmpcr1 |= Structure->CounterMode;
 80017ca:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017cc:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ce:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017d0:	6860      	ldr	r0, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017d6:	430a      	orrs	r2, r1
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017d8:	4918      	ldr	r1, [pc, #96]	; (800183c <HAL_TIM_Base_Init+0xf8>)
    tmpcr1 &= ~TIM_CR1_CKD;
 80017da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017de:	4332      	orrs	r2, r6
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017e0:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 80017e2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e4:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017e6:	6298      	str	r0, [r3, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017e8:	d01c      	beq.n	8001824 <HAL_TIM_Base_Init+0xe0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017ea:	2201      	movs	r2, #1
 80017ec:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 80017ee:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80017f0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  return HAL_OK;
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017f6:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f8:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017fa:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001800:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001802:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001804:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001806:	6299      	str	r1, [r3, #40]	; 0x28
 8001808:	e7ef      	b.n	80017ea <HAL_TIM_Base_Init+0xa6>
    tmpcr1 |= Structure->CounterMode;
 800180a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800180c:	6920      	ldr	r0, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800180e:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001810:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001812:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001816:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001818:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181c:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800181e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001820:	62dd      	str	r5, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001822:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001824:	6962      	ldr	r2, [r4, #20]
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	e7df      	b.n	80017ea <HAL_TIM_Base_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 800182a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800182e:	f7ff ff87 	bl	8001740 <HAL_TIM_Base_MspInit>
 8001832:	e791      	b.n	8001758 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	4770      	bx	lr
 8001838:	40010000 	.word	0x40010000
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001840:	6803      	ldr	r3, [r0, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	2000      	movs	r0, #0
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <HAL_TIM_OC_DelayElapsedCallback>:
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <HAL_TIM_IC_CaptureCallback>:
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <HAL_TIM_TriggerCallback>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001868:	6803      	ldr	r3, [r0, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	0791      	lsls	r1, r2, #30
{
 800186e:	b510      	push	{r4, lr}
 8001870:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001872:	d502      	bpl.n	800187a <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	0792      	lsls	r2, r2, #30
 8001878:	d462      	bmi.n	8001940 <HAL_TIM_IRQHandler+0xd8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	0750      	lsls	r0, r2, #29
 800187e:	d502      	bpl.n	8001886 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	0751      	lsls	r1, r2, #29
 8001884:	d449      	bmi.n	800191a <HAL_TIM_IRQHandler+0xb2>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	0712      	lsls	r2, r2, #28
 800188a:	d502      	bpl.n	8001892 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	0710      	lsls	r0, r2, #28
 8001890:	d431      	bmi.n	80018f6 <HAL_TIM_IRQHandler+0x8e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	06d2      	lsls	r2, r2, #27
 8001896:	d502      	bpl.n	800189e <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	06d0      	lsls	r0, r2, #27
 800189c:	d418      	bmi.n	80018d0 <HAL_TIM_IRQHandler+0x68>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	07d1      	lsls	r1, r2, #31
 80018a2:	d502      	bpl.n	80018aa <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	07d2      	lsls	r2, r2, #31
 80018a8:	d46b      	bmi.n	8001982 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	0610      	lsls	r0, r2, #24
 80018ae:	d502      	bpl.n	80018b6 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	0611      	lsls	r1, r2, #24
 80018b4:	d46d      	bmi.n	8001992 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	0652      	lsls	r2, r2, #25
 80018ba:	d502      	bpl.n	80018c2 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	0650      	lsls	r0, r2, #25
 80018c0:	d457      	bmi.n	8001972 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	0691      	lsls	r1, r2, #26
 80018c6:	d502      	bpl.n	80018ce <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	0692      	lsls	r2, r2, #26
 80018cc:	d449      	bmi.n	8001962 <HAL_TIM_IRQHandler+0xfa>
 80018ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018d0:	f06f 0210 	mvn.w	r2, #16
 80018d4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018da:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018de:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80018e0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018e2:	d161      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e4:	f7ff ffb8 	bl	8001858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff ffb9 	bl	8001860 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	2200      	movs	r2, #0
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	7622      	strb	r2, [r4, #24]
 80018f4:	e7d3      	b.n	800189e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018f6:	f06f 0208 	mvn.w	r2, #8
 80018fa:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018fe:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001900:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001902:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001904:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001906:	d155      	bne.n	80019b4 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001908:	f7ff ffa6 	bl	8001858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff ffa7 	bl	8001860 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	2200      	movs	r2, #0
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	7622      	strb	r2, [r4, #24]
 8001918:	e7bb      	b.n	8001892 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800191a:	f06f 0204 	mvn.w	r2, #4
 800191e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001920:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001922:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001924:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001928:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800192a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800192c:	d13f      	bne.n	80019ae <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	f7ff ff93 	bl	8001858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff ff94 	bl	8001860 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001938:	2200      	movs	r2, #0
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	7622      	strb	r2, [r4, #24]
 800193e:	e7a2      	b.n	8001886 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001940:	f06f 0202 	mvn.w	r2, #2
 8001944:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001946:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001948:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800194a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800194c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800194e:	d128      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001950:	f7ff ff82 	bl	8001858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ff83 	bl	8001860 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195a:	2200      	movs	r2, #0
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	7622      	strb	r2, [r4, #24]
 8001960:	e78b      	b.n	800187a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001962:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001966:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001968:	611a      	str	r2, [r3, #16]
}
 800196a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800196e:	f000 b825 	b.w	80019bc <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001972:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001976:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff ff73 	bl	8001864 <HAL_TIM_TriggerCallback>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	e79f      	b.n	80018c2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001982:	f06f 0201 	mvn.w	r2, #1
 8001986:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001988:	4620      	mov	r0, r4
 800198a:	f00c f98f 	bl	800dcac <HAL_TIM_PeriodElapsedCallback>
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	e78b      	b.n	80018aa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001992:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001996:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001998:	4620      	mov	r0, r4
 800199a:	f000 f811 	bl	80019c0 <HAL_TIMEx_BreakCallback>
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	e789      	b.n	80018b6 <HAL_TIM_IRQHandler+0x4e>
          HAL_TIM_IC_CaptureCallback(htim);
 80019a2:	f7ff ff5b 	bl	800185c <HAL_TIM_IC_CaptureCallback>
 80019a6:	e7d8      	b.n	800195a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80019a8:	f7ff ff58 	bl	800185c <HAL_TIM_IC_CaptureCallback>
 80019ac:	e79f      	b.n	80018ee <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_IC_CaptureCallback(htim);
 80019ae:	f7ff ff55 	bl	800185c <HAL_TIM_IC_CaptureCallback>
 80019b2:	e7c1      	b.n	8001938 <HAL_TIM_IRQHandler+0xd0>
        HAL_TIM_IC_CaptureCallback(htim);
 80019b4:	f7ff ff52 	bl	800185c <HAL_TIM_IC_CaptureCallback>
 80019b8:	e7ab      	b.n	8001912 <HAL_TIM_IRQHandler+0xaa>
 80019ba:	bf00      	nop

080019bc <HAL_TIMEx_CommutationCallback>:
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80019c8:	6804      	ldr	r4, [r0, #0]
 80019ca:	6922      	ldr	r2, [r4, #16]
{
 80019cc:	4682      	mov	sl, r0

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019ce:	68c0      	ldr	r0, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019d0:	f8da 101c 	ldr.w	r1, [sl, #28]
 80019d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80019d8:	f8da 6010 	ldr.w	r6, [sl, #16]
 80019dc:	f8da 5014 	ldr.w	r5, [sl, #20]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80019e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019e4:	4302      	orrs	r2, r0
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80019e6:	6122      	str	r2, [r4, #16]
  tmpreg = huart->Instance->CR1;
 80019e8:	68e2      	ldr	r2, [r4, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80019ea:	f8da 0018 	ldr.w	r0, [sl, #24]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ee:	4333      	orrs	r3, r6
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019f0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019f4:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80019f6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019fa:	430b      	orrs	r3, r1
 80019fc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80019fe:	60e3      	str	r3, [r4, #12]
  tmpreg = huart->Instance->CR3;
 8001a00:	6963      	ldr	r3, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001a06:	4303      	orrs	r3, r0
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a08:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a0c:	6163      	str	r3, [r4, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a0e:	4bab      	ldr	r3, [pc, #684]	; (8001cbc <UART_SetConfig+0x2f8>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a10:	d061      	beq.n	8001ad6 <UART_SetConfig+0x112>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a12:	429c      	cmp	r4, r3
 8001a14:	f000 8101 	beq.w	8001c1a <UART_SetConfig+0x256>
 8001a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a1c:	429c      	cmp	r4, r3
 8001a1e:	f000 80fc 	beq.w	8001c1a <UART_SetConfig+0x256>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a22:	f7ff fe4b 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001a26:	4fa6      	ldr	r7, [pc, #664]	; (8001cc0 <UART_SetConfig+0x2fc>)
 8001a28:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001a2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	fba7 2303 	umull	r2, r3, r7, r3
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	011d      	lsls	r5, r3, #4
 8001a42:	f7ff fe3b 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001a46:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001a4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a54:	fbb0 f6f3 	udiv	r6, r0, r3
 8001a58:	f7ff fe30 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001a5c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a64:	0093      	lsls	r3, r2, #2
 8001a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6e:	fba7 2303 	umull	r2, r3, r7, r3
 8001a72:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	fb09 6313 	mls	r3, r9, r3, r6
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	3332      	adds	r3, #50	; 0x32
 8001a80:	fba7 2303 	umull	r2, r3, r7, r3
 8001a84:	095b      	lsrs	r3, r3, #5
 8001a86:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001a8a:	f7ff fe17 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001a8e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001a92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a96:	0093      	lsls	r3, r2, #2
 8001a98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a9c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001aa0:	f7ff fe0c 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001aa4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001aa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ab2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ab6:	fba7 3000 	umull	r3, r0, r7, r0
 8001aba:	0940      	lsrs	r0, r0, #5
 8001abc:	fb09 8310 	mls	r3, r9, r0, r8
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	3332      	adds	r3, #50	; 0x32
 8001ac4:	fba7 2303 	umull	r2, r3, r7, r3
 8001ac8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001acc:	4333      	orrs	r3, r6
 8001ace:	442b      	add	r3, r5
 8001ad0:	60a3      	str	r3, [r4, #8]
 8001ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	d05d      	beq.n	8001b96 <UART_SetConfig+0x1d2>
 8001ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	d059      	beq.n	8001b96 <UART_SetConfig+0x1d2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ae2:	f7ff fdeb 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001ae6:	4f76      	ldr	r7, [pc, #472]	; (8001cc0 <UART_SetConfig+0x2fc>)
 8001ae8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	fba7 2303 	umull	r2, r3, r7, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	011e      	lsls	r6, r3, #4
 8001b02:	f7ff fddb 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001b06:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001b0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b14:	fbb0 f5f3 	udiv	r5, r0, r3
 8001b18:	f7ff fdd0 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001b1c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b24:	0053      	lsls	r3, r2, #1
 8001b26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	fba7 2303 	umull	r2, r3, r7, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b38:	fb09 5313 	mls	r3, r9, r3, r5
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	3332      	adds	r3, #50	; 0x32
 8001b40:	fba7 2303 	umull	r2, r3, r7, r3
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8001b4a:	f7ff fdb7 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001b4e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b5a:	0053      	lsls	r3, r2, #1
 8001b5c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b60:	f7ff fdac 	bl	80016bc <HAL_RCC_GetPCLK1Freq>
 8001b64:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001b68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	fba7 2303 	umull	r2, r3, r7, r3
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	fb09 8313 	mls	r3, r9, r3, r8
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	3332      	adds	r3, #50	; 0x32
 8001b84:	fba7 2303 	umull	r2, r3, r7, r3
 8001b88:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b8c:	4433      	add	r3, r6
 8001b8e:	442b      	add	r3, r5
 8001b90:	60a3      	str	r3, [r4, #8]
 8001b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b96:	f7ff fda1 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001b9a:	4f49      	ldr	r7, [pc, #292]	; (8001cc0 <UART_SetConfig+0x2fc>)
 8001b9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	fba7 2303 	umull	r2, r3, r7, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	011e      	lsls	r6, r3, #4
 8001bb6:	f7ff fd91 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001bba:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001bbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bc8:	fbb0 f5f3 	udiv	r5, r0, r3
 8001bcc:	f7ff fd86 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001bd0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd8:	0053      	lsls	r3, r2, #1
 8001bda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be2:	fba7 2303 	umull	r2, r3, r7, r3
 8001be6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	fb09 5313 	mls	r3, r9, r3, r5
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	3332      	adds	r3, #50	; 0x32
 8001bf4:	fba7 2303 	umull	r2, r3, r7, r3
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8001bfe:	f7ff fd6d 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c02:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001c06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c0a:	0053      	lsls	r3, r2, #1
 8001c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c10:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c14:	f7ff fd62 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c18:	e7a4      	b.n	8001b64 <UART_SetConfig+0x1a0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c1a:	f7ff fd5f 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c1e:	4f28      	ldr	r7, [pc, #160]	; (8001cc0 <UART_SetConfig+0x2fc>)
 8001c20:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	fba7 2303 	umull	r2, r3, r7, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	011d      	lsls	r5, r3, #4
 8001c3a:	f7ff fd4f 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c3e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c4c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001c50:	f7ff fd44 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c54:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c5c:	0093      	lsls	r3, r2, #2
 8001c5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	fba7 2303 	umull	r2, r3, r7, r3
 8001c6a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	fb09 6313 	mls	r3, r9, r3, r6
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	3332      	adds	r3, #50	; 0x32
 8001c78:	fba7 2303 	umull	r2, r3, r7, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001c82:	f7ff fd2b 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c86:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001c8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c8e:	0093      	lsls	r3, r2, #2
 8001c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c94:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c98:	f7ff fd20 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8001c9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	fba7 2303 	umull	r2, r3, r7, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	fb09 8313 	mls	r3, r9, r3, r8
 8001cb8:	e702      	b.n	8001ac0 <UART_SetConfig+0xfc>
 8001cba:	bf00      	nop
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	51eb851f 	.word	0x51eb851f

08001cc4 <HAL_UART_Init>:
  if(huart == NULL)
 8001cc4:	b360      	cbz	r0, 8001d20 <HAL_UART_Init+0x5c>
{
 8001cc6:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001cc8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ccc:	4604      	mov	r4, r0
 8001cce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cd2:	b303      	cbz	r3, 8001d16 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8001cd4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001cd6:	2324      	movs	r3, #36	; 0x24
 8001cd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001cdc:	68d3      	ldr	r3, [r2, #12]
 8001cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ce2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fe6d 	bl	80019c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cfa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001cfc:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfe:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 8001d00:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8001d02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d06:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8001d08:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d0c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d10:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001d16:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d1a:	f00c fa2f 	bl	800e17c <HAL_UART_MspInit>
 8001d1e:	e7d9      	b.n	8001cd4 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8001d20:	2001      	movs	r0, #1
 8001d22:	4770      	bx	lr

08001d24 <HAL_UART_TxCpltCallback>:
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <HAL_UART_RxCpltCallback>:
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <HAL_UART_ErrorCallback>:
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop

08001d30 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
{
 8001d34:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001d36:	0715      	lsls	r5, r2, #28
{
 8001d38:	4604      	mov	r4, r0
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d3a:	68d8      	ldr	r0, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d3c:	6959      	ldr	r1, [r3, #20]
  if(errorflags == RESET)
 8001d3e:	d04f      	beq.n	8001de0 <HAL_UART_IRQHandler+0xb0>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d40:	f011 0101 	ands.w	r1, r1, #1
 8001d44:	d078      	beq.n	8001e38 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d46:	07d5      	lsls	r5, r2, #31
 8001d48:	d505      	bpl.n	8001d56 <HAL_UART_IRQHandler+0x26>
 8001d4a:	05c6      	lsls	r6, r0, #23
 8001d4c:	d503      	bpl.n	8001d56 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d4e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001d50:	f045 0501 	orr.w	r5, r5, #1
 8001d54:	63e5      	str	r5, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d56:	0755      	lsls	r5, r2, #29
 8001d58:	f140 80a0 	bpl.w	8001e9c <HAL_UART_IRQHandler+0x16c>
 8001d5c:	2900      	cmp	r1, #0
 8001d5e:	f000 80ab 	beq.w	8001eb8 <HAL_UART_IRQHandler+0x188>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d62:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d64:	f041 0102 	orr.w	r1, r1, #2
 8001d68:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d6a:	0791      	lsls	r1, r2, #30
 8001d6c:	f140 809c 	bpl.w	8001ea8 <HAL_UART_IRQHandler+0x178>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d72:	0716      	lsls	r6, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d74:	f041 0104 	orr.w	r1, r1, #4
 8001d78:	63e1      	str	r1, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d7a:	f100 8098 	bmi.w	8001eae <HAL_UART_IRQHandler+0x17e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d80:	2900      	cmp	r1, #0
 8001d82:	d02c      	beq.n	8001dde <HAL_UART_IRQHandler+0xae>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d84:	0695      	lsls	r5, r2, #26
 8001d86:	d506      	bpl.n	8001d96 <HAL_UART_IRQHandler+0x66>
 8001d88:	0681      	lsls	r1, r0, #26
 8001d8a:	d504      	bpl.n	8001d96 <HAL_UART_IRQHandler+0x66>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001d8c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001d90:	2a22      	cmp	r2, #34	; 0x22
 8001d92:	f000 80a4 	beq.w	8001ede <HAL_UART_IRQHandler+0x1ae>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d96:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d9a:	070a      	lsls	r2, r1, #28
 8001d9c:	d403      	bmi.n	8001da6 <HAL_UART_IRQHandler+0x76>
 8001d9e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001da2:	f000 80c0 	beq.w	8001f26 <HAL_UART_IRQHandler+0x1f6>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dae:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001db0:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8001db8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	0656      	lsls	r6, r2, #25
 8001dc0:	f140 8084 	bpl.w	8001ecc <HAL_UART_IRQHandler+0x19c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001dc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dcc:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d07c      	beq.n	8001ecc <HAL_UART_IRQHandler+0x19c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dd2:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <HAL_UART_IRQHandler+0x280>)
 8001dd4:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd6:	f7fe fc27 	bl	8000628 <HAL_DMA_Abort_IT>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d17a      	bne.n	8001ed4 <HAL_UART_IRQHandler+0x1a4>
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001de0:	0691      	lsls	r1, r2, #26
 8001de2:	d52c      	bpl.n	8001e3e <HAL_UART_IRQHandler+0x10e>
 8001de4:	0686      	lsls	r6, r0, #26
 8001de6:	d52a      	bpl.n	8001e3e <HAL_UART_IRQHandler+0x10e>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001de8:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001dec:	2a22      	cmp	r2, #34	; 0x22
 8001dee:	d1f6      	bne.n	8001dde <HAL_UART_IRQHandler+0xae>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001df0:	68a2      	ldr	r2, [r4, #8]
 8001df2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001df6:	f000 80a3 	beq.w	8001f40 <HAL_UART_IRQHandler+0x210>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001dfa:	6922      	ldr	r2, [r4, #16]
 8001dfc:	2a00      	cmp	r2, #0
 8001dfe:	f040 8097 	bne.w	8001f30 <HAL_UART_IRQHandler+0x200>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	1c51      	adds	r1, r2, #1
 8001e08:	62a1      	str	r1, [r4, #40]	; 0x28
 8001e0a:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8001e0c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e2      	bne.n	8001dde <HAL_UART_IRQHandler+0xae>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e20:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e22:	695a      	ldr	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001e24:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	615a      	str	r2, [r3, #20]
      HAL_UART_RxCpltCallback(huart);
 8001e2c:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8001e2e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001e32:	f7ff ff79 	bl	8001d28 <HAL_UART_RxCpltCallback>
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e38:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001e3c:	d183      	bne.n	8001d46 <HAL_UART_IRQHandler+0x16>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e3e:	0615      	lsls	r5, r2, #24
 8001e40:	d40e      	bmi.n	8001e60 <HAL_UART_IRQHandler+0x130>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	d5cb      	bpl.n	8001dde <HAL_UART_IRQHandler+0xae>
 8001e46:	0646      	lsls	r6, r0, #25
 8001e48:	d5c9      	bpl.n	8001dde <HAL_UART_IRQHandler+0xae>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e4a:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e4c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e52:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001e54:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8001e56:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e5a:	f7ff ff63 	bl	8001d24 <HAL_UART_TxCpltCallback>
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e60:	0601      	lsls	r1, r0, #24
 8001e62:	d5ee      	bpl.n	8001e42 <HAL_UART_IRQHandler+0x112>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e64:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001e68:	2a21      	cmp	r2, #33	; 0x21
 8001e6a:	d1b8      	bne.n	8001dde <HAL_UART_IRQHandler+0xae>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e6c:	68a2      	ldr	r2, [r4, #8]
 8001e6e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001e72:	6a22      	ldr	r2, [r4, #32]
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e74:	d06f      	beq.n	8001f56 <HAL_UART_IRQHandler+0x226>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e76:	1c51      	adds	r1, r2, #1
 8001e78:	6221      	str	r1, [r4, #32]
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0U)
 8001e7e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001e80:	3a01      	subs	r2, #1
 8001e82:	b292      	uxth	r2, r2
 8001e84:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d1a9      	bne.n	8001dde <HAL_UART_IRQHandler+0xae>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e90:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e9c:	0795      	lsls	r5, r2, #30
 8001e9e:	d50e      	bpl.n	8001ebe <HAL_UART_IRQHandler+0x18e>
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	f47f af65 	bne.w	8001d70 <HAL_UART_IRQHandler+0x40>
 8001ea6:	e76a      	b.n	8001d7e <HAL_UART_IRQHandler+0x4e>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ea8:	0711      	lsls	r1, r2, #28
 8001eaa:	f57f af68 	bpl.w	8001d7e <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001eb0:	f041 0108 	orr.w	r1, r1, #8
 8001eb4:	63e1      	str	r1, [r4, #60]	; 0x3c
 8001eb6:	e762      	b.n	8001d7e <HAL_UART_IRQHandler+0x4e>
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eb8:	0795      	lsls	r5, r2, #30
 8001eba:	f53f af60 	bmi.w	8001d7e <HAL_UART_IRQHandler+0x4e>
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ebe:	0716      	lsls	r6, r2, #28
 8001ec0:	f57f af5d 	bpl.w	8001d7e <HAL_UART_IRQHandler+0x4e>
 8001ec4:	2900      	cmp	r1, #0
 8001ec6:	f43f af5a 	beq.w	8001d7e <HAL_UART_IRQHandler+0x4e>
 8001eca:	e7f0      	b.n	8001eae <HAL_UART_IRQHandler+0x17e>
            HAL_UART_ErrorCallback(huart);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff2d 	bl	8001d2c <HAL_UART_ErrorCallback>
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ed4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001eda:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001edc:	4718      	bx	r3
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ede:	68a2      	ldr	r2, [r4, #8]
 8001ee0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001ee4:	d050      	beq.n	8001f88 <HAL_UART_IRQHandler+0x258>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ee6:	6922      	ldr	r2, [r4, #16]
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d13d      	bne.n	8001f68 <HAL_UART_IRQHandler+0x238>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	1c51      	adds	r1, r2, #1
 8001ef2:	62a1      	str	r1, [r4, #40]	; 0x28
 8001ef4:	7013      	strb	r3, [r2, #0]
 8001ef6:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 8001ef8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8001efa:	3a01      	subs	r2, #1
 8001efc:	b292      	uxth	r2, r2
 8001efe:	85e2      	strh	r2, [r4, #46]	; 0x2e
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	f47f af48 	bne.w	8001d96 <HAL_UART_IRQHandler+0x66>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f0c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f0e:	695a      	ldr	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f10:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	615a      	str	r2, [r3, #20]
      HAL_UART_RxCpltCallback(huart);
 8001f18:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8001f1a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001f1e:	f7ff ff03 	bl	8001d28 <HAL_UART_RxCpltCallback>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	e737      	b.n	8001d96 <HAL_UART_IRQHandler+0x66>
        HAL_UART_ErrorCallback(huart);
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ff00 	bl	8001d2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2c:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f38:	1c51      	adds	r1, r2, #1
 8001f3a:	62a1      	str	r1, [r4, #40]	; 0x28
 8001f3c:	7013      	strb	r3, [r2, #0]
 8001f3e:	e765      	b.n	8001e0c <HAL_UART_IRQHandler+0xdc>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f40:	6921      	ldr	r1, [r4, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001f42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f44:	b9c9      	cbnz	r1, 8001f7a <HAL_UART_IRQHandler+0x24a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8001f4e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8001f52:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f54:	e75a      	b.n	8001e0c <HAL_UART_IRQHandler+0xdc>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f56:	8811      	ldrh	r1, [r2, #0]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f58:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f5a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f5e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f60:	b9e0      	cbnz	r0, 8001f9c <HAL_UART_IRQHandler+0x26c>
        huart->pTxBuffPtr += 2U;
 8001f62:	3202      	adds	r2, #2
 8001f64:	6222      	str	r2, [r4, #32]
 8001f66:	e78a      	b.n	8001e7e <HAL_UART_IRQHandler+0x14e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f70:	1c51      	adds	r1, r2, #1
 8001f72:	62a1      	str	r1, [r4, #40]	; 0x28
 8001f74:	7013      	strb	r3, [r2, #0]
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	e7be      	b.n	8001ef8 <HAL_UART_IRQHandler+0x1c8>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	b2ca      	uxtb	r2, r1
 8001f80:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f86:	e741      	b.n	8001e0c <HAL_UART_IRQHandler+0xdc>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f88:	6921      	ldr	r1, [r4, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001f8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f8c:	b949      	cbnz	r1, 8001fa2 <HAL_UART_IRQHandler+0x272>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f94:	f822 1b02 	strh.w	r1, [r2], #2
        huart->pRxBuffPtr += 2U;
 8001f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f9a:	e7ad      	b.n	8001ef8 <HAL_UART_IRQHandler+0x1c8>
        huart->pTxBuffPtr += 1U;
 8001f9c:	3201      	adds	r2, #1
 8001f9e:	6222      	str	r2, [r4, #32]
 8001fa0:	e76d      	b.n	8001e7e <HAL_UART_IRQHandler+0x14e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	b2c9      	uxtb	r1, r1
 8001fa6:	f822 1b01 	strh.w	r1, [r2], #1
        huart->pRxBuffPtr += 1U;
 8001faa:	62a2      	str	r2, [r4, #40]	; 0x28
 8001fac:	e7a4      	b.n	8001ef8 <HAL_UART_IRQHandler+0x1c8>
 8001fae:	bf00      	nop
 8001fb0:	08001fb5 	.word	0x08001fb5

08001fb4 <UART_DMAAbortOnError>:
{
 8001fb4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8001fbc:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8001fbe:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001fc0:	f7ff feb4 	bl	8001d2c <HAL_UART_ErrorCallback>
 8001fc4:	bd08      	pop	{r3, pc}
 8001fc6:	bf00      	nop

08001fc8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001fc8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001fca:	f001 fae7 	bl	800359c <vTaskStartScheduler>
  
  return osOK;
}
 8001fce:	2000      	movs	r0, #0
 8001fd0:	bd08      	pop	{r3, pc}
 8001fd2:	bf00      	nop

08001fd4 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fd4:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8001fd8:	b90b      	cbnz	r3, 8001fde <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8001fda:	f001 bb25 	b.w	8003628 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 8001fde:	f001 bb29 	b.w	8003634 <xTaskGetTickCountFromISR>
 8001fe2:	bf00      	nop

08001fe4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001fe4:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fe6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8001fea:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001fec:	2c84      	cmp	r4, #132	; 0x84
{
 8001fee:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 8001ff0:	bf14      	ite	ne
 8001ff2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ff4:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ff6:	ad03      	add	r5, sp, #12
{
 8001ff8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ffa:	6840      	ldr	r0, [r0, #4]
 8001ffc:	6811      	ldr	r1, [r2, #0]
 8001ffe:	8a12      	ldrh	r2, [r2, #16]
 8002000:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002004:	f001 f99e 	bl	8003344 <xTaskCreate>
 8002008:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800200a:	bf0c      	ite	eq
 800200c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800200e:	2000      	movne	r0, #0
}
 8002010:	b005      	add	sp, #20
 8002012:	bd30      	pop	{r4, r5, pc}

08002014 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002014:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002016:	2800      	cmp	r0, #0
 8002018:	bf08      	it	eq
 800201a:	2001      	moveq	r0, #1
 800201c:	f001 fc4c 	bl	80038b8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002020:	2000      	movs	r0, #0
 8002022:	bd08      	pop	{r3, pc}

08002024 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002024:	2001      	movs	r0, #1
 8002026:	f000 be45 	b.w	8002cb4 <xQueueCreateMutex>
 800202a:	bf00      	nop

0800202c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800202c:	b510      	push	{r4, lr}
 800202e:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002030:	2400      	movs	r4, #0
 8002032:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002034:	b1e8      	cbz	r0, 8002072 <osMutexWait+0x46>
 8002036:	460a      	mov	r2, r1
 8002038:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800203c:	b93b      	cbnz	r3, 800204e <osMutexWait+0x22>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800203e:	4619      	mov	r1, r3
 8002040:	f000 ff26 	bl	8002e90 <xQueueGenericReceive>
 8002044:	2801      	cmp	r0, #1
 8002046:	d017      	beq.n	8002078 <osMutexWait+0x4c>
      return osErrorOS;
 8002048:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 800204a:	b002      	add	sp, #8
 800204c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800204e:	aa01      	add	r2, sp, #4
 8002050:	4621      	mov	r1, r4
 8002052:	f001 f87f 	bl	8003154 <xQueueReceiveFromISR>
 8002056:	2801      	cmp	r0, #1
 8002058:	d1f6      	bne.n	8002048 <osMutexWait+0x1c>
	portEND_SWITCHING_ISR(taskWoken);
 800205a:	9b01      	ldr	r3, [sp, #4]
 800205c:	b163      	cbz	r3, 8002078 <osMutexWait+0x4c>
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <osMutexWait+0x50>)
 8002060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	f3bf 8f6f 	isb	sy
  return osOK;
 800206e:	4620      	mov	r0, r4
 8002070:	e7eb      	b.n	800204a <osMutexWait+0x1e>
    return osErrorParameter;
 8002072:	2080      	movs	r0, #128	; 0x80
}
 8002074:	b002      	add	sp, #8
 8002076:	bd10      	pop	{r4, pc}
  return osOK;
 8002078:	2000      	movs	r0, #0
 800207a:	e7e6      	b.n	800204a <osMutexWait+0x1e>
 800207c:	e000ed04 	.word	0xe000ed04

08002080 <osMutexRelease>:
 8002080:	b510      	push	{r4, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	2400      	movs	r4, #0
 8002086:	9401      	str	r4, [sp, #4]
 8002088:	f3ef 8305 	mrs	r3, IPSR
 800208c:	b13b      	cbz	r3, 800209e <osMutexRelease+0x1e>
 800208e:	a901      	add	r1, sp, #4
 8002090:	f000 fea8 	bl	8002de4 <xQueueGiveFromISR>
 8002094:	2801      	cmp	r0, #1
 8002096:	d00b      	beq.n	80020b0 <osMutexRelease+0x30>
 8002098:	20ff      	movs	r0, #255	; 0xff
 800209a:	b002      	add	sp, #8
 800209c:	bd10      	pop	{r4, pc}
 800209e:	461a      	mov	r2, r3
 80020a0:	4619      	mov	r1, r3
 80020a2:	f000 fcb1 	bl	8002a08 <xQueueGenericSend>
 80020a6:	2801      	cmp	r0, #1
 80020a8:	d1f6      	bne.n	8002098 <osMutexRelease+0x18>
 80020aa:	2000      	movs	r0, #0
 80020ac:	b002      	add	sp, #8
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f9      	beq.n	80020aa <osMutexRelease+0x2a>
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <osMutexRelease+0x4c>)
 80020b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	4620      	mov	r0, r4
 80020c8:	e7e7      	b.n	800209a <osMutexRelease+0x1a>
 80020ca:	bf00      	nop
 80020cc:	e000ed04 	.word	0xe000ed04

080020d0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80020d0:	2901      	cmp	r1, #1
{ 
 80020d2:	b510      	push	{r4, lr}
  if (count == 1) {
 80020d4:	d10d      	bne.n	80020f2 <osSemaphoreCreate+0x22>
 80020d6:	4608      	mov	r0, r1
    vSemaphoreCreateBinary(sema);
 80020d8:	2203      	movs	r2, #3
 80020da:	2100      	movs	r1, #0
 80020dc:	f000 fc58 	bl	8002990 <xQueueGenericCreate>
 80020e0:	4604      	mov	r4, r0
 80020e2:	b120      	cbz	r0, 80020ee <osSemaphoreCreate+0x1e>
 80020e4:	2300      	movs	r3, #0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4619      	mov	r1, r3
 80020ea:	f000 fc8d 	bl	8002a08 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80020ee:	4620      	mov	r0, r4
 80020f0:	bd10      	pop	{r4, pc}
    return NULL;
 80020f2:	2400      	movs	r4, #0
}
 80020f4:	4620      	mov	r0, r4
 80020f6:	bd10      	pop	{r4, pc}

080020f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80020fc:	2400      	movs	r4, #0
 80020fe:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002100:	b1e8      	cbz	r0, 800213e <osSemaphoreWait+0x46>
 8002102:	460a      	mov	r2, r1
 8002104:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002108:	b93b      	cbnz	r3, 800211a <osSemaphoreWait+0x22>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800210a:	4619      	mov	r1, r3
 800210c:	f000 fec0 	bl	8002e90 <xQueueGenericReceive>
 8002110:	2801      	cmp	r0, #1
 8002112:	d017      	beq.n	8002144 <osSemaphoreWait+0x4c>
      return osErrorOS;
 8002114:	20ff      	movs	r0, #255	; 0xff
    return osErrorOS;
  }
  
  return osOK;
}
 8002116:	b002      	add	sp, #8
 8002118:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800211a:	aa01      	add	r2, sp, #4
 800211c:	4621      	mov	r1, r4
 800211e:	f001 f819 	bl	8003154 <xQueueReceiveFromISR>
 8002122:	2801      	cmp	r0, #1
 8002124:	d1f6      	bne.n	8002114 <osSemaphoreWait+0x1c>
	portEND_SWITCHING_ISR(taskWoken);
 8002126:	9b01      	ldr	r3, [sp, #4]
 8002128:	b163      	cbz	r3, 8002144 <osSemaphoreWait+0x4c>
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <osSemaphoreWait+0x50>)
 800212c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f3bf 8f4f 	dsb	sy
 8002136:	f3bf 8f6f 	isb	sy
  return osOK;
 800213a:	4620      	mov	r0, r4
 800213c:	e7eb      	b.n	8002116 <osSemaphoreWait+0x1e>
    return osErrorParameter;
 800213e:	2080      	movs	r0, #128	; 0x80
}
 8002140:	b002      	add	sp, #8
 8002142:	bd10      	pop	{r4, pc}
  return osOK;
 8002144:	2000      	movs	r0, #0
 8002146:	e7e6      	b.n	8002116 <osSemaphoreWait+0x1e>
 8002148:	e000ed04 	.word	0xe000ed04

0800214c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800214c:	b510      	push	{r4, lr}
 800214e:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002150:	2400      	movs	r4, #0
 8002152:	9401      	str	r4, [sp, #4]
 8002154:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8002158:	b13b      	cbz	r3, 800216a <osSemaphoreRelease+0x1e>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800215a:	a901      	add	r1, sp, #4
 800215c:	f000 fe42 	bl	8002de4 <xQueueGiveFromISR>
 8002160:	2801      	cmp	r0, #1
 8002162:	d00b      	beq.n	800217c <osSemaphoreRelease+0x30>
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
      result = osErrorOS;
 8002164:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8002166:	b002      	add	sp, #8
 8002168:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800216a:	461a      	mov	r2, r3
 800216c:	4619      	mov	r1, r3
 800216e:	f000 fc4b 	bl	8002a08 <xQueueGenericSend>
 8002172:	2801      	cmp	r0, #1
 8002174:	d1f6      	bne.n	8002164 <osSemaphoreRelease+0x18>
  osStatus result = osOK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	b002      	add	sp, #8
 800217a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800217c:	9b01      	ldr	r3, [sp, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f9      	beq.n	8002176 <osSemaphoreRelease+0x2a>
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <osSemaphoreRelease+0x4c>)
 8002184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002192:	4620      	mov	r0, r4
 8002194:	e7e7      	b.n	8002166 <osSemaphoreRelease+0x1a>
 8002196:	bf00      	nop
 8002198:	e000ed04 	.word	0xe000ed04

0800219c <osSemaphoreDelete>:
 800219c:	b510      	push	{r4, lr}
 800219e:	f3ef 8405 	mrs	r4, IPSR
 80021a2:	b10c      	cbz	r4, 80021a8 <osSemaphoreDelete+0xc>
 80021a4:	2082      	movs	r0, #130	; 0x82
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	f001 f844 	bl	8003234 <vQueueDelete>
 80021ac:	4620      	mov	r0, r4
 80021ae:	bd10      	pop	{r4, pc}

080021b0 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80021b0:	2200      	movs	r2, #0
 80021b2:	c803      	ldmia	r0, {r0, r1}
 80021b4:	f000 bbec 	b.w	8002990 <xQueueGenericCreate>

080021b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80021b8:	b510      	push	{r4, lr}
 80021ba:	b084      	sub	sp, #16
  portBASE_TYPE taskWoken = pdFALSE;
 80021bc:	2400      	movs	r4, #0
{
 80021be:	9101      	str	r1, [sp, #4]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80021c0:	42a2      	cmp	r2, r4
 80021c2:	bf08      	it	eq
 80021c4:	2201      	moveq	r2, #1
  portBASE_TYPE taskWoken = pdFALSE;
 80021c6:	9403      	str	r4, [sp, #12]
 80021c8:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80021cc:	b14b      	cbz	r3, 80021e2 <osMessagePut+0x2a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80021ce:	4623      	mov	r3, r4
 80021d0:	aa03      	add	r2, sp, #12
 80021d2:	a901      	add	r1, sp, #4
 80021d4:	f000 fda2 	bl	8002d1c <xQueueGenericSendFromISR>
 80021d8:	2801      	cmp	r0, #1
 80021da:	d00a      	beq.n	80021f2 <osMessagePut+0x3a>
      return osErrorOS;
 80021dc:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80021de:	b004      	add	sp, #16
 80021e0:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80021e2:	a901      	add	r1, sp, #4
 80021e4:	f000 fc10 	bl	8002a08 <xQueueGenericSend>
 80021e8:	2801      	cmp	r0, #1
 80021ea:	d1f7      	bne.n	80021dc <osMessagePut+0x24>
  return osOK;
 80021ec:	2000      	movs	r0, #0
}
 80021ee:	b004      	add	sp, #16
 80021f0:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80021f2:	9b03      	ldr	r3, [sp, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f9      	beq.n	80021ec <osMessagePut+0x34>
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <osMessagePut+0x54>)
 80021fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	f3bf 8f6f 	isb	sy
  return osOK;
 8002208:	4620      	mov	r0, r4
 800220a:	e7e8      	b.n	80021de <osMessagePut+0x26>
 800220c:	e000ed04 	.word	0xe000ed04

08002210 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002210:	b530      	push	{r4, r5, lr}
 8002212:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8002214:	2300      	movs	r3, #0
  event.def.message_id = queue_id;
 8002216:	9103      	str	r1, [sp, #12]
{
 8002218:	4604      	mov	r4, r0
  event.value.v = 0;
 800221a:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 800221c:	2900      	cmp	r1, #0
 800221e:	d030      	beq.n	8002282 <osMessageGet+0x72>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002226:	b99b      	cbnz	r3, 8002250 <osMessageGet+0x40>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002228:	4608      	mov	r0, r1
 800222a:	a902      	add	r1, sp, #8
 800222c:	4615      	mov	r5, r2
 800222e:	f000 fe2f 	bl	8002e90 <xQueueGenericReceive>
 8002232:	2801      	cmp	r0, #1
 8002234:	d022      	beq.n	800227c <osMessageGet+0x6c>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002236:	2d00      	cmp	r5, #0
 8002238:	bf0c      	ite	eq
 800223a:	2300      	moveq	r3, #0
 800223c:	2340      	movne	r3, #64	; 0x40
 800223e:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 8002240:	ab04      	add	r3, sp, #16
 8002242:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800224a:	4620      	mov	r0, r4
 800224c:	b005      	add	sp, #20
 800224e:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002250:	466a      	mov	r2, sp
 8002252:	4608      	mov	r0, r1
 8002254:	a902      	add	r1, sp, #8
 8002256:	f000 ff7d 	bl	8003154 <xQueueReceiveFromISR>
    portEND_SWITCHING_ISR(taskWoken);
 800225a:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 800225c:	2801      	cmp	r0, #1
 800225e:	bf0c      	ite	eq
 8002260:	2210      	moveq	r2, #16
 8002262:	2200      	movne	r2, #0
 8002264:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ea      	beq.n	8002240 <osMessageGet+0x30>
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <osMessageGet+0x88>)
 800226c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	e7e1      	b.n	8002240 <osMessageGet+0x30>
      event.status = osEventMessage;
 800227c:	2310      	movs	r3, #16
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	e7de      	b.n	8002240 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002282:	ab04      	add	r3, sp, #16
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 800228a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800228e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002292:	4620      	mov	r0, r4
 8002294:	b005      	add	sp, #20
 8002296:	bd30      	pop	{r4, r5, pc}
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <osMessageWaiting>:
 800229c:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 80022a0:	b90b      	cbnz	r3, 80022a6 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80022a2:	f000 bfa7 	b.w	80031f4 <uxQueueMessagesWaiting>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80022a6:	f000 bfb9 	b.w	800321c <uxQueueMessagesWaitingFromISR>
 80022aa:	bf00      	nop

080022ac <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80022ac:	b510      	push	{r4, lr}
 80022ae:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80022b2:	b10c      	cbz	r4, 80022b8 <osMessageDelete+0xc>
    return osErrorISR;
 80022b4:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 80022b6:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 80022b8:	f000 ffbc 	bl	8003234 <vQueueDelete>
  return osOK; 
 80022bc:	4620      	mov	r0, r4
 80022be:	bd10      	pop	{r4, pc}

080022c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022c8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ca:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022cc:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d2:	6103      	str	r3, [r0, #16]
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	6103      	str	r3, [r0, #16]
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80022e0:	e890 000c 	ldmia.w	r0, {r2, r3}
{
 80022e4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022e6:	689c      	ldr	r4, [r3, #8]
 80022e8:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ea:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80022ec:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80022ee:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022f0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022f2:	6099      	str	r1, [r3, #8]
}
 80022f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80022fa:	6002      	str	r2, [r0, #0]
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop

08002300 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002300:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002302:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002304:	1c6b      	adds	r3, r5, #1
 8002306:	d011      	beq.n	800232c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002308:	f100 0208 	add.w	r2, r0, #8
 800230c:	e000      	b.n	8002310 <vListInsert+0x10>
 800230e:	461a      	mov	r2, r3
 8002310:	6853      	ldr	r3, [r2, #4]
 8002312:	681c      	ldr	r4, [r3, #0]
 8002314:	42a5      	cmp	r5, r4
 8002316:	d2fa      	bcs.n	800230e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002318:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800231a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800231c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800231e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002320:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002322:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002324:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002326:	6004      	str	r4, [r0, #0]
}
 8002328:	bc30      	pop	{r4, r5}
 800232a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800232c:	6902      	ldr	r2, [r0, #16]
 800232e:	6853      	ldr	r3, [r2, #4]
 8002330:	e7f2      	b.n	8002318 <vListInsert+0x18>
 8002332:	bf00      	nop

08002334 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002334:	6843      	ldr	r3, [r0, #4]
 8002336:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002338:	6902      	ldr	r2, [r0, #16]
{
 800233a:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800233c:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800233e:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002340:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002342:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8002344:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 8002346:	42a0      	cmp	r0, r4
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002348:	bf08      	it	eq
 800234a:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 800234c:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 800234e:	2100      	movs	r1, #0
 8002350:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 8002352:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	4770      	bx	lr

0800235c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <prvTaskExitError+0x2c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	d008      	beq.n	8002376 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	e7fe      	b.n	8002374 <prvTaskExitError+0x18>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	e7fe      	b.n	8002386 <prvTaskExitError+0x2a>
 8002388:	20000004 	.word	0x20000004

0800238c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <prvPortStartFirstTask+0x1c>)
 800238e:	6800      	ldr	r0, [r0, #0]
 8002390:	6800      	ldr	r0, [r0, #0]
 8002392:	f380 8808 	msr	MSP, r0
 8002396:	b662      	cpsie	i
 8002398:	b661      	cpsie	f
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	df00      	svc	0
 80023a4:	bf00      	nop
 80023a6:	0000      	.short	0x0000
 80023a8:	e000ed08 	.word	0xe000ed08

080023ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80023ac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80023bc <vPortEnableVFP+0x10>
 80023b0:	6801      	ldr	r1, [r0, #0]
 80023b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80023b6:	6001      	str	r1, [r0, #0]
 80023b8:	4770      	bx	lr
 80023ba:	0000      	.short	0x0000
 80023bc:	e000ed88 	.word	0xe000ed88

080023c0 <pxPortInitialiseStack>:
{
 80023c0:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80023c2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80023c6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80023ca:	4c07      	ldr	r4, [pc, #28]	; (80023e8 <pxPortInitialiseStack+0x28>)
 80023cc:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80023d0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80023d4:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80023d8:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80023dc:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80023e0:	bc30      	pop	{r4, r5}
 80023e2:	3844      	subs	r0, #68	; 0x44
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	0800235d 	.word	0x0800235d
 80023ec:	00000000 	.word	0x00000000

080023f0 <SVC_Handler>:
	__asm volatile (
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <pxCurrentTCBConst2>)
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	6808      	ldr	r0, [r1, #0]
 80023f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023fa:	f380 8809 	msr	PSP, r0
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f04f 0000 	mov.w	r0, #0
 8002406:	f380 8811 	msr	BASEPRI, r0
 800240a:	4770      	bx	lr
 800240c:	f3af 8000 	nop.w

08002410 <pxCurrentTCBConst2>:
 8002410:	20003c50 	.word	0x20003c50

08002414 <vPortEnterCritical>:
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <vPortEnterCritical+0x3c>)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800242a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800242c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800242e:	d000      	beq.n	8002432 <vPortEnterCritical+0x1e>
 8002430:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <vPortEnterCritical+0x40>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f013 0fff 	tst.w	r3, #255	; 0xff
 800243a:	d0f9      	beq.n	8002430 <vPortEnterCritical+0x1c>
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	e7fe      	b.n	800244c <vPortEnterCritical+0x38>
 800244e:	bf00      	nop
 8002450:	20000004 	.word	0x20000004
 8002454:	e000ed04 	.word	0xe000ed04

08002458 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002458:	4a08      	ldr	r2, [pc, #32]	; (800247c <vPortExitCritical+0x24>)
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	b943      	cbnz	r3, 8002470 <vPortExitCritical+0x18>
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	e7fe      	b.n	800246e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002470:	3b01      	subs	r3, #1
 8002472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002474:	b90b      	cbnz	r3, 800247a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	4770      	bx	lr
 800247c:	20000004 	.word	0x20000004

08002480 <PendSV_Handler>:
	__asm volatile
 8002480:	f3ef 8009 	mrs	r0, PSP
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <pxCurrentTCBConst>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	f01e 0f10 	tst.w	lr, #16
 8002490:	bf08      	it	eq
 8002492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249a:	6010      	str	r0, [r2, #0]
 800249c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80024a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024a4:	f380 8811 	msr	BASEPRI, r0
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f001 fa70 	bl	8003994 <vTaskSwitchContext>
 80024b4:	f04f 0000 	mov.w	r0, #0
 80024b8:	f380 8811 	msr	BASEPRI, r0
 80024bc:	bc08      	pop	{r3}
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	6808      	ldr	r0, [r1, #0]
 80024c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c6:	f01e 0f10 	tst.w	lr, #16
 80024ca:	bf08      	it	eq
 80024cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80024d0:	f380 8809 	msr	PSP, r0
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	f3af 8000 	nop.w

080024e0 <pxCurrentTCBConst>:
 80024e0:	20003c50 	.word	0x20003c50

080024e4 <SysTick_Handler>:
{
 80024e4:	b508      	push	{r3, lr}
	__asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80024f6:	f001 f8a5 	bl	8003644 <xTaskIncrementTick>
 80024fa:	b118      	cbz	r0, 8002504 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <SysTick_Handler+0x28>)
 80024fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002502:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002504:	2300      	movs	r3, #0
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	bd08      	pop	{r3, pc}
 800250c:	e000ed04 	.word	0xe000ed04

08002510 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <vPortSetupTimerInterrupt+0x1c>)
 8002512:	4907      	ldr	r1, [pc, #28]	; (8002530 <vPortSetupTimerInterrupt+0x20>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4807      	ldr	r0, [pc, #28]	; (8002534 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800251a:	fba1 1303 	umull	r1, r3, r1, r3
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002522:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002524:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002526:	6011      	str	r1, [r2, #0]
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000010 	.word	0x20000010
 8002530:	10624dd3 	.word	0x10624dd3
 8002534:	e000e014 	.word	0xe000e014
 8002538:	e000e010 	.word	0xe000e010

0800253c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <xPortStartScheduler+0xc8>)
 800253e:	4a32      	ldr	r2, [pc, #200]	; (8002608 <xPortStartScheduler+0xcc>)
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	4291      	cmp	r1, r2
 8002544:	d04c      	beq.n	80025e0 <xPortStartScheduler+0xa4>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <xPortStartScheduler+0xd0>)
 800254a:	429a      	cmp	r2, r3
 800254c:	d051      	beq.n	80025f2 <xPortStartScheduler+0xb6>
{
 800254e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <xPortStartScheduler+0xd4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002552:	4c30      	ldr	r4, [pc, #192]	; (8002614 <xPortStartScheduler+0xd8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002554:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002556:	4830      	ldr	r0, [pc, #192]	; (8002618 <xPortStartScheduler+0xdc>)
{
 8002558:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800255a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800255c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800255e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002560:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800256a:	f89d 2003 	ldrb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800256e:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002572:	f002 0250 	and.w	r2, r2, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002576:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002578:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800257a:	7022      	strb	r2, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800257c:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800257e:	d50e      	bpl.n	800259e <xPortStartScheduler+0x62>
 8002580:	2306      	movs	r3, #6
 8002582:	e000      	b.n	8002586 <xPortStartScheduler+0x4a>
 8002584:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002586:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800258a:	0052      	lsls	r2, r2, #1
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002592:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002596:	0612      	lsls	r2, r2, #24
 8002598:	f103 31ff 	add.w	r1, r3, #4294967295
 800259c:	d4f2      	bmi.n	8002584 <xPortStartScheduler+0x48>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800259e:	9901      	ldr	r1, [sp, #4]
 80025a0:	4c1b      	ldr	r4, [pc, #108]	; (8002610 <xPortStartScheduler+0xd4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <xPortStartScheduler+0xe0>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025a4:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80025a6:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025ac:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80025ae:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80025b8:	6813      	ldr	r3, [r2, #0]
 80025ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80025be:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 80025c0:	f7ff ffa6 	bl	8002510 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <xPortStartScheduler+0xe4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80025ca:	f7ff feef 	bl	80023ac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <xPortStartScheduler+0xe8>)
 80025d0:	6813      	ldr	r3, [r2, #0]
 80025d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80025d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80025d8:	f7ff fed8 	bl	800238c <prvPortStartFirstTask>
	prvTaskExitError();
 80025dc:	f7ff febe 	bl	800235c <prvTaskExitError>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	e7fe      	b.n	80025f0 <xPortStartScheduler+0xb4>
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	e7fe      	b.n	8002602 <xPortStartScheduler+0xc6>
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	410fc271 	.word	0x410fc271
 800260c:	410fc270 	.word	0x410fc270
 8002610:	e000e400 	.word	0xe000e400
 8002614:	20000030 	.word	0x20000030
 8002618:	20000034 	.word	0x20000034
 800261c:	e000ed20 	.word	0xe000ed20
 8002620:	20000004 	.word	0x20000004
 8002624:	e000ef34 	.word	0xe000ef34

08002628 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002628:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d90e      	bls.n	800264e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002630:	4910      	ldr	r1, [pc, #64]	; (8002674 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002632:	4a11      	ldr	r2, [pc, #68]	; (8002678 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002634:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d908      	bls.n	800264e <vPortValidateInterruptPriority+0x26>
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	e7fe      	b.n	800264c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <vPortValidateInterruptPriority+0x54>)
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <vPortValidateInterruptPriority+0x58>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800265a:	4293      	cmp	r3, r2
 800265c:	d908      	bls.n	8002670 <vPortValidateInterruptPriority+0x48>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	e7fe      	b.n	800266e <vPortValidateInterruptPriority+0x46>
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e3f0 	.word	0xe000e3f0
 8002678:	20000030 	.word	0x20000030
 800267c:	e000ed0c 	.word	0xe000ed0c
 8002680:	20000034 	.word	0x20000034

08002684 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002684:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <prvInsertBlockIntoFreeList+0x48>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4282      	cmp	r2, r0
 800268c:	d201      	bcs.n	8002692 <prvInsertBlockIntoFreeList+0xe>
 800268e:	4613      	mov	r3, r2
 8002690:	e7fa      	b.n	8002688 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002692:	685c      	ldr	r4, [r3, #4]
 8002694:	1919      	adds	r1, r3, r4
 8002696:	4288      	cmp	r0, r1
 8002698:	d103      	bne.n	80026a2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800269a:	6841      	ldr	r1, [r0, #4]
 800269c:	4421      	add	r1, r4
 800269e:	6059      	str	r1, [r3, #4]
 80026a0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80026a2:	6844      	ldr	r4, [r0, #4]
 80026a4:	1901      	adds	r1, r0, r4
 80026a6:	428a      	cmp	r2, r1
 80026a8:	d109      	bne.n	80026be <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <prvInsertBlockIntoFreeList+0x4c>)
 80026ac:	6809      	ldr	r1, [r1, #0]
 80026ae:	428a      	cmp	r2, r1
 80026b0:	d005      	beq.n	80026be <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026b2:	6851      	ldr	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026b8:	4421      	add	r1, r4
 80026ba:	6041      	str	r1, [r0, #4]
 80026bc:	e000      	b.n	80026c0 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026be:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80026c0:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026c2:	bf18      	it	ne
 80026c4:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20003c48 	.word	0x20003c48
 80026d0:	20000038 	.word	0x20000038

080026d4 <pvPortMalloc>:
{
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80026d8:	f000 ff9e 	bl	8003618 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80026dc:	4840      	ldr	r0, [pc, #256]	; (80027e0 <pvPortMalloc+0x10c>)
 80026de:	6803      	ldr	r3, [r0, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d056      	beq.n	8002792 <pvPortMalloc+0xbe>
 80026e4:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <pvPortMalloc+0x110>)
 80026e6:	6815      	ldr	r5, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80026e8:	422c      	tst	r4, r5
 80026ea:	d14d      	bne.n	8002788 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 80026ec:	2c00      	cmp	r4, #0
 80026ee:	d04b      	beq.n	8002788 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 80026f0:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80026f4:	0750      	lsls	r0, r2, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80026f6:	bf1c      	itt	ne
 80026f8:	f022 0207 	bicne.w	r2, r2, #7
 80026fc:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d042      	beq.n	8002788 <pvPortMalloc+0xb4>
 8002702:	4f39      	ldr	r7, [pc, #228]	; (80027e8 <pvPortMalloc+0x114>)
 8002704:	683e      	ldr	r6, [r7, #0]
 8002706:	42b2      	cmp	r2, r6
 8002708:	d83e      	bhi.n	8002788 <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800270a:	4838      	ldr	r0, [pc, #224]	; (80027ec <pvPortMalloc+0x118>)
 800270c:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800270e:	e006      	b.n	800271e <pvPortMalloc+0x4a>
 8002710:	f8d4 e000 	ldr.w	lr, [r4]
 8002714:	f1be 0f00 	cmp.w	lr, #0
 8002718:	d004      	beq.n	8002724 <pvPortMalloc+0x50>
 800271a:	4620      	mov	r0, r4
 800271c:	4674      	mov	r4, lr
 800271e:	6861      	ldr	r1, [r4, #4]
 8002720:	428a      	cmp	r2, r1
 8002722:	d8f5      	bhi.n	8002710 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 8002724:	429c      	cmp	r4, r3
 8002726:	d02f      	beq.n	8002788 <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800272c:	1a8b      	subs	r3, r1, r2
 800272e:	2b10      	cmp	r3, #16
 8002730:	d910      	bls.n	8002754 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002732:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002734:	0741      	lsls	r1, r0, #29
 8002736:	d008      	beq.n	800274a <pvPortMalloc+0x76>
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	e7fe      	b.n	8002748 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800274a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800274c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800274e:	f7ff ff99 	bl	8002684 <prvInsertBlockIntoFreeList>
 8002752:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <pvPortMalloc+0x11c>)
 8002756:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002758:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800275a:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800275c:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800275e:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002760:	6061      	str	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002762:	6023      	str	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002764:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002768:	bf38      	it	cc
 800276a:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800276c:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800276e:	f001 f817 	bl	80037a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002772:	0763      	lsls	r3, r4, #29
 8002774:	d00b      	beq.n	800278e <pvPortMalloc+0xba>
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	e7fe      	b.n	8002786 <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8002788:	f001 f80a 	bl	80037a0 <xTaskResumeAll>
 800278c:	2400      	movs	r4, #0
}
 800278e:	4620      	mov	r0, r4
 8002790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 8002792:	4918      	ldr	r1, [pc, #96]	; (80027f4 <pvPortMalloc+0x120>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002794:	074d      	lsls	r5, r1, #29
 8002796:	d01f      	beq.n	80027d8 <pvPortMalloc+0x104>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002798:	1dca      	adds	r2, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800279a:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800279e:	f501 5370 	add.w	r3, r1, #15360	; 0x3c00
 80027a2:	1a9b      	subs	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027a4:	4611      	mov	r1, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027a6:	440b      	add	r3, r1
	uxAddress -= xHeapStructSize;
 80027a8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027aa:	f023 0307 	bic.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027ae:	4d0e      	ldr	r5, [pc, #56]	; (80027e8 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027b0:	4e0e      	ldr	r6, [pc, #56]	; (80027ec <pvPortMalloc+0x118>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027b2:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80027f0 <pvPortMalloc+0x11c>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027b6:	4f0b      	ldr	r7, [pc, #44]	; (80027e4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80027b8:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027ba:	1a5a      	subs	r2, r3, r1
	xStart.xBlockSize = ( size_t ) 0;
 80027bc:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027be:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027c0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 80027c4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027c6:	6031      	str	r1, [r6, #0]
	pxEnd->xBlockSize = 0;
 80027c8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80027ca:	6018      	str	r0, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027cc:	f8ce 2000 	str.w	r2, [lr]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027d0:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027d2:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027d4:	600b      	str	r3, [r1, #0]
 80027d6:	e787      	b.n	80026e8 <pvPortMalloc+0x14>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027d8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80027dc:	e7e3      	b.n	80027a6 <pvPortMalloc+0xd2>
 80027de:	bf00      	nop
 80027e0:	20000038 	.word	0x20000038
 80027e4:	20003c3c 	.word	0x20003c3c
 80027e8:	20003c40 	.word	0x20003c40
 80027ec:	20003c48 	.word	0x20003c48
 80027f0:	20003c44 	.word	0x20003c44
 80027f4:	2000003c 	.word	0x2000003c

080027f8 <vPortFree>:
	if( pv != NULL )
 80027f8:	b1d0      	cbz	r0, 8002830 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80027fa:	4a19      	ldr	r2, [pc, #100]	; (8002860 <vPortFree+0x68>)
 80027fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4213      	tst	r3, r2
 8002804:	d108      	bne.n	8002818 <vPortFree+0x20>
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	e7fe      	b.n	8002816 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002818:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800281c:	b149      	cbz	r1, 8002832 <vPortFree+0x3a>
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	e7fe      	b.n	800282e <vPortFree+0x36>
 8002830:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002832:	ea23 0302 	bic.w	r3, r3, r2
{
 8002836:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002838:	f840 3c04 	str.w	r3, [r0, #-4]
 800283c:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800283e:	f000 feeb 	bl	8003618 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <vPortFree+0x6c>)
 8002844:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002848:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800284a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800284e:	440b      	add	r3, r1
 8002850:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002852:	f7ff ff17 	bl	8002684 <prvInsertBlockIntoFreeList>
}
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800285a:	f000 bfa1 	b.w	80037a0 <xTaskResumeAll>
 800285e:	bf00      	nop
 8002860:	20003c3c 	.word	0x20003c3c
 8002864:	20003c40 	.word	0x20003c40

08002868 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800286c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800286e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002870:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002872:	b932      	cbnz	r2, 8002882 <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002874:	6805      	ldr	r5, [r0, #0]
 8002876:	bb3d      	cbnz	r5, 80028c8 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002878:	6840      	ldr	r0, [r0, #4]
 800287a:	f001 fa15 	bl	8003ca8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800287e:	6065      	str	r5, [r4, #4]
 8002880:	e025      	b.n	80028ce <prvCopyDataToQueue+0x66>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002882:	b96d      	cbnz	r5, 80028a0 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002884:	6880      	ldr	r0, [r0, #8]
 8002886:	f00b fe54 	bl	800e532 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800288a:	68a3      	ldr	r3, [r4, #8]
 800288c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800288e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002890:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002892:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002894:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002896:	d317      	bcc.n	80028c8 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800289c:	4628      	mov	r0, r5
 800289e:	e016      	b.n	80028ce <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028a0:	68c0      	ldr	r0, [r0, #12]
 80028a2:	f00b fe46 	bl	800e532 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028a8:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028aa:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028ac:	425b      	negs	r3, r3
 80028ae:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028b0:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028b2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028b4:	d202      	bcs.n	80028bc <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028b6:	6862      	ldr	r2, [r4, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028bc:	2d02      	cmp	r5, #2
 80028be:	d103      	bne.n	80028c8 <prvCopyDataToQueue+0x60>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c0:	b126      	cbz	r6, 80028cc <prvCopyDataToQueue+0x64>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028c2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80028c4:	2000      	movs	r0, #0
 80028c6:	e002      	b.n	80028ce <prvCopyDataToQueue+0x66>
 80028c8:	2000      	movs	r0, #0
 80028ca:	e000      	b.n	80028ce <prvCopyDataToQueue+0x66>
 80028cc:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80028ce:	3601      	adds	r6, #1
 80028d0:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80028d2:	bd70      	pop	{r4, r5, r6, pc}

080028d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80028d6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028d8:	b172      	cbz	r2, 80028f8 <prvCopyDataFromQueue+0x24>
{
 80028da:	b410      	push	{r4}
 80028dc:	4608      	mov	r0, r1
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028de:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028e0:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028e2:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028e4:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028e6:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028e8:	bf24      	itt	cs
 80028ea:	6819      	ldrcs	r1, [r3, #0]
 80028ec:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028ee:	68d9      	ldr	r1, [r3, #12]
	}
}
 80028f0:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028f4:	f00b be1d 	b.w	800e532 <memcpy>
 80028f8:	4770      	bx	lr
	...

080028fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002900:	f7ff fd88 	bl	8002414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002904:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002908:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800290a:	2c00      	cmp	r4, #0
 800290c:	dd16      	ble.n	800293c <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800290e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002910:	b1a3      	cbz	r3, 800293c <prvUnlockQueue+0x40>
 8002912:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002916:	e005      	b.n	8002924 <prvUnlockQueue+0x28>
 8002918:	3c01      	subs	r4, #1
 800291a:	b2e3      	uxtb	r3, r4
 800291c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800291e:	b16b      	cbz	r3, 800293c <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002920:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002922:	b15b      	cbz	r3, 800293c <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002924:	4630      	mov	r0, r6
 8002926:	f001 f8bf 	bl	8003aa8 <xTaskRemoveFromEventList>
 800292a:	2800      	cmp	r0, #0
 800292c:	d0f4      	beq.n	8002918 <prvUnlockQueue+0x1c>
 800292e:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002930:	f001 f958 	bl	8003be4 <vTaskMissedYield>
 8002934:	b2e3      	uxtb	r3, r4
 8002936:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f1      	bne.n	8002920 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800293c:	23ff      	movs	r3, #255	; 0xff
 800293e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002942:	f7ff fd89 	bl	8002458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002946:	f7ff fd65 	bl	8002414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800294a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800294e:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002950:	2c00      	cmp	r4, #0
 8002952:	dd16      	ble.n	8002982 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002954:	692b      	ldr	r3, [r5, #16]
 8002956:	b1a3      	cbz	r3, 8002982 <prvUnlockQueue+0x86>
 8002958:	f105 0610 	add.w	r6, r5, #16
 800295c:	e005      	b.n	800296a <prvUnlockQueue+0x6e>
 800295e:	3c01      	subs	r4, #1
 8002960:	b2e3      	uxtb	r3, r4
 8002962:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002964:	b16b      	cbz	r3, 8002982 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002966:	692b      	ldr	r3, [r5, #16]
 8002968:	b15b      	cbz	r3, 8002982 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800296a:	4630      	mov	r0, r6
 800296c:	f001 f89c 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002970:	2800      	cmp	r0, #0
 8002972:	d0f4      	beq.n	800295e <prvUnlockQueue+0x62>
 8002974:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8002976:	f001 f935 	bl	8003be4 <vTaskMissedYield>
 800297a:	b2e3      	uxtb	r3, r4
 800297c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f1      	bne.n	8002966 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002982:	23ff      	movs	r3, #255	; 0xff
 8002984:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800298c:	f7ff bd64 	b.w	8002458 <vPortExitCritical>

08002990 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002990:	b940      	cbnz	r0, 80029a4 <xQueueGenericCreate+0x14>
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	e7fe      	b.n	80029a2 <xQueueGenericCreate+0x12>
	{
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80029ac:	3048      	adds	r0, #72	; 0x48
 80029ae:	460d      	mov	r5, r1
 80029b0:	f7ff fe90 	bl	80026d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80029b4:	4604      	mov	r4, r0
 80029b6:	b318      	cbz	r0, 8002a00 <xQueueGenericCreate+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80029b8:	b325      	cbz	r5, 8002a04 <xQueueGenericCreate+0x74>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80029ba:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80029be:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80029c0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029c2:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 80029c4:	f7ff fd26 	bl	8002414 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80029cc:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ce:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029d0:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029d4:	1acb      	subs	r3, r1, r3
 80029d6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029d8:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029da:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 80029dc:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029de:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029e0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029e2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029e6:	6062      	str	r2, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029e8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80029ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029f0:	f7ff fc66 	bl	80022c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029f8:	f7ff fc62 	bl	80022c0 <vListInitialise>
	taskEXIT_CRITICAL();
 80029fc:	f7ff fd2c 	bl	8002458 <vPortExitCritical>
	}
 8002a00:	4620      	mov	r0, r4
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a04:	4603      	mov	r3, r0
 8002a06:	e7da      	b.n	80029be <xQueueGenericCreate+0x2e>

08002a08 <xQueueGenericSend>:
{
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002a10:	2800      	cmp	r0, #0
 8002a12:	f000 8107 	beq.w	8002c24 <xQueueGenericSend+0x21c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a16:	2900      	cmp	r1, #0
 8002a18:	f000 813c 	beq.w	8002c94 <xQueueGenericSend+0x28c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	f000 812c 	beq.w	8002c7a <xQueueGenericSend+0x272>
 8002a22:	4604      	mov	r4, r0
 8002a24:	461e      	mov	r6, r3
 8002a26:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a28:	f001 f8e2 	bl	8003bf0 <xTaskGetSchedulerState>
 8002a2c:	b928      	cbnz	r0, 8002a3a <xQueueGenericSend+0x32>
 8002a2e:	9b01      	ldr	r3, [sp, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 8119 	bne.w	8002c68 <xQueueGenericSend+0x260>
 8002a36:	4699      	mov	r9, r3
 8002a38:	e001      	b.n	8002a3e <xQueueGenericSend+0x36>
 8002a3a:	f04f 0900 	mov.w	r9, #0
		taskENTER_CRITICAL();
 8002a3e:	f7ff fce9 	bl	8002414 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
					portYIELD_WITHIN_API();
 8002a46:	f8df a268 	ldr.w	sl, [pc, #616]	; 8002cb0 <xQueueGenericSend+0x2a8>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a4a:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 8002a4c:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a50:	d37c      	bcc.n	8002b4c <xQueueGenericSend+0x144>
 8002a52:	2e02      	cmp	r6, #2
 8002a54:	d07a      	beq.n	8002b4c <xQueueGenericSend+0x144>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a56:	9d01      	ldr	r5, [sp, #4]
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	f000 80f9 	beq.w	8002c50 <xQueueGenericSend+0x248>
				else if( xEntryTimeSet == pdFALSE )
 8002a5e:	f1b9 0f00 	cmp.w	r9, #0
 8002a62:	f000 80f1 	beq.w	8002c48 <xQueueGenericSend+0x240>
		taskEXIT_CRITICAL();
 8002a66:	f7ff fcf7 	bl	8002458 <vPortExitCritical>
		vTaskSuspendAll();
 8002a6a:	f000 fdd5 	bl	8003618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a6e:	f7ff fcd1 	bl	8002414 <vPortEnterCritical>
 8002a72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	bf08      	it	eq
 8002a7a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002a7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	bf08      	it	eq
 8002a86:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002a8a:	f7ff fce5 	bl	8002458 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a8e:	a901      	add	r1, sp, #4
 8002a90:	a802      	add	r0, sp, #8
 8002a92:	f001 f863 	bl	8003b5c <xTaskCheckForTimeOut>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	f040 80cd 	bne.w	8002c36 <xQueueGenericSend+0x22e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a9c:	f7ff fcba 	bl	8002414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002aa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d066      	beq.n	8002b76 <xQueueGenericSend+0x16e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002aa8:	f7ff fcd6 	bl	8002458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002aac:	f7ff fcb2 	bl	8002414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002ab0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002ab4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ab6:	2d00      	cmp	r5, #0
 8002ab8:	dd16      	ble.n	8002ae8 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002abc:	b1a3      	cbz	r3, 8002ae8 <xQueueGenericSend+0xe0>
 8002abe:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8002ac2:	e005      	b.n	8002ad0 <xQueueGenericSend+0xc8>
 8002ac4:	3d01      	subs	r5, #1
 8002ac6:	b2eb      	uxtb	r3, r5
 8002ac8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aca:	b16b      	cbz	r3, 8002ae8 <xQueueGenericSend+0xe0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ace:	b15b      	cbz	r3, 8002ae8 <xQueueGenericSend+0xe0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ad0:	4648      	mov	r0, r9
 8002ad2:	f000 ffe9 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d0f4      	beq.n	8002ac4 <xQueueGenericSend+0xbc>
 8002ada:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8002adc:	f001 f882 	bl	8003be4 <vTaskMissedYield>
 8002ae0:	b2eb      	uxtb	r3, r5
 8002ae2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f1      	bne.n	8002acc <xQueueGenericSend+0xc4>
		pxQueue->cTxLock = queueUNLOCKED;
 8002ae8:	23ff      	movs	r3, #255	; 0xff
 8002aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002aee:	f7ff fcb3 	bl	8002458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002af2:	f7ff fc8f 	bl	8002414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002af6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002afa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002afc:	2d00      	cmp	r5, #0
 8002afe:	dd16      	ble.n	8002b2e <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b00:	6923      	ldr	r3, [r4, #16]
 8002b02:	b1a3      	cbz	r3, 8002b2e <xQueueGenericSend+0x126>
 8002b04:	f104 0910 	add.w	r9, r4, #16
 8002b08:	e005      	b.n	8002b16 <xQueueGenericSend+0x10e>
 8002b0a:	3d01      	subs	r5, #1
 8002b0c:	b2eb      	uxtb	r3, r5
 8002b0e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b10:	b16b      	cbz	r3, 8002b2e <xQueueGenericSend+0x126>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b12:	6923      	ldr	r3, [r4, #16]
 8002b14:	b15b      	cbz	r3, 8002b2e <xQueueGenericSend+0x126>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b16:	4648      	mov	r0, r9
 8002b18:	f000 ffc6 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d0f4      	beq.n	8002b0a <xQueueGenericSend+0x102>
 8002b20:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8002b22:	f001 f85f 	bl	8003be4 <vTaskMissedYield>
 8002b26:	b2eb      	uxtb	r3, r5
 8002b28:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f1      	bne.n	8002b12 <xQueueGenericSend+0x10a>
		pxQueue->cRxLock = queueUNLOCKED;
 8002b2e:	23ff      	movs	r3, #255	; 0xff
 8002b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002b34:	f7ff fc90 	bl	8002458 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002b38:	f000 fe32 	bl	80037a0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002b3c:	f7ff fc6a 	bl	8002414 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	f04f 0901 	mov.w	r9, #1
 8002b4a:	d282      	bcs.n	8002a52 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b4c:	4632      	mov	r2, r6
 8002b4e:	4639      	mov	r1, r7
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff fe89 	bl	8002868 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d17d      	bne.n	8002c58 <xQueueGenericSend+0x250>
					else if( xYieldRequired != pdFALSE )
 8002b5c:	b138      	cbz	r0, 8002b6e <xQueueGenericSend+0x166>
						queueYIELD_IF_USING_PREEMPTION();
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <xQueueGenericSend+0x2a8>)
 8002b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002b6e:	f7ff fc73 	bl	8002458 <vPortExitCritical>
				return pdPASS;
 8002b72:	2001      	movs	r0, #1
 8002b74:	e065      	b.n	8002c42 <xQueueGenericSend+0x23a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b76:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8002b7a:	f7ff fc6d 	bl	8002458 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b7e:	4648      	mov	r0, r9
 8002b80:	9901      	ldr	r1, [sp, #4]
 8002b82:	f000 ff3f 	bl	8003a04 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002b86:	f7ff fc45 	bl	8002414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002b8a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002b8e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	dd16      	ble.n	8002bc2 <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b96:	b1a3      	cbz	r3, 8002bc2 <xQueueGenericSend+0x1ba>
 8002b98:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8002b9c:	e005      	b.n	8002baa <xQueueGenericSend+0x1a2>
 8002b9e:	3d01      	subs	r5, #1
 8002ba0:	b2eb      	uxtb	r3, r5
 8002ba2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba4:	b16b      	cbz	r3, 8002bc2 <xQueueGenericSend+0x1ba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ba8:	b15b      	cbz	r3, 8002bc2 <xQueueGenericSend+0x1ba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002baa:	4658      	mov	r0, fp
 8002bac:	f000 ff7c 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d0f4      	beq.n	8002b9e <xQueueGenericSend+0x196>
 8002bb4:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8002bb6:	f001 f815 	bl	8003be4 <vTaskMissedYield>
 8002bba:	b2eb      	uxtb	r3, r5
 8002bbc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f1      	bne.n	8002ba6 <xQueueGenericSend+0x19e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002bc2:	23ff      	movs	r3, #255	; 0xff
 8002bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002bc8:	f7ff fc46 	bl	8002458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002bcc:	f7ff fc22 	bl	8002414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002bd0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002bd4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	dc04      	bgt.n	8002be4 <xQueueGenericSend+0x1dc>
 8002bda:	e011      	b.n	8002c00 <xQueueGenericSend+0x1f8>
 8002bdc:	3d01      	subs	r5, #1
 8002bde:	b2eb      	uxtb	r3, r5
 8002be0:	b25d      	sxtb	r5, r3
 8002be2:	b16b      	cbz	r3, 8002c00 <xQueueGenericSend+0x1f8>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be4:	6923      	ldr	r3, [r4, #16]
 8002be6:	b15b      	cbz	r3, 8002c00 <xQueueGenericSend+0x1f8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be8:	4648      	mov	r0, r9
 8002bea:	f000 ff5d 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d0f4      	beq.n	8002bdc <xQueueGenericSend+0x1d4>
 8002bf2:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8002bf4:	f000 fff6 	bl	8003be4 <vTaskMissedYield>
 8002bf8:	b2eb      	uxtb	r3, r5
 8002bfa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f1      	bne.n	8002be4 <xQueueGenericSend+0x1dc>
		pxQueue->cRxLock = queueUNLOCKED;
 8002c00:	23ff      	movs	r3, #255	; 0xff
 8002c02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002c06:	f7ff fc27 	bl	8002458 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002c0a:	f000 fdc9 	bl	80037a0 <xTaskResumeAll>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d194      	bne.n	8002b3c <xQueueGenericSend+0x134>
					portYIELD_WITHIN_API();
 8002c12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c16:	f8ca 3000 	str.w	r3, [sl]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	e78b      	b.n	8002b3c <xQueueGenericSend+0x134>
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericSend+0x22c>
			prvUnlockQueue( pxQueue );
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff fe60 	bl	80028fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c3c:	f000 fdb0 	bl	80037a0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8002c40:	2000      	movs	r0, #0
}
 8002c42:	b005      	add	sp, #20
 8002c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vTaskSetTimeOutState( &xTimeOut );
 8002c48:	a802      	add	r0, sp, #8
 8002c4a:	f000 ff71 	bl	8003b30 <vTaskSetTimeOutState>
 8002c4e:	e70a      	b.n	8002a66 <xQueueGenericSend+0x5e>
					taskEXIT_CRITICAL();
 8002c50:	f7ff fc02 	bl	8002458 <vPortExitCritical>
					return errQUEUE_FULL;
 8002c54:	4628      	mov	r0, r5
 8002c56:	e7f4      	b.n	8002c42 <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c5c:	f000 ff24 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f47f af7c 	bne.w	8002b5e <xQueueGenericSend+0x156>
 8002c66:	e782      	b.n	8002b6e <xQueueGenericSend+0x166>
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericSend+0x270>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002c7c:	2a01      	cmp	r2, #1
 8002c7e:	f43f aed0 	beq.w	8002a22 <xQueueGenericSend+0x1a>
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	e7fe      	b.n	8002c92 <xQueueGenericSend+0x28a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c94:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	f43f aec0 	beq.w	8002a1c <xQueueGenericSend+0x14>
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	e7fe      	b.n	8002cac <xQueueGenericSend+0x2a4>
 8002cae:	bf00      	nop
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <xQueueCreateMutex>:
	{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002cb6:	2048      	movs	r0, #72	; 0x48
 8002cb8:	f7ff fd0c 	bl	80026d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	b350      	cbz	r0, 8002d16 <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 8002cc0:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8002cc2:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cc4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002cc6:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cc8:	6405      	str	r5, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 8002cca:	f7ff fba3 	bl	8002414 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cd2:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cd4:	60a1      	str	r1, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cd6:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cda:	1a9a      	subs	r2, r3, r2
 8002cdc:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cde:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8002ce0:	26ff      	movs	r6, #255	; 0xff
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ce2:	60e2      	str	r2, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ce4:	6063      	str	r3, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ce6:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ce8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8002cec:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cf0:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cf4:	f7ff fae4 	bl	80022c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cfc:	f7ff fae0 	bl	80022c0 <vListInitialise>
	taskEXIT_CRITICAL();
 8002d00:	f7ff fbaa 	bl	8002458 <vPortExitCritical>
			pxNewQueue->pxMutexHolder = NULL;
 8002d04:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d06:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002d08:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	462a      	mov	r2, r5
 8002d0e:	4629      	mov	r1, r5
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff fe79 	bl	8002a08 <xQueueGenericSend>
	}
 8002d16:	4620      	mov	r0, r4
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	bf00      	nop

08002d1c <xQueueGenericSendFromISR>:
{
 8002d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002d20:	b1f0      	cbz	r0, 8002d60 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d22:	2900      	cmp	r1, #0
 8002d24:	d041      	beq.n	8002daa <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d033      	beq.n	8002d92 <xQueueGenericSendFromISR+0x76>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	461f      	mov	r7, r3
 8002d2e:	4690      	mov	r8, r2
 8002d30:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d32:	f7ff fc79 	bl	8002628 <vPortValidateInterruptPriority>
	__asm volatile
 8002d36:	f3ef 8611 	mrs	r6, BASEPRI
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d30f      	bcc.n	8002d72 <xQueueGenericSendFromISR+0x56>
 8002d52:	2f02      	cmp	r7, #2
 8002d54:	d00d      	beq.n	8002d72 <xQueueGenericSendFromISR+0x56>
			xReturn = errQUEUE_FULL;
 8002d56:	2000      	movs	r0, #0
	__asm volatile
 8002d58:	f386 8811 	msr	BASEPRI, r6
}
 8002d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	e7fe      	b.n	8002d70 <xQueueGenericSendFromISR+0x54>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d72:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d76:	463a      	mov	r2, r7
 8002d78:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d7a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff fd73 	bl	8002868 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002d82:	1c6b      	adds	r3, r5, #1
 8002d84:	d01d      	beq.n	8002dc2 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d86:	1c6b      	adds	r3, r5, #1
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8002d8e:	2001      	movs	r0, #1
 8002d90:	e7e2      	b.n	8002d58 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d94:	2c01      	cmp	r4, #1
 8002d96:	d0c8      	beq.n	8002d2a <xQueueGenericSendFromISR+0xe>
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericSendFromISR+0x8c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002daa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002dac:	2c00      	cmp	r4, #0
 8002dae:	d0ba      	beq.n	8002d26 <xQueueGenericSendFromISR+0xa>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSendFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0e2      	beq.n	8002d8e <xQueueGenericSendFromISR+0x72>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002dcc:	f000 fe6c 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d0dc      	beq.n	8002d8e <xQueueGenericSendFromISR+0x72>
							if( pxHigherPriorityTaskWoken != NULL )
 8002dd4:	f1b8 0f00 	cmp.w	r8, #0
 8002dd8:	d0d9      	beq.n	8002d8e <xQueueGenericSendFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f8c8 0000 	str.w	r0, [r8]
 8002de0:	e7ba      	b.n	8002d58 <xQueueGenericSendFromISR+0x3c>
 8002de2:	bf00      	nop

08002de4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8002de4:	b378      	cbz	r0, 8002e46 <xQueueGiveFromISR+0x62>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002de6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002de8:	b143      	cbz	r3, 8002dfc <xQueueGiveFromISR+0x18>
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	e7fe      	b.n	8002dfa <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d03a      	beq.n	8002e78 <xQueueGiveFromISR+0x94>
{
 8002e02:	b570      	push	{r4, r5, r6, lr}
 8002e04:	4604      	mov	r4, r0
 8002e06:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e08:	f7ff fc0e 	bl	8002628 <vPortValidateInterruptPriority>
	__asm volatile
 8002e0c:	f3ef 8611 	mrs	r6, BASEPRI
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d225      	bcs.n	8002e74 <xQueueGiveFromISR+0x90>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002e2c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e2e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002e30:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	d010      	beq.n	8002e58 <xQueueGiveFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e36:	3301      	adds	r3, #1
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8002e3e:	2001      	movs	r0, #1
	__asm volatile
 8002e40:	f386 8811 	msr	BASEPRI, r6
}
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	e7fe      	b.n	8002e56 <xQueueGiveFromISR+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ef      	beq.n	8002e3e <xQueueGiveFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e62:	f000 fe21 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d0e9      	beq.n	8002e3e <xQueueGiveFromISR+0x5a>
							if( pxHigherPriorityTaskWoken != NULL )
 8002e6a:	2d00      	cmp	r5, #0
 8002e6c:	d0e7      	beq.n	8002e3e <xQueueGiveFromISR+0x5a>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e6e:	2001      	movs	r0, #1
 8002e70:	6028      	str	r0, [r5, #0]
 8002e72:	e7e5      	b.n	8002e40 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002e74:	2000      	movs	r0, #0
 8002e76:	e7e3      	b.n	8002e40 <xQueueGiveFromISR+0x5c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002e78:	6843      	ldr	r3, [r0, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0c1      	beq.n	8002e02 <xQueueGiveFromISR+0x1e>
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	e7fe      	b.n	8002e8e <xQueueGiveFromISR+0xaa>

08002e90 <xQueueGenericReceive>:
{
 8002e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	f000 811b 	beq.w	80030d4 <xQueueGenericReceive+0x244>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	f000 8149 	beq.w	8003136 <xQueueGenericReceive+0x2a6>
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	461f      	mov	r7, r3
 8002ea8:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eaa:	f000 fea1 	bl	8003bf0 <xTaskGetSchedulerState>
 8002eae:	b950      	cbnz	r0, 8002ec6 <xQueueGenericReceive+0x36>
 8002eb0:	9d01      	ldr	r5, [sp, #4]
 8002eb2:	b14d      	cbz	r5, 8002ec8 <xQueueGenericReceive+0x38>
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericReceive+0x34>
 8002ec6:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
 8002ec8:	f7ff faa4 	bl	8002414 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ecc:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
 8002ed0:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003150 <xQueueGenericReceive+0x2c0>
		prvLockQueue( pxQueue );
 8002ed4:	f04f 0800 	mov.w	r8, #0
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ed8:	f1ba 0f00 	cmp.w	sl, #0
 8002edc:	f040 808a 	bne.w	8002ff4 <xQueueGenericReceive+0x164>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee0:	9b01      	ldr	r3, [sp, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8107 	beq.w	80030f6 <xQueueGenericReceive+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8002ee8:	b915      	cbnz	r5, 8002ef0 <xQueueGenericReceive+0x60>
					vTaskSetTimeOutState( &xTimeOut );
 8002eea:	a802      	add	r0, sp, #8
 8002eec:	f000 fe20 	bl	8003b30 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002ef0:	f7ff fab2 	bl	8002458 <vPortExitCritical>
		vTaskSuspendAll();
 8002ef4:	f000 fb90 	bl	8003618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ef8:	f7ff fa8c 	bl	8002414 <vPortEnterCritical>
 8002efc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002f00:	2bff      	cmp	r3, #255	; 0xff
 8002f02:	bf08      	it	eq
 8002f04:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002f08:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002f0c:	2bff      	cmp	r3, #255	; 0xff
 8002f0e:	bf08      	it	eq
 8002f10:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002f14:	f7ff faa0 	bl	8002458 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f18:	a901      	add	r1, sp, #4
 8002f1a:	a802      	add	r0, sp, #8
 8002f1c:	f000 fe1e 	bl	8003b5c <xTaskCheckForTimeOut>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	f040 8087 	bne.w	8003034 <xQueueGenericReceive+0x1a4>
	taskENTER_CRITICAL();
 8002f26:	f7ff fa75 	bl	8002414 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d178      	bne.n	8003022 <xQueueGenericReceive+0x192>
	taskEXIT_CRITICAL();
 8002f30:	f7ff fa92 	bl	8002458 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80d5 	beq.w	80030e6 <xQueueGenericReceive+0x256>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f3c:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8002f40:	4650      	mov	r0, sl
 8002f42:	9901      	ldr	r1, [sp, #4]
 8002f44:	f000 fd5e 	bl	8003a04 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002f48:	f7ff fa64 	bl	8002414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002f4c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002f50:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	dc04      	bgt.n	8002f60 <xQueueGenericReceive+0xd0>
 8002f56:	e011      	b.n	8002f7c <xQueueGenericReceive+0xec>
 8002f58:	3d01      	subs	r5, #1
 8002f5a:	b2eb      	uxtb	r3, r5
 8002f5c:	b25d      	sxtb	r5, r3
 8002f5e:	b16b      	cbz	r3, 8002f7c <xQueueGenericReceive+0xec>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f62:	b15b      	cbz	r3, 8002f7c <xQueueGenericReceive+0xec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f64:	4650      	mov	r0, sl
 8002f66:	f000 fd9f 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d0f4      	beq.n	8002f58 <xQueueGenericReceive+0xc8>
 8002f6e:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8002f70:	f000 fe38 	bl	8003be4 <vTaskMissedYield>
 8002f74:	b2eb      	uxtb	r3, r5
 8002f76:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f1      	bne.n	8002f60 <xQueueGenericReceive+0xd0>
		pxQueue->cTxLock = queueUNLOCKED;
 8002f7c:	23ff      	movs	r3, #255	; 0xff
 8002f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002f82:	f7ff fa69 	bl	8002458 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002f86:	f7ff fa45 	bl	8002414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002f8a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002f8e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	dd16      	ble.n	8002fc2 <xQueueGenericReceive+0x132>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f94:	6923      	ldr	r3, [r4, #16]
 8002f96:	b1a3      	cbz	r3, 8002fc2 <xQueueGenericReceive+0x132>
 8002f98:	f104 0a10 	add.w	sl, r4, #16
 8002f9c:	e005      	b.n	8002faa <xQueueGenericReceive+0x11a>
 8002f9e:	3d01      	subs	r5, #1
 8002fa0:	b2eb      	uxtb	r3, r5
 8002fa2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fa4:	b16b      	cbz	r3, 8002fc2 <xQueueGenericReceive+0x132>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa6:	6923      	ldr	r3, [r4, #16]
 8002fa8:	b15b      	cbz	r3, 8002fc2 <xQueueGenericReceive+0x132>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002faa:	4650      	mov	r0, sl
 8002fac:	f000 fd7c 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d0f4      	beq.n	8002f9e <xQueueGenericReceive+0x10e>
 8002fb4:	3d01      	subs	r5, #1
					vTaskMissedYield();
 8002fb6:	f000 fe15 	bl	8003be4 <vTaskMissedYield>
 8002fba:	b2eb      	uxtb	r3, r5
 8002fbc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f1      	bne.n	8002fa6 <xQueueGenericReceive+0x116>
		pxQueue->cRxLock = queueUNLOCKED;
 8002fc2:	23ff      	movs	r3, #255	; 0xff
 8002fc4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002fc8:	f7ff fa46 	bl	8002458 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002fcc:	f000 fbe8 	bl	80037a0 <xTaskResumeAll>
 8002fd0:	b938      	cbnz	r0, 8002fe2 <xQueueGenericReceive+0x152>
					portYIELD_WITHIN_API();
 8002fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fd6:	f8c9 3000 	str.w	r3, [r9]
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8002fe4:	f7ff fa16 	bl	8002414 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe8:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fec:	f1ba 0f00 	cmp.w	sl, #0
 8002ff0:	f43f af76 	beq.w	8002ee0 <xQueueGenericReceive+0x50>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ff4:	4631      	mov	r1, r6
 8002ff6:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002ff8:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ffa:	f7ff fc6b 	bl	80028d4 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002ffe:	2f00      	cmp	r7, #0
 8003000:	d17f      	bne.n	8003102 <xQueueGenericReceive+0x272>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003002:	6822      	ldr	r2, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003004:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003008:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800300a:	b912      	cbnz	r2, 8003012 <xQueueGenericReceive+0x182>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800300c:	f000 fea6 	bl	8003d5c <pvTaskIncrementMutexHeldCount>
 8003010:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003012:	6923      	ldr	r3, [r4, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 8087 	bne.w	8003128 <xQueueGenericReceive+0x298>
				taskEXIT_CRITICAL();
 800301a:	f7ff fa1d 	bl	8002458 <vPortExitCritical>
				return pdPASS;
 800301e:	2001      	movs	r0, #1
 8003020:	e06c      	b.n	80030fc <xQueueGenericReceive+0x26c>
	taskEXIT_CRITICAL();
 8003022:	f7ff fa19 	bl	8002458 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003026:	4620      	mov	r0, r4
 8003028:	f7ff fc68 	bl	80028fc <prvUnlockQueue>
 800302c:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 800302e:	f000 fbb7 	bl	80037a0 <xTaskResumeAll>
 8003032:	e7d7      	b.n	8002fe4 <xQueueGenericReceive+0x154>
	taskENTER_CRITICAL();
 8003034:	f7ff f9ee 	bl	8002414 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003038:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800303c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800303e:	2d00      	cmp	r5, #0
 8003040:	dd16      	ble.n	8003070 <xQueueGenericReceive+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003044:	b1a3      	cbz	r3, 8003070 <xQueueGenericReceive+0x1e0>
 8003046:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800304a:	e005      	b.n	8003058 <xQueueGenericReceive+0x1c8>
 800304c:	3d01      	subs	r5, #1
 800304e:	b2eb      	uxtb	r3, r5
 8003050:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003052:	b16b      	cbz	r3, 8003070 <xQueueGenericReceive+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003056:	b15b      	cbz	r3, 8003070 <xQueueGenericReceive+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003058:	4650      	mov	r0, sl
 800305a:	f000 fd25 	bl	8003aa8 <xTaskRemoveFromEventList>
 800305e:	2800      	cmp	r0, #0
 8003060:	d0f4      	beq.n	800304c <xQueueGenericReceive+0x1bc>
 8003062:	3d01      	subs	r5, #1
						vTaskMissedYield();
 8003064:	f000 fdbe 	bl	8003be4 <vTaskMissedYield>
 8003068:	b2eb      	uxtb	r3, r5
 800306a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f1      	bne.n	8003054 <xQueueGenericReceive+0x1c4>
		pxQueue->cTxLock = queueUNLOCKED;
 8003070:	23ff      	movs	r3, #255	; 0xff
 8003072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003076:	f7ff f9ef 	bl	8002458 <vPortExitCritical>
	taskENTER_CRITICAL();
 800307a:	f7ff f9cb 	bl	8002414 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800307e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003082:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003084:	2d00      	cmp	r5, #0
 8003086:	dd16      	ble.n	80030b6 <xQueueGenericReceive+0x226>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003088:	6923      	ldr	r3, [r4, #16]
 800308a:	b1a3      	cbz	r3, 80030b6 <xQueueGenericReceive+0x226>
 800308c:	f104 0a10 	add.w	sl, r4, #16
 8003090:	e005      	b.n	800309e <xQueueGenericReceive+0x20e>
 8003092:	3d01      	subs	r5, #1
 8003094:	b2eb      	uxtb	r3, r5
 8003096:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003098:	b16b      	cbz	r3, 80030b6 <xQueueGenericReceive+0x226>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309a:	6923      	ldr	r3, [r4, #16]
 800309c:	b15b      	cbz	r3, 80030b6 <xQueueGenericReceive+0x226>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800309e:	4650      	mov	r0, sl
 80030a0:	f000 fd02 	bl	8003aa8 <xTaskRemoveFromEventList>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d0f4      	beq.n	8003092 <xQueueGenericReceive+0x202>
 80030a8:	3d01      	subs	r5, #1
					vTaskMissedYield();
 80030aa:	f000 fd9b 	bl	8003be4 <vTaskMissedYield>
 80030ae:	b2eb      	uxtb	r3, r5
 80030b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f1      	bne.n	800309a <xQueueGenericReceive+0x20a>
		pxQueue->cRxLock = queueUNLOCKED;
 80030b6:	23ff      	movs	r3, #255	; 0xff
 80030b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80030bc:	f7ff f9cc 	bl	8002458 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80030c0:	f000 fb6e 	bl	80037a0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80030c4:	f7ff f9a6 	bl	8002414 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030ca:	b1a3      	cbz	r3, 80030f6 <xQueueGenericReceive+0x266>
	taskEXIT_CRITICAL();
 80030cc:	f7ff f9c4 	bl	8002458 <vPortExitCritical>
 80030d0:	2501      	movs	r5, #1
 80030d2:	e787      	b.n	8002fe4 <xQueueGenericReceive+0x154>
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	e7fe      	b.n	80030e4 <xQueueGenericReceive+0x254>
						taskENTER_CRITICAL();
 80030e6:	f7ff f995 	bl	8002414 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80030ea:	6860      	ldr	r0, [r4, #4]
 80030ec:	f000 fd90 	bl	8003c10 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80030f0:	f7ff f9b2 	bl	8002458 <vPortExitCritical>
 80030f4:	e722      	b.n	8002f3c <xQueueGenericReceive+0xac>
					taskEXIT_CRITICAL();
 80030f6:	f7ff f9af 	bl	8002458 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80030fa:	2000      	movs	r0, #0
}
 80030fc:	b004      	add	sp, #16
 80030fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003102:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003104:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003106:	2b00      	cmp	r3, #0
 8003108:	d087      	beq.n	800301a <xQueueGenericReceive+0x18a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800310e:	f000 fccb 	bl	8003aa8 <xTaskRemoveFromEventList>
 8003112:	2800      	cmp	r0, #0
 8003114:	d081      	beq.n	800301a <xQueueGenericReceive+0x18a>
							queueYIELD_IF_USING_PREEMPTION();
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <xQueueGenericReceive+0x2c0>)
 8003118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	e778      	b.n	800301a <xQueueGenericReceive+0x18a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003128:	f104 0010 	add.w	r0, r4, #16
 800312c:	f000 fcbc 	bl	8003aa8 <xTaskRemoveFromEventList>
 8003130:	2800      	cmp	r0, #0
 8003132:	d1f0      	bne.n	8003116 <xQueueGenericReceive+0x286>
 8003134:	e771      	b.n	800301a <xQueueGenericReceive+0x18a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003136:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003138:	2a00      	cmp	r2, #0
 800313a:	f43f aeb3 	beq.w	8002ea4 <xQueueGenericReceive+0x14>
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	e7fe      	b.n	800314e <xQueueGenericReceive+0x2be>
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <xQueueReceiveFromISR>:
{
 8003154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003158:	b1b0      	cbz	r0, 8003188 <xQueueReceiveFromISR+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800315a:	b379      	cbz	r1, 80031bc <xQueueReceiveFromISR+0x68>
 800315c:	4605      	mov	r5, r0
 800315e:	4690      	mov	r8, r2
 8003160:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003162:	f7ff fa61 	bl	8002628 <vPortValidateInterruptPriority>
	__asm volatile
 8003166:	f3ef 8711 	mrs	r7, BASEPRI
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800317a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800317c:	b96c      	cbnz	r4, 800319a <xQueueReceiveFromISR+0x46>
			xReturn = pdFAIL;
 800317e:	4620      	mov	r0, r4
	__asm volatile
 8003180:	f387 8811 	msr	BASEPRI, r7
}
 8003184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	e7fe      	b.n	8003198 <xQueueReceiveFromISR+0x44>
			const int8_t cRxLock = pxQueue->cRxLock;
 800319a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800319e:	4649      	mov	r1, r9
 80031a0:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 80031a2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031a4:	f7ff fb96 	bl	80028d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80031a8:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80031aa:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80031ac:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80031ae:	d011      	beq.n	80031d4 <xQueueReceiveFromISR+0x80>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80031b0:	1c73      	adds	r3, r6, #1
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
			xReturn = pdPASS;
 80031b8:	2001      	movs	r0, #1
 80031ba:	e7e1      	b.n	8003180 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0cc      	beq.n	800315c <xQueueReceiveFromISR+0x8>
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	e7fe      	b.n	80031d2 <xQueueReceiveFromISR+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d4:	692b      	ldr	r3, [r5, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <xQueueReceiveFromISR+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031da:	f105 0010 	add.w	r0, r5, #16
 80031de:	f000 fc63 	bl	8003aa8 <xTaskRemoveFromEventList>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d0e8      	beq.n	80031b8 <xQueueReceiveFromISR+0x64>
						if( pxHigherPriorityTaskWoken != NULL )
 80031e6:	f1b8 0f00 	cmp.w	r8, #0
 80031ea:	d0e5      	beq.n	80031b8 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80031ec:	2001      	movs	r0, #1
 80031ee:	f8c8 0000 	str.w	r0, [r8]
 80031f2:	e7c5      	b.n	8003180 <xQueueReceiveFromISR+0x2c>

080031f4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80031f4:	b140      	cbz	r0, 8003208 <uxQueueMessagesWaiting+0x14>
{
 80031f6:	b510      	push	{r4, lr}
 80031f8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80031fa:	f7ff f90b 	bl	8002414 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80031fe:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8003200:	f7ff f92a 	bl	8002458 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003204:	4620      	mov	r0, r4
 8003206:	bd10      	pop	{r4, pc}
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	e7fe      	b.n	8003218 <uxQueueMessagesWaiting+0x24>
 800321a:	bf00      	nop

0800321c <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 800321c:	b108      	cbz	r0, 8003222 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800321e:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003220:	4770      	bx	lr
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	e7fe      	b.n	8003232 <uxQueueMessagesWaitingFromISR+0x16>

08003234 <vQueueDelete>:
	configASSERT( pxQueue );
 8003234:	b340      	cbz	r0, 8003288 <vQueueDelete+0x54>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003236:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <vQueueDelete+0x80>)
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4290      	cmp	r0, r2
 800323c:	d02d      	beq.n	800329a <vQueueDelete+0x66>
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4290      	cmp	r0, r2
 8003242:	d032      	beq.n	80032aa <vQueueDelete+0x76>
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	4290      	cmp	r0, r2
 8003248:	d031      	beq.n	80032ae <vQueueDelete+0x7a>
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	4290      	cmp	r0, r2
 800324e:	d026      	beq.n	800329e <vQueueDelete+0x6a>
 8003250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003252:	4290      	cmp	r0, r2
 8003254:	d025      	beq.n	80032a2 <vQueueDelete+0x6e>
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	4290      	cmp	r0, r2
 800325a:	d024      	beq.n	80032a6 <vQueueDelete+0x72>
 800325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325e:	4290      	cmp	r0, r2
 8003260:	d006      	beq.n	8003270 <vQueueDelete+0x3c>
 8003262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003264:	4290      	cmp	r0, r2
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003266:	bf08      	it	eq
 8003268:	2207      	moveq	r2, #7
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800326a:	d002      	beq.n	8003272 <vQueueDelete+0x3e>
		vPortFree( pxQueue );
 800326c:	f7ff bac4 	b.w	80027f8 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003270:	2206      	movs	r2, #6
{
 8003272:	b410      	push	{r4}
				xQueueRegistry[ ux ].pcQueueName = NULL;

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003274:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003278:	2100      	movs	r1, #0
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800327a:	6061      	str	r1, [r4, #4]
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800327c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
}
 8003280:	f85d 4b04 	ldr.w	r4, [sp], #4
		vPortFree( pxQueue );
 8003284:	f7ff bab8 	b.w	80027f8 <vPortFree>
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	e7fe      	b.n	8003298 <vQueueDelete+0x64>
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800329a:	2200      	movs	r2, #0
 800329c:	e7e9      	b.n	8003272 <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800329e:	2203      	movs	r2, #3
 80032a0:	e7e7      	b.n	8003272 <vQueueDelete+0x3e>
 80032a2:	2204      	movs	r2, #4
 80032a4:	e7e5      	b.n	8003272 <vQueueDelete+0x3e>
 80032a6:	2205      	movs	r2, #5
 80032a8:	e7e3      	b.n	8003272 <vQueueDelete+0x3e>
 80032aa:	2201      	movs	r2, #1
 80032ac:	e7e1      	b.n	8003272 <vQueueDelete+0x3e>
 80032ae:	2202      	movs	r2, #2
 80032b0:	e7df      	b.n	8003272 <vQueueDelete+0x3e>
 80032b2:	bf00      	nop
 80032b4:	2000422c 	.word	0x2000422c

080032b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032bc:	4d1b      	ldr	r5, [pc, #108]	; (800332c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80032be:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c0:	682b      	ldr	r3, [r5, #0]
{
 80032c2:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c4:	1d18      	adds	r0, r3, #4
{
 80032c6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c8:	f7ff f834 	bl	8002334 <uxListRemove>
 80032cc:	b940      	cbnz	r0, 80032e0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	4917      	ldr	r1, [pc, #92]	; (8003330 <prvAddCurrentTaskToDelayedList+0x78>)
 80032d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032d4:	680b      	ldr	r3, [r1, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4082      	lsls	r2, r0
 80032da:	ea23 0302 	bic.w	r3, r3, r2
 80032de:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032e0:	1c63      	adds	r3, r4, #1
 80032e2:	d018      	beq.n	8003316 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032e4:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032e6:	682b      	ldr	r3, [r5, #0]

			if( xTimeToWake < xConstTickCount )
 80032e8:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032ea:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032ec:	d80b      	bhi.n	8003306 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <prvAddCurrentTaskToDelayedList+0x7c>)
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	6829      	ldr	r1, [r5, #0]
 80032f4:	3104      	adds	r1, #4
 80032f6:	f7ff f803 	bl	8002300 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <prvAddCurrentTaskToDelayedList+0x80>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003300:	bf38      	it	cc
 8003302:	601c      	strcc	r4, [r3, #0]
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <prvAddCurrentTaskToDelayedList+0x84>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800330c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003310:	3104      	adds	r1, #4
 8003312:	f7fe bff5 	b.w	8002300 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003316:	2f00      	cmp	r7, #0
 8003318:	d0e4      	beq.n	80032e4 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800331a:	6829      	ldr	r1, [r5, #0]
 800331c:	4808      	ldr	r0, [pc, #32]	; (8003340 <prvAddCurrentTaskToDelayedList+0x88>)
 800331e:	3104      	adds	r1, #4
}
 8003320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003324:	f7fe bfdc 	b.w	80022e0 <vListInsertEnd>
 8003328:	20003d74 	.word	0x20003d74
 800332c:	20003c50 	.word	0x20003c50
 8003330:	20003cfc 	.word	0x20003cfc
 8003334:	20003c54 	.word	0x20003c54
 8003338:	20003d2c 	.word	0x20003d2c
 800333c:	20003c58 	.word	0x20003c58
 8003340:	20003d4c 	.word	0x20003d4c

08003344 <xTaskCreate>:
	{
 8003344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003348:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800334c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800334e:	4650      	mov	r0, sl
	{
 8003350:	460d      	mov	r5, r1
 8003352:	4699      	mov	r9, r3
 8003354:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003356:	f7ff f9bd 	bl	80026d4 <pvPortMalloc>
			if( pxStack != NULL )
 800335a:	2800      	cmp	r0, #0
 800335c:	f000 80c8 	beq.w	80034f0 <xTaskCreate+0x1ac>
 8003360:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003362:	2054      	movs	r0, #84	; 0x54
 8003364:	f7ff f9b6 	bl	80026d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003368:	4604      	mov	r4, r0
 800336a:	2800      	cmp	r0, #0
 800336c:	f000 80cd 	beq.w	800350a <xTaskCreate+0x1c6>
					pxNewTCB->pxStack = pxStack;
 8003370:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003372:	782b      	ldrb	r3, [r5, #0]
 8003374:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003378:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 800337c:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800337e:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003380:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8003384:	2b00      	cmp	r3, #0
 8003386:	d047      	beq.n	8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003388:	786b      	ldrb	r3, [r5, #1]
 800338a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800338e:	786b      	ldrb	r3, [r5, #1]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d041      	beq.n	8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003394:	78ab      	ldrb	r3, [r5, #2]
 8003396:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800339a:	78ab      	ldrb	r3, [r5, #2]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03b      	beq.n	8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033a0:	78eb      	ldrb	r3, [r5, #3]
 80033a2:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80033a6:	78eb      	ldrb	r3, [r5, #3]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d035      	beq.n	8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033ac:	792b      	ldrb	r3, [r5, #4]
 80033ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80033b2:	792b      	ldrb	r3, [r5, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02f      	beq.n	8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033b8:	796b      	ldrb	r3, [r5, #5]
 80033ba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80033be:	796b      	ldrb	r3, [r5, #5]
 80033c0:	b353      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033c2:	79ab      	ldrb	r3, [r5, #6]
 80033c4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80033c8:	79ab      	ldrb	r3, [r5, #6]
 80033ca:	b32b      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033cc:	79eb      	ldrb	r3, [r5, #7]
 80033ce:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80033d2:	79eb      	ldrb	r3, [r5, #7]
 80033d4:	b303      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033d6:	7a2b      	ldrb	r3, [r5, #8]
 80033d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80033dc:	7a2b      	ldrb	r3, [r5, #8]
 80033de:	b1db      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033e0:	7a6b      	ldrb	r3, [r5, #9]
 80033e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80033e6:	7a6b      	ldrb	r3, [r5, #9]
 80033e8:	b1b3      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033ea:	7aab      	ldrb	r3, [r5, #10]
 80033ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80033f0:	7aab      	ldrb	r3, [r5, #10]
 80033f2:	b18b      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033f4:	7aeb      	ldrb	r3, [r5, #11]
 80033f6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80033fa:	7aeb      	ldrb	r3, [r5, #11]
 80033fc:	b163      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033fe:	7b2b      	ldrb	r3, [r5, #12]
 8003400:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8003404:	7b2b      	ldrb	r3, [r5, #12]
 8003406:	b13b      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003408:	7b6b      	ldrb	r3, [r5, #13]
 800340a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800340e:	7b6b      	ldrb	r3, [r5, #13]
 8003410:	b113      	cbz	r3, 8003418 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003412:	7bab      	ldrb	r3, [r5, #14]
 8003414:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003418:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800341a:	2d06      	cmp	r5, #6
 800341c:	bf28      	it	cs
 800341e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003420:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003424:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003428:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800342a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800342c:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800342e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003432:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003436:	f7fe ff4f 	bl	80022d8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800343e:	f104 0018 	add.w	r0, r4, #24
 8003442:	f7fe ff49 	bl	80022d8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003446:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800344c:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800344e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003452:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003454:	464a      	mov	r2, r9
 8003456:	4641      	mov	r1, r8
 8003458:	4630      	mov	r0, r6
 800345a:	f7fe ffb1 	bl	80023c0 <pxPortInitialiseStack>
 800345e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003460:	b107      	cbz	r7, 8003464 <xTaskCreate+0x120>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003462:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 8003464:	f7fe ffd6 	bl	8002414 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003468:	4a3e      	ldr	r2, [pc, #248]	; (8003564 <xTaskCreate+0x220>)
		if( pxCurrentTCB == NULL )
 800346a:	4e3f      	ldr	r6, [pc, #252]	; (8003568 <xTaskCreate+0x224>)
		uxCurrentNumberOfTasks++;
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003472:	6833      	ldr	r3, [r6, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d03f      	beq.n	80034f8 <xTaskCreate+0x1b4>
			if( xSchedulerRunning == pdFALSE )
 8003478:	4f3c      	ldr	r7, [pc, #240]	; (800356c <xTaskCreate+0x228>)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b363      	cbz	r3, 80034d8 <xTaskCreate+0x194>
 800347e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003480:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003590 <xTaskCreate+0x24c>
		uxTaskNumber++;
 8003484:	4a3a      	ldr	r2, [pc, #232]	; (8003570 <xTaskCreate+0x22c>)
		prvAddTaskToReadyList( pxNewTCB );
 8003486:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8003594 <xTaskCreate+0x250>
		uxTaskNumber++;
 800348a:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800348c:	f8de c000 	ldr.w	ip, [lr]
 8003490:	2501      	movs	r5, #1
		uxTaskNumber++;
 8003492:	4428      	add	r0, r5
 8003494:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003496:	fa05 f203 	lsl.w	r2, r5, r3
 800349a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800349e:	ea42 020c 	orr.w	r2, r2, ip
 80034a2:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 80034a6:	4651      	mov	r1, sl
 80034a8:	f8ce 2000 	str.w	r2, [lr]
 80034ac:	f7fe ff18 	bl	80022e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80034b0:	f7fe ffd2 	bl	8002458 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b1c3      	cbz	r3, 80034ea <xTaskCreate+0x1a6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034b8:	6832      	ldr	r2, [r6, #0]
 80034ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034be:	429a      	cmp	r2, r3
 80034c0:	d213      	bcs.n	80034ea <xTaskCreate+0x1a6>
			taskYIELD_IF_USING_PREEMPTION();
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <xTaskCreate+0x230>)
 80034c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80034d2:	4628      	mov	r0, r5
 80034d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034d8:	6832      	ldr	r2, [r6, #0]
 80034da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034de:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003590 <xTaskCreate+0x24c>
 80034e2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80034e4:	bf98      	it	ls
 80034e6:	6034      	strls	r4, [r6, #0]
 80034e8:	e7cc      	b.n	8003484 <xTaskCreate+0x140>
			xReturn = pdPASS;
 80034ea:	4628      	mov	r0, r5
	}
 80034ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 80034f8:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034fa:	6813      	ldr	r3, [r2, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d00b      	beq.n	8003518 <xTaskCreate+0x1d4>
 8003500:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003502:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003590 <xTaskCreate+0x24c>
 8003506:	4f19      	ldr	r7, [pc, #100]	; (800356c <xTaskCreate+0x228>)
 8003508:	e7bc      	b.n	8003484 <xTaskCreate+0x140>
					vPortFree( pxStack );
 800350a:	4630      	mov	r0, r6
 800350c:	f7ff f974 	bl	80027f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003518:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8003590 <xTaskCreate+0x24c>
 800351c:	4645      	mov	r5, r8
 800351e:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003522:	4628      	mov	r0, r5
 8003524:	3514      	adds	r5, #20
 8003526:	f7fe fecb 	bl	80022c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352a:	42bd      	cmp	r5, r7
 800352c:	d1f9      	bne.n	8003522 <xTaskCreate+0x1de>
	vListInitialise( &xDelayedTaskList1 );
 800352e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003598 <xTaskCreate+0x254>
	vListInitialise( &xDelayedTaskList2 );
 8003532:	4d11      	ldr	r5, [pc, #68]	; (8003578 <xTaskCreate+0x234>)
 8003534:	4f0d      	ldr	r7, [pc, #52]	; (800356c <xTaskCreate+0x228>)
	vListInitialise( &xDelayedTaskList1 );
 8003536:	4648      	mov	r0, r9
 8003538:	f7fe fec2 	bl	80022c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800353c:	4628      	mov	r0, r5
 800353e:	f7fe febf 	bl	80022c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003542:	480e      	ldr	r0, [pc, #56]	; (800357c <xTaskCreate+0x238>)
 8003544:	f7fe febc 	bl	80022c0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003548:	480d      	ldr	r0, [pc, #52]	; (8003580 <xTaskCreate+0x23c>)
 800354a:	f7fe feb9 	bl	80022c0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <xTaskCreate+0x240>)
 8003550:	f7fe feb6 	bl	80022c0 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <xTaskCreate+0x244>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <xTaskCreate+0x248>)
 8003558:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800355c:	601d      	str	r5, [r3, #0]
 800355e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003560:	e790      	b.n	8003484 <xTaskCreate+0x140>
 8003562:	bf00      	nop
 8003564:	20003ce8 	.word	0x20003ce8
 8003568:	20003c50 	.word	0x20003c50
 800356c:	20003d48 	.word	0x20003d48
 8003570:	20003cf8 	.word	0x20003cf8
 8003574:	e000ed04 	.word	0xe000ed04
 8003578:	20003d14 	.word	0x20003d14
 800357c:	20003d34 	.word	0x20003d34
 8003580:	20003d60 	.word	0x20003d60
 8003584:	20003d4c 	.word	0x20003d4c
 8003588:	20003c58 	.word	0x20003c58
 800358c:	20003c54 	.word	0x20003c54
 8003590:	20003c5c 	.word	0x20003c5c
 8003594:	20003cfc 	.word	0x20003cfc
 8003598:	20003d00 	.word	0x20003d00

0800359c <vTaskStartScheduler>:
{
 800359c:	b530      	push	{r4, r5, lr}
 800359e:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <vTaskStartScheduler+0x64>)
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	2400      	movs	r4, #0
 80035a6:	9400      	str	r4, [sp, #0]
 80035a8:	4623      	mov	r3, r4
 80035aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ae:	4915      	ldr	r1, [pc, #84]	; (8003604 <vTaskStartScheduler+0x68>)
 80035b0:	4815      	ldr	r0, [pc, #84]	; (8003608 <vTaskStartScheduler+0x6c>)
 80035b2:	f7ff fec7 	bl	8003344 <xTaskCreate>
	if( xReturn == pdPASS )
 80035b6:	2801      	cmp	r0, #1
 80035b8:	d00c      	beq.n	80035d4 <vTaskStartScheduler+0x38>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035ba:	3001      	adds	r0, #1
 80035bc:	d001      	beq.n	80035c2 <vTaskStartScheduler+0x26>
}
 80035be:	b003      	add	sp, #12
 80035c0:	bd30      	pop	{r4, r5, pc}
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	e7fe      	b.n	80035d2 <vTaskStartScheduler+0x36>
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80035e4:	4909      	ldr	r1, [pc, #36]	; (800360c <vTaskStartScheduler+0x70>)
		xSchedulerRunning = pdTRUE;
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <vTaskStartScheduler+0x74>)
		xTickCount = ( TickType_t ) 0U;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <vTaskStartScheduler+0x78>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80035ea:	f04f 35ff 	mov.w	r5, #4294967295
 80035ee:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80035f0:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 80035f2:	601c      	str	r4, [r3, #0]
}
 80035f4:	b003      	add	sp, #12
 80035f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80035fa:	f7fe bf9f 	b.w	800253c <xPortStartScheduler>
 80035fe:	bf00      	nop
 8003600:	20003d28 	.word	0x20003d28
 8003604:	0800e5bc 	.word	0x0800e5bc
 8003608:	08003905 	.word	0x08003905
 800360c:	20003d2c 	.word	0x20003d2c
 8003610:	20003d48 	.word	0x20003d48
 8003614:	20003d74 	.word	0x20003d74

08003618 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003618:	4a02      	ldr	r2, [pc, #8]	; (8003624 <vTaskSuspendAll+0xc>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20003cf4 	.word	0x20003cf4

08003628 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003628:	4b01      	ldr	r3, [pc, #4]	; (8003630 <xTaskGetTickCount+0x8>)
 800362a:	6818      	ldr	r0, [r3, #0]
}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20003d74 	.word	0x20003d74

08003634 <xTaskGetTickCountFromISR>:
{
 8003634:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003636:	f7fe fff7 	bl	8002628 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800363a:	4b01      	ldr	r3, [pc, #4]	; (8003640 <xTaskGetTickCountFromISR+0xc>)
 800363c:	6818      	ldr	r0, [r3, #0]
}
 800363e:	bd08      	pop	{r3, pc}
 8003640:	20003d74 	.word	0x20003d74

08003644 <xTaskIncrementTick>:
{
 8003644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <xTaskIncrementTick+0x130>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d153      	bne.n	80036f8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003650:	4b49      	ldr	r3, [pc, #292]	; (8003778 <xTaskIncrementTick+0x134>)
 8003652:	681e      	ldr	r6, [r3, #0]
 8003654:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8003656:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003658:	2e00      	cmp	r6, #0
 800365a:	d05a      	beq.n	8003712 <xTaskIncrementTick+0xce>
 800365c:	f8df b138 	ldr.w	fp, [pc, #312]	; 8003798 <xTaskIncrementTick+0x154>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003660:	f8db 2000 	ldr.w	r2, [fp]
 8003664:	4296      	cmp	r6, r2
 8003666:	d361      	bcc.n	800372c <xTaskIncrementTick+0xe8>
 8003668:	4d44      	ldr	r5, [pc, #272]	; (800377c <xTaskIncrementTick+0x138>)
 800366a:	4f45      	ldr	r7, [pc, #276]	; (8003780 <xTaskIncrementTick+0x13c>)
 800366c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800379c <xTaskIncrementTick+0x158>
 8003670:	2400      	movs	r4, #0
 8003672:	e02e      	b.n	80036d2 <xTaskIncrementTick+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003674:	682a      	ldr	r2, [r5, #0]
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800367c:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003680:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8003684:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003686:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8003688:	d36a      	bcc.n	8003760 <xTaskIncrementTick+0x11c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368a:	f7fe fe53 	bl	8002334 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800368e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003692:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003696:	b109      	cbz	r1, 800369c <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003698:	f7fe fe4c 	bl	8002334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <xTaskIncrementTick+0x140>)
 800369e:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	fa02 fe00 	lsl.w	lr, r2, r0
 80036aa:	ea4e 0e03 	orr.w	lr, lr, r3
 80036ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036b2:	4b34      	ldr	r3, [pc, #208]	; (8003784 <xTaskIncrementTick+0x140>)
 80036b4:	4651      	mov	r1, sl
 80036b6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80036ba:	f8c3 e000 	str.w	lr, [r3]
 80036be:	f7fe fe0f 	bl	80022e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c2:	f8d8 0000 	ldr.w	r0, [r8]
 80036c6:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 80036ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80036cc:	4291      	cmp	r1, r2
 80036ce:	bf28      	it	cs
 80036d0:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d2:	682a      	ldr	r2, [r5, #0]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	d1cc      	bne.n	8003674 <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036da:	f04f 32ff 	mov.w	r2, #4294967295
 80036de:	f8cb 2000 	str.w	r2, [fp]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036e2:	f8d8 3000 	ldr.w	r3, [r8]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ec:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	bf28      	it	cs
 80036f4:	2401      	movcs	r4, #1
 80036f6:	e004      	b.n	8003702 <xTaskIncrementTick+0xbe>
		++uxPendedTicks;
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <xTaskIncrementTick+0x144>)
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003700:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <xTaskIncrementTick+0x148>)
 8003704:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf18      	it	ne
 800370a:	2401      	movne	r4, #1
}
 800370c:	4620      	mov	r0, r4
 800370e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8003712:	4d1a      	ldr	r5, [pc, #104]	; (800377c <xTaskIncrementTick+0x138>)
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	b16b      	cbz	r3, 8003736 <xTaskIncrementTick+0xf2>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	e7fe      	b.n	800372a <xTaskIncrementTick+0xe6>
 800372c:	4f14      	ldr	r7, [pc, #80]	; (8003780 <xTaskIncrementTick+0x13c>)
 800372e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800379c <xTaskIncrementTick+0x158>
BaseType_t xSwitchRequired = pdFALSE;
 8003732:	2400      	movs	r4, #0
 8003734:	e7d5      	b.n	80036e2 <xTaskIncrementTick+0x9e>
			taskSWITCH_DELAYED_LISTS();
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <xTaskIncrementTick+0x14c>)
 8003738:	6829      	ldr	r1, [r5, #0]
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <xTaskIncrementTick+0x150>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	6028      	str	r0, [r5, #0]
 8003740:	6019      	str	r1, [r3, #0]
 8003742:	6813      	ldr	r3, [r2, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b15b      	cbz	r3, 8003766 <xTaskIncrementTick+0x122>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800374e:	682a      	ldr	r2, [r5, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003750:	f8df b044 	ldr.w	fp, [pc, #68]	; 8003798 <xTaskIncrementTick+0x154>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003754:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003756:	68d2      	ldr	r2, [r2, #12]
 8003758:	6852      	ldr	r2, [r2, #4]
 800375a:	f8cb 2000 	str.w	r2, [fp]
 800375e:	e77f      	b.n	8003660 <xTaskIncrementTick+0x1c>
						xNextTaskUnblockTime = xItemValue;
 8003760:	f8cb 1000 	str.w	r1, [fp]
						break;
 8003764:	e7bd      	b.n	80036e2 <xTaskIncrementTick+0x9e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003766:	f8df b030 	ldr.w	fp, [pc, #48]	; 8003798 <xTaskIncrementTick+0x154>
 800376a:	f04f 32ff 	mov.w	r2, #4294967295
 800376e:	f8cb 2000 	str.w	r2, [fp]
 8003772:	e775      	b.n	8003660 <xTaskIncrementTick+0x1c>
 8003774:	20003cf4 	.word	0x20003cf4
 8003778:	20003d74 	.word	0x20003d74
 800377c:	20003c54 	.word	0x20003c54
 8003780:	20003c5c 	.word	0x20003c5c
 8003784:	20003cfc 	.word	0x20003cfc
 8003788:	20003cf0 	.word	0x20003cf0
 800378c:	20003d78 	.word	0x20003d78
 8003790:	20003c58 	.word	0x20003c58
 8003794:	20003d30 	.word	0x20003d30
 8003798:	20003d2c 	.word	0x20003d2c
 800379c:	20003c50 	.word	0x20003c50

080037a0 <xTaskResumeAll>:
{
 80037a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80037a4:	4c39      	ldr	r4, [pc, #228]	; (800388c <xTaskResumeAll+0xec>)
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	b943      	cbnz	r3, 80037bc <xTaskResumeAll+0x1c>
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	e7fe      	b.n	80037ba <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80037bc:	f7fe fe2a 	bl	8002414 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c6:	6824      	ldr	r4, [r4, #0]
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	d151      	bne.n	8003870 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037cc:	4b30      	ldr	r3, [pc, #192]	; (8003890 <xTaskResumeAll+0xf0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d04d      	beq.n	8003870 <xTaskResumeAll+0xd0>
 80037d4:	4d2f      	ldr	r5, [pc, #188]	; (8003894 <xTaskResumeAll+0xf4>)
 80037d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80038ac <xTaskResumeAll+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80037da:	4e2f      	ldr	r6, [pc, #188]	; (8003898 <xTaskResumeAll+0xf8>)
 80037dc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80038b0 <xTaskResumeAll+0x110>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037e0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80038b4 <xTaskResumeAll+0x114>
 80037e4:	e01f      	b.n	8003826 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80037e6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80037ea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ec:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037f0:	f104 0018 	add.w	r0, r4, #24
 80037f4:	f7fe fd9e 	bl	8002334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f8:	4640      	mov	r0, r8
 80037fa:	f7fe fd9b 	bl	8002334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003800:	6832      	ldr	r2, [r6, #0]
 8003802:	fa07 f300 	lsl.w	r3, r7, r0
 8003806:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800380a:	4313      	orrs	r3, r2
 800380c:	4641      	mov	r1, r8
 800380e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8003812:	6033      	str	r3, [r6, #0]
 8003814:	f7fe fd64 	bl	80022e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003818:	f8db 3000 	ldr.w	r3, [fp]
 800381c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003822:	bf28      	it	cs
 8003824:	602f      	strcs	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003826:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800382a:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1da      	bne.n	80037e6 <xTaskResumeAll+0x46>
				if( pxTCB != NULL )
 8003830:	b13c      	cbz	r4, 8003842 <xTaskResumeAll+0xa2>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <xTaskResumeAll+0xfc>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	bb02      	cbnz	r2, 800387c <xTaskResumeAll+0xdc>
		xNextTaskUnblockTime = portMAX_DELAY;
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <xTaskResumeAll+0x100>)
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003842:	4e18      	ldr	r6, [pc, #96]	; (80038a4 <xTaskResumeAll+0x104>)
 8003844:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003846:	b13c      	cbz	r4, 8003858 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8003848:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800384a:	f7ff fefb 	bl	8003644 <xTaskIncrementTick>
 800384e:	b100      	cbz	r0, 8003852 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8003850:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003852:	3c01      	subs	r4, #1
 8003854:	d1f9      	bne.n	800384a <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
 8003856:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b14b      	cbz	r3, 8003870 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <xTaskResumeAll+0x108>)
 800385e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800386c:	2401      	movs	r4, #1
 800386e:	e000      	b.n	8003872 <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 8003870:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003872:	f7fe fdf1 	bl	8002458 <vPortExitCritical>
}
 8003876:	4620      	mov	r0, r4
 8003878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800387c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <xTaskResumeAll+0x100>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003880:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003882:	68d2      	ldr	r2, [r2, #12]
 8003884:	6852      	ldr	r2, [r2, #4]
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e7db      	b.n	8003842 <xTaskResumeAll+0xa2>
 800388a:	bf00      	nop
 800388c:	20003cf4 	.word	0x20003cf4
 8003890:	20003ce8 	.word	0x20003ce8
 8003894:	20003d78 	.word	0x20003d78
 8003898:	20003cfc 	.word	0x20003cfc
 800389c:	20003c54 	.word	0x20003c54
 80038a0:	20003d2c 	.word	0x20003d2c
 80038a4:	20003cf0 	.word	0x20003cf0
 80038a8:	e000ed04 	.word	0xe000ed04
 80038ac:	20003d34 	.word	0x20003d34
 80038b0:	20003c5c 	.word	0x20003c5c
 80038b4:	20003c50 	.word	0x20003c50

080038b8 <vTaskDelay>:
	{
 80038b8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038ba:	b158      	cbz	r0, 80038d4 <vTaskDelay+0x1c>
			configASSERT( uxSchedulerSuspended == 0 );
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <vTaskDelay+0x44>)
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	b189      	cbz	r1, 80038e6 <vTaskDelay+0x2e>
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	e7fe      	b.n	80038d2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <vTaskDelay+0x48>)
 80038d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	bd08      	pop	{r3, pc}
	++uxSchedulerSuspended;
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	3201      	adds	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038ec:	f7ff fce4 	bl	80032b8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80038f0:	f7ff ff56 	bl	80037a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d0ed      	beq.n	80038d4 <vTaskDelay+0x1c>
 80038f8:	bd08      	pop	{r3, pc}
 80038fa:	bf00      	nop
 80038fc:	20003cf4 	.word	0x20003cf4
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <prvIdleTask>:
{
 8003904:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8003908:	4c1c      	ldr	r4, [pc, #112]	; (800397c <prvIdleTask+0x78>)
 800390a:	4e1d      	ldr	r6, [pc, #116]	; (8003980 <prvIdleTask+0x7c>)
 800390c:	4d1d      	ldr	r5, [pc, #116]	; (8003984 <prvIdleTask+0x80>)
 800390e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800398c <prvIdleTask+0x88>
				taskYIELD();
 8003912:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003990 <prvIdleTask+0x8c>
 8003916:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800391a:	e006      	b.n	800392a <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800391c:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800391e:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 8003920:	3301      	adds	r3, #1
 8003922:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 8003924:	f7ff ff3c 	bl	80037a0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003928:	b96f      	cbnz	r7, 8003946 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f5      	bne.n	800391c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003930:	f8d8 3000 	ldr.w	r3, [r8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d9f8      	bls.n	800392a <prvIdleTask+0x26>
				taskYIELD();
 8003938:	f8ca 9000 	str.w	r9, [sl]
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	e7f1      	b.n	800392a <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 8003946:	f7fe fd65 	bl	8002414 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800394a:	68f3      	ldr	r3, [r6, #12]
 800394c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003950:	f10b 0004 	add.w	r0, fp, #4
 8003954:	f7fe fcee 	bl	8002334 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <prvIdleTask+0x84>)
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <prvIdleTask+0x84>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003962:	682b      	ldr	r3, [r5, #0]
 8003964:	3b01      	subs	r3, #1
 8003966:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8003968:	f7fe fd76 	bl	8002458 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800396c:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8003970:	f7fe ff42 	bl	80027f8 <vPortFree>
			vPortFree( pxTCB );
 8003974:	4658      	mov	r0, fp
 8003976:	f7fe ff3f 	bl	80027f8 <vPortFree>
 800397a:	e7d6      	b.n	800392a <prvIdleTask+0x26>
 800397c:	20003cf4 	.word	0x20003cf4
 8003980:	20003d60 	.word	0x20003d60
 8003984:	20003cec 	.word	0x20003cec
 8003988:	20003ce8 	.word	0x20003ce8
 800398c:	20003c5c 	.word	0x20003c5c
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003994:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <vTaskSwitchContext+0x5c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	bb33      	cbnz	r3, 80039e8 <vTaskSwitchContext+0x54>
		xYieldPending = pdFALSE;
 800399a:	4916      	ldr	r1, [pc, #88]	; (80039f4 <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 800399e:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039a0:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f1c3 031f 	rsb	r3, r3, #31
 80039ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4912      	ldr	r1, [pc, #72]	; (80039fc <vTaskSwitchContext+0x68>)
 80039b4:	58ca      	ldr	r2, [r1, r3]
 80039b6:	18c8      	adds	r0, r1, r3
 80039b8:	b942      	cbnz	r2, 80039cc <vTaskSwitchContext+0x38>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	e7fe      	b.n	80039ca <vTaskSwitchContext+0x36>
 80039cc:	6842      	ldr	r2, [r0, #4]
 80039ce:	3308      	adds	r3, #8
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	6042      	str	r2, [r0, #4]
 80039d4:	440b      	add	r3, r1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf08      	it	eq
 80039da:	6852      	ldreq	r2, [r2, #4]
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <vTaskSwitchContext+0x6c>)
 80039de:	bf08      	it	eq
 80039e0:	6042      	streq	r2, [r0, #4]
 80039e2:	68d2      	ldr	r2, [r2, #12]
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	4770      	bx	lr
		xYieldPending = pdTRUE;
 80039e8:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <vTaskSwitchContext+0x60>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	4770      	bx	lr
 80039f0:	20003cf4 	.word	0x20003cf4
 80039f4:	20003d78 	.word	0x20003d78
 80039f8:	20003cfc 	.word	0x20003cfc
 80039fc:	20003c5c 	.word	0x20003c5c
 8003a00:	20003c50 	.word	0x20003c50

08003a04 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003a04:	b348      	cbz	r0, 8003a5a <vTaskPlaceOnEventList+0x56>
{
 8003a06:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a08:	4d20      	ldr	r5, [pc, #128]	; (8003a8c <vTaskPlaceOnEventList+0x88>)
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	6829      	ldr	r1, [r5, #0]
 8003a0e:	3118      	adds	r1, #24
 8003a10:	f7fe fc76 	bl	8002300 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003a14:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <vTaskPlaceOnEventList+0x8c>)
 8003a16:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a18:	6828      	ldr	r0, [r5, #0]
 8003a1a:	3004      	adds	r0, #4
 8003a1c:	f7fe fc8a 	bl	8002334 <uxListRemove>
 8003a20:	b940      	cbnz	r0, 8003a34 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	491b      	ldr	r1, [pc, #108]	; (8003a94 <vTaskPlaceOnEventList+0x90>)
 8003a26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a28:	680b      	ldr	r3, [r1, #0]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4082      	lsls	r2, r0
 8003a2e:	ea23 0302 	bic.w	r3, r3, r2
 8003a32:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a34:	1c63      	adds	r3, r4, #1
 8003a36:	d019      	beq.n	8003a6c <vTaskPlaceOnEventList+0x68>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a38:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a3a:	682b      	ldr	r3, [r5, #0]
			if( xTimeToWake < xConstTickCount )
 8003a3c:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a3e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a40:	d81b      	bhi.n	8003a7a <vTaskPlaceOnEventList+0x76>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <vTaskPlaceOnEventList+0x94>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	6829      	ldr	r1, [r5, #0]
 8003a48:	3104      	adds	r1, #4
 8003a4a:	f7fe fc59 	bl	8002300 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <vTaskPlaceOnEventList+0x98>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003a54:	bf38      	it	cc
 8003a56:	601c      	strcc	r4, [r3, #0]
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	e7fe      	b.n	8003a6a <vTaskPlaceOnEventList+0x66>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a6c:	6829      	ldr	r1, [r5, #0]
 8003a6e:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <vTaskPlaceOnEventList+0x9c>)
 8003a70:	3104      	adds	r1, #4
}
 8003a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a76:	f7fe bc33 	b.w	80022e0 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <vTaskPlaceOnEventList+0xa0>)
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	6829      	ldr	r1, [r5, #0]
}
 8003a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a84:	3104      	adds	r1, #4
 8003a86:	f7fe bc3b 	b.w	8002300 <vListInsert>
 8003a8a:	bf00      	nop
 8003a8c:	20003c50 	.word	0x20003c50
 8003a90:	20003d74 	.word	0x20003d74
 8003a94:	20003cfc 	.word	0x20003cfc
 8003a98:	20003c54 	.word	0x20003c54
 8003a9c:	20003d2c 	.word	0x20003d2c
 8003aa0:	20003d4c 	.word	0x20003d4c
 8003aa4:	20003c58 	.word	0x20003c58

08003aa8 <xTaskRemoveFromEventList>:
{
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003aaa:	68c3      	ldr	r3, [r0, #12]
 8003aac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003aae:	b32c      	cbz	r4, 8003afc <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ab0:	f104 0518 	add.w	r5, r4, #24
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f7fe fc3d 	bl	8002334 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aba:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <xTaskRemoveFromEventList+0x70>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	bb33      	cbnz	r3, 8003b0e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ac0:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ac2:	4d16      	ldr	r5, [pc, #88]	; (8003b1c <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f7fe fc35 	bl	8002334 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003aca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003acc:	682f      	ldr	r7, [r5, #0]
 8003ace:	4814      	ldr	r0, [pc, #80]	; (8003b20 <xTaskRemoveFromEventList+0x78>)
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	4093      	lsls	r3, r2
 8003ad4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ad8:	433b      	orrs	r3, r7
 8003ada:	4631      	mov	r1, r6
 8003adc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	f7fe fbfd 	bl	80022e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <xTaskRemoveFromEventList+0x7c>)
 8003ae8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003af0:	bf83      	ittte	hi
 8003af2:	4b0d      	ldrhi	r3, [pc, #52]	; (8003b28 <xTaskRemoveFromEventList+0x80>)
 8003af4:	2001      	movhi	r0, #1
 8003af6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003af8:	2000      	movls	r0, #0
}
 8003afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	e7fe      	b.n	8003b0c <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4806      	ldr	r0, [pc, #24]	; (8003b2c <xTaskRemoveFromEventList+0x84>)
 8003b12:	f7fe fbe5 	bl	80022e0 <vListInsertEnd>
 8003b16:	e7e6      	b.n	8003ae6 <xTaskRemoveFromEventList+0x3e>
 8003b18:	20003cf4 	.word	0x20003cf4
 8003b1c:	20003cfc 	.word	0x20003cfc
 8003b20:	20003c5c 	.word	0x20003c5c
 8003b24:	20003c50 	.word	0x20003c50
 8003b28:	20003d78 	.word	0x20003d78
 8003b2c:	20003d34 	.word	0x20003d34

08003b30 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8003b30:	b130      	cbz	r0, 8003b40 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b36:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e880 000c 	stmia.w	r0, {r2, r3}
 8003b3e:	4770      	bx	lr
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	e7fe      	b.n	8003b50 <vTaskSetTimeOutState+0x20>
 8003b52:	bf00      	nop
 8003b54:	20003d30 	.word	0x20003d30
 8003b58:	20003d74 	.word	0x20003d74

08003b5c <xTaskCheckForTimeOut>:
{
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003b5e:	b370      	cbz	r0, 8003bbe <xTaskCheckForTimeOut+0x62>
	configASSERT( pxTicksToWait );
 8003b60:	b321      	cbz	r1, 8003bac <xTaskCheckForTimeOut+0x50>
 8003b62:	460d      	mov	r5, r1
 8003b64:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003b66:	f7fe fc55 	bl	8002414 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8003b6a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8003b6c:	481b      	ldr	r0, [pc, #108]	; (8003bdc <xTaskCheckForTimeOut+0x80>)
			if( *pxTicksToWait == portMAX_DELAY )
 8003b6e:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8003b70:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003b72:	d02d      	beq.n	8003bd0 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b74:	4e1a      	ldr	r6, [pc, #104]	; (8003be0 <xTaskCheckForTimeOut+0x84>)
 8003b76:	6827      	ldr	r7, [r4, #0]
 8003b78:	6832      	ldr	r2, [r6, #0]
 8003b7a:	4297      	cmp	r7, r2
 8003b7c:	6862      	ldr	r2, [r4, #4]
 8003b7e:	d006      	beq.n	8003b8e <xTaskCheckForTimeOut+0x32>
 8003b80:	4291      	cmp	r1, r2
 8003b82:	d304      	bcc.n	8003b8e <xTaskCheckForTimeOut+0x32>
			xReturn = pdTRUE;
 8003b84:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8003b86:	f7fe fc67 	bl	8002458 <vPortExitCritical>
}
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b8e:	1a8f      	subs	r7, r1, r2
 8003b90:	42bb      	cmp	r3, r7
 8003b92:	d9f7      	bls.n	8003b84 <xTaskCheckForTimeOut+0x28>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003b94:	1a5b      	subs	r3, r3, r1
 8003b96:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b98:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b9a:	6802      	ldr	r2, [r0, #0]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003b9c:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8003b9e:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ba0:	e884 0006 	stmia.w	r4, {r1, r2}
	taskEXIT_CRITICAL();
 8003ba4:	f7fe fc58 	bl	8002458 <vPortExitCritical>
}
 8003ba8:	4628      	mov	r0, r5
 8003baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	e7fe      	b.n	8003bbc <xTaskCheckForTimeOut+0x60>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	e7fe      	b.n	8003bce <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8003bd0:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 8003bd2:	f7fe fc41 	bl	8002458 <vPortExitCritical>
}
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20003d74 	.word	0x20003d74
 8003be0:	20003d30 	.word	0x20003d30

08003be4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <vTaskMissedYield+0x8>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	4770      	bx	lr
 8003bec:	20003d78 	.word	0x20003d78

08003bf0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <xTaskGetSchedulerState+0x18>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	b133      	cbz	r3, 8003c04 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <xTaskGetSchedulerState+0x1c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2002      	moveq	r0, #2
 8003c00:	2000      	movne	r0, #0
 8003c02:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c04:	2001      	movs	r0, #1
	}
 8003c06:	4770      	bx	lr
 8003c08:	20003d48 	.word	0x20003d48
 8003c0c:	20003cf4 	.word	0x20003cf4

08003c10 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d041      	beq.n	8003c98 <vTaskPriorityInherit+0x88>
	{
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c16:	4c21      	ldr	r4, [pc, #132]	; (8003c9c <vTaskPriorityInherit+0x8c>)
 8003c18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d212      	bcs.n	8003c48 <vTaskPriorityInherit+0x38>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c22:	6982      	ldr	r2, [r0, #24]
 8003c24:	2a00      	cmp	r2, #0
 8003c26:	db04      	blt.n	8003c32 <vTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c28:	6822      	ldr	r2, [r4, #0]
 8003c2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c2c:	f1c2 0207 	rsb	r2, r2, #7
 8003c30:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c32:	4d1b      	ldr	r5, [pc, #108]	; (8003ca0 <vTaskPriorityInherit+0x90>)
 8003c34:	6942      	ldr	r2, [r0, #20]
 8003c36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c3a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d003      	beq.n	8003c4a <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c4a:	1d07      	adds	r7, r0, #4
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f7fe fb70 	bl	8002334 <uxListRemove>
 8003c54:	b9f0      	cbnz	r0, 8003c94 <vTaskPriorityInherit+0x84>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c56:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003c58:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003c5c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8003c60:	b9c2      	cbnz	r2, 8003c94 <vTaskPriorityInherit+0x84>
 8003c62:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <vTaskPriorityInherit+0x94>)
 8003c64:	2001      	movs	r0, #1
 8003c66:	6811      	ldr	r1, [r2, #0]
 8003c68:	fa00 f303 	lsl.w	r3, r0, r3
 8003c6c:	ea21 0303 	bic.w	r3, r1, r3
 8003c70:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c72:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 8003c74:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c78:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4083      	lsls	r3, r0
 8003c7e:	4323      	orrs	r3, r4
 8003c80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c84:	4639      	mov	r1, r7
 8003c86:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8003c8a:	6013      	str	r3, [r2, #0]
	}
 8003c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 8003c90:	f7fe bb26 	b.w	80022e0 <vListInsertEnd>
 8003c94:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <vTaskPriorityInherit+0x94>)
 8003c96:	e7ec      	b.n	8003c72 <vTaskPriorityInherit+0x62>
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20003c50 	.word	0x20003c50
 8003ca0:	20003c5c 	.word	0x20003c5c
 8003ca4:	20003cfc 	.word	0x20003cfc

08003ca8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003ca8:	b308      	cbz	r0, 8003cee <xTaskPriorityDisinherit+0x46>
	{
 8003caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <xTaskPriorityDisinherit+0xa8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4298      	cmp	r0, r3
 8003cb2:	d008      	beq.n	8003cc6 <xTaskPriorityDisinherit+0x1e>
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	e7fe      	b.n	8003cc4 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cc6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003cc8:	b943      	cbnz	r3, 8003cdc <xTaskPriorityDisinherit+0x34>
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	e7fe      	b.n	8003cda <xTaskPriorityDisinherit+0x32>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cdc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003cde:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003ce0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ce2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003ce4:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ce6:	d000      	beq.n	8003cea <xTaskPriorityDisinherit+0x42>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ce8:	b11b      	cbz	r3, 8003cf2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8003cea:	2000      	movs	r0, #0
 8003cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cee:	2000      	movs	r0, #0
	}
 8003cf0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cf2:	1d07      	adds	r7, r0, #4
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f7fe fb1c 	bl	8002334 <uxListRemove>
 8003cfc:	b1c0      	cbz	r0, 8003d30 <xTaskPriorityDisinherit+0x88>
 8003cfe:	4815      	ldr	r0, [pc, #84]	; (8003d54 <xTaskPriorityDisinherit+0xac>)
 8003d00:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <xTaskPriorityDisinherit+0xb0>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d02:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8003d04:	f8d2 c000 	ldr.w	ip, [r2]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d08:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003d0a:	2501      	movs	r5, #1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0c:	f1c3 0e07 	rsb	lr, r3, #7
					prvAddTaskToReadyList( pxTCB );
 8003d10:	fa05 f603 	lsl.w	r6, r5, r3
 8003d14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d18:	ea46 060c 	orr.w	r6, r6, ip
 8003d1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003d20:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d22:	f8c4 e018 	str.w	lr, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d26:	6016      	str	r6, [r2, #0]
 8003d28:	f7fe fada 	bl	80022e0 <vListInsertEnd>
					xReturn = pdTRUE;
 8003d2c:	4628      	mov	r0, r5
	}
 8003d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d32:	4808      	ldr	r0, [pc, #32]	; (8003d54 <xTaskPriorityDisinherit+0xac>)
 8003d34:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <xTaskPriorityDisinherit+0xb0>)
 8003d36:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003d3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1df      	bne.n	8003d02 <xTaskPriorityDisinherit+0x5a>
 8003d42:	6813      	ldr	r3, [r2, #0]
 8003d44:	2501      	movs	r5, #1
 8003d46:	408d      	lsls	r5, r1
 8003d48:	ea23 0305 	bic.w	r3, r3, r5
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e7d8      	b.n	8003d02 <xTaskPriorityDisinherit+0x5a>
 8003d50:	20003c50 	.word	0x20003c50
 8003d54:	20003c5c 	.word	0x20003c5c
 8003d58:	20003cfc 	.word	0x20003cfc

08003d5c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <pvTaskIncrementMutexHeldCount+0x14>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	b11a      	cbz	r2, 8003d6a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003d66:	3201      	adds	r2, #1
 8003d68:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003d6a:	6818      	ldr	r0, [r3, #0]
	}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20003c50 	.word	0x20003c50

08003d74 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8003d74:	b530      	push	{r4, r5, lr}
 8003d76:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003d78:	b190      	cbz	r0, 8003da0 <netconn_close_shutdown+0x2c>
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003d7e:	f100 020c 	add.w	r2, r0, #12
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003d82:	2529      	movs	r5, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003d84:	a901      	add	r1, sp, #4
 8003d86:	480b      	ldr	r0, [pc, #44]	; (8003db4 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 8003d88:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8003d8a:	f88d 400c 	strb.w	r4, [sp, #12]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003d8e:	f88d 500d 	strb.w	r5, [sp, #13]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003d92:	f001 fd15 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003d96:	b908      	cbnz	r0, 8003d9c <netconn_close_shutdown+0x28>
    return apimsg->err;
 8003d98:	f99d 0008 	ldrsb.w	r0, [sp, #8]
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003d9c:	b007      	add	sp, #28
 8003d9e:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <netconn_close_shutdown+0x44>)
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <netconn_close_shutdown+0x48>)
 8003da4:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <netconn_close_shutdown+0x4c>)
 8003da6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003daa:	f00a f917 	bl	800dfdc <iprintf>
 8003dae:	f06f 000f 	mvn.w	r0, #15
 8003db2:	e7f3      	b.n	8003d9c <netconn_close_shutdown+0x28>
 8003db4:	080054a9 	.word	0x080054a9
 8003db8:	0800e620 	.word	0x0800e620
 8003dbc:	0800e654 	.word	0x0800e654
 8003dc0:	0800e670 	.word	0x0800e670

08003dc4 <netconn_new_with_proto_and_callback>:
{
 8003dc4:	b570      	push	{r4, r5, r6, lr}
 8003dc6:	460d      	mov	r5, r1
 8003dc8:	b086      	sub	sp, #24
  conn = netconn_alloc(t, callback);
 8003dca:	4611      	mov	r1, r2
 8003dcc:	f001 f82e 	bl	8004e2c <netconn_alloc>
  if (conn != NULL) {
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	b368      	cbz	r0, 8003e30 <netconn_new_with_proto_and_callback+0x6c>
    API_MSG_VAR_REF(msg).conn = conn;
 8003dd4:	a906      	add	r1, sp, #24
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003dd6:	f100 060c 	add.w	r6, r0, #12
    API_MSG_VAR_REF(msg).conn = conn;
 8003dda:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003dde:	4632      	mov	r2, r6
 8003de0:	4823      	ldr	r0, [pc, #140]	; (8003e70 <netconn_new_with_proto_and_callback+0xac>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8003de2:	f88d 500c 	strb.w	r5, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003de6:	f001 fceb 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003dea:	b320      	cbz	r0, 8003e36 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	b12b      	cbz	r3, 8003dfc <netconn_new_with_proto_and_callback+0x38>
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <netconn_new_with_proto_and_callback+0xb0>)
 8003df2:	4921      	ldr	r1, [pc, #132]	; (8003e78 <netconn_new_with_proto_and_callback+0xb4>)
 8003df4:	4821      	ldr	r0, [pc, #132]	; (8003e7c <netconn_new_with_proto_and_callback+0xb8>)
 8003df6:	2289      	movs	r2, #137	; 0x89
 8003df8:	f00a f8f0 	bl	800dfdc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003dfc:	f104 0510 	add.w	r5, r4, #16
 8003e00:	4628      	mov	r0, r5
 8003e02:	f009 fb43 	bl	800d48c <sys_mbox_valid>
 8003e06:	b1e8      	cbz	r0, 8003e44 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003e08:	f104 0014 	add.w	r0, r4, #20
 8003e0c:	f009 fb3e 	bl	800d48c <sys_mbox_valid>
 8003e10:	bb30      	cbnz	r0, 8003e60 <netconn_new_with_proto_and_callback+0x9c>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003e12:	4630      	mov	r0, r6
 8003e14:	f009 fb84 	bl	800d520 <sys_sem_valid>
 8003e18:	b1d8      	cbz	r0, 8003e52 <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f009 fb7c 	bl	800d518 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8003e20:	4628      	mov	r0, r5
 8003e22:	f009 fadd 	bl	800d3e0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8003e26:	4621      	mov	r1, r4
 8003e28:	2007      	movs	r0, #7
 8003e2a:	f004 f873 	bl	8007f14 <memp_free>
      return NULL;
 8003e2e:	2400      	movs	r4, #0
}
 8003e30:	4620      	mov	r0, r4
 8003e32:	b006      	add	sp, #24
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
    if (err != ERR_OK) {
 8003e36:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1d6      	bne.n	8003dec <netconn_new_with_proto_and_callback+0x28>
}
 8003e3e:	4620      	mov	r0, r4
 8003e40:	b006      	add	sp, #24
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <netconn_new_with_proto_and_callback+0xb0>)
 8003e46:	490e      	ldr	r1, [pc, #56]	; (8003e80 <netconn_new_with_proto_and_callback+0xbc>)
 8003e48:	480c      	ldr	r0, [pc, #48]	; (8003e7c <netconn_new_with_proto_and_callback+0xb8>)
 8003e4a:	228a      	movs	r2, #138	; 0x8a
 8003e4c:	f00a f8c6 	bl	800dfdc <iprintf>
 8003e50:	e7da      	b.n	8003e08 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <netconn_new_with_proto_and_callback+0xb0>)
 8003e54:	490b      	ldr	r1, [pc, #44]	; (8003e84 <netconn_new_with_proto_and_callback+0xc0>)
 8003e56:	4809      	ldr	r0, [pc, #36]	; (8003e7c <netconn_new_with_proto_and_callback+0xb8>)
 8003e58:	228f      	movs	r2, #143	; 0x8f
 8003e5a:	f00a f8bf 	bl	800dfdc <iprintf>
 8003e5e:	e7dc      	b.n	8003e1a <netconn_new_with_proto_and_callback+0x56>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003e60:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <netconn_new_with_proto_and_callback+0xb0>)
 8003e62:	4909      	ldr	r1, [pc, #36]	; (8003e88 <netconn_new_with_proto_and_callback+0xc4>)
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <netconn_new_with_proto_and_callback+0xb8>)
 8003e66:	228c      	movs	r2, #140	; 0x8c
 8003e68:	f00a f8b8 	bl	800dfdc <iprintf>
 8003e6c:	e7d1      	b.n	8003e12 <netconn_new_with_proto_and_callback+0x4e>
 8003e6e:	bf00      	nop
 8003e70:	08004d79 	.word	0x08004d79
 8003e74:	0800e620 	.word	0x0800e620
 8003e78:	0800e6b8 	.word	0x0800e6b8
 8003e7c:	0800e670 	.word	0x0800e670
 8003e80:	0800e6dc 	.word	0x0800e6dc
 8003e84:	0800e718 	.word	0x0800e718
 8003e88:	0800e6f4 	.word	0x0800e6f4

08003e8c <netconn_delete>:
{
 8003e8c:	b530      	push	{r4, r5, lr}
 8003e8e:	b087      	sub	sp, #28
  if (conn == NULL) {
 8003e90:	b1a8      	cbz	r0, 8003ebe <netconn_delete+0x32>
 8003e92:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003e94:	2329      	movs	r3, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003e96:	f100 020c 	add.w	r2, r0, #12
 8003e9a:	a901      	add	r1, sp, #4
 8003e9c:	480a      	ldr	r0, [pc, #40]	; (8003ec8 <netconn_delete+0x3c>)
  API_MSG_VAR_REF(msg).conn = conn;
 8003e9e:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003ea0:	f88d 300d 	strb.w	r3, [sp, #13]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003ea4:	f001 fc8c 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	b928      	cbnz	r0, 8003eb8 <netconn_delete+0x2c>
    return apimsg->err;
 8003eac:	f99d 5008 	ldrsb.w	r5, [sp, #8]
  if (err != ERR_OK) {
 8003eb0:	b915      	cbnz	r5, 8003eb8 <netconn_delete+0x2c>
  netconn_free(conn);
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f001 f8c0 	bl	8005038 <netconn_free>
}
 8003eb8:	4628      	mov	r0, r5
 8003eba:	b007      	add	sp, #28
 8003ebc:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 8003ebe:	4605      	mov	r5, r0
}
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	b007      	add	sp, #28
 8003ec4:	bd30      	pop	{r4, r5, pc}
 8003ec6:	bf00      	nop
 8003ec8:	080050b1 	.word	0x080050b1

08003ecc <netconn_bind>:
{
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	b086      	sub	sp, #24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ed0:	b1a0      	cbz	r0, 8003efc <netconn_bind+0x30>
 8003ed2:	460b      	mov	r3, r1
    addr = IP4_ADDR_ANY;
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <netconn_bind+0x44>)
 8003ed6:	4614      	mov	r4, r2
 8003ed8:	4602      	mov	r2, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf08      	it	eq
 8003ede:	460b      	moveq	r3, r1
  API_MSG_VAR_REF(msg).conn = conn;
 8003ee0:	9201      	str	r2, [sp, #4]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003ee2:	480c      	ldr	r0, [pc, #48]	; (8003f14 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8003ee4:	f8ad 4010 	strh.w	r4, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003ee8:	320c      	adds	r2, #12
 8003eea:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8003eec:	9303      	str	r3, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003eee:	f001 fc67 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003ef2:	b908      	cbnz	r0, 8003ef8 <netconn_bind+0x2c>
    return apimsg->err;
 8003ef4:	f99d 0008 	ldrsb.w	r0, [sp, #8]
}
 8003ef8:	b006      	add	sp, #24
 8003efa:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <netconn_bind+0x4c>)
 8003efe:	4907      	ldr	r1, [pc, #28]	; (8003f1c <netconn_bind+0x50>)
 8003f00:	4807      	ldr	r0, [pc, #28]	; (8003f20 <netconn_bind+0x54>)
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	f00a f86a 	bl	800dfdc <iprintf>
 8003f08:	f06f 000f 	mvn.w	r0, #15
 8003f0c:	e7f4      	b.n	8003ef8 <netconn_bind+0x2c>
 8003f0e:	bf00      	nop
 8003f10:	08011290 	.word	0x08011290
 8003f14:	08005201 	.word	0x08005201
 8003f18:	0800e620 	.word	0x0800e620
 8003f1c:	0800e604 	.word	0x0800e604
 8003f20:	0800e670 	.word	0x0800e670

08003f24 <netconn_listen_with_backlog>:
{
 8003f24:	b500      	push	{lr}
 8003f26:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f28:	b168      	cbz	r0, 8003f46 <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 8003f2a:	a906      	add	r1, sp, #24
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003f2c:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8003f30:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <netconn_listen_with_backlog+0x38>)
 8003f36:	f001 fc43 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003f3a:	b908      	cbnz	r0, 8003f40 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 8003f3c:	f99d 0008 	ldrsb.w	r0, [sp, #8]
}
 8003f40:	b007      	add	sp, #28
 8003f42:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <netconn_listen_with_backlog+0x3c>)
 8003f48:	4906      	ldr	r1, [pc, #24]	; (8003f64 <netconn_listen_with_backlog+0x40>)
 8003f4a:	4807      	ldr	r0, [pc, #28]	; (8003f68 <netconn_listen_with_backlog+0x44>)
 8003f4c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003f50:	f00a f844 	bl	800dfdc <iprintf>
 8003f54:	f06f 000f 	mvn.w	r0, #15
 8003f58:	e7f2      	b.n	8003f40 <netconn_listen_with_backlog+0x1c>
 8003f5a:	bf00      	nop
 8003f5c:	08005265 	.word	0x08005265
 8003f60:	0800e620 	.word	0x0800e620
 8003f64:	0800e698 	.word	0x0800e698
 8003f68:	0800e670 	.word	0x0800e670

08003f6c <netconn_accept>:
{
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6e:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8003f70:	2900      	cmp	r1, #0
 8003f72:	d035      	beq.n	8003fe0 <netconn_accept+0x74>
  *new_conn = NULL;
 8003f74:	2600      	movs	r6, #0
 8003f76:	4604      	mov	r4, r0
 8003f78:	460d      	mov	r5, r1
 8003f7a:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8003f7c:	b330      	cbz	r0, 8003fcc <netconn_accept+0x60>
  if (ERR_IS_FATAL(conn->last_err)) {
 8003f7e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8003f82:	f110 0f0c 	cmn.w	r0, #12
 8003f86:	da01      	bge.n	8003f8c <netconn_accept+0x20>
}
 8003f88:	b003      	add	sp, #12
 8003f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8003f8c:	f104 0714 	add.w	r7, r4, #20
 8003f90:	4638      	mov	r0, r7
 8003f92:	f009 fa7b 	bl	800d48c <sys_mbox_valid>
 8003f96:	b1b0      	cbz	r0, 8003fc6 <netconn_accept+0x5a>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8003f98:	4638      	mov	r0, r7
 8003f9a:	4632      	mov	r2, r6
 8003f9c:	a901      	add	r1, sp, #4
 8003f9e:	f009 fa3f 	bl	800d420 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8003fa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  newconn = (struct netconn *)accept_ptr;
 8003fa4:	9f01      	ldr	r7, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8003fa6:	b163      	cbz	r3, 8003fc2 <netconn_accept+0x56>
 8003fa8:	4632      	mov	r2, r6
 8003faa:	2101      	movs	r1, #1
 8003fac:	4620      	mov	r0, r4
 8003fae:	4798      	blx	r3
 8003fb0:	9a01      	ldr	r2, [sp, #4]
  if (accept_ptr == &netconn_aborted) {
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <netconn_accept+0xa8>)
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d01d      	beq.n	8003ff4 <netconn_accept+0x88>
  if (newconn == NULL) {
 8003fb8:	b1ff      	cbz	r7, 8003ffa <netconn_accept+0x8e>
  return ERR_OK;
 8003fba:	2000      	movs	r0, #0
  *new_conn = newconn;
 8003fbc:	602f      	str	r7, [r5, #0]
}
 8003fbe:	b003      	add	sp, #12
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  newconn = (struct netconn *)accept_ptr;
 8003fc2:	463a      	mov	r2, r7
 8003fc4:	e7f5      	b.n	8003fb2 <netconn_accept+0x46>
    return ERR_CLSD;
 8003fc6:	f06f 000e 	mvn.w	r0, #14
 8003fca:	e7dd      	b.n	8003f88 <netconn_accept+0x1c>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <netconn_accept+0xac>)
 8003fce:	4913      	ldr	r1, [pc, #76]	; (800401c <netconn_accept+0xb0>)
 8003fd0:	4813      	ldr	r0, [pc, #76]	; (8004020 <netconn_accept+0xb4>)
 8003fd2:	f240 128f 	movw	r2, #399	; 0x18f
 8003fd6:	f00a f801 	bl	800dfdc <iprintf>
 8003fda:	f06f 000f 	mvn.w	r0, #15
 8003fde:	e7d3      	b.n	8003f88 <netconn_accept+0x1c>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <netconn_accept+0xac>)
 8003fe2:	4910      	ldr	r1, [pc, #64]	; (8004024 <netconn_accept+0xb8>)
 8003fe4:	480e      	ldr	r0, [pc, #56]	; (8004020 <netconn_accept+0xb4>)
 8003fe6:	f240 128d 	movw	r2, #397	; 0x18d
 8003fea:	f009 fff7 	bl	800dfdc <iprintf>
 8003fee:	f06f 000f 	mvn.w	r0, #15
 8003ff2:	e7c9      	b.n	8003f88 <netconn_accept+0x1c>
    return ERR_ABRT;
 8003ff4:	f06f 000c 	mvn.w	r0, #12
 8003ff8:	e7c6      	b.n	8003f88 <netconn_accept+0x1c>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8003ffa:	f009 fad3 	bl	800d5a4 <sys_arch_protect>
 8003ffe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004002:	330c      	adds	r3, #12
 8004004:	bfa4      	itt	ge
 8004006:	23f1      	movge	r3, #241	; 0xf1
 8004008:	7223      	strbge	r3, [r4, #8]
 800400a:	f009 fad7 	bl	800d5bc <sys_arch_unprotect>
    return ERR_CLSD;
 800400e:	f06f 000e 	mvn.w	r0, #14
 8004012:	e7b9      	b.n	8003f88 <netconn_accept+0x1c>
 8004014:	2000426c 	.word	0x2000426c
 8004018:	0800e620 	.word	0x0800e620
 800401c:	0800e5e4 	.word	0x0800e5e4
 8004020:	0800e670 	.word	0x0800e670
 8004024:	0800e5c4 	.word	0x0800e5c4

08004028 <netconn_recv>:
{
 8004028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402c:	b086      	sub	sp, #24
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800402e:	2900      	cmp	r1, #0
 8004030:	f000 8109 	beq.w	8004246 <netconn_recv+0x21e>
  *new_buf = NULL;
 8004034:	2700      	movs	r7, #0
 8004036:	4604      	mov	r4, r0
 8004038:	460e      	mov	r6, r1
 800403a:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800403c:	2800      	cmp	r0, #0
 800403e:	f000 810c 	beq.w	800425a <netconn_recv+0x232>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004042:	7803      	ldrb	r3, [r0, #0]
 8004044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004048:	2b10      	cmp	r3, #16
 800404a:	d02d      	beq.n	80040a8 <netconn_recv+0x80>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800404c:	f100 0810 	add.w	r8, r0, #16
 8004050:	4640      	mov	r0, r8
  void *buf = NULL;
 8004052:	9700      	str	r7, [sp, #0]
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8004054:	f009 fa1a 	bl	800d48c <sys_mbox_valid>
 8004058:	2800      	cmp	r0, #0
 800405a:	f000 80bc 	beq.w	80041d6 <netconn_recv+0x1ae>
  if (ERR_IS_FATAL(conn->last_err)) {
 800405e:	f994 5008 	ldrsb.w	r5, [r4, #8]
 8004062:	f115 0f0c 	cmn.w	r5, #12
 8004066:	da03      	bge.n	8004070 <netconn_recv+0x48>
}
 8004068:	4628      	mov	r0, r5
 800406a:	b006      	add	sp, #24
 800406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8004070:	463a      	mov	r2, r7
 8004072:	4640      	mov	r0, r8
 8004074:	4669      	mov	r1, sp
 8004076:	f009 f9d3 	bl	800d420 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800407a:	7823      	ldrb	r3, [r4, #0]
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	2b10      	cmp	r3, #16
    if (buf != NULL) {
 8004082:	9b00      	ldr	r3, [sp, #0]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004084:	d030      	beq.n	80040e8 <netconn_recv+0xc0>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 809c 	beq.w	80041c4 <netconn_recv+0x19c>
    len = netbuf_len((struct netbuf*)buf);
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8004090:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004092:	b11d      	cbz	r5, 800409c <netconn_recv+0x74>
 8004094:	4620      	mov	r0, r4
 8004096:	2101      	movs	r1, #1
 8004098:	47a8      	blx	r5
 800409a:	9b00      	ldr	r3, [sp, #0]
  *new_buf = buf;
 800409c:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 800409e:	2500      	movs	r5, #0
}
 80040a0:	4628      	mov	r0, r5
 80040a2:	b006      	add	sp, #24
 80040a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80040a8:	2006      	movs	r0, #6
 80040aa:	f003 feff 	bl	8007eac <memp_malloc>
    if (buf == NULL) {
 80040ae:	4680      	mov	r8, r0
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d066      	beq.n	8004182 <netconn_recv+0x15a>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80040b4:	7823      	ldrb	r3, [r4, #0]
  void *buf = NULL;
 80040b6:	9700      	str	r7, [sp, #0]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80040b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040bc:	2b10      	cmp	r3, #16
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80040be:	f104 0710 	add.w	r7, r4, #16
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80040c2:	d022      	beq.n	800410a <netconn_recv+0xe2>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80040c4:	4638      	mov	r0, r7
 80040c6:	f009 f9e1 	bl	800d48c <sys_mbox_valid>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d05c      	beq.n	8004188 <netconn_recv+0x160>
  if (ERR_IS_FATAL(conn->last_err)) {
 80040ce:	f994 5008 	ldrsb.w	r5, [r4, #8]
 80040d2:	f115 0f0c 	cmn.w	r5, #12
 80040d6:	da28      	bge.n	800412a <netconn_recv+0x102>
      memp_free(MEMP_NETBUF, buf);
 80040d8:	4641      	mov	r1, r8
 80040da:	2006      	movs	r0, #6
 80040dc:	f003 ff1a 	bl	8007f14 <memp_free>
}
 80040e0:	4628      	mov	r0, r5
 80040e2:	b006      	add	sp, #24
 80040e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    API_MSG_VAR_REF(msg).conn = conn;
 80040e8:	9401      	str	r4, [sp, #4]
    if (buf != NULL) {
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 808d 	beq.w	800420a <netconn_recv+0x1e2>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 80040f0:	891b      	ldrh	r3, [r3, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80040f2:	4866      	ldr	r0, [pc, #408]	; (800428c <netconn_recv+0x264>)
 80040f4:	9303      	str	r3, [sp, #12]
 80040f6:	f104 020c 	add.w	r2, r4, #12
 80040fa:	a901      	add	r1, sp, #4
 80040fc:	f001 fb60 	bl	80057c0 <tcpip_send_msg_wait_sem>
    if (buf == NULL) {
 8004100:	9b00      	ldr	r3, [sp, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d071      	beq.n	80041ea <netconn_recv+0x1c2>
    len = ((struct pbuf *)buf)->tot_len;
 8004106:	891a      	ldrh	r2, [r3, #8]
 8004108:	e7c2      	b.n	8004090 <netconn_recv+0x68>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800410a:	4638      	mov	r0, r7
 800410c:	f009 f9be 	bl	800d48c <sys_mbox_valid>
 8004110:	2800      	cmp	r0, #0
 8004112:	d1d7      	bne.n	80040c4 <netconn_recv+0x9c>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8004114:	f104 0014 	add.w	r0, r4, #20
 8004118:	f009 f9b8 	bl	800d48c <sys_mbox_valid>
 800411c:	2800      	cmp	r0, #0
 800411e:	bf14      	ite	ne
 8004120:	f06f 050a 	mvnne.w	r5, #10
 8004124:	f06f 050e 	mvneq.w	r5, #14
 8004128:	e7d6      	b.n	80040d8 <netconn_recv+0xb0>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800412a:	4638      	mov	r0, r7
 800412c:	2200      	movs	r2, #0
 800412e:	4669      	mov	r1, sp
 8004130:	f009 f976 	bl	800d420 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413a:	2b10      	cmp	r3, #16
 800413c:	d02e      	beq.n	800419c <netconn_recv+0x174>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800413e:	9f00      	ldr	r7, [sp, #0]
 8004140:	2f00      	cmp	r7, #0
 8004142:	d064      	beq.n	800420e <netconn_recv+0x1e6>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8004144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004146:	b16b      	cbz	r3, 8004164 <netconn_recv+0x13c>
    len = netbuf_len((struct netbuf*)buf);
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800414c:	4620      	mov	r0, r4
 800414e:	2101      	movs	r1, #1
 8004150:	4798      	blx	r3
 8004152:	9f00      	ldr	r7, [sp, #0]
    LWIP_ASSERT("p != NULL", p != NULL);
 8004154:	b937      	cbnz	r7, 8004164 <netconn_recv+0x13c>
 8004156:	4b4e      	ldr	r3, [pc, #312]	; (8004290 <netconn_recv+0x268>)
 8004158:	494e      	ldr	r1, [pc, #312]	; (8004294 <netconn_recv+0x26c>)
 800415a:	484f      	ldr	r0, [pc, #316]	; (8004298 <netconn_recv+0x270>)
 800415c:	f240 228a 	movw	r2, #650	; 0x28a
 8004160:	f009 ff3c 	bl	800dfdc <iprintf>
    buf->port = 0;
 8004164:	2500      	movs	r5, #0
}
 8004166:	4628      	mov	r0, r5
    buf->p = p;
 8004168:	f8c8 7000 	str.w	r7, [r8]
    buf->ptr = p;
 800416c:	f8c8 7004 	str.w	r7, [r8, #4]
    buf->port = 0;
 8004170:	f8a8 500c 	strh.w	r5, [r8, #12]
    ip_addr_set_zero(&buf->addr);
 8004174:	f8c8 5008 	str.w	r5, [r8, #8]
    *new_buf = buf;
 8004178:	f8c6 8000 	str.w	r8, [r6]
}
 800417c:	b006      	add	sp, #24
 800417e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERR_MEM;
 8004182:	f04f 35ff 	mov.w	r5, #4294967295
 8004186:	e76f      	b.n	8004068 <netconn_recv+0x40>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8004188:	4b41      	ldr	r3, [pc, #260]	; (8004290 <netconn_recv+0x268>)
 800418a:	4944      	ldr	r1, [pc, #272]	; (800429c <netconn_recv+0x274>)
 800418c:	4842      	ldr	r0, [pc, #264]	; (8004298 <netconn_recv+0x270>)
 800418e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8004192:	f009 ff23 	bl	800dfdc <iprintf>
 8004196:	f06f 050a 	mvn.w	r5, #10
 800419a:	e79d      	b.n	80040d8 <netconn_recv+0xb0>
    if (buf != NULL) {
 800419c:	9b00      	ldr	r3, [sp, #0]
    API_MSG_VAR_REF(msg).conn = conn;
 800419e:	9401      	str	r4, [sp, #4]
    if (buf != NULL) {
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d04e      	beq.n	8004242 <netconn_recv+0x21a>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 80041a4:	891b      	ldrh	r3, [r3, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80041a6:	4839      	ldr	r0, [pc, #228]	; (800428c <netconn_recv+0x264>)
 80041a8:	9303      	str	r3, [sp, #12]
 80041aa:	f104 020c 	add.w	r2, r4, #12
 80041ae:	a901      	add	r1, sp, #4
 80041b0:	f001 fb06 	bl	80057c0 <tcpip_send_msg_wait_sem>
    if (buf == NULL) {
 80041b4:	9f00      	ldr	r7, [sp, #0]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80041b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (buf == NULL) {
 80041b8:	2f00      	cmp	r7, #0
 80041ba:	d034      	beq.n	8004226 <netconn_recv+0x1fe>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0d1      	beq.n	8004164 <netconn_recv+0x13c>
    len = ((struct pbuf *)buf)->tot_len;
 80041c0:	893a      	ldrh	r2, [r7, #8]
 80041c2:	e7c3      	b.n	800414c <netconn_recv+0x124>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80041c4:	4b32      	ldr	r3, [pc, #200]	; (8004290 <netconn_recv+0x268>)
 80041c6:	4936      	ldr	r1, [pc, #216]	; (80042a0 <netconn_recv+0x278>)
 80041c8:	4833      	ldr	r0, [pc, #204]	; (8004298 <netconn_recv+0x270>)
 80041ca:	f240 223e 	movw	r2, #574	; 0x23e
 80041ce:	f009 ff05 	bl	800dfdc <iprintf>
 80041d2:	9b00      	ldr	r3, [sp, #0]
 80041d4:	e75a      	b.n	800408c <netconn_recv+0x64>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80041d6:	4b2e      	ldr	r3, [pc, #184]	; (8004290 <netconn_recv+0x268>)
 80041d8:	4930      	ldr	r1, [pc, #192]	; (800429c <netconn_recv+0x274>)
 80041da:	482f      	ldr	r0, [pc, #188]	; (8004298 <netconn_recv+0x270>)
 80041dc:	f240 12f5 	movw	r2, #501	; 0x1f5
 80041e0:	f009 fefc 	bl	800dfdc <iprintf>
 80041e4:	f06f 050a 	mvn.w	r5, #10
 80041e8:	e73e      	b.n	8004068 <netconn_recv+0x40>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80041ea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80041ec:	b11d      	cbz	r5, 80041f6 <netconn_recv+0x1ce>
 80041ee:	461a      	mov	r2, r3
 80041f0:	2101      	movs	r1, #1
 80041f2:	4620      	mov	r0, r4
 80041f4:	47a8      	blx	r5
      if (conn->pcb.ip == NULL) {
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d138      	bne.n	800426e <netconn_recv+0x246>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80041fc:	f994 5008 	ldrsb.w	r5, [r4, #8]
 8004200:	2d00      	cmp	r5, #0
 8004202:	bf08      	it	eq
 8004204:	f06f 050d 	mvneq.w	r5, #13
 8004208:	e72e      	b.n	8004068 <netconn_recv+0x40>
    if (buf != NULL) {
 800420a:	2301      	movs	r3, #1
 800420c:	e771      	b.n	80040f2 <netconn_recv+0xca>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <netconn_recv+0x268>)
 8004210:	4923      	ldr	r1, [pc, #140]	; (80042a0 <netconn_recv+0x278>)
 8004212:	4821      	ldr	r0, [pc, #132]	; (8004298 <netconn_recv+0x270>)
 8004214:	f240 223e 	movw	r2, #574	; 0x23e
 8004218:	f009 fee0 	bl	800dfdc <iprintf>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800421c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800421e:	9f00      	ldr	r7, [sp, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d191      	bne.n	8004148 <netconn_recv+0x120>
 8004224:	e796      	b.n	8004154 <netconn_recv+0x12c>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004226:	b11b      	cbz	r3, 8004230 <netconn_recv+0x208>
 8004228:	463a      	mov	r2, r7
 800422a:	2101      	movs	r1, #1
 800422c:	4620      	mov	r0, r4
 800422e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	bb1b      	cbnz	r3, 800427c <netconn_recv+0x254>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8004234:	f994 5008 	ldrsb.w	r5, [r4, #8]
 8004238:	2d00      	cmp	r5, #0
 800423a:	bf08      	it	eq
 800423c:	f06f 050d 	mvneq.w	r5, #13
 8004240:	e74a      	b.n	80040d8 <netconn_recv+0xb0>
    if (buf != NULL) {
 8004242:	2301      	movs	r3, #1
 8004244:	e7af      	b.n	80041a6 <netconn_recv+0x17e>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <netconn_recv+0x268>)
 8004248:	4916      	ldr	r1, [pc, #88]	; (80042a4 <netconn_recv+0x27c>)
 800424a:	4813      	ldr	r0, [pc, #76]	; (8004298 <netconn_recv+0x270>)
 800424c:	f44f 721d 	mov.w	r2, #628	; 0x274
 8004250:	f009 fec4 	bl	800dfdc <iprintf>
 8004254:	f06f 050f 	mvn.w	r5, #15
 8004258:	e706      	b.n	8004068 <netconn_recv+0x40>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <netconn_recv+0x268>)
 800425c:	4912      	ldr	r1, [pc, #72]	; (80042a8 <netconn_recv+0x280>)
 800425e:	480e      	ldr	r0, [pc, #56]	; (8004298 <netconn_recv+0x270>)
 8004260:	f240 2276 	movw	r2, #630	; 0x276
 8004264:	f009 feba 	bl	800dfdc <iprintf>
 8004268:	f06f 050f 	mvn.w	r5, #15
 800426c:	e6fc      	b.n	8004068 <netconn_recv+0x40>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800426e:	4620      	mov	r0, r4
 8004270:	2101      	movs	r1, #1
 8004272:	f7ff fd7f 	bl	8003d74 <netconn_close_shutdown>
      return ERR_CLSD;
 8004276:	f06f 050e 	mvn.w	r5, #14
 800427a:	e6f5      	b.n	8004068 <netconn_recv+0x40>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800427c:	4620      	mov	r0, r4
 800427e:	2101      	movs	r1, #1
 8004280:	f7ff fd78 	bl	8003d74 <netconn_close_shutdown>
      return ERR_CLSD;
 8004284:	f06f 050e 	mvn.w	r5, #14
 8004288:	e726      	b.n	80040d8 <netconn_recv+0xb0>
 800428a:	bf00      	nop
 800428c:	08005359 	.word	0x08005359
 8004290:	0800e620 	.word	0x0800e620
 8004294:	0800e964 	.word	0x0800e964
 8004298:	0800e670 	.word	0x0800e670
 800429c:	0800e770 	.word	0x0800e770
 80042a0:	0800e790 	.word	0x0800e790
 80042a4:	0800e750 	.word	0x0800e750
 80042a8:	0800e734 	.word	0x0800e734

080042ac <netconn_write_partly>:
{
 80042ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ae:	b087      	sub	sp, #28
 80042b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d038      	beq.n	8004328 <netconn_write_partly+0x7c>
 80042b6:	4615      	mov	r5, r2
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80042b8:	7802      	ldrb	r2, [r0, #0]
 80042ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80042be:	2a10      	cmp	r2, #16
 80042c0:	d125      	bne.n	800430e <netconn_write_partly+0x62>
  if (size == 0) {
 80042c2:	b1ed      	cbz	r5, 8004300 <netconn_write_partly+0x54>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80042c4:	7f02      	ldrb	r2, [r0, #28]
 80042c6:	0792      	lsls	r2, r2, #30
 80042c8:	460e      	mov	r6, r1
 80042ca:	d515      	bpl.n	80042f8 <netconn_write_partly+0x4c>
  if (dontblock && !bytes_written) {
 80042cc:	b34c      	cbz	r4, 8004322 <netconn_write_partly+0x76>
 80042ce:	2701      	movs	r7, #1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80042d0:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 80042d4:	9001      	str	r0, [sp, #4]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80042d6:	a901      	add	r1, sp, #4
 80042d8:	4818      	ldr	r0, [pc, #96]	; (800433c <netconn_write_partly+0x90>)
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 80042da:	9603      	str	r6, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80042dc:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80042e0:	9504      	str	r5, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80042e2:	f001 fa6d 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80042e6:	b928      	cbnz	r0, 80042f4 <netconn_write_partly+0x48>
    return apimsg->err;
 80042e8:	f99d 0008 	ldrsb.w	r0, [sp, #8]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80042ec:	b910      	cbnz	r0, 80042f4 <netconn_write_partly+0x48>
 80042ee:	b13c      	cbz	r4, 8004300 <netconn_write_partly+0x54>
    if (dontblock) {
 80042f0:	b94f      	cbnz	r7, 8004306 <netconn_write_partly+0x5a>
      *bytes_written = size;
 80042f2:	6025      	str	r5, [r4, #0]
}
 80042f4:	b007      	add	sp, #28
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80042f8:	f013 0704 	ands.w	r7, r3, #4
 80042fc:	d1e6      	bne.n	80042cc <netconn_write_partly+0x20>
 80042fe:	e7e7      	b.n	80042d0 <netconn_write_partly+0x24>
    return ERR_OK;
 8004300:	2000      	movs	r0, #0
}
 8004302:	b007      	add	sp, #28
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8004306:	9b04      	ldr	r3, [sp, #16]
 8004308:	6023      	str	r3, [r4, #0]
}
 800430a:	b007      	add	sp, #28
 800430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <netconn_write_partly+0x94>)
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <netconn_write_partly+0x98>)
 8004312:	480d      	ldr	r0, [pc, #52]	; (8004348 <netconn_write_partly+0x9c>)
 8004314:	f240 22e7 	movw	r2, #743	; 0x2e7
 8004318:	f009 fe60 	bl	800dfdc <iprintf>
 800431c:	f06f 0005 	mvn.w	r0, #5
 8004320:	e7e8      	b.n	80042f4 <netconn_write_partly+0x48>
    return ERR_VAL;
 8004322:	f06f 0005 	mvn.w	r0, #5
 8004326:	e7e5      	b.n	80042f4 <netconn_write_partly+0x48>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <netconn_write_partly+0x94>)
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <netconn_write_partly+0xa0>)
 800432c:	4806      	ldr	r0, [pc, #24]	; (8004348 <netconn_write_partly+0x9c>)
 800432e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8004332:	f009 fe53 	bl	800dfdc <iprintf>
 8004336:	f06f 000f 	mvn.w	r0, #15
 800433a:	e7db      	b.n	80042f4 <netconn_write_partly+0x48>
 800433c:	080053b1 	.word	0x080053b1
 8004340:	0800e620 	.word	0x0800e620
 8004344:	0800e7b8 	.word	0x0800e7b8
 8004348:	0800e670 	.word	0x0800e670
 800434c:	0800e79c 	.word	0x0800e79c

08004350 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8004350:	b530      	push	{r4, r5, lr}
 8004352:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004354:	b190      	cbz	r0, 800437c <netconn_close+0x2c>
 8004356:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004358:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800435c:	2503      	movs	r5, #3
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800435e:	2429      	movs	r4, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004360:	a901      	add	r1, sp, #4
 8004362:	480b      	ldr	r0, [pc, #44]	; (8004390 <netconn_close+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 8004364:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8004366:	f88d 500c 	strb.w	r5, [sp, #12]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800436a:	f88d 400d 	strb.w	r4, [sp, #13]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800436e:	f001 fa27 	bl	80057c0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004372:	b908      	cbnz	r0, 8004378 <netconn_close+0x28>
    return apimsg->err;
 8004374:	f99d 0008 	ldrsb.w	r0, [sp, #8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
}
 8004378:	b007      	add	sp, #28
 800437a:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <netconn_close+0x44>)
 800437e:	4906      	ldr	r1, [pc, #24]	; (8004398 <netconn_close+0x48>)
 8004380:	4806      	ldr	r0, [pc, #24]	; (800439c <netconn_close+0x4c>)
 8004382:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004386:	f009 fe29 	bl	800dfdc <iprintf>
 800438a:	f06f 000f 	mvn.w	r0, #15
 800438e:	e7f3      	b.n	8004378 <netconn_close+0x28>
 8004390:	080054a9 	.word	0x080054a9
 8004394:	0800e620 	.word	0x0800e620
 8004398:	0800e654 	.word	0x0800e654
 800439c:	0800e670 	.word	0x0800e670

080043a0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80043a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	4617      	mov	r7, r2
 80043a8:	461e      	mov	r6, r3
 80043aa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80043ae:	460d      	mov	r5, r1
 80043b0:	2900      	cmp	r1, #0
 80043b2:	d034      	beq.n	800441e <recv_udp+0x7e>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80043b4:	2c00      	cmp	r4, #0
 80043b6:	d03b      	beq.n	8004430 <recv_udp+0x90>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80043b8:	6863      	ldr	r3, [r4, #4]
 80043ba:	429d      	cmp	r5, r3
 80043bc:	d005      	beq.n	80043ca <recv_udp+0x2a>
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <recv_udp+0xa8>)
 80043c0:	4922      	ldr	r1, [pc, #136]	; (800444c <recv_udp+0xac>)
 80043c2:	4823      	ldr	r0, [pc, #140]	; (8004450 <recv_udp+0xb0>)
 80043c4:	22ba      	movs	r2, #186	; 0xba
 80043c6:	f009 fe09 	bl	800dfdc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80043ca:	f104 0810 	add.w	r8, r4, #16
 80043ce:	4640      	mov	r0, r8
 80043d0:	f009 f85c 	bl	800d48c <sys_mbox_valid>
 80043d4:	b1c8      	cbz	r0, 800440a <recv_udp+0x6a>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80043d6:	2006      	movs	r0, #6
 80043d8:	f003 fd68 	bl	8007eac <memp_malloc>
  if (buf == NULL) {
 80043dc:	4605      	mov	r5, r0
 80043de:	b1a0      	cbz	r0, 800440a <recv_udp+0x6a>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 80043e0:	6007      	str	r7, [r0, #0]
    buf->ptr = p;
 80043e2:	6047      	str	r7, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 80043e4:	b106      	cbz	r6, 80043e8 <recv_udp+0x48>
 80043e6:	6836      	ldr	r6, [r6, #0]
 80043e8:	60ae      	str	r6, [r5, #8]
    buf->port = port;
 80043ea:	f8a5 900c 	strh.w	r9, [r5, #12]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80043ee:	4640      	mov	r0, r8
 80043f0:	4629      	mov	r1, r5
  len = p->tot_len;
 80043f2:	893e      	ldrh	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80043f4:	f009 f80a 	bl	800d40c <sys_mbox_trypost>
 80043f8:	b960      	cbnz	r0, 8004414 <recv_udp+0x74>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80043fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043fc:	b1b3      	cbz	r3, 800442c <recv_udp+0x8c>
 80043fe:	4632      	mov	r2, r6
 8004400:	4601      	mov	r1, r0
 8004402:	4620      	mov	r0, r4
  }
}
 8004404:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004408:	4718      	bx	r3
    pbuf_free(p);
 800440a:	4638      	mov	r0, r7
}
 800440c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8004410:	f003 bf60 	b.w	80082d4 <pbuf_free>
    netbuf_delete(buf);
 8004414:	4628      	mov	r0, r5
}
 8004416:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 800441a:	f001 b8b5 	b.w	8005588 <netbuf_delete>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <recv_udp+0xa8>)
 8004420:	490c      	ldr	r1, [pc, #48]	; (8004454 <recv_udp+0xb4>)
 8004422:	480b      	ldr	r0, [pc, #44]	; (8004450 <recv_udp+0xb0>)
 8004424:	22b1      	movs	r2, #177	; 0xb1
 8004426:	f009 fdd9 	bl	800dfdc <iprintf>
 800442a:	e7c3      	b.n	80043b4 <recv_udp+0x14>
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <recv_udp+0xa8>)
 8004432:	4909      	ldr	r1, [pc, #36]	; (8004458 <recv_udp+0xb8>)
 8004434:	4806      	ldr	r0, [pc, #24]	; (8004450 <recv_udp+0xb0>)
 8004436:	22b2      	movs	r2, #178	; 0xb2
 8004438:	f009 fdd0 	bl	800dfdc <iprintf>
    pbuf_free(p);
 800443c:	4638      	mov	r0, r7
}
 800443e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8004442:	f003 bf47 	b.w	80082d4 <pbuf_free>
 8004446:	bf00      	nop
 8004448:	0800ead4 	.word	0x0800ead4
 800444c:	0800eb4c 	.word	0x0800eb4c
 8004450:	0800e670 	.word	0x0800e670
 8004454:	0800eb08 	.word	0x0800eb08
 8004458:	0800eb2c 	.word	0x0800eb2c

0800445c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004460:	460f      	mov	r7, r1
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004462:	4604      	mov	r4, r0
 8004464:	2800      	cmp	r0, #0
 8004466:	f000 8082 	beq.w	800456e <err_tcp+0x112>

  conn->pcb.tcp = NULL;

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800446a:	7865      	ldrb	r5, [r4, #1]
  conn->pcb.tcp = NULL;
 800446c:	2600      	movs	r6, #0
  conn->state = NETCONN_NONE;

  if (old_state == NETCONN_CLOSE) {
 800446e:	2d04      	cmp	r5, #4
  conn->pcb.tcp = NULL;
 8004470:	6066      	str	r6, [r4, #4]
  conn->state = NETCONN_NONE;
 8004472:	7066      	strb	r6, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8004474:	d057      	beq.n	8004526 <err_tcp+0xca>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8004476:	f009 f895 	bl	800d5a4 <sys_arch_protect>
 800447a:	7227      	strb	r7, [r4, #8]
 800447c:	f009 f89e 	bl	800d5bc <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004482:	b17b      	cbz	r3, 80044a4 <err_tcp+0x48>
 8004484:	2200      	movs	r2, #0
 8004486:	2104      	movs	r1, #4
 8004488:	4620      	mov	r0, r4
 800448a:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800448c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800448e:	b14b      	cbz	r3, 80044a4 <err_tcp+0x48>
 8004490:	2200      	movs	r2, #0
 8004492:	4611      	mov	r1, r2
 8004494:	4620      	mov	r0, r4
 8004496:	4798      	blx	r3
 8004498:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800449a:	b11b      	cbz	r3, 80044a4 <err_tcp+0x48>
 800449c:	2200      	movs	r2, #0
 800449e:	2102      	movs	r1, #2
 80044a0:	4620      	mov	r0, r4
 80044a2:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80044a4:	f104 0610 	add.w	r6, r4, #16
 80044a8:	4630      	mov	r0, r6
 80044aa:	f008 ffef 	bl	800d48c <sys_mbox_valid>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d144      	bne.n	800453c <err_tcp+0xe0>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80044b2:	f104 0614 	add.w	r6, r4, #20
 80044b6:	4630      	mov	r0, r6
 80044b8:	f008 ffe8 	bl	800d48c <sys_mbox_valid>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d148      	bne.n	8004552 <err_tcp+0xf6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80044c0:	2d01      	cmp	r5, #1
 80044c2:	d00d      	beq.n	80044e0 <err_tcp+0x84>
 80044c4:	3d03      	subs	r5, #3
 80044c6:	2d01      	cmp	r5, #1
 80044c8:	d90a      	bls.n	80044e0 <err_tcp+0x84>
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
      sys_sem_signal(op_completed_sem);
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80044ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044cc:	b34b      	cbz	r3, 8004522 <err_tcp+0xc6>
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <err_tcp+0x134>)
 80044d0:	4930      	ldr	r1, [pc, #192]	; (8004594 <err_tcp+0x138>)
 80044d2:	4831      	ldr	r0, [pc, #196]	; (8004598 <err_tcp+0x13c>)
 80044d4:	f240 12bd 	movw	r2, #445	; 0x1bd
  }
}
 80044d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80044dc:	f009 bd7e 	b.w	800dfdc <iprintf>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80044e0:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80044e2:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 80044e6:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 80044e8:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80044ea:	d41a      	bmi.n	8004522 <err_tcp+0xc6>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80044ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d045      	beq.n	800457e <err_tcp+0x122>
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80044f2:	681d      	ldr	r5, [r3, #0]
      conn->current_msg->err = err;
 80044f4:	711f      	strb	r7, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80044f6:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80044f8:	4628      	mov	r0, r5
 80044fa:	f009 f811 	bl	800d520 <sys_sem_valid>
 80044fe:	4606      	mov	r6, r0
 8004500:	b360      	cbz	r0, 800455c <err_tcp+0x100>
      conn->current_msg = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8004506:	f009 f84d 	bl	800d5a4 <sys_arch_protect>
 800450a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800450e:	330c      	adds	r3, #12
 8004510:	bfa8      	it	ge
 8004512:	7227      	strbge	r7, [r4, #8]
 8004514:	f009 f852 	bl	800d5bc <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8004518:	4628      	mov	r0, r5
}
 800451a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800451e:	f008 bff7 	b.w	800d510 <sys_sem_signal>
 8004522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8004526:	f009 f83d 	bl	800d5a4 <sys_arch_protect>
 800452a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800452e:	330c      	adds	r3, #12
 8004530:	bfa8      	it	ge
 8004532:	7226      	strbge	r6, [r4, #8]
 8004534:	f009 f842 	bl	800d5bc <sys_arch_unprotect>
    err = ERR_OK;
 8004538:	2700      	movs	r7, #0
 800453a:	e7a1      	b.n	8004480 <err_tcp+0x24>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800453c:	4630      	mov	r0, r6
 800453e:	2100      	movs	r1, #0
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004540:	f104 0614 	add.w	r6, r4, #20
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8004544:	f008 ff62 	bl	800d40c <sys_mbox_trypost>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004548:	4630      	mov	r0, r6
 800454a:	f008 ff9f 	bl	800d48c <sys_mbox_valid>
 800454e:	2800      	cmp	r0, #0
 8004550:	d0b6      	beq.n	80044c0 <err_tcp+0x64>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8004552:	4630      	mov	r0, r6
 8004554:	2100      	movs	r1, #0
 8004556:	f008 ff59 	bl	800d40c <sys_mbox_trypost>
 800455a:	e7b1      	b.n	80044c0 <err_tcp+0x64>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <err_tcp+0x134>)
 800455e:	490f      	ldr	r1, [pc, #60]	; (800459c <err_tcp+0x140>)
 8004560:	480d      	ldr	r0, [pc, #52]	; (8004598 <err_tcp+0x13c>)
 8004562:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8004566:	f009 fd39 	bl	800dfdc <iprintf>
      conn->current_msg = NULL;
 800456a:	6266      	str	r6, [r4, #36]	; 0x24
 800456c:	e7cb      	b.n	8004506 <err_tcp+0xaa>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <err_tcp+0x134>)
 8004570:	490b      	ldr	r1, [pc, #44]	; (80045a0 <err_tcp+0x144>)
 8004572:	4809      	ldr	r0, [pc, #36]	; (8004598 <err_tcp+0x13c>)
 8004574:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8004578:	f009 fd30 	bl	800dfdc <iprintf>
 800457c:	e775      	b.n	800446a <err_tcp+0xe>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <err_tcp+0x134>)
 8004580:	4908      	ldr	r1, [pc, #32]	; (80045a4 <err_tcp+0x148>)
 8004582:	4805      	ldr	r0, [pc, #20]	; (8004598 <err_tcp+0x13c>)
 8004584:	f240 12b3 	movw	r2, #435	; 0x1b3
 8004588:	f009 fd28 	bl	800dfdc <iprintf>
 800458c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800458e:	e7b0      	b.n	80044f2 <err_tcp+0x96>
 8004590:	0800ead4 	.word	0x0800ead4
 8004594:	0800e854 	.word	0x0800e854
 8004598:	0800e670 	.word	0x0800e670
 800459c:	0800e838 	.word	0x0800e838
 80045a0:	0800e80c 	.word	0x0800e80c
 80045a4:	0800e81c 	.word	0x0800e81c

080045a8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80045a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ac:	460f      	mov	r7, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80045ae:	4604      	mov	r4, r0
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f000 80d6 	beq.w	8004762 <lwip_netconn_do_writemore+0x1ba>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80045b6:	7863      	ldrb	r3, [r4, #1]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d006      	beq.n	80045ca <lwip_netconn_do_writemore+0x22>
 80045bc:	4b88      	ldr	r3, [pc, #544]	; (80047e0 <lwip_netconn_do_writemore+0x238>)
 80045be:	4989      	ldr	r1, [pc, #548]	; (80047e4 <lwip_netconn_do_writemore+0x23c>)
 80045c0:	4889      	ldr	r0, [pc, #548]	; (80047e8 <lwip_netconn_do_writemore+0x240>)
 80045c2:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80045c6:	f009 fd09 	bl	800dfdc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80045ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80d0 	beq.w	8004772 <lwip_netconn_do_writemore+0x1ca>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80045d2:	6863      	ldr	r3, [r4, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80d4 	beq.w	8004782 <lwip_netconn_do_writemore+0x1da>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80045da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045dc:	6a26      	ldr	r6, [r4, #32]
 80045de:	68d9      	ldr	r1, [r3, #12]
 80045e0:	428e      	cmp	r6, r1
 80045e2:	f080 8083 	bcs.w	80046ec <lwip_netconn_do_writemore+0x144>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80045e6:	7f22      	ldrb	r2, [r4, #28]
  apiflags = conn->current_msg->msg.w.apiflags;
 80045e8:	f893 9010 	ldrb.w	r9, [r3, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80045ec:	0790      	lsls	r0, r2, #30
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80045ee:	689a      	ldr	r2, [r3, #8]
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80045f0:	6860      	ldr	r0, [r4, #4]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80045f2:	eba1 0506 	sub.w	r5, r1, r6
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80045f6:	bf54      	ite	pl
 80045f8:	f3c9 0a80 	ubfxpl	sl, r9, #2, #1
 80045fc:	f04f 0a01 	movmi.w	sl, #1
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8004600:	eb02 0806 	add.w	r8, r2, r6
    if (diff > 0xffffUL) { /* max_u16_t */
 8004604:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    available = tcp_sndbuf(conn->pcb.tcp);
 8004608:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
      len = 0xffff;
 800460c:	bf2a      	itet	cs
 800460e:	f64f 75ff 	movwcs	r5, #65535	; 0xffff
      len = (u16_t)diff;
 8004612:	b2ad      	uxthcc	r5, r5
      apiflags |= TCP_WRITE_FLAG_MORE;
 8004614:	f049 0902 	orrcs.w	r9, r9, #2
    if (available < len) {
 8004618:	4295      	cmp	r5, r2
 800461a:	d93b      	bls.n	8004694 <lwip_netconn_do_writemore+0xec>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 800461c:	f1ba 0f00 	cmp.w	sl, #0
 8004620:	d035      	beq.n	800468e <lwip_netconn_do_writemore+0xe6>
        if (!len) {
 8004622:	2a00      	cmp	r2, #0
 8004624:	d135      	bne.n	8004692 <lwip_netconn_do_writemore+0xea>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004626:	2900      	cmp	r1, #0
 8004628:	f000 80b3 	beq.w	8004792 <lwip_netconn_do_writemore+0x1ea>
          err = ERR_WOULDBLOCK;
 800462c:	f06f 0606 	mvn.w	r6, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004630:	4693      	mov	fp, r2
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004634:	b113      	cbz	r3, 800463c <lwip_netconn_do_writemore+0x94>
 8004636:	2103      	movs	r1, #3
 8004638:	4620      	mov	r0, r4
 800463a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800463c:	7f23      	ldrb	r3, [r4, #28]
 800463e:	f043 0310 	orr.w	r3, r3, #16
 8004642:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8004644:	2e00      	cmp	r6, #0
 8004646:	f040 80b2 	bne.w	80047ae <lwip_netconn_do_writemore+0x206>
      err_t out_err;
      conn->write_offset += len;
 800464a:	6a23      	ldr	r3, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800464c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      conn->write_offset += len;
 800464e:	445b      	add	r3, fp
 8004650:	6223      	str	r3, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8004652:	68d1      	ldr	r1, [r2, #12]
 8004654:	428b      	cmp	r3, r1
 8004656:	d07f      	beq.n	8004758 <lwip_netconn_do_writemore+0x1b0>
 8004658:	f1ba 0f00 	cmp.w	sl, #0
 800465c:	d17c      	bne.n	8004758 <lwip_netconn_do_writemore+0x1b0>
  u8_t write_finished = 0;
 800465e:	4655      	mov	r5, sl
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004660:	6860      	ldr	r0, [r4, #4]
 8004662:	f007 fee9 	bl	800c438 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004666:	f110 0f0c 	cmn.w	r0, #12
      out_err = tcp_output(conn->pcb.tcp);
 800466a:	4606      	mov	r6, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800466c:	db70      	blt.n	8004750 <lwip_netconn_do_writemore+0x1a8>
 800466e:	1d01      	adds	r1, r0, #4
 8004670:	d06e      	beq.n	8004750 <lwip_netconn_do_writemore+0x1a8>
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
    }
  }
  if (write_finished) {
 8004672:	2d00      	cmp	r5, #0
 8004674:	f000 8097 	beq.w	80047a6 <lwip_netconn_do_writemore+0x1fe>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004678:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800467a:	6810      	ldr	r0, [r2, #0]
    conn->current_msg->err = err;
 800467c:	2300      	movs	r3, #0
 800467e:	7113      	strb	r3, [r2, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004680:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg = NULL;
    conn->write_offset = 0;
    conn->state = NETCONN_NONE;
 8004684:	461e      	mov	r6, r3
    conn->current_msg = NULL;
 8004686:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8004688:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800468a:	7063      	strb	r3, [r4, #1]
 800468c:	e01b      	b.n	80046c6 <lwip_netconn_do_writemore+0x11e>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800468e:	f049 0902 	orr.w	r9, r9, #2
 8004692:	4615      	mov	r5, r2
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004694:	442e      	add	r6, r5
 8004696:	428e      	cmp	r6, r1
 8004698:	46ab      	mov	fp, r5
 800469a:	d832      	bhi.n	8004702 <lwip_netconn_do_writemore+0x15a>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800469c:	464b      	mov	r3, r9
 800469e:	462a      	mov	r2, r5
 80046a0:	4641      	mov	r1, r8
 80046a2:	f007 f9c1 	bl	800ba28 <tcp_write>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80046ac:	4606      	mov	r6, r0
 80046ae:	4602      	mov	r2, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80046b0:	d930      	bls.n	8004714 <lwip_netconn_do_writemore+0x16c>
 80046b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      conn->current_msg->msg.w.len = 0;
 80046b4:	2200      	movs	r2, #0
 80046b6:	60da      	str	r2, [r3, #12]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80046b8:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80046ba:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80046bc:	2300      	movs	r3, #0
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80046be:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80046c0:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 80046c2:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80046c4:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80046c6:	f008 ff6d 	bl	800d5a4 <sys_arch_protect>
 80046ca:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80046ce:	330c      	adds	r3, #12
 80046d0:	bfa8      	it	ge
 80046d2:	7226      	strbge	r6, [r4, #8]
 80046d4:	f008 ff72 	bl	800d5bc <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80046d8:	b917      	cbnz	r7, 80046e0 <lwip_netconn_do_writemore+0x138>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 80046da:	2000      	movs	r0, #0
 80046dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sys_sem_signal(op_completed_sem);
 80046e0:	4628      	mov	r0, r5
 80046e2:	f008 ff15 	bl	800d510 <sys_sem_signal>
  return ERR_OK;
 80046e6:	2000      	movs	r0, #0
 80046e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80046ec:	4b3c      	ldr	r3, [pc, #240]	; (80047e0 <lwip_netconn_do_writemore+0x238>)
 80046ee:	493f      	ldr	r1, [pc, #252]	; (80047ec <lwip_netconn_do_writemore+0x244>)
 80046f0:	483d      	ldr	r0, [pc, #244]	; (80047e8 <lwip_netconn_do_writemore+0x240>)
 80046f2:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80046f6:	f009 fc71 	bl	800dfdc <iprintf>
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	6a26      	ldr	r6, [r4, #32]
 80046fe:	68d9      	ldr	r1, [r3, #12]
 8004700:	e771      	b.n	80045e6 <lwip_netconn_do_writemore+0x3e>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004702:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <lwip_netconn_do_writemore+0x238>)
 8004704:	493a      	ldr	r1, [pc, #232]	; (80047f0 <lwip_netconn_do_writemore+0x248>)
 8004706:	4838      	ldr	r0, [pc, #224]	; (80047e8 <lwip_netconn_do_writemore+0x240>)
 8004708:	f240 6213 	movw	r2, #1555	; 0x613
 800470c:	f009 fc66 	bl	800dfdc <iprintf>
 8004710:	6860      	ldr	r0, [r4, #4]
 8004712:	e7c3      	b.n	800469c <lwip_netconn_do_writemore+0xf4>
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004714:	f1ba 0f00 	cmp.w	sl, #0
 8004718:	d114      	bne.n	8004744 <lwip_netconn_do_writemore+0x19c>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800471a:	6863      	ldr	r3, [r4, #4]
 800471c:	f8b3 0060 	ldrh.w	r0, [r3, #96]	; 0x60
 8004720:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8004724:	4288      	cmp	r0, r1
 8004726:	d903      	bls.n	8004730 <lwip_netconn_do_writemore+0x188>
 8004728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800472c:	2b04      	cmp	r3, #4
 800472e:	d916      	bls.n	800475e <lwip_netconn_do_writemore+0x1b6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004730:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8004734:	f1b8 0f00 	cmp.w	r8, #0
 8004738:	d011      	beq.n	800475e <lwip_netconn_do_writemore+0x1b6>
 800473a:	462a      	mov	r2, r5
 800473c:	2103      	movs	r1, #3
 800473e:	4620      	mov	r0, r4
 8004740:	47c0      	blx	r8
 8004742:	e77f      	b.n	8004644 <lwip_netconn_do_writemore+0x9c>
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	429d      	cmp	r5, r3
 800474a:	d2e6      	bcs.n	800471a <lwip_netconn_do_writemore+0x172>
 800474c:	462a      	mov	r2, r5
 800474e:	e770      	b.n	8004632 <lwip_netconn_do_writemore+0x8a>
        conn->current_msg->msg.w.len = 0;
 8004750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004752:	2200      	movs	r2, #0
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	e7af      	b.n	80046b8 <lwip_netconn_do_writemore+0x110>
        conn->current_msg->msg.w.len = conn->write_offset;
 8004758:	60d3      	str	r3, [r2, #12]
        write_finished = 1;
 800475a:	2501      	movs	r5, #1
 800475c:	e780      	b.n	8004660 <lwip_netconn_do_writemore+0xb8>
 800475e:	4616      	mov	r6, r2
 8004760:	e770      	b.n	8004644 <lwip_netconn_do_writemore+0x9c>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <lwip_netconn_do_writemore+0x238>)
 8004764:	4923      	ldr	r1, [pc, #140]	; (80047f4 <lwip_netconn_do_writemore+0x24c>)
 8004766:	4820      	ldr	r0, [pc, #128]	; (80047e8 <lwip_netconn_do_writemore+0x240>)
 8004768:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800476c:	f009 fc36 	bl	800dfdc <iprintf>
 8004770:	e721      	b.n	80045b6 <lwip_netconn_do_writemore+0xe>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <lwip_netconn_do_writemore+0x238>)
 8004774:	4920      	ldr	r1, [pc, #128]	; (80047f8 <lwip_netconn_do_writemore+0x250>)
 8004776:	481c      	ldr	r0, [pc, #112]	; (80047e8 <lwip_netconn_do_writemore+0x240>)
 8004778:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800477c:	f009 fc2e 	bl	800dfdc <iprintf>
 8004780:	e727      	b.n	80045d2 <lwip_netconn_do_writemore+0x2a>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004782:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <lwip_netconn_do_writemore+0x238>)
 8004784:	491d      	ldr	r1, [pc, #116]	; (80047fc <lwip_netconn_do_writemore+0x254>)
 8004786:	4818      	ldr	r0, [pc, #96]	; (80047e8 <lwip_netconn_do_writemore+0x240>)
 8004788:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800478c:	f009 fc26 	bl	800dfdc <iprintf>
 8004790:	e723      	b.n	80045da <lwip_netconn_do_writemore+0x32>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004792:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8004796:	f1b8 0f00 	cmp.w	r8, #0
 800479a:	d01d      	beq.n	80047d8 <lwip_netconn_do_writemore+0x230>
 800479c:	460d      	mov	r5, r1
 800479e:	468b      	mov	fp, r1
          err = ERR_WOULDBLOCK;
 80047a0:	f06f 0606 	mvn.w	r6, #6
 80047a4:	e7c9      	b.n	800473a <lwip_netconn_do_writemore+0x192>
    return ERR_MEM;
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (err == ERR_MEM) {
 80047ae:	1c72      	adds	r2, r6, #1
 80047b0:	f47f af7f 	bne.w	80046b2 <lwip_netconn_do_writemore+0x10a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80047b4:	6860      	ldr	r0, [r4, #4]
 80047b6:	f007 fe3f 	bl	800c438 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80047ba:	f110 0f0c 	cmn.w	r0, #12
      err_t out_err = tcp_output(conn->pcb.tcp);
 80047be:	4606      	mov	r6, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80047c0:	dbc6      	blt.n	8004750 <lwip_netconn_do_writemore+0x1a8>
 80047c2:	1d03      	adds	r3, r0, #4
 80047c4:	d0c4      	beq.n	8004750 <lwip_netconn_do_writemore+0x1a8>
      } else if (dontblock) {
 80047c6:	f1ba 0f00 	cmp.w	sl, #0
 80047ca:	d0ec      	beq.n	80047a6 <lwip_netconn_do_writemore+0x1fe>
        conn->current_msg->msg.w.len = 0;
 80047cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
        err = ERR_WOULDBLOCK;
 80047d2:	f06f 0606 	mvn.w	r6, #6
 80047d6:	e76f      	b.n	80046b8 <lwip_netconn_do_writemore+0x110>
          err = ERR_WOULDBLOCK;
 80047d8:	f06f 0606 	mvn.w	r6, #6
 80047dc:	e76a      	b.n	80046b4 <lwip_netconn_do_writemore+0x10c>
 80047de:	bf00      	nop
 80047e0:	0800ead4 	.word	0x0800ead4
 80047e4:	0800e938 	.word	0x0800e938
 80047e8:	0800e670 	.word	0x0800e670
 80047ec:	0800e970 	.word	0x0800e970
 80047f0:	0800e9a4 	.word	0x0800e9a4
 80047f4:	0800e80c 	.word	0x0800e80c
 80047f8:	0800e81c 	.word	0x0800e81c
 80047fc:	0800e958 	.word	0x0800e958

08004800 <lwip_netconn_do_close_internal>:
{
 8004800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004804:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004806:	4604      	mov	r4, r0
 8004808:	2800      	cmp	r0, #0
 800480a:	f000 8106 	beq.w	8004a1a <lwip_netconn_do_close_internal+0x21a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800480e:	7823      	ldrb	r3, [r4, #0]
 8004810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004814:	2b10      	cmp	r3, #16
 8004816:	d006      	beq.n	8004826 <lwip_netconn_do_close_internal+0x26>
 8004818:	4b92      	ldr	r3, [pc, #584]	; (8004a64 <lwip_netconn_do_close_internal+0x264>)
 800481a:	4993      	ldr	r1, [pc, #588]	; (8004a68 <lwip_netconn_do_close_internal+0x268>)
 800481c:	4893      	ldr	r0, [pc, #588]	; (8004a6c <lwip_netconn_do_close_internal+0x26c>)
 800481e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8004822:	f009 fbdb 	bl	800dfdc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004826:	7863      	ldrb	r3, [r4, #1]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d006      	beq.n	800483a <lwip_netconn_do_close_internal+0x3a>
 800482c:	4b8d      	ldr	r3, [pc, #564]	; (8004a64 <lwip_netconn_do_close_internal+0x264>)
 800482e:	4990      	ldr	r1, [pc, #576]	; (8004a70 <lwip_netconn_do_close_internal+0x270>)
 8004830:	488e      	ldr	r0, [pc, #568]	; (8004a6c <lwip_netconn_do_close_internal+0x26c>)
 8004832:	f240 3245 	movw	r2, #837	; 0x345
 8004836:	f009 fbd1 	bl	800dfdc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80f4 	beq.w	8004a2a <lwip_netconn_do_close_internal+0x22a>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80f8 	beq.w	8004a3a <lwip_netconn_do_close_internal+0x23a>
  shut = conn->current_msg->msg.sd.shut;
 800484a:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 800484c:	6865      	ldr	r5, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 800484e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8004850:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8004854:	f003 0702 	and.w	r7, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004858:	d079      	beq.n	800494e <lwip_netconn_do_close_internal+0x14e>
  } else if (shut_rx &&
 800485a:	f1b9 0f00 	cmp.w	r9, #0
 800485e:	d005      	beq.n	800486c <lwip_netconn_do_close_internal+0x6c>
             ((tpcb->state == FIN_WAIT_1) ||
 8004860:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8004862:	1f5a      	subs	r2, r3, #5
 8004864:	2a01      	cmp	r2, #1
 8004866:	d972      	bls.n	800494e <lwip_netconn_do_close_internal+0x14e>
              (tpcb->state == FIN_WAIT_2) ||
 8004868:	2b08      	cmp	r3, #8
 800486a:	d070      	beq.n	800494e <lwip_netconn_do_close_internal+0x14e>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800486c:	bb8f      	cbnz	r7, 80048d2 <lwip_netconn_do_close_internal+0xd2>
  if (tpcb->state == LISTEN) {
 800486e:	7d2b      	ldrb	r3, [r5, #20]
 8004870:	2b01      	cmp	r3, #1
 8004872:	f000 80f2 	beq.w	8004a5a <lwip_netconn_do_close_internal+0x25a>
 8004876:	2600      	movs	r6, #0
    if (shut_rx) {
 8004878:	f1b9 0f00 	cmp.w	r9, #0
 800487c:	d16f      	bne.n	800495e <lwip_netconn_do_close_internal+0x15e>
    if (shut_tx) {
 800487e:	2f00      	cmp	r7, #0
 8004880:	d137      	bne.n	80048f2 <lwip_netconn_do_close_internal+0xf2>
    if (close) {
 8004882:	2e00      	cmp	r6, #0
 8004884:	d13b      	bne.n	80048fe <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004886:	463a      	mov	r2, r7
 8004888:	4649      	mov	r1, r9
 800488a:	4628      	mov	r0, r5
 800488c:	f005 faf4 	bl	8009e78 <tcp_shutdown>
  if (err == ERR_OK) {
 8004890:	4606      	mov	r6, r0
 8004892:	2800      	cmp	r0, #0
 8004894:	d06e      	beq.n	8004974 <lwip_netconn_do_close_internal+0x174>
    if (err == ERR_MEM) {
 8004896:	1c71      	adds	r1, r6, #1
  if (err == ERR_OK) {
 8004898:	f04f 0200 	mov.w	r2, #0
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800489c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (err == ERR_MEM) {
 800489e:	d042      	beq.n	8004926 <lwip_netconn_do_close_internal+0x126>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80048a0:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80048a2:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80048a4:	2300      	movs	r3, #0
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80048a6:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80048a8:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80048aa:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80048ac:	f008 fe7a 	bl	800d5a4 <sys_arch_protect>
 80048b0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80048b4:	330c      	adds	r3, #12
 80048b6:	bfa8      	it	ge
 80048b8:	7226      	strbge	r6, [r4, #8]
 80048ba:	f008 fe7f 	bl	800d5bc <sys_arch_unprotect>
    if (delayed)
 80048be:	f1b8 0f00 	cmp.w	r8, #0
 80048c2:	d002      	beq.n	80048ca <lwip_netconn_do_close_internal+0xca>
      sys_sem_signal(op_completed_sem);
 80048c4:	4628      	mov	r0, r5
 80048c6:	f008 fe23 	bl	800d510 <sys_sem_signal>
    return ERR_OK;
 80048ca:	2600      	movs	r6, #0
}
 80048cc:	4630      	mov	r0, r6
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80048d2:	7eab      	ldrb	r3, [r5, #26]
 80048d4:	06d8      	lsls	r0, r3, #27
 80048d6:	d5ca      	bpl.n	800486e <lwip_netconn_do_close_internal+0x6e>
    tcp_arg(tpcb, NULL);
 80048d8:	2100      	movs	r1, #0
 80048da:	4628      	mov	r0, r5
 80048dc:	f004 fca8 	bl	8009230 <tcp_arg>
  if (tpcb->state == LISTEN) {
 80048e0:	7d2b      	ldrb	r3, [r5, #20]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	f000 8094 	beq.w	8004a10 <lwip_netconn_do_close_internal+0x210>
 80048e8:	2601      	movs	r6, #1
    if (shut_rx) {
 80048ea:	f1b9 0f00 	cmp.w	r9, #0
 80048ee:	d0c6      	beq.n	800487e <lwip_netconn_do_close_internal+0x7e>
 80048f0:	e035      	b.n	800495e <lwip_netconn_do_close_internal+0x15e>
      tcp_sent(tpcb, NULL);
 80048f2:	2100      	movs	r1, #0
 80048f4:	4628      	mov	r0, r5
 80048f6:	f004 fcbb 	bl	8009270 <tcp_sent>
    if (close) {
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	d0c3      	beq.n	8004886 <lwip_netconn_do_close_internal+0x86>
      tcp_poll(tpcb, NULL, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	4611      	mov	r1, r2
 8004902:	4628      	mov	r0, r5
 8004904:	f004 fcf0 	bl	80092e8 <tcp_poll>
      tcp_err(tpcb, NULL);
 8004908:	2100      	movs	r1, #0
 800490a:	4628      	mov	r0, r5
 800490c:	f004 fcca 	bl	80092a4 <tcp_err>
      err = tcp_close(tpcb);
 8004910:	4628      	mov	r0, r5
 8004912:	f005 f9d5 	bl	8009cc0 <tcp_close>
  if (err == ERR_OK) {
 8004916:	4606      	mov	r6, r0
 8004918:	2800      	cmp	r0, #0
 800491a:	d045      	beq.n	80049a8 <lwip_netconn_do_close_internal+0x1a8>
    if (err == ERR_MEM) {
 800491c:	1c71      	adds	r1, r6, #1
  if (err == ERR_OK) {
 800491e:	f04f 0201 	mov.w	r2, #1
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004922:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (err == ERR_MEM) {
 8004924:	d1bc      	bne.n	80048a0 <lwip_netconn_do_close_internal+0xa0>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004926:	f893 a009 	ldrb.w	sl, [r3, #9]
 800492a:	f1ba 0f00 	cmp.w	sl, #0
 800492e:	d14d      	bne.n	80049cc <lwip_netconn_do_close_internal+0x1cc>
        if (close) {
 8004930:	2a00      	cmp	r2, #0
 8004932:	d0b5      	beq.n	80048a0 <lwip_netconn_do_close_internal+0xa0>
          tcp_abort(tpcb);
 8004934:	4628      	mov	r0, r5
 8004936:	f005 f843 	bl	80099c0 <tcp_abort>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800493a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493c:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800493e:	f883 a004 	strb.w	sl, [r3, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004942:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8004944:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004948:	f884 a001 	strb.w	sl, [r4, #1]
 800494c:	e032      	b.n	80049b4 <lwip_netconn_do_close_internal+0x1b4>
    tcp_arg(tpcb, NULL);
 800494e:	2100      	movs	r1, #0
 8004950:	4628      	mov	r0, r5
 8004952:	f004 fc6d 	bl	8009230 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8004956:	7d2b      	ldrb	r3, [r5, #20]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d059      	beq.n	8004a10 <lwip_netconn_do_close_internal+0x210>
 800495c:	2601      	movs	r6, #1
      tcp_recv(tpcb, NULL);
 800495e:	2100      	movs	r1, #0
 8004960:	4628      	mov	r0, r5
 8004962:	f004 fc69 	bl	8009238 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004966:	2100      	movs	r1, #0
 8004968:	4628      	mov	r0, r5
 800496a:	f004 fcb7 	bl	80092dc <tcp_accept>
    if (shut_tx) {
 800496e:	2f00      	cmp	r7, #0
 8004970:	d087      	beq.n	8004882 <lwip_netconn_do_close_internal+0x82>
 8004972:	e7be      	b.n	80048f2 <lwip_netconn_do_close_internal+0xf2>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004976:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8004978:	7118      	strb	r0, [r3, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800497a:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800497c:	6260      	str	r0, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800497e:	7060      	strb	r0, [r4, #1]
      if (shut_rx) {
 8004980:	f1b9 0f00 	cmp.w	r9, #0
 8004984:	d006      	beq.n	8004994 <lwip_netconn_do_close_internal+0x194>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004988:	2e00      	cmp	r6, #0
 800498a:	d08f      	beq.n	80048ac <lwip_netconn_do_close_internal+0xac>
 800498c:	2200      	movs	r2, #0
 800498e:	4611      	mov	r1, r2
 8004990:	4620      	mov	r0, r4
 8004992:	47b0      	blx	r6
      if (shut_tx) {
 8004994:	b137      	cbz	r7, 80049a4 <lwip_netconn_do_close_internal+0x1a4>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004998:	2e00      	cmp	r6, #0
 800499a:	d087      	beq.n	80048ac <lwip_netconn_do_close_internal+0xac>
 800499c:	2200      	movs	r2, #0
 800499e:	2102      	movs	r1, #2
 80049a0:	4620      	mov	r0, r4
 80049a2:	47b0      	blx	r6
 80049a4:	2600      	movs	r6, #0
 80049a6:	e781      	b.n	80048ac <lwip_netconn_do_close_internal+0xac>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80049a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049aa:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80049ac:	7118      	strb	r0, [r3, #4]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80049ae:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80049b0:	6260      	str	r0, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80049b2:	7060      	strb	r0, [r4, #1]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80049b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        conn->pcb.tcp = NULL;
 80049b6:	2200      	movs	r2, #0
 80049b8:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	d046      	beq.n	8004a4c <lwip_netconn_do_close_internal+0x24c>
 80049be:	2104      	movs	r1, #4
 80049c0:	4620      	mov	r0, r4
 80049c2:	47b0      	blx	r6
      if (shut_rx) {
 80049c4:	f1b9 0f00 	cmp.w	r9, #0
 80049c8:	d0e4      	beq.n	8004994 <lwip_netconn_do_close_internal+0x194>
 80049ca:	e7dc      	b.n	8004986 <lwip_netconn_do_close_internal+0x186>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80049cc:	7d2b      	ldrb	r3, [r5, #20]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d010      	beq.n	80049f4 <lwip_netconn_do_close_internal+0x1f4>
    if (shut_tx) {
 80049d2:	b9c7      	cbnz	r7, 8004a06 <lwip_netconn_do_close_internal+0x206>
    tcp_poll(tpcb, poll_tcp, 1);
 80049d4:	2201      	movs	r2, #1
 80049d6:	4628      	mov	r0, r5
 80049d8:	4926      	ldr	r1, [pc, #152]	; (8004a74 <lwip_netconn_do_close_internal+0x274>)
 80049da:	f004 fc85 	bl	80092e8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80049de:	4628      	mov	r0, r5
 80049e0:	4925      	ldr	r1, [pc, #148]	; (8004a78 <lwip_netconn_do_close_internal+0x278>)
 80049e2:	f004 fc5f 	bl	80092a4 <tcp_err>
    tcp_arg(tpcb, conn);
 80049e6:	4628      	mov	r0, r5
 80049e8:	4621      	mov	r1, r4
 80049ea:	f004 fc21 	bl	8009230 <tcp_arg>
}
 80049ee:	4630      	mov	r0, r6
 80049f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <lwip_netconn_do_close_internal+0x264>)
 80049f6:	4921      	ldr	r1, [pc, #132]	; (8004a7c <lwip_netconn_do_close_internal+0x27c>)
 80049f8:	481c      	ldr	r0, [pc, #112]	; (8004a6c <lwip_netconn_do_close_internal+0x26c>)
 80049fa:	f240 32e3 	movw	r2, #995	; 0x3e3
 80049fe:	f009 faed 	bl	800dfdc <iprintf>
    if (shut_tx) {
 8004a02:	2f00      	cmp	r7, #0
 8004a04:	d0e6      	beq.n	80049d4 <lwip_netconn_do_close_internal+0x1d4>
      tcp_sent(tpcb, sent_tcp);
 8004a06:	491e      	ldr	r1, [pc, #120]	; (8004a80 <lwip_netconn_do_close_internal+0x280>)
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f004 fc31 	bl	8009270 <tcp_sent>
 8004a0e:	e7e1      	b.n	80049d4 <lwip_netconn_do_close_internal+0x1d4>
    tcp_accept(tpcb, NULL);
 8004a10:	2100      	movs	r1, #0
 8004a12:	4628      	mov	r0, r5
 8004a14:	f004 fc62 	bl	80092dc <tcp_accept>
 8004a18:	e77a      	b.n	8004910 <lwip_netconn_do_close_internal+0x110>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <lwip_netconn_do_close_internal+0x264>)
 8004a1c:	4919      	ldr	r1, [pc, #100]	; (8004a84 <lwip_netconn_do_close_internal+0x284>)
 8004a1e:	4813      	ldr	r0, [pc, #76]	; (8004a6c <lwip_netconn_do_close_internal+0x26c>)
 8004a20:	f240 3243 	movw	r2, #835	; 0x343
 8004a24:	f009 fada 	bl	800dfdc <iprintf>
 8004a28:	e6f1      	b.n	800480e <lwip_netconn_do_close_internal+0xe>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <lwip_netconn_do_close_internal+0x264>)
 8004a2c:	4916      	ldr	r1, [pc, #88]	; (8004a88 <lwip_netconn_do_close_internal+0x288>)
 8004a2e:	480f      	ldr	r0, [pc, #60]	; (8004a6c <lwip_netconn_do_close_internal+0x26c>)
 8004a30:	f240 3246 	movw	r2, #838	; 0x346
 8004a34:	f009 fad2 	bl	800dfdc <iprintf>
 8004a38:	e703      	b.n	8004842 <lwip_netconn_do_close_internal+0x42>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <lwip_netconn_do_close_internal+0x264>)
 8004a3c:	4913      	ldr	r1, [pc, #76]	; (8004a8c <lwip_netconn_do_close_internal+0x28c>)
 8004a3e:	480b      	ldr	r0, [pc, #44]	; (8004a6c <lwip_netconn_do_close_internal+0x26c>)
 8004a40:	f240 3247 	movw	r2, #839	; 0x347
 8004a44:	f009 faca 	bl	800dfdc <iprintf>
 8004a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a4a:	e6fe      	b.n	800484a <lwip_netconn_do_close_internal+0x4a>
      if (shut_rx) {
 8004a4c:	f1b9 0f00 	cmp.w	r9, #0
 8004a50:	f47f af2c 	bne.w	80048ac <lwip_netconn_do_close_internal+0xac>
      if (shut_tx) {
 8004a54:	2f00      	cmp	r7, #0
 8004a56:	d19e      	bne.n	8004996 <lwip_netconn_do_close_internal+0x196>
 8004a58:	e7a4      	b.n	80049a4 <lwip_netconn_do_close_internal+0x1a4>
    tcp_accept(tpcb, NULL);
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f004 fc3d 	bl	80092dc <tcp_accept>
 8004a62:	e710      	b.n	8004886 <lwip_netconn_do_close_internal+0x86>
 8004a64:	0800ead4 	.word	0x0800ead4
 8004a68:	0800e870 	.word	0x0800e870
 8004a6c:	0800e670 	.word	0x0800e670
 8004a70:	0800e890 	.word	0x0800e890
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	0800445d 	.word	0x0800445d
 8004a7c:	0800e8c8 	.word	0x0800e8c8
 8004a80:	08004be1 	.word	0x08004be1
 8004a84:	0800e6a8 	.word	0x0800e6a8
 8004a88:	0800e8b4 	.word	0x0800e8b4
 8004a8c:	0800e81c 	.word	0x0800e81c

08004a90 <poll_tcp>:
{
 8004a90:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004a92:	4604      	mov	r4, r0
 8004a94:	b368      	cbz	r0, 8004af2 <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 8004a96:	7861      	ldrb	r1, [r4, #1]
 8004a98:	2901      	cmp	r1, #1
 8004a9a:	d026      	beq.n	8004aea <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 8004a9c:	2904      	cmp	r1, #4
 8004a9e:	d019      	beq.n	8004ad4 <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004aa0:	7f23      	ldrb	r3, [r4, #28]
 8004aa2:	06da      	lsls	r2, r3, #27
 8004aa4:	d514      	bpl.n	8004ad0 <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	b192      	cbz	r2, 8004ad0 <poll_tcp+0x40>
 8004aaa:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 8004aae:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8004ab2:	4288      	cmp	r0, r1
 8004ab4:	d90c      	bls.n	8004ad0 <poll_tcp+0x40>
 8004ab6:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8004aba:	2a04      	cmp	r2, #4
 8004abc:	d808      	bhi.n	8004ad0 <poll_tcp+0x40>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004abe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004ac6:	b11d      	cbz	r5, 8004ad0 <poll_tcp+0x40>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	2200      	movs	r2, #0
 8004acc:	2102      	movs	r1, #2
 8004ace:	47a8      	blx	r5
}
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad6:	b11b      	cbz	r3, 8004ae0 <poll_tcp+0x50>
 8004ad8:	7a5a      	ldrb	r2, [r3, #9]
 8004ada:	b10a      	cbz	r2, 8004ae0 <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 8004adc:	3a01      	subs	r2, #1
 8004ade:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff fe8c 	bl	8004800 <lwip_netconn_do_close_internal>
 8004ae8:	e7da      	b.n	8004aa0 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff fd5c 	bl	80045a8 <lwip_netconn_do_writemore>
 8004af0:	e7d6      	b.n	8004aa0 <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <poll_tcp+0x74>)
 8004af4:	4904      	ldr	r1, [pc, #16]	; (8004b08 <poll_tcp+0x78>)
 8004af6:	4805      	ldr	r0, [pc, #20]	; (8004b0c <poll_tcp+0x7c>)
 8004af8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004afc:	f009 fa6e 	bl	800dfdc <iprintf>
 8004b00:	e7c9      	b.n	8004a96 <poll_tcp+0x6>
 8004b02:	bf00      	nop
 8004b04:	0800ead4 	.word	0x0800ead4
 8004b08:	0800e80c 	.word	0x0800e80c
 8004b0c:	0800e670 	.word	0x0800e670

08004b10 <recv_tcp>:
{
 8004b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b14:	4605      	mov	r5, r0
 8004b16:	4616      	mov	r6, r2
 8004b18:	4699      	mov	r9, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004b1a:	460f      	mov	r7, r1
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d040      	beq.n	8004ba2 <recv_tcp+0x92>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004b20:	2d00      	cmp	r5, #0
 8004b22:	d047      	beq.n	8004bb4 <recv_tcp+0xa4>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004b24:	686b      	ldr	r3, [r5, #4]
 8004b26:	429f      	cmp	r7, r3
 8004b28:	d006      	beq.n	8004b38 <recv_tcp+0x28>
 8004b2a:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <recv_tcp+0xbc>)
 8004b2c:	4928      	ldr	r1, [pc, #160]	; (8004bd0 <recv_tcp+0xc0>)
 8004b2e:	4829      	ldr	r0, [pc, #164]	; (8004bd4 <recv_tcp+0xc4>)
 8004b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b34:	f009 fa52 	bl	800dfdc <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004b38:	f105 0810 	add.w	r8, r5, #16
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	f008 fca5 	bl	800d48c <sys_mbox_valid>
 8004b42:	4604      	mov	r4, r0
 8004b44:	b950      	cbnz	r0, 8004b5c <recv_tcp+0x4c>
    if (p != NULL) {
 8004b46:	b1ee      	cbz	r6, 8004b84 <recv_tcp+0x74>
      tcp_recved(pcb, p->tot_len);
 8004b48:	4638      	mov	r0, r7
 8004b4a:	8931      	ldrh	r1, [r6, #8]
 8004b4c:	f004 f880 	bl	8008c50 <tcp_recved>
      pbuf_free(p);
 8004b50:	4630      	mov	r0, r6
 8004b52:	f003 fbbf 	bl	80082d4 <pbuf_free>
}
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (err != ERR_OK) {
 8004b5c:	f1b9 0f00 	cmp.w	r9, #0
 8004b60:	d114      	bne.n	8004b8c <recv_tcp+0x7c>
  if (p != NULL) {
 8004b62:	b32e      	cbz	r6, 8004bb0 <recv_tcp+0xa0>
    len = p->tot_len;
 8004b64:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8004b66:	4631      	mov	r1, r6
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f008 fc4f 	bl	800d40c <sys_mbox_trypost>
 8004b6e:	4604      	mov	r4, r0
 8004b70:	bb48      	cbnz	r0, 8004bc6 <recv_tcp+0xb6>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004b72:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004b74:	b133      	cbz	r3, 8004b84 <recv_tcp+0x74>
 8004b76:	4628      	mov	r0, r5
 8004b78:	463a      	mov	r2, r7
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4798      	blx	r3
}
 8004b7e:	4620      	mov	r0, r4
 8004b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_OK;
 8004b84:	2400      	movs	r4, #0
}
 8004b86:	4620      	mov	r0, r4
 8004b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8004b8c:	f008 fd0a 	bl	800d5a4 <sys_arch_protect>
 8004b90:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8004b94:	330c      	adds	r3, #12
 8004b96:	bfa8      	it	ge
 8004b98:	f885 9008 	strbge.w	r9, [r5, #8]
 8004b9c:	f008 fd0e 	bl	800d5bc <sys_arch_unprotect>
 8004ba0:	e7df      	b.n	8004b62 <recv_tcp+0x52>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <recv_tcp+0xbc>)
 8004ba4:	490c      	ldr	r1, [pc, #48]	; (8004bd8 <recv_tcp+0xc8>)
 8004ba6:	480b      	ldr	r0, [pc, #44]	; (8004bd4 <recv_tcp+0xc4>)
 8004ba8:	22f9      	movs	r2, #249	; 0xf9
 8004baa:	f009 fa17 	bl	800dfdc <iprintf>
 8004bae:	e7b7      	b.n	8004b20 <recv_tcp+0x10>
    len = 0;
 8004bb0:	4637      	mov	r7, r6
 8004bb2:	e7d8      	b.n	8004b66 <recv_tcp+0x56>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <recv_tcp+0xbc>)
 8004bb6:	4909      	ldr	r1, [pc, #36]	; (8004bdc <recv_tcp+0xcc>)
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <recv_tcp+0xc4>)
 8004bba:	22fa      	movs	r2, #250	; 0xfa
 8004bbc:	f009 fa0e 	bl	800dfdc <iprintf>
    return ERR_VAL;
 8004bc0:	f06f 0405 	mvn.w	r4, #5
 8004bc4:	e7c7      	b.n	8004b56 <recv_tcp+0x46>
    return ERR_MEM;
 8004bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8004bca:	e7c4      	b.n	8004b56 <recv_tcp+0x46>
 8004bcc:	0800ead4 	.word	0x0800ead4
 8004bd0:	0800eab4 	.word	0x0800eab4
 8004bd4:	0800e670 	.word	0x0800e670
 8004bd8:	0800ea70 	.word	0x0800ea70
 8004bdc:	0800ea94 	.word	0x0800ea94

08004be0 <sent_tcp>:
{
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	b083      	sub	sp, #12
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004be4:	b340      	cbz	r0, 8004c38 <sent_tcp+0x58>
    if (conn->state == NETCONN_WRITE) {
 8004be6:	7841      	ldrb	r1, [r0, #1]
 8004be8:	2901      	cmp	r1, #1
 8004bea:	4604      	mov	r4, r0
 8004bec:	d019      	beq.n	8004c22 <sent_tcp+0x42>
    } else if (conn->state == NETCONN_CLOSE) {
 8004bee:	2904      	cmp	r1, #4
 8004bf0:	d01c      	beq.n	8004c2c <sent_tcp+0x4c>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	b193      	cbz	r3, 8004c1c <sent_tcp+0x3c>
 8004bf6:	f8b3 0060 	ldrh.w	r0, [r3, #96]	; 0x60
 8004bfa:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8004bfe:	4288      	cmp	r0, r1
 8004c00:	d90c      	bls.n	8004c1c <sent_tcp+0x3c>
 8004c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d808      	bhi.n	8004c1c <sent_tcp+0x3c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004c0a:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004c0c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004c0e:	f023 0310 	bic.w	r3, r3, #16
 8004c12:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004c14:	b115      	cbz	r5, 8004c1c <sent_tcp+0x3c>
 8004c16:	4620      	mov	r0, r4
 8004c18:	2102      	movs	r1, #2
 8004c1a:	47a8      	blx	r5
}
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	b003      	add	sp, #12
 8004c20:	bd30      	pop	{r4, r5, pc}
 8004c22:	9201      	str	r2, [sp, #4]
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004c24:	f7ff fcc0 	bl	80045a8 <lwip_netconn_do_writemore>
 8004c28:	9a01      	ldr	r2, [sp, #4]
 8004c2a:	e7e2      	b.n	8004bf2 <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	9201      	str	r2, [sp, #4]
 8004c30:	f7ff fde6 	bl	8004800 <lwip_netconn_do_close_internal>
 8004c34:	9a01      	ldr	r2, [sp, #4]
 8004c36:	e7dc      	b.n	8004bf2 <sent_tcp+0x12>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <sent_tcp+0x68>)
 8004c3a:	4904      	ldr	r1, [pc, #16]	; (8004c4c <sent_tcp+0x6c>)
 8004c3c:	4804      	ldr	r0, [pc, #16]	; (8004c50 <sent_tcp+0x70>)
 8004c3e:	f240 1261 	movw	r2, #353	; 0x161
 8004c42:	f009 f9cb 	bl	800dfdc <iprintf>
 8004c46:	e7e9      	b.n	8004c1c <sent_tcp+0x3c>
 8004c48:	0800ead4 	.word	0x0800ead4
 8004c4c:	0800e80c 	.word	0x0800e80c
 8004c50:	0800e670 	.word	0x0800e670

08004c54 <netconn_drain>:
{
 8004c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004c58:	f100 0410 	add.w	r4, r0, #16
{
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004c60:	4620      	mov	r0, r4
 8004c62:	f008 fc13 	bl	800d48c <sys_mbox_valid>
 8004c66:	b318      	cbz	r0, 8004cb0 <netconn_drain+0x5c>
 8004c68:	ae01      	add	r6, sp, #4
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f008 fbfb 	bl	800d468 <sys_arch_mbox_tryfetch>
 8004c72:	3001      	adds	r0, #1
 8004c74:	d016      	beq.n	8004ca4 <netconn_drain+0x50>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8004c76:	782b      	ldrb	r3, [r5, #0]
 8004c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d133      	bne.n	8004ce8 <netconn_drain+0x94>
        if (mem != NULL) {
 8004c80:	9f01      	ldr	r7, [sp, #4]
 8004c82:	2f00      	cmp	r7, #0
 8004c84:	d0f1      	beq.n	8004c6a <netconn_drain+0x16>
          if (conn->pcb.tcp != NULL) {
 8004c86:	686b      	ldr	r3, [r5, #4]
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004c88:	4618      	mov	r0, r3
          if (conn->pcb.tcp != NULL) {
 8004c8a:	b113      	cbz	r3, 8004c92 <netconn_drain+0x3e>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004c8c:	8939      	ldrh	r1, [r7, #8]
 8004c8e:	f003 ffdf 	bl	8008c50 <tcp_recved>
          pbuf_free(p);
 8004c92:	4638      	mov	r0, r7
 8004c94:	f003 fb1e 	bl	80082d4 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f008 fbe4 	bl	800d468 <sys_arch_mbox_tryfetch>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d1e8      	bne.n	8004c76 <netconn_drain+0x22>
    sys_mbox_free(&conn->recvmbox);
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f008 fb9b 	bl	800d3e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8004caa:	4620      	mov	r0, r4
 8004cac:	f008 fbf4 	bl	800d498 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004cb0:	3514      	adds	r5, #20
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f008 fbea 	bl	800d48c <sys_mbox_valid>
 8004cb8:	b198      	cbz	r0, 8004ce2 <netconn_drain+0x8e>
 8004cba:	ae01      	add	r6, sp, #4
      if (mem != &netconn_aborted) {
 8004cbc:	4f29      	ldr	r7, [pc, #164]	; (8004d64 <netconn_drain+0x110>)
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004cbe:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8004d74 <netconn_drain+0x120>
 8004cc2:	e002      	b.n	8004cca <netconn_drain+0x76>
      if (mem != &netconn_aborted) {
 8004cc4:	9c01      	ldr	r4, [sp, #4]
 8004cc6:	42bc      	cmp	r4, r7
 8004cc8:	d112      	bne.n	8004cf0 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f008 fbcb 	bl	800d468 <sys_arch_mbox_tryfetch>
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d1f6      	bne.n	8004cc4 <netconn_drain+0x70>
    sys_mbox_free(&conn->acceptmbox);
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f008 fb82 	bl	800d3e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f008 fbdb 	bl	800d498 <sys_mbox_set_invalid>
}
 8004ce2:	b003      	add	sp, #12
 8004ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        netbuf_delete((struct netbuf *)mem);
 8004ce8:	9801      	ldr	r0, [sp, #4]
 8004cea:	f000 fc4d 	bl	8005588 <netbuf_delete>
 8004cee:	e7bc      	b.n	8004c6a <netconn_drain+0x16>
        netconn_drain(newconn);
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7ff ffaf 	bl	8004c54 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8004cf6:	6863      	ldr	r3, [r4, #4]
          tcp_abort(newconn->pcb.tcp);
 8004cf8:	4618      	mov	r0, r3
        if (newconn->pcb.tcp != NULL) {
 8004cfa:	b11b      	cbz	r3, 8004d04 <netconn_drain+0xb0>
          tcp_abort(newconn->pcb.tcp);
 8004cfc:	f004 fe60 	bl	80099c0 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	6063      	str	r3, [r4, #4]
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004d04:	f104 0010 	add.w	r0, r4, #16
 8004d08:	f008 fbc0 	bl	800d48c <sys_mbox_valid>
 8004d0c:	b9c8      	cbnz	r0, 8004d42 <netconn_drain+0xee>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004d0e:	f104 0014 	add.w	r0, r4, #20
  sys_sem_free(&conn->op_completed);
 8004d12:	f104 080c 	add.w	r8, r4, #12
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004d16:	f008 fbb9 	bl	800d48c <sys_mbox_valid>
 8004d1a:	b950      	cbnz	r0, 8004d32 <netconn_drain+0xde>
  sys_sem_free(&conn->op_completed);
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	f008 fbfb 	bl	800d518 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004d22:	4640      	mov	r0, r8
 8004d24:	f008 fc02 	bl	800d52c <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004d28:	4621      	mov	r1, r4
 8004d2a:	2007      	movs	r0, #7
 8004d2c:	f003 f8f2 	bl	8007f14 <memp_free>
 8004d30:	e7cb      	b.n	8004cca <netconn_drain+0x76>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004d32:	464b      	mov	r3, r9
 8004d34:	f240 22e5 	movw	r2, #741	; 0x2e5
 8004d38:	490b      	ldr	r1, [pc, #44]	; (8004d68 <netconn_drain+0x114>)
 8004d3a:	480c      	ldr	r0, [pc, #48]	; (8004d6c <netconn_drain+0x118>)
 8004d3c:	f009 f94e 	bl	800dfdc <iprintf>
 8004d40:	e7ec      	b.n	8004d1c <netconn_drain+0xc8>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004d42:	f240 22e2 	movw	r2, #738	; 0x2e2
 8004d46:	490a      	ldr	r1, [pc, #40]	; (8004d70 <netconn_drain+0x11c>)
 8004d48:	4808      	ldr	r0, [pc, #32]	; (8004d6c <netconn_drain+0x118>)
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	f009 f946 	bl	800dfdc <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004d50:	f104 0014 	add.w	r0, r4, #20
  sys_sem_free(&conn->op_completed);
 8004d54:	f104 080c 	add.w	r8, r4, #12
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004d58:	f008 fb98 	bl	800d48c <sys_mbox_valid>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d0dd      	beq.n	8004d1c <netconn_drain+0xc8>
 8004d60:	e7e7      	b.n	8004d32 <netconn_drain+0xde>
 8004d62:	bf00      	nop
 8004d64:	2000426c 	.word	0x2000426c
 8004d68:	0800ea34 	.word	0x0800ea34
 8004d6c:	0800e670 	.word	0x0800e670
 8004d70:	0800e9f8 	.word	0x0800e9f8
 8004d74:	0800ead4 	.word	0x0800ead4

08004d78 <lwip_netconn_do_newconn>:
{
 8004d78:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8004d7a:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8004d7c:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 8004d7e:	7103      	strb	r3, [r0, #4]
{
 8004d80:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8004d82:	6868      	ldr	r0, [r5, #4]
 8004d84:	b160      	cbz	r0, 8004da0 <lwip_netconn_do_newconn+0x28>
  TCPIP_APIMSG_ACK(msg);
 8004d86:	f008 fc0d 	bl	800d5a4 <sys_arch_protect>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004d90:	320c      	adds	r2, #12
 8004d92:	bfa4      	itt	ge
 8004d94:	7922      	ldrbge	r2, [r4, #4]
 8004d96:	721a      	strbge	r2, [r3, #8]
}
 8004d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 8004d9c:	f008 bc0e 	b.w	800d5bc <sys_arch_unprotect>
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8004da0:	782b      	ldrb	r3, [r5, #0]
 8004da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da6:	2b10      	cmp	r3, #16
 8004da8:	d016      	beq.n	8004dd8 <lwip_netconn_do_newconn+0x60>
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d130      	bne.n	8004e10 <lwip_netconn_do_newconn+0x98>
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8004dae:	f008 fa57 	bl	800d260 <udp_new_ip_type>
 8004db2:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	6850      	ldr	r0, [r2, #4]
 8004db8:	b158      	cbz	r0, 8004dd2 <lwip_netconn_do_newconn+0x5a>
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8004dba:	7813      	ldrb	r3, [r2, #0]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004dbc:	4916      	ldr	r1, [pc, #88]	; (8004e18 <lwip_netconn_do_newconn+0xa0>)
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8004dc0:	bf04      	itt	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	7403      	strbeq	r3, [r0, #16]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004dc6:	f008 fa25 	bl	800d214 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1d9      	bne.n	8004d86 <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 8004dd2:	23ff      	movs	r3, #255	; 0xff
 8004dd4:	7123      	strb	r3, [r4, #4]
 8004dd6:	e7d6      	b.n	8004d86 <lwip_netconn_do_newconn+0xe>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8004dd8:	f004 fed6 	bl	8009b88 <tcp_new_ip_type>
 8004ddc:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	684d      	ldr	r5, [r1, #4]
 8004de2:	2d00      	cmp	r5, #0
 8004de4:	d0f5      	beq.n	8004dd2 <lwip_netconn_do_newconn+0x5a>
  tcp_arg(pcb, conn);
 8004de6:	4628      	mov	r0, r5
 8004de8:	f004 fa22 	bl	8009230 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004dec:	4628      	mov	r0, r5
 8004dee:	490b      	ldr	r1, [pc, #44]	; (8004e1c <lwip_netconn_do_newconn+0xa4>)
 8004df0:	f004 fa22 	bl	8009238 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004df4:	4628      	mov	r0, r5
 8004df6:	490a      	ldr	r1, [pc, #40]	; (8004e20 <lwip_netconn_do_newconn+0xa8>)
 8004df8:	f004 fa3a 	bl	8009270 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4908      	ldr	r1, [pc, #32]	; (8004e24 <lwip_netconn_do_newconn+0xac>)
 8004e02:	f004 fa71 	bl	80092e8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004e06:	4628      	mov	r0, r5
 8004e08:	4907      	ldr	r1, [pc, #28]	; (8004e28 <lwip_netconn_do_newconn+0xb0>)
 8004e0a:	f004 fa4b 	bl	80092a4 <tcp_err>
 8004e0e:	e7dc      	b.n	8004dca <lwip_netconn_do_newconn+0x52>
    msg->err = ERR_VAL;
 8004e10:	23fa      	movs	r3, #250	; 0xfa
 8004e12:	7123      	strb	r3, [r4, #4]
 8004e14:	e7b7      	b.n	8004d86 <lwip_netconn_do_newconn+0xe>
 8004e16:	bf00      	nop
 8004e18:	080043a1 	.word	0x080043a1
 8004e1c:	08004b11 	.word	0x08004b11
 8004e20:	08004be1 	.word	0x08004be1
 8004e24:	08004a91 	.word	0x08004a91
 8004e28:	0800445d 	.word	0x0800445d

08004e2c <netconn_alloc>:
{
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004e30:	2007      	movs	r0, #7
{
 8004e32:	460f      	mov	r7, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004e34:	f003 f83a 	bl	8007eac <memp_malloc>
  if (conn == NULL) {
 8004e38:	4604      	mov	r4, r0
 8004e3a:	b318      	cbz	r0, 8004e84 <netconn_alloc+0x58>
  switch(NETCONNTYPE_GROUP(t)) {
 8004e3c:	f005 02f0 	and.w	r2, r5, #240	; 0xf0
  conn->last_err = ERR_OK;
 8004e40:	2300      	movs	r3, #0
  switch(NETCONNTYPE_GROUP(t)) {
 8004e42:	2a10      	cmp	r2, #16
  conn->type = t;
 8004e44:	7005      	strb	r5, [r0, #0]
  conn->last_err = ERR_OK;
 8004e46:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8004e48:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8004e4a:	d001      	beq.n	8004e50 <netconn_alloc+0x24>
 8004e4c:	2a20      	cmp	r2, #32
 8004e4e:	d11b      	bne.n	8004e88 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004e50:	f104 0610 	add.w	r6, r4, #16
 8004e54:	4630      	mov	r0, r6
 8004e56:	2106      	movs	r1, #6
 8004e58:	f008 fab0 	bl	800d3bc <sys_mbox_new>
 8004e5c:	b9d8      	cbnz	r0, 8004e96 <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004e5e:	4601      	mov	r1, r0
 8004e60:	f104 000c 	add.w	r0, r4, #12
 8004e64:	f008 fb1c 	bl	800d4a0 <sys_sem_new>
 8004e68:	4605      	mov	r5, r0
 8004e6a:	b9d8      	cbnz	r0, 8004ea4 <netconn_alloc+0x78>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004e6c:	f104 0014 	add.w	r0, r4, #20
 8004e70:	f008 fb12 	bl	800d498 <sys_mbox_set_invalid>
  conn->socket       = -1;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 8004e78:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 8004e7a:	62a7      	str	r7, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004e7c:	6265      	str	r5, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004e7e:	6225      	str	r5, [r4, #32]
  conn->flags = 0;
 8004e80:	7725      	strb	r5, [r4, #28]
  conn->socket       = -1;
 8004e82:	61a3      	str	r3, [r4, #24]
}
 8004e84:	4620      	mov	r0, r4
 8004e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <netconn_alloc+0x80>)
 8004e8a:	4909      	ldr	r1, [pc, #36]	; (8004eb0 <netconn_alloc+0x84>)
 8004e8c:	4809      	ldr	r0, [pc, #36]	; (8004eb4 <netconn_alloc+0x88>)
 8004e8e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8004e92:	f009 f8a3 	bl	800dfdc <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8004e96:	4621      	mov	r1, r4
 8004e98:	2007      	movs	r0, #7
  return NULL;
 8004e9a:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8004e9c:	f003 f83a 	bl	8007f14 <memp_free>
}
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f008 fa9b 	bl	800d3e0 <sys_mbox_free>
    goto free_and_return;
 8004eaa:	e7f4      	b.n	8004e96 <netconn_alloc+0x6a>
 8004eac:	0800ead4 	.word	0x0800ead4
 8004eb0:	0800e9d0 	.word	0x0800e9d0
 8004eb4:	0800e670 	.word	0x0800e670

08004eb8 <accept_function>:
{
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d041      	beq.n	8004f44 <accept_function+0x8c>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8004ec0:	f100 0814 	add.w	r8, r0, #20
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4617      	mov	r7, r2
 8004eca:	460d      	mov	r5, r1
 8004ecc:	f008 fade 	bl	800d48c <sys_mbox_valid>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d037      	beq.n	8004f44 <accept_function+0x8c>
  if (newpcb == NULL) {
 8004ed4:	b35d      	cbz	r5, 8004f2e <accept_function+0x76>
  newconn = netconn_alloc(conn->type, conn->callback);
 8004ed6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004ed8:	7820      	ldrb	r0, [r4, #0]
 8004eda:	f7ff ffa7 	bl	8004e2c <netconn_alloc>
  if (newconn == NULL) {
 8004ede:	4606      	mov	r6, r0
 8004ee0:	b3a8      	cbz	r0, 8004f4e <accept_function+0x96>
  newconn->pcb.tcp = newpcb;
 8004ee2:	6045      	str	r5, [r0, #4]
  tcp_arg(pcb, conn);
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f004 f9a2 	bl	8009230 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004eec:	4628      	mov	r0, r5
 8004eee:	4948      	ldr	r1, [pc, #288]	; (8005010 <accept_function+0x158>)
 8004ef0:	f004 f9a2 	bl	8009238 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	4947      	ldr	r1, [pc, #284]	; (8005014 <accept_function+0x15c>)
 8004ef8:	f004 f9ba 	bl	8009270 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004efc:	2202      	movs	r2, #2
 8004efe:	4628      	mov	r0, r5
 8004f00:	4945      	ldr	r1, [pc, #276]	; (8005018 <accept_function+0x160>)
 8004f02:	f004 f9f1 	bl	80092e8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004f06:	4628      	mov	r0, r5
 8004f08:	4944      	ldr	r1, [pc, #272]	; (800501c <accept_function+0x164>)
 8004f0a:	f004 f9cb 	bl	80092a4 <tcp_err>
  newconn->last_err = err;
 8004f0e:	7237      	strb	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8004f10:	4640      	mov	r0, r8
 8004f12:	4631      	mov	r1, r6
 8004f14:	f008 fa7a 	bl	800d40c <sys_mbox_trypost>
 8004f18:	4605      	mov	r5, r0
 8004f1a:	bb48      	cbnz	r0, 8004f70 <accept_function+0xb8>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004f1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f1e:	b11b      	cbz	r3, 8004f28 <accept_function+0x70>
 8004f20:	4620      	mov	r0, r4
 8004f22:	462a      	mov	r2, r5
 8004f24:	4629      	mov	r1, r5
 8004f26:	4798      	blx	r3
}
 8004f28:	4628      	mov	r0, r5
 8004f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8004f2e:	4640      	mov	r0, r8
 8004f30:	493b      	ldr	r1, [pc, #236]	; (8005020 <accept_function+0x168>)
 8004f32:	f008 fa6b 	bl	800d40c <sys_mbox_trypost>
 8004f36:	4602      	mov	r2, r0
 8004f38:	b920      	cbnz	r0, 8004f44 <accept_function+0x8c>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f3c:	b113      	cbz	r3, 8004f44 <accept_function+0x8c>
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4611      	mov	r1, r2
 8004f42:	4798      	blx	r3
    return ERR_VAL;
 8004f44:	f06f 0505 	mvn.w	r5, #5
}
 8004f48:	4628      	mov	r0, r5
 8004f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4933      	ldr	r1, [pc, #204]	; (8005020 <accept_function+0x168>)
 8004f52:	f008 fa5b 	bl	800d40c <sys_mbox_trypost>
 8004f56:	4602      	mov	r2, r0
 8004f58:	b938      	cbnz	r0, 8004f6a <accept_function+0xb2>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004f5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f5c:	b12b      	cbz	r3, 8004f6a <accept_function+0xb2>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4611      	mov	r1, r2
 8004f62:	4798      	blx	r3
    return ERR_MEM;
 8004f64:	f04f 35ff 	mov.w	r5, #4294967295
 8004f68:	e7de      	b.n	8004f28 <accept_function+0x70>
 8004f6a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f6e:	e7db      	b.n	8004f28 <accept_function+0x70>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8004f70:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8004f72:	2100      	movs	r1, #0
 8004f74:	4620      	mov	r0, r4
 8004f76:	f004 f95b 	bl	8009230 <tcp_arg>
    tcp_recv(pcb, NULL);
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	f004 f95b 	bl	8009238 <tcp_recv>
    tcp_sent(pcb, NULL);
 8004f82:	4620      	mov	r0, r4
 8004f84:	2100      	movs	r1, #0
 8004f86:	f004 f973 	bl	8009270 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f004 f9aa 	bl	80092e8 <tcp_poll>
    tcp_err(pcb, NULL);
 8004f94:	4620      	mov	r0, r4
 8004f96:	2100      	movs	r1, #0
 8004f98:	f004 f984 	bl	80092a4 <tcp_err>
    sys_mbox_free(&newconn->recvmbox);
 8004f9c:	f106 0410 	add.w	r4, r6, #16
    newconn->pcb.tcp = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f008 fa1b 	bl	800d3e0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8004faa:	4620      	mov	r0, r4
 8004fac:	f008 fa74 	bl	800d498 <sys_mbox_set_invalid>
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8004fb0:	6873      	ldr	r3, [r6, #4]
 8004fb2:	b133      	cbz	r3, 8004fc2 <accept_function+0x10a>
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <accept_function+0x16c>)
 8004fb6:	491c      	ldr	r1, [pc, #112]	; (8005028 <accept_function+0x170>)
 8004fb8:	481c      	ldr	r0, [pc, #112]	; (800502c <accept_function+0x174>)
 8004fba:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004fbe:	f009 f80d 	bl	800dfdc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f008 fa62 	bl	800d48c <sys_mbox_valid>
 8004fc8:	b9d0      	cbnz	r0, 8005000 <accept_function+0x148>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004fca:	f106 0014 	add.w	r0, r6, #20
 8004fce:	f008 fa5d 	bl	800d48c <sys_mbox_valid>
 8004fd2:	b130      	cbz	r0, 8004fe2 <accept_function+0x12a>
 8004fd4:	4b13      	ldr	r3, [pc, #76]	; (8005024 <accept_function+0x16c>)
 8004fd6:	4916      	ldr	r1, [pc, #88]	; (8005030 <accept_function+0x178>)
 8004fd8:	4814      	ldr	r0, [pc, #80]	; (800502c <accept_function+0x174>)
 8004fda:	f240 22e5 	movw	r2, #741	; 0x2e5
 8004fde:	f008 fffd 	bl	800dfdc <iprintf>
  sys_sem_free(&conn->op_completed);
 8004fe2:	f106 040c 	add.w	r4, r6, #12
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f008 fa96 	bl	800d518 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004fec:	4620      	mov	r0, r4
 8004fee:	f008 fa9d 	bl	800d52c <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	2007      	movs	r0, #7
 8004ff6:	f002 ff8d 	bl	8007f14 <memp_free>
    return ERR_MEM;
 8004ffa:	f04f 35ff 	mov.w	r5, #4294967295
 8004ffe:	e793      	b.n	8004f28 <accept_function+0x70>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <accept_function+0x16c>)
 8005002:	490c      	ldr	r1, [pc, #48]	; (8005034 <accept_function+0x17c>)
 8005004:	4809      	ldr	r0, [pc, #36]	; (800502c <accept_function+0x174>)
 8005006:	f240 22e2 	movw	r2, #738	; 0x2e2
 800500a:	f008 ffe7 	bl	800dfdc <iprintf>
 800500e:	e7dc      	b.n	8004fca <accept_function+0x112>
 8005010:	08004b11 	.word	0x08004b11
 8005014:	08004be1 	.word	0x08004be1
 8005018:	08004a91 	.word	0x08004a91
 800501c:	0800445d 	.word	0x0800445d
 8005020:	2000426c 	.word	0x2000426c
 8005024:	0800ead4 	.word	0x0800ead4
 8005028:	0800e7dc 	.word	0x0800e7dc
 800502c:	0800e670 	.word	0x0800e670
 8005030:	0800ea34 	.word	0x0800ea34
 8005034:	0800e9f8 	.word	0x0800e9f8

08005038 <netconn_free>:
{
 8005038:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800503a:	6843      	ldr	r3, [r0, #4]
{
 800503c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800503e:	b133      	cbz	r3, 800504e <netconn_free+0x16>
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <netconn_free+0x64>)
 8005042:	4917      	ldr	r1, [pc, #92]	; (80050a0 <netconn_free+0x68>)
 8005044:	4817      	ldr	r0, [pc, #92]	; (80050a4 <netconn_free+0x6c>)
 8005046:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800504a:	f008 ffc7 	bl	800dfdc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800504e:	f104 0010 	add.w	r0, r4, #16
 8005052:	f008 fa1b 	bl	800d48c <sys_mbox_valid>
 8005056:	b9c8      	cbnz	r0, 800508c <netconn_free+0x54>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005058:	f104 0014 	add.w	r0, r4, #20
 800505c:	f008 fa16 	bl	800d48c <sys_mbox_valid>
 8005060:	b130      	cbz	r0, 8005070 <netconn_free+0x38>
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <netconn_free+0x64>)
 8005064:	4910      	ldr	r1, [pc, #64]	; (80050a8 <netconn_free+0x70>)
 8005066:	480f      	ldr	r0, [pc, #60]	; (80050a4 <netconn_free+0x6c>)
 8005068:	f240 22e5 	movw	r2, #741	; 0x2e5
 800506c:	f008 ffb6 	bl	800dfdc <iprintf>
  sys_sem_free(&conn->op_completed);
 8005070:	f104 050c 	add.w	r5, r4, #12
 8005074:	4628      	mov	r0, r5
 8005076:	f008 fa4f 	bl	800d518 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800507a:	4628      	mov	r0, r5
 800507c:	f008 fa56 	bl	800d52c <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005080:	4621      	mov	r1, r4
 8005082:	2007      	movs	r0, #7
}
 8005084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8005088:	f002 bf44 	b.w	8007f14 <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <netconn_free+0x64>)
 800508e:	4907      	ldr	r1, [pc, #28]	; (80050ac <netconn_free+0x74>)
 8005090:	4804      	ldr	r0, [pc, #16]	; (80050a4 <netconn_free+0x6c>)
 8005092:	f240 22e2 	movw	r2, #738	; 0x2e2
 8005096:	f008 ffa1 	bl	800dfdc <iprintf>
 800509a:	e7dd      	b.n	8005058 <netconn_free+0x20>
 800509c:	0800ead4 	.word	0x0800ead4
 80050a0:	0800e7dc 	.word	0x0800e7dc
 80050a4:	0800e670 	.word	0x0800e670
 80050a8:	0800ea34 	.word	0x0800ea34
 80050ac:	0800e9f8 	.word	0x0800e9f8

080050b0 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 80050b0:	6803      	ldr	r3, [r0, #0]
{
 80050b2:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 80050b4:	785d      	ldrb	r5, [r3, #1]
{
 80050b6:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80050b8:	b35d      	cbz	r5, 8005112 <lwip_netconn_do_delconn+0x62>
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80050c0:	2a10      	cmp	r2, #16
 80050c2:	d007      	beq.n	80050d4 <lwip_netconn_do_delconn+0x24>
 80050c4:	4b48      	ldr	r3, [pc, #288]	; (80051e8 <lwip_netconn_do_delconn+0x138>)
 80050c6:	4949      	ldr	r1, [pc, #292]	; (80051ec <lwip_netconn_do_delconn+0x13c>)
 80050c8:	4849      	ldr	r0, [pc, #292]	; (80051f0 <lwip_netconn_do_delconn+0x140>)
 80050ca:	f240 4201 	movw	r2, #1025	; 0x401
 80050ce:	f008 ff85 	bl	800dfdc <iprintf>
 80050d2:	6823      	ldr	r3, [r4, #0]
  if (((state != NETCONN_NONE) &&
 80050d4:	2d02      	cmp	r5, #2
 80050d6:	d01c      	beq.n	8005112 <lwip_netconn_do_delconn+0x62>
       (state != NETCONN_LISTEN) &&
 80050d8:	2d03      	cmp	r5, #3
 80050da:	d017      	beq.n	800510c <lwip_netconn_do_delconn+0x5c>
    msg->err = ERR_INPROGRESS;
 80050dc:	22fb      	movs	r2, #251	; 0xfb
 80050de:	7122      	strb	r2, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80050e0:	f103 000c 	add.w	r0, r3, #12
 80050e4:	f008 fa1c 	bl	800d520 <sys_sem_valid>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d039      	beq.n	8005160 <lwip_netconn_do_delconn+0xb0>
    TCPIP_APIMSG_ACK(msg);
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d036      	beq.n	8005160 <lwip_netconn_do_delconn+0xb0>
 80050f2:	f008 fa57 	bl	800d5a4 <sys_arch_protect>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80050fc:	320c      	adds	r2, #12
 80050fe:	bfa4      	itt	ge
 8005100:	7922      	ldrbge	r2, [r4, #4]
 8005102:	721a      	strbge	r2, [r3, #8]
}
 8005104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TCPIP_APIMSG_ACK(msg);
 8005108:	f008 ba58 	b.w	800d5bc <sys_arch_unprotect>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800510c:	7f1a      	ldrb	r2, [r3, #28]
 800510e:	0752      	lsls	r2, r2, #29
 8005110:	d5e4      	bpl.n	80050dc <lwip_netconn_do_delconn+0x2c>
    msg->err = ERR_OK;
 8005112:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8005114:	4618      	mov	r0, r3
    msg->err = ERR_OK;
 8005116:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8005118:	f7ff fd9c 	bl	8004c54 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	6858      	ldr	r0, [r3, #4]
 8005120:	b140      	cbz	r0, 8005134 <lwip_netconn_do_delconn+0x84>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005128:	2a10      	cmp	r2, #16
 800512a:	d01f      	beq.n	800516c <lwip_netconn_do_delconn+0xbc>
 800512c:	2a20      	cmp	r2, #32
 800512e:	d018      	beq.n	8005162 <lwip_netconn_do_delconn+0xb2>
      msg->conn->pcb.tcp = NULL;
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8005134:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005136:	2d00      	cmp	r5, #0
 8005138:	d0d2      	beq.n	80050e0 <lwip_netconn_do_delconn+0x30>
 800513a:	2200      	movs	r2, #0
 800513c:	4618      	mov	r0, r3
 800513e:	4611      	mov	r1, r2
 8005140:	47a8      	blx	r5
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005146:	2d00      	cmp	r5, #0
 8005148:	d0ca      	beq.n	80050e0 <lwip_netconn_do_delconn+0x30>
 800514a:	4618      	mov	r0, r3
 800514c:	2200      	movs	r2, #0
 800514e:	2102      	movs	r1, #2
 8005150:	47a8      	blx	r5
 8005152:	6823      	ldr	r3, [r4, #0]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005154:	f103 000c 	add.w	r0, r3, #12
 8005158:	f008 f9e2 	bl	800d520 <sys_sem_valid>
 800515c:	2800      	cmp	r0, #0
 800515e:	d1c5      	bne.n	80050ec <lwip_netconn_do_delconn+0x3c>
 8005160:	bd70      	pop	{r4, r5, r6, pc}
        msg->conn->pcb.udp->recv_arg = NULL;
 8005162:	61c5      	str	r5, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
 8005164:	f008 f85a 	bl	800d21c <udp_remove>
 8005168:	6823      	ldr	r3, [r4, #0]
        break;
 800516a:	e7e1      	b.n	8005130 <lwip_netconn_do_delconn+0x80>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800516c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516e:	2a00      	cmp	r2, #0
 8005170:	d035      	beq.n	80051de <lwip_netconn_do_delconn+0x12e>
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <lwip_netconn_do_delconn+0x138>)
 8005174:	491f      	ldr	r1, [pc, #124]	; (80051f4 <lwip_netconn_do_delconn+0x144>)
 8005176:	481e      	ldr	r0, [pc, #120]	; (80051f0 <lwip_netconn_do_delconn+0x140>)
 8005178:	f240 4235 	movw	r2, #1077	; 0x435
 800517c:	f008 ff2e 	bl	800dfdc <iprintf>
 8005180:	6823      	ldr	r3, [r4, #0]
        msg->conn->state = NETCONN_CLOSE;
 8005182:	2104      	movs	r1, #4
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8005184:	2203      	movs	r2, #3
        msg->conn->state = NETCONN_CLOSE;
 8005186:	7059      	strb	r1, [r3, #1]
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005188:	4618      	mov	r0, r3
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800518a:	7222      	strb	r2, [r4, #8]
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800518c:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800518e:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005190:	f7ff fb36 	bl	8004800 <lwip_netconn_do_close_internal>
 8005194:	2800      	cmp	r0, #0
 8005196:	d0e3      	beq.n	8005160 <lwip_netconn_do_delconn+0xb0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d006      	beq.n	80051ae <lwip_netconn_do_delconn+0xfe>
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <lwip_netconn_do_delconn+0x138>)
 80051a2:	4915      	ldr	r1, [pc, #84]	; (80051f8 <lwip_netconn_do_delconn+0x148>)
 80051a4:	4812      	ldr	r0, [pc, #72]	; (80051f0 <lwip_netconn_do_delconn+0x140>)
 80051a6:	f240 423b 	movw	r2, #1083	; 0x43b
 80051aa:	f008 ff17 	bl	800dfdc <iprintf>
          UNLOCK_TCPIP_CORE();
 80051ae:	4813      	ldr	r0, [pc, #76]	; (80051fc <lwip_netconn_do_delconn+0x14c>)
 80051b0:	f008 f9e4 	bl	800d57c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	2100      	movs	r1, #0
 80051b8:	300c      	adds	r0, #12
 80051ba:	f008 f98d 	bl	800d4d8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80051be:	480f      	ldr	r0, [pc, #60]	; (80051fc <lwip_netconn_do_delconn+0x14c>)
 80051c0:	f008 f9d6 	bl	800d570 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0c9      	beq.n	8005160 <lwip_netconn_do_delconn+0xb0>
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <lwip_netconn_do_delconn+0x138>)
 80051ce:	490a      	ldr	r1, [pc, #40]	; (80051f8 <lwip_netconn_do_delconn+0x148>)
 80051d0:	4807      	ldr	r0, [pc, #28]	; (80051f0 <lwip_netconn_do_delconn+0x140>)
 80051d2:	f240 423f 	movw	r2, #1087	; 0x43f
}
 80051d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80051da:	f008 beff 	b.w	800dfdc <iprintf>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d0ce      	beq.n	8005182 <lwip_netconn_do_delconn+0xd2>
 80051e4:	e7c5      	b.n	8005172 <lwip_netconn_do_delconn+0xc2>
 80051e6:	bf00      	nop
 80051e8:	0800ead4 	.word	0x0800ead4
 80051ec:	0800e8ec 	.word	0x0800e8ec
 80051f0:	0800e670 	.word	0x0800e670
 80051f4:	0800e900 	.word	0x0800e900
 80051f8:	0800e91c 	.word	0x0800e91c
 80051fc:	20004270 	.word	0x20004270

08005200 <lwip_netconn_do_bind>:
{
 8005200:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005202:	6803      	ldr	r3, [r0, #0]
 8005204:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005208:	f112 0f0c 	cmn.w	r2, #12
{
 800520c:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800520e:	da0d      	bge.n	800522c <lwip_netconn_do_bind+0x2c>
    msg->err = msg->conn->last_err;
 8005210:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8005212:	f008 f9c7 	bl	800d5a4 <sys_arch_protect>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800521c:	320c      	adds	r2, #12
 800521e:	bfa4      	itt	ge
 8005220:	7922      	ldrbge	r2, [r4, #4]
 8005222:	721a      	strbge	r2, [r3, #8]
}
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8005228:	f008 b9c8 	b.w	800d5bc <sys_arch_unprotect>
    msg->err = ERR_VAL;
 800522c:	22fa      	movs	r2, #250	; 0xfa
 800522e:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8005230:	6858      	ldr	r0, [r3, #4]
 8005232:	2800      	cmp	r0, #0
 8005234:	d0ed      	beq.n	8005212 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523c:	2b10      	cmp	r3, #16
 800523e:	d00a      	beq.n	8005256 <lwip_netconn_do_bind+0x56>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d1e6      	bne.n	8005212 <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005244:	89a2      	ldrh	r2, [r4, #12]
 8005246:	68a1      	ldr	r1, [r4, #8]
 8005248:	f007 ff78 	bl	800d13c <udp_bind>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1de      	bne.n	8005212 <lwip_netconn_do_bind+0x12>
 8005254:	bd10      	pop	{r4, pc}
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005256:	89a2      	ldrh	r2, [r4, #12]
 8005258:	68a1      	ldr	r1, [r4, #8]
 800525a:	f003 fbf7 	bl	8008a4c <tcp_bind>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	7120      	strb	r0, [r4, #4]
        break;
 8005262:	e7f5      	b.n	8005250 <lwip_netconn_do_bind+0x50>

08005264 <lwip_netconn_do_listen>:
{
 8005264:	b530      	push	{r4, r5, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005266:	6803      	ldr	r3, [r0, #0]
 8005268:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800526c:	f112 0f0c 	cmn.w	r2, #12
{
 8005270:	b083      	sub	sp, #12
 8005272:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005274:	da0d      	bge.n	8005292 <lwip_netconn_do_listen+0x2e>
    msg->err = msg->conn->last_err;
 8005276:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8005278:	f008 f994 	bl	800d5a4 <sys_arch_protect>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005282:	320c      	adds	r2, #12
 8005284:	bfa4      	itt	ge
 8005286:	7922      	ldrbge	r2, [r4, #4]
 8005288:	721a      	strbge	r2, [r3, #8]
 800528a:	f008 f997 	bl	800d5bc <sys_arch_unprotect>
}
 800528e:	b003      	add	sp, #12
 8005290:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8005292:	22f5      	movs	r2, #245	; 0xf5
 8005294:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8005296:	6858      	ldr	r0, [r3, #4]
 8005298:	2800      	cmp	r0, #0
 800529a:	d0ed      	beq.n	8005278 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800529c:	781a      	ldrb	r2, [r3, #0]
 800529e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80052a2:	2a10      	cmp	r2, #16
 80052a4:	d002      	beq.n	80052ac <lwip_netconn_do_listen+0x48>
        msg->err = ERR_ARG;
 80052a6:	23f0      	movs	r3, #240	; 0xf0
 80052a8:	7123      	strb	r3, [r4, #4]
 80052aa:	e7e5      	b.n	8005278 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	b923      	cbnz	r3, 80052ba <lwip_netconn_do_listen+0x56>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 80052b0:	7d03      	ldrb	r3, [r0, #20]
 80052b2:	b13b      	cbz	r3, 80052c4 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 80052b4:	23fa      	movs	r3, #250	; 0xfa
 80052b6:	7123      	strb	r3, [r4, #4]
 80052b8:	e7de      	b.n	8005278 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d1dc      	bne.n	8005278 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	7123      	strb	r3, [r4, #4]
 80052c2:	e7d9      	b.n	8005278 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80052c4:	f10d 0207 	add.w	r2, sp, #7
 80052c8:	21ff      	movs	r1, #255	; 0xff
 80052ca:	f003 fc35 	bl	8008b38 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 80052ce:	4605      	mov	r5, r0
 80052d0:	b340      	cbz	r0, 8005324 <lwip_netconn_do_listen+0xc0>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	3010      	adds	r0, #16
 80052d6:	f008 f8d9 	bl	800d48c <sys_mbox_valid>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d130      	bne.n	8005340 <lwip_netconn_do_listen+0xdc>
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80052de:	6820      	ldr	r0, [r4, #0]
              msg->err = ERR_OK;
 80052e0:	2300      	movs	r3, #0
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80052e2:	3014      	adds	r0, #20
              msg->err = ERR_OK;
 80052e4:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80052e6:	f008 f8d1 	bl	800d48c <sys_mbox_valid>
 80052ea:	b310      	cbz	r0, 8005332 <lwip_netconn_do_listen+0xce>
 80052ec:	f994 0004 	ldrsb.w	r0, [r4, #4]
              if (msg->err == ERR_OK) {
 80052f0:	b978      	cbnz	r0, 8005312 <lwip_netconn_do_listen+0xae>
                msg->conn->state = NETCONN_LISTEN;
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	2302      	movs	r3, #2
 80052f6:	704b      	strb	r3, [r1, #1]
                msg->conn->pcb.tcp = lpcb;
 80052f8:	604d      	str	r5, [r1, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80052fa:	4628      	mov	r0, r5
 80052fc:	f003 ff98 	bl	8009230 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	4914      	ldr	r1, [pc, #80]	; (8005354 <lwip_netconn_do_listen+0xf0>)
 8005304:	6858      	ldr	r0, [r3, #4]
 8005306:	f003 ffe9 	bl	80092dc <tcp_accept>
 800530a:	6823      	ldr	r3, [r4, #0]
  TCPIP_APIMSG_ACK(msg);
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0be      	beq.n	800528e <lwip_netconn_do_listen+0x2a>
 8005310:	e7b2      	b.n	8005278 <lwip_netconn_do_listen+0x14>
                tcp_close(lpcb);
 8005312:	4628      	mov	r0, r5
 8005314:	f004 fcd4 	bl	8009cc0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0b5      	beq.n	800528e <lwip_netconn_do_listen+0x2a>
 8005322:	e7a9      	b.n	8005278 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8005324:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005328:	7123      	strb	r3, [r4, #4]
 800532a:	6823      	ldr	r3, [r4, #0]
  TCPIP_APIMSG_ACK(msg);
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ae      	beq.n	800528e <lwip_netconn_do_listen+0x2a>
 8005330:	e7a2      	b.n	8005278 <lwip_netconn_do_listen+0x14>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	2106      	movs	r1, #6
 8005336:	3014      	adds	r0, #20
 8005338:	f008 f840 	bl	800d3bc <sys_mbox_new>
 800533c:	7120      	strb	r0, [r4, #4]
 800533e:	e7d7      	b.n	80052f0 <lwip_netconn_do_listen+0x8c>
                sys_mbox_free(&msg->conn->recvmbox);
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	3010      	adds	r0, #16
 8005344:	f008 f84c 	bl	800d3e0 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	3010      	adds	r0, #16
 800534c:	f008 f8a4 	bl	800d498 <sys_mbox_set_invalid>
 8005350:	e7c5      	b.n	80052de <lwip_netconn_do_listen+0x7a>
 8005352:	bf00      	nop
 8005354:	08004eb9 	.word	0x08004eb9

08005358 <lwip_netconn_do_recv>:
{
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800535a:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 800535c:	6803      	ldr	r3, [r0, #0]
  msg->err = ERR_OK;
 800535e:	7102      	strb	r2, [r0, #4]
{
 8005360:	4606      	mov	r6, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005362:	6858      	ldr	r0, [r3, #4]
 8005364:	b120      	cbz	r0, 8005370 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536c:	2b10      	cmp	r3, #16
 800536e:	d00c      	beq.n	800538a <lwip_netconn_do_recv+0x32>
  TCPIP_APIMSG_ACK(msg);
 8005370:	f008 f918 	bl	800d5a4 <sys_arch_protect>
 8005374:	6833      	ldr	r3, [r6, #0]
 8005376:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800537a:	320c      	adds	r2, #12
 800537c:	bfa4      	itt	ge
 800537e:	7932      	ldrbge	r2, [r6, #4]
 8005380:	721a      	strbge	r2, [r3, #8]
}
 8005382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TCPIP_APIMSG_ACK(msg);
 8005386:	f008 b919 	b.w	800d5bc <sys_arch_unprotect>
      u32_t remaining = msg->msg.r.len;
 800538a:	68b4      	ldr	r4, [r6, #8]
 800538c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005390:	e000      	b.n	8005394 <lwip_netconn_do_recv+0x3c>
 8005392:	6858      	ldr	r0, [r3, #4]
 8005394:	42bc      	cmp	r4, r7
 8005396:	4625      	mov	r5, r4
 8005398:	bf28      	it	cs
 800539a:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800539c:	b2a9      	uxth	r1, r5
 800539e:	f003 fc57 	bl	8008c50 <tcp_recved>
      } while (remaining != 0);
 80053a2:	1b64      	subs	r4, r4, r5
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	d1f4      	bne.n	8005392 <lwip_netconn_do_recv+0x3a>
  TCPIP_APIMSG_ACK(msg);
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e1      	bne.n	8005370 <lwip_netconn_do_recv+0x18>
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ae:	bf00      	nop

080053b0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80053b0:	b510      	push	{r4, lr}
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80053b2:	6803      	ldr	r3, [r0, #0]
 80053b4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80053b8:	f112 0f0c 	cmn.w	r2, #12
{
 80053bc:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80053be:	da0d      	bge.n	80053dc <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 80053c0:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80053c2:	f008 f8ef 	bl	800d5a4 <sys_arch_protect>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80053cc:	320c      	adds	r2, #12
 80053ce:	bfa4      	itt	ge
 80053d0:	7922      	ldrbge	r2, [r4, #4]
 80053d2:	721a      	strbge	r2, [r3, #8]
}
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80053d8:	f008 b8f0 	b.w	800d5bc <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80053e2:	2a10      	cmp	r2, #16
 80053e4:	d002      	beq.n	80053ec <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 80053e6:	23fa      	movs	r3, #250	; 0xfa
 80053e8:	7103      	strb	r3, [r0, #4]
 80053ea:	e7ea      	b.n	80053c2 <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 80053ec:	785a      	ldrb	r2, [r3, #1]
 80053ee:	b112      	cbz	r2, 80053f6 <lwip_netconn_do_write+0x46>
        msg->err = ERR_INPROGRESS;
 80053f0:	23fb      	movs	r3, #251	; 0xfb
 80053f2:	7103      	strb	r3, [r0, #4]
 80053f4:	e7e5      	b.n	80053c2 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d045      	beq.n	8005488 <lwip_netconn_do_write+0xd8>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80053fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        msg->conn->state = NETCONN_WRITE;
 80053fe:	2101      	movs	r1, #1
 8005400:	7059      	strb	r1, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005402:	2a00      	cmp	r2, #0
 8005404:	d034      	beq.n	8005470 <lwip_netconn_do_write+0xc0>
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <lwip_netconn_do_write+0xe0>)
 8005408:	4922      	ldr	r1, [pc, #136]	; (8005494 <lwip_netconn_do_write+0xe4>)
 800540a:	4823      	ldr	r0, [pc, #140]	; (8005498 <lwip_netconn_do_write+0xe8>)
 800540c:	f240 6283 	movw	r2, #1667	; 0x683
 8005410:	f008 fde4 	bl	800dfdc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005414:	68e3      	ldr	r3, [r4, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02e      	beq.n	8005478 <lwip_netconn_do_write+0xc8>
        msg->conn->current_msg = msg;
 800541a:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset = 0;
 800541c:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800541e:	6244      	str	r4, [r0, #36]	; 0x24
        msg->conn->write_offset = 0;
 8005420:	6201      	str	r1, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005422:	f7ff f8c1 	bl	80045a8 <lwip_netconn_do_writemore>
 8005426:	b310      	cbz	r0, 800546e <lwip_netconn_do_write+0xbe>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d006      	beq.n	800543e <lwip_netconn_do_write+0x8e>
 8005430:	4b17      	ldr	r3, [pc, #92]	; (8005490 <lwip_netconn_do_write+0xe0>)
 8005432:	491a      	ldr	r1, [pc, #104]	; (800549c <lwip_netconn_do_write+0xec>)
 8005434:	4818      	ldr	r0, [pc, #96]	; (8005498 <lwip_netconn_do_write+0xe8>)
 8005436:	f240 6289 	movw	r2, #1673	; 0x689
 800543a:	f008 fdcf 	bl	800dfdc <iprintf>
          UNLOCK_TCPIP_CORE();
 800543e:	4818      	ldr	r0, [pc, #96]	; (80054a0 <lwip_netconn_do_write+0xf0>)
 8005440:	f008 f89c 	bl	800d57c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	2100      	movs	r1, #0
 8005448:	300c      	adds	r0, #12
 800544a:	f008 f845 	bl	800d4d8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800544e:	4814      	ldr	r0, [pc, #80]	; (80054a0 <lwip_netconn_do_write+0xf0>)
 8005450:	f008 f88e 	bl	800d570 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d108      	bne.n	800546e <lwip_netconn_do_write+0xbe>
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <lwip_netconn_do_write+0xe0>)
 800545e:	490f      	ldr	r1, [pc, #60]	; (800549c <lwip_netconn_do_write+0xec>)
 8005460:	480d      	ldr	r0, [pc, #52]	; (8005498 <lwip_netconn_do_write+0xe8>)
 8005462:	f240 628d 	movw	r2, #1677	; 0x68d
}
 8005466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800546a:	f008 bdb7 	b.w	800dfdc <iprintf>
 800546e:	bd10      	pop	{r4, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ce      	beq.n	8005414 <lwip_netconn_do_write+0x64>
 8005476:	e7c6      	b.n	8005406 <lwip_netconn_do_write+0x56>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <lwip_netconn_do_write+0xe0>)
 800547a:	490a      	ldr	r1, [pc, #40]	; (80054a4 <lwip_netconn_do_write+0xf4>)
 800547c:	4806      	ldr	r0, [pc, #24]	; (8005498 <lwip_netconn_do_write+0xe8>)
 800547e:	f240 6284 	movw	r2, #1668	; 0x684
 8005482:	f008 fdab 	bl	800dfdc <iprintf>
 8005486:	e7c8      	b.n	800541a <lwip_netconn_do_write+0x6a>
        msg->err = ERR_CONN;
 8005488:	23f5      	movs	r3, #245	; 0xf5
 800548a:	7103      	strb	r3, [r0, #4]
 800548c:	e799      	b.n	80053c2 <lwip_netconn_do_write+0x12>
 800548e:	bf00      	nop
 8005490:	0800ead4 	.word	0x0800ead4
 8005494:	0800e900 	.word	0x0800e900
 8005498:	0800e670 	.word	0x0800e670
 800549c:	0800e91c 	.word	0x0800e91c
 80054a0:	20004270 	.word	0x20004270
 80054a4:	0800e924 	.word	0x0800e924

080054a8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80054ac:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80054ae:	6843      	ldr	r3, [r0, #4]
 80054b0:	b123      	cbz	r3, 80054bc <lwip_netconn_do_close+0x14>
 80054b2:	7803      	ldrb	r3, [r0, #0]
 80054b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d00e      	beq.n	80054da <lwip_netconn_do_close+0x32>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80054bc:	23f5      	movs	r3, #245	; 0xf5
 80054be:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 80054c0:	f008 f870 	bl	800d5a4 <sys_arch_protect>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80054ca:	320c      	adds	r2, #12
 80054cc:	bfa4      	itt	ge
 80054ce:	7922      	ldrbge	r2, [r4, #4]
 80054d0:	721a      	strbge	r2, [r3, #8]
}
 80054d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 80054d6:	f008 b871 	b.w	800d5bc <sys_arch_unprotect>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80054da:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80054dc:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80054de:	2a03      	cmp	r2, #3
 80054e0:	d001      	beq.n	80054e6 <lwip_netconn_do_close+0x3e>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d0ea      	beq.n	80054bc <lwip_netconn_do_close+0x14>
    if (state == NETCONN_CONNECT) {
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d0e8      	beq.n	80054bc <lwip_netconn_do_close+0x14>
    } else if (state == NETCONN_WRITE) {
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d036      	beq.n	800555c <lwip_netconn_do_close+0xb4>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80054ee:	07d3      	lsls	r3, r2, #31
 80054f0:	d43b      	bmi.n	800556a <lwip_netconn_do_close+0xc2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80054f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d034      	beq.n	8005562 <lwip_netconn_do_close+0xba>
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <lwip_netconn_do_close+0xcc>)
 80054fa:	491f      	ldr	r1, [pc, #124]	; (8005578 <lwip_netconn_do_close+0xd0>)
 80054fc:	481f      	ldr	r0, [pc, #124]	; (800557c <lwip_netconn_do_close+0xd4>)
 80054fe:	f240 721c 	movw	r2, #1820	; 0x71c
 8005502:	f008 fd6b 	bl	800dfdc <iprintf>
 8005506:	6820      	ldr	r0, [r4, #0]
      msg->conn->current_msg = msg;
 8005508:	6244      	str	r4, [r0, #36]	; 0x24
      msg->conn->state = NETCONN_CLOSE;
 800550a:	2304      	movs	r3, #4
 800550c:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800550e:	2100      	movs	r1, #0
 8005510:	f7ff f976 	bl	8004800 <lwip_netconn_do_close_internal>
 8005514:	b1c0      	cbz	r0, 8005548 <lwip_netconn_do_close+0xa0>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d006      	beq.n	800552c <lwip_netconn_do_close+0x84>
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <lwip_netconn_do_close+0xcc>)
 8005520:	4917      	ldr	r1, [pc, #92]	; (8005580 <lwip_netconn_do_close+0xd8>)
 8005522:	4816      	ldr	r0, [pc, #88]	; (800557c <lwip_netconn_do_close+0xd4>)
 8005524:	f240 7221 	movw	r2, #1825	; 0x721
 8005528:	f008 fd58 	bl	800dfdc <iprintf>
        UNLOCK_TCPIP_CORE();
 800552c:	4815      	ldr	r0, [pc, #84]	; (8005584 <lwip_netconn_do_close+0xdc>)
 800552e:	f008 f825 	bl	800d57c <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	2100      	movs	r1, #0
 8005536:	300c      	adds	r0, #12
 8005538:	f007 ffce 	bl	800d4d8 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800553c:	4811      	ldr	r0, [pc, #68]	; (8005584 <lwip_netconn_do_close+0xdc>)
 800553e:	f008 f817 	bl	800d570 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	b903      	cbnz	r3, 800554a <lwip_netconn_do_close+0xa2>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <lwip_netconn_do_close+0xcc>)
 800554c:	490c      	ldr	r1, [pc, #48]	; (8005580 <lwip_netconn_do_close+0xd8>)
 800554e:	480b      	ldr	r0, [pc, #44]	; (800557c <lwip_netconn_do_close+0xd4>)
 8005550:	f240 7225 	movw	r2, #1829	; 0x725
}
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005558:	f008 bd40 	b.w	800dfdc <iprintf>
      msg->err = ERR_INPROGRESS;
 800555c:	23fb      	movs	r3, #251	; 0xfb
 800555e:	7123      	strb	r3, [r4, #4]
 8005560:	e7ae      	b.n	80054c0 <lwip_netconn_do_close+0x18>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005562:	6a03      	ldr	r3, [r0, #32]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0cf      	beq.n	8005508 <lwip_netconn_do_close+0x60>
 8005568:	e7c6      	b.n	80054f8 <lwip_netconn_do_close+0x50>
        netconn_drain(msg->conn);
 800556a:	f7ff fb73 	bl	8004c54 <netconn_drain>
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	e7bf      	b.n	80054f2 <lwip_netconn_do_close+0x4a>
 8005572:	bf00      	nop
 8005574:	0800ead4 	.word	0x0800ead4
 8005578:	0800e900 	.word	0x0800e900
 800557c:	0800e670 	.word	0x0800e670
 8005580:	0800e91c 	.word	0x0800e91c
 8005584:	20004270 	.word	0x20004270

08005588 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8005588:	b170      	cbz	r0, 80055a8 <netbuf_delete+0x20>
{
 800558a:	b510      	push	{r4, lr}
 800558c:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	b120      	cbz	r0, 800559c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8005592:	f002 fe9f 	bl	80082d4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800559c:	4621      	mov	r1, r4
 800559e:	2006      	movs	r0, #6
  }
}
 80055a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 80055a4:	f002 bcb6 	b.w	8007f14 <memp_free>
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop

080055ac <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80055ac:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80055ae:	b1f8      	cbz	r0, 80055f0 <netbuf_data+0x44>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80055b0:	b1a9      	cbz	r1, 80055de <netbuf_data+0x32>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80055b2:	b15a      	cbz	r2, 80055cc <netbuf_data+0x20>

  if (buf->ptr == NULL) {
 80055b4:	6843      	ldr	r3, [r0, #4]
 80055b6:	b133      	cbz	r3, 80055c6 <netbuf_data+0x1a>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80055bc:	6843      	ldr	r3, [r0, #4]
 80055be:	895b      	ldrh	r3, [r3, #10]
 80055c0:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80055c2:	2000      	movs	r0, #0
 80055c4:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 80055c6:	f06f 0001 	mvn.w	r0, #1
}
 80055ca:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <netbuf_data+0x58>)
 80055ce:	490e      	ldr	r1, [pc, #56]	; (8005608 <netbuf_data+0x5c>)
 80055d0:	480e      	ldr	r0, [pc, #56]	; (800560c <netbuf_data+0x60>)
 80055d2:	22c4      	movs	r2, #196	; 0xc4
 80055d4:	f008 fd02 	bl	800dfdc <iprintf>
 80055d8:	f06f 000f 	mvn.w	r0, #15
 80055dc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <netbuf_data+0x58>)
 80055e0:	490b      	ldr	r1, [pc, #44]	; (8005610 <netbuf_data+0x64>)
 80055e2:	480a      	ldr	r0, [pc, #40]	; (800560c <netbuf_data+0x60>)
 80055e4:	22c3      	movs	r2, #195	; 0xc3
 80055e6:	f008 fcf9 	bl	800dfdc <iprintf>
 80055ea:	f06f 000f 	mvn.w	r0, #15
 80055ee:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <netbuf_data+0x58>)
 80055f2:	4908      	ldr	r1, [pc, #32]	; (8005614 <netbuf_data+0x68>)
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <netbuf_data+0x60>)
 80055f6:	22c2      	movs	r2, #194	; 0xc2
 80055f8:	f008 fcf0 	bl	800dfdc <iprintf>
 80055fc:	f06f 000f 	mvn.w	r0, #15
 8005600:	bd08      	pop	{r3, pc}
 8005602:	bf00      	nop
 8005604:	0800eb6c 	.word	0x0800eb6c
 8005608:	0800ec1c 	.word	0x0800ec1c
 800560c:	0800e670 	.word	0x0800e670
 8005610:	0800ebfc 	.word	0x0800ebfc
 8005614:	0800ebe0 	.word	0x0800ebe0

08005618 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8005618:	b580      	push	{r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <tcpip_thread+0x8c>)
 800561c:	681b      	ldr	r3, [r3, #0]
{
 800561e:	b082      	sub	sp, #8
  if (tcpip_init_done != NULL) {
 8005620:	b113      	cbz	r3, 8005628 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <tcpip_thread+0x90>)
 8005624:	6810      	ldr	r0, [r2, #0]
 8005626:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8005628:	4820      	ldr	r0, [pc, #128]	; (80056ac <tcpip_thread+0x94>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800562a:	4f21      	ldr	r7, [pc, #132]	; (80056b0 <tcpip_thread+0x98>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800562c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80056bc <tcpip_thread+0xa4>
    UNLOCK_TCPIP_CORE();
 8005630:	4606      	mov	r6, r0
  LOCK_TCPIP_CORE();
 8005632:	f007 ff9d 	bl	800d570 <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8005636:	4630      	mov	r0, r6
 8005638:	f007 ffa0 	bl	800d57c <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800563c:	a901      	add	r1, sp, #4
 800563e:	4638      	mov	r0, r7
 8005640:	f007 fc40 	bl	800cec4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005644:	4630      	mov	r0, r6
 8005646:	f007 ff93 	bl	800d570 <sys_mutex_lock>
    if (msg == NULL) {
 800564a:	9c01      	ldr	r4, [sp, #4]
 800564c:	b314      	cbz	r4, 8005694 <tcpip_thread+0x7c>
    switch (msg->type) {
 800564e:	7825      	ldrb	r5, [r4, #0]
 8005650:	2d03      	cmp	r5, #3
 8005652:	d00b      	beq.n	800566c <tcpip_thread+0x54>
 8005654:	2d04      	cmp	r5, #4
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005656:	4643      	mov	r3, r8
 8005658:	f04f 029b 	mov.w	r2, #155	; 0x9b
 800565c:	4915      	ldr	r1, [pc, #84]	; (80056b4 <tcpip_thread+0x9c>)
 800565e:	4816      	ldr	r0, [pc, #88]	; (80056b8 <tcpip_thread+0xa0>)
    switch (msg->type) {
 8005660:	d014      	beq.n	800568c <tcpip_thread+0x74>
 8005662:	2d02      	cmp	r5, #2
 8005664:	d00a      	beq.n	800567c <tcpip_thread+0x64>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005666:	f008 fcb9 	bl	800dfdc <iprintf>
      break;
 800566a:	e7e4      	b.n	8005636 <tcpip_thread+0x1e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800566c:	68a0      	ldr	r0, [r4, #8]
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005672:	9901      	ldr	r1, [sp, #4]
 8005674:	2008      	movs	r0, #8
 8005676:	f002 fc4d 	bl	8007f14 <memp_free>
      break;
 800567a:	e7dc      	b.n	8005636 <tcpip_thread+0x1e>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800567c:	1d20      	adds	r0, r4, #4
 800567e:	c80b      	ldmia	r0, {r0, r1, r3}
 8005680:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005682:	9901      	ldr	r1, [sp, #4]
 8005684:	2009      	movs	r0, #9
 8005686:	f002 fc45 	bl	8007f14 <memp_free>
      break;
 800568a:	e7d4      	b.n	8005636 <tcpip_thread+0x1e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	68a0      	ldr	r0, [r4, #8]
 8005690:	4798      	blx	r3
      break;
 8005692:	e7d0      	b.n	8005636 <tcpip_thread+0x1e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005694:	4643      	mov	r3, r8
 8005696:	2269      	movs	r2, #105	; 0x69
 8005698:	4906      	ldr	r1, [pc, #24]	; (80056b4 <tcpip_thread+0x9c>)
 800569a:	4807      	ldr	r0, [pc, #28]	; (80056b8 <tcpip_thread+0xa0>)
 800569c:	f008 fc9e 	bl	800dfdc <iprintf>
      continue;
 80056a0:	e7c9      	b.n	8005636 <tcpip_thread+0x1e>
 80056a2:	bf00      	nop
 80056a4:	20003d80 	.word	0x20003d80
 80056a8:	20003d84 	.word	0x20003d84
 80056ac:	20004270 	.word	0x20004270
 80056b0:	20003d7c 	.word	0x20003d7c
 80056b4:	0800ecd0 	.word	0x0800ecd0
 80056b8:	0800e670 	.word	0x0800e670
 80056bc:	0800eca0 	.word	0x0800eca0

080056c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80056c0:	b570      	push	{r4, r5, r6, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80056c2:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80056c6:	f013 0f18 	tst.w	r3, #24
{
 80056ca:	4606      	mov	r6, r0
 80056cc:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80056ce:	481b      	ldr	r0, [pc, #108]	; (800573c <tcpip_input+0x7c>)
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80056d0:	d114      	bne.n	80056fc <tcpip_input+0x3c>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80056d2:	f007 fedb 	bl	800d48c <sys_mbox_valid>
 80056d6:	b1e0      	cbz	r0, 8005712 <tcpip_input+0x52>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80056d8:	2009      	movs	r0, #9
 80056da:	f002 fbe7 	bl	8007eac <memp_malloc>
  if (msg == NULL) {
 80056de:	4604      	mov	r4, r0
 80056e0:	b348      	cbz	r0, 8005736 <tcpip_input+0x76>
  msg->msg.inp.input_fn = input_fn;
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <tcpip_input+0x80>)
  msg->type = TCPIP_MSG_INPKT;
 80056e4:	2202      	movs	r2, #2
  msg->msg.inp.p = p;
 80056e6:	6066      	str	r6, [r4, #4]
  msg->msg.inp.netif = inp;
 80056e8:	60a5      	str	r5, [r4, #8]
  msg->type = TCPIP_MSG_INPKT;
 80056ea:	7022      	strb	r2, [r4, #0]
  msg->msg.inp.input_fn = input_fn;
 80056ec:	60e3      	str	r3, [r4, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80056ee:	4621      	mov	r1, r4
 80056f0:	4812      	ldr	r0, [pc, #72]	; (800573c <tcpip_input+0x7c>)
 80056f2:	f007 fe8b 	bl	800d40c <sys_mbox_trypost>
 80056f6:	b9d0      	cbnz	r0, 800572e <tcpip_input+0x6e>
  return ERR_OK;
 80056f8:	2000      	movs	r0, #0
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80056fc:	f007 fec6 	bl	800d48c <sys_mbox_valid>
 8005700:	b170      	cbz	r0, 8005720 <tcpip_input+0x60>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005702:	2009      	movs	r0, #9
 8005704:	f002 fbd2 	bl	8007eac <memp_malloc>
  if (msg == NULL) {
 8005708:	4604      	mov	r4, r0
 800570a:	b1a0      	cbz	r0, 8005736 <tcpip_input+0x76>
  msg->type = TCPIP_MSG_INPKT;
 800570c:	2202      	movs	r2, #2
  msg->msg.inp.input_fn = input_fn;
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <tcpip_input+0x84>)
 8005710:	e7e9      	b.n	80056e6 <tcpip_input+0x26>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <tcpip_input+0x88>)
 8005714:	490d      	ldr	r1, [pc, #52]	; (800574c <tcpip_input+0x8c>)
 8005716:	480e      	ldr	r0, [pc, #56]	; (8005750 <tcpip_input+0x90>)
 8005718:	22b5      	movs	r2, #181	; 0xb5
 800571a:	f008 fc5f 	bl	800dfdc <iprintf>
 800571e:	e7db      	b.n	80056d8 <tcpip_input+0x18>
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <tcpip_input+0x88>)
 8005722:	490a      	ldr	r1, [pc, #40]	; (800574c <tcpip_input+0x8c>)
 8005724:	480a      	ldr	r0, [pc, #40]	; (8005750 <tcpip_input+0x90>)
 8005726:	22b5      	movs	r2, #181	; 0xb5
 8005728:	f008 fc58 	bl	800dfdc <iprintf>
 800572c:	e7e9      	b.n	8005702 <tcpip_input+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800572e:	4621      	mov	r1, r4
 8005730:	2009      	movs	r0, #9
 8005732:	f002 fbef 	bl	8007f14 <memp_free>
    return ERR_MEM;
 8005736:	f04f 30ff 	mov.w	r0, #4294967295
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
}
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	20003d7c 	.word	0x20003d7c
 8005740:	08006da1 	.word	0x08006da1
 8005744:	0800d2b1 	.word	0x0800d2b1
 8005748:	0800eca0 	.word	0x0800eca0
 800574c:	0800ec90 	.word	0x0800ec90
 8005750:	0800e670 	.word	0x0800e670

08005754 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005758:	4815      	ldr	r0, [pc, #84]	; (80057b0 <tcpip_callback_with_block+0x5c>)
{
 800575a:	460e      	mov	r6, r1
 800575c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800575e:	f007 fe95 	bl	800d48c <sys_mbox_valid>
 8005762:	b198      	cbz	r0, 800578c <tcpip_callback_with_block+0x38>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005764:	2008      	movs	r0, #8
 8005766:	f002 fba1 	bl	8007eac <memp_malloc>
  if (msg == NULL) {
 800576a:	4604      	mov	r4, r0
 800576c:	b1e0      	cbz	r0, 80057a8 <tcpip_callback_with_block+0x54>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800576e:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
 8005770:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005772:	6086      	str	r6, [r0, #8]
  msg->type = TCPIP_MSG_CALLBACK;
 8005774:	7003      	strb	r3, [r0, #0]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8005776:	4601      	mov	r1, r0
 8005778:	480d      	ldr	r0, [pc, #52]	; (80057b0 <tcpip_callback_with_block+0x5c>)
  if (block) {
 800577a:	b91d      	cbnz	r5, 8005784 <tcpip_callback_with_block+0x30>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800577c:	f007 fe46 	bl	800d40c <sys_mbox_trypost>
 8005780:	b958      	cbnz	r0, 800579a <tcpip_callback_with_block+0x46>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_post(&mbox, msg);
 8005784:	f007 fe36 	bl	800d3f4 <sys_mbox_post>
  return ERR_OK;
 8005788:	2000      	movs	r0, #0
 800578a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <tcpip_callback_with_block+0x60>)
 800578e:	490a      	ldr	r1, [pc, #40]	; (80057b8 <tcpip_callback_with_block+0x64>)
 8005790:	480a      	ldr	r0, [pc, #40]	; (80057bc <tcpip_callback_with_block+0x68>)
 8005792:	22ee      	movs	r2, #238	; 0xee
 8005794:	f008 fc22 	bl	800dfdc <iprintf>
 8005798:	e7e4      	b.n	8005764 <tcpip_callback_with_block+0x10>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800579a:	4621      	mov	r1, r4
 800579c:	2008      	movs	r0, #8
 800579e:	f002 fbb9 	bl	8007f14 <memp_free>
      return ERR_MEM;
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ac:	e7e9      	b.n	8005782 <tcpip_callback_with_block+0x2e>
 80057ae:	bf00      	nop
 80057b0:	20003d7c 	.word	0x20003d7c
 80057b4:	0800eca0 	.word	0x0800eca0
 80057b8:	0800ec90 	.word	0x0800ec90
 80057bc:	0800e670 	.word	0x0800e670

080057c0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80057c2:	4c06      	ldr	r4, [pc, #24]	; (80057dc <tcpip_send_msg_wait_sem+0x1c>)
{
 80057c4:	460e      	mov	r6, r1
 80057c6:	4605      	mov	r5, r0
  LOCK_TCPIP_CORE();
 80057c8:	4620      	mov	r0, r4
 80057ca:	f007 fed1 	bl	800d570 <sys_mutex_lock>
  fn(apimsg);
 80057ce:	4630      	mov	r0, r6
 80057d0:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 80057d2:	4620      	mov	r0, r4
 80057d4:	f007 fed2 	bl	800d57c <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80057d8:	2000      	movs	r0, #0
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	20004270 	.word	0x20004270

080057e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80057e0:	b530      	push	{r4, r5, lr}
 80057e2:	b083      	sub	sp, #12
 80057e4:	4605      	mov	r5, r0
 80057e6:	460c      	mov	r4, r1
  lwip_init();
 80057e8:	f000 f868 	bl	80058bc <lwip_init>

  tcpip_init_done = initfunc;
 80057ec:	4a13      	ldr	r2, [pc, #76]	; (800583c <tcpip_init+0x5c>)
  tcpip_init_done_arg = arg;
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <tcpip_init+0x60>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80057f0:	4814      	ldr	r0, [pc, #80]	; (8005844 <tcpip_init+0x64>)
  tcpip_init_done = initfunc;
 80057f2:	6015      	str	r5, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80057f4:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80057f6:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80057f8:	f007 fde0 	bl	800d3bc <sys_mbox_new>
 80057fc:	b9a8      	cbnz	r0, 800582a <tcpip_init+0x4a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80057fe:	4812      	ldr	r0, [pc, #72]	; (8005848 <tcpip_init+0x68>)
 8005800:	f007 fea4 	bl	800d54c <sys_mutex_new>
 8005804:	b130      	cbz	r0, 8005814 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005806:	4b11      	ldr	r3, [pc, #68]	; (800584c <tcpip_init+0x6c>)
 8005808:	4911      	ldr	r1, [pc, #68]	; (8005850 <tcpip_init+0x70>)
 800580a:	4812      	ldr	r0, [pc, #72]	; (8005854 <tcpip_init+0x74>)
 800580c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8005810:	f008 fbe4 	bl	800dfdc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005814:	2303      	movs	r3, #3
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2200      	movs	r2, #0
 800581a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800581e:	490e      	ldr	r1, [pc, #56]	; (8005858 <tcpip_init+0x78>)
 8005820:	480e      	ldr	r0, [pc, #56]	; (800585c <tcpip_init+0x7c>)
 8005822:	f007 feaf 	bl	800d584 <sys_thread_new>
}
 8005826:	b003      	add	sp, #12
 8005828:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800582a:	4b08      	ldr	r3, [pc, #32]	; (800584c <tcpip_init+0x6c>)
 800582c:	490c      	ldr	r1, [pc, #48]	; (8005860 <tcpip_init+0x80>)
 800582e:	4809      	ldr	r0, [pc, #36]	; (8005854 <tcpip_init+0x74>)
 8005830:	f240 12d5 	movw	r2, #469	; 0x1d5
 8005834:	f008 fbd2 	bl	800dfdc <iprintf>
 8005838:	e7e1      	b.n	80057fe <tcpip_init+0x1e>
 800583a:	bf00      	nop
 800583c:	20003d80 	.word	0x20003d80
 8005840:	20003d84 	.word	0x20003d84
 8005844:	20003d7c 	.word	0x20003d7c
 8005848:	20004270 	.word	0x20004270
 800584c:	0800eca0 	.word	0x0800eca0
 8005850:	0800ec5c 	.word	0x0800ec5c
 8005854:	0800e670 	.word	0x0800e670
 8005858:	08005619 	.word	0x08005619
 800585c:	0800ec80 	.word	0x0800ec80
 8005860:	0800ec38 	.word	0x0800ec38

08005864 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8005864:	b1d0      	cbz	r0, 800589c <fs_open+0x38>
 8005866:	b1c9      	cbz	r1, 800589c <fs_open+0x38>
{
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	460d      	mov	r5, r1
 800586c:	4606      	mov	r6, r0
 800586e:	490d      	ldr	r1, [pc, #52]	; (80058a4 <fs_open+0x40>)
 8005870:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <fs_open+0x44>)
 8005872:	e000      	b.n	8005876 <fs_open+0x12>
 8005874:	6861      	ldr	r1, [r4, #4]
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
    if (!strcmp(name, (const char *)f->name)) {
 8005876:	4628      	mov	r0, r5
 8005878:	f7fa fcaa 	bl	80001d0 <strcmp>
 800587c:	b128      	cbz	r0, 800588a <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800587e:	6824      	ldr	r4, [r4, #0]
 8005880:	2c00      	cmp	r4, #0
 8005882:	d1f7      	bne.n	8005874 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8005884:	f06f 0005 	mvn.w	r0, #5
}
 8005888:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 800588a:	68e3      	ldr	r3, [r4, #12]
      file->data = (const char *)f->data;
 800588c:	68a2      	ldr	r2, [r4, #8]
      file->index = f->len;
 800588e:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8005890:	e886 000c 	stmia.w	r6, {r2, r3}
      file->pextension = NULL;
 8005894:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 8005896:	7c23      	ldrb	r3, [r4, #16]
 8005898:	7433      	strb	r3, [r6, #16]
      return ERR_OK;
 800589a:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 800589c:	f06f 000f 	mvn.w	r0, #15
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	08010d4c 	.word	0x08010d4c
 80058a8:	08010f9c 	.word	0x08010f9c

080058ac <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop

080058b0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80058b0:	ba40      	rev16	r0, r0
}
 80058b2:	b280      	uxth	r0, r0
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop

080058b8 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 80058b8:	ba00      	rev	r0, r0
 80058ba:	4770      	bx	lr

080058bc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80058bc:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80058be:	f007 fe39 	bl	800d534 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80058c2:	f002 f881 	bl	80079c8 <mem_init>
  memp_init();
 80058c6:	f002 fac3 	bl	8007e50 <memp_init>
  pbuf_init();
  netif_init();
 80058ca:	f002 fb51 	bl	8007f70 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80058ce:	f007 fb53 	bl	800cf78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80058d2:	f003 f8b9 	bl	8008a48 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80058d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80058da:	f007 ba83 	b.w	800cde4 <sys_timeouts_init>
 80058de:	bf00      	nop

080058e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	4689      	mov	r9, r1
 80058e8:	4692      	mov	sl, r2
 80058ea:	4698      	mov	r8, r3
 80058ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80058ee:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80058f2:	4606      	mov	r6, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d04e      	beq.n	8005996 <etharp_raw+0xb6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80058f8:	2200      	movs	r2, #0
 80058fa:	211c      	movs	r1, #28
 80058fc:	2002      	movs	r0, #2
 80058fe:	f002 fd57 	bl	80083b0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005902:	4605      	mov	r5, r0
 8005904:	2800      	cmp	r0, #0
 8005906:	d04e      	beq.n	80059a6 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005908:	8943      	ldrh	r3, [r0, #10]
 800590a:	2b1b      	cmp	r3, #27
 800590c:	d93b      	bls.n	8005986 <etharp_raw+0xa6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800590e:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 8005910:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8005912:	f7ff ffcd 	bl	80058b0 <lwip_htons>
 8005916:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005918:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 800591c:	2b06      	cmp	r3, #6
 800591e:	d006      	beq.n	800592e <etharp_raw+0x4e>
 8005920:	4b22      	ldr	r3, [pc, #136]	; (80059ac <etharp_raw+0xcc>)
 8005922:	4923      	ldr	r1, [pc, #140]	; (80059b0 <etharp_raw+0xd0>)
 8005924:	4823      	ldr	r0, [pc, #140]	; (80059b4 <etharp_raw+0xd4>)
 8005926:	f240 426b 	movw	r2, #1131	; 0x46b
 800592a:	f008 fb57 	bl	800dfdc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800592e:	f8d8 3000 	ldr.w	r3, [r8]
 8005932:	60a3      	str	r3, [r4, #8]
 8005934:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005938:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	f8c4 3012 	str.w	r3, [r4, #18]
 8005940:	88bb      	ldrh	r3, [r7, #4]
 8005942:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8005944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005946:	f8df c078 	ldr.w	ip, [pc, #120]	; 80059c0 <etharp_raw+0xe0>
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005952:	f04f 0e06 	mov.w	lr, #6
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	61a3      	str	r3, [r4, #24]
  hdr->protolen = sizeof(ip4_addr_t);
 800595a:	2104      	movs	r1, #4
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800595c:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005960:	f8c4 c000 	str.w	ip, [r4]
  hdr->hwlen = ETH_HWADDR_LEN;
 8005964:	f884 e004 	strb.w	lr, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005968:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800596a:	4653      	mov	r3, sl
 800596c:	464a      	mov	r2, r9
 800596e:	4629      	mov	r1, r5
 8005970:	4630      	mov	r0, r6
 8005972:	9700      	str	r7, [sp, #0]
 8005974:	f007 fcea 	bl	800d34c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005978:	4628      	mov	r0, r5
 800597a:	f002 fcab 	bl	80082d4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800597e:	2000      	movs	r0, #0
}
 8005980:	b002      	add	sp, #8
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005986:	4b09      	ldr	r3, [pc, #36]	; (80059ac <etharp_raw+0xcc>)
 8005988:	490b      	ldr	r1, [pc, #44]	; (80059b8 <etharp_raw+0xd8>)
 800598a:	480a      	ldr	r0, [pc, #40]	; (80059b4 <etharp_raw+0xd4>)
 800598c:	f240 4264 	movw	r2, #1124	; 0x464
 8005990:	f008 fb24 	bl	800dfdc <iprintf>
 8005994:	e7bb      	b.n	800590e <etharp_raw+0x2e>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <etharp_raw+0xcc>)
 8005998:	4908      	ldr	r1, [pc, #32]	; (80059bc <etharp_raw+0xdc>)
 800599a:	4806      	ldr	r0, [pc, #24]	; (80059b4 <etharp_raw+0xd4>)
 800599c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80059a0:	f008 fb1c 	bl	800dfdc <iprintf>
 80059a4:	e7a8      	b.n	80058f8 <etharp_raw+0x18>
    return ERR_MEM;
 80059a6:	f04f 30ff 	mov.w	r0, #4294967295
 80059aa:	e7e9      	b.n	8005980 <etharp_raw+0xa0>
 80059ac:	08011090 	.word	0x08011090
 80059b0:	0801110c 	.word	0x0801110c
 80059b4:	0800e670 	.word	0x0800e670
 80059b8:	080110d8 	.word	0x080110d8
 80059bc:	080110c8 	.word	0x080110c8
 80059c0:	00080100 	.word	0x00080100

080059c4 <etharp_output_to_arp_index>:
{
 80059c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80059c8:	0057      	lsls	r7, r2, #1
 80059ca:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005ac8 <etharp_output_to_arp_index+0x104>
 80059ce:	eb07 0902 	add.w	r9, r7, r2
 80059d2:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
{
 80059d6:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80059d8:	f899 3014 	ldrb.w	r3, [r9, #20]
 80059dc:	2b01      	cmp	r3, #1
{
 80059de:	4614      	mov	r4, r2
 80059e0:	4605      	mov	r5, r0
 80059e2:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80059e4:	d93a      	bls.n	8005a5c <etharp_output_to_arp_index+0x98>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d010      	beq.n	8005a0c <etharp_output_to_arp_index+0x48>
 80059ea:	2318      	movs	r3, #24
 80059ec:	fb03 8304 	mla	r3, r3, r4, r8
 80059f0:	330c      	adds	r3, #12
 80059f2:	f105 0925 	add.w	r9, r5, #37	; 0x25
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80059f6:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80059fa:	464a      	mov	r2, r9
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	9400      	str	r4, [sp, #0]
 8005a02:	f007 fca3 	bl	800d34c <ethernet_output>
}
 8005a06:	b005      	add	sp, #20
 8005a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005a0c:	4427      	add	r7, r4
 8005a0e:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
 8005a12:	8a7b      	ldrh	r3, [r7, #18]
 8005a14:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005a18:	d82a      	bhi.n	8005a70 <etharp_output_to_arp_index+0xac>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005a1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005a1e:	d3e4      	bcc.n	80059ea <etharp_output_to_arp_index+0x26>
 8005a20:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005a24:	00da      	lsls	r2, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005a26:	f102 030c 	add.w	r3, r2, #12
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005a2a:	2001      	movs	r0, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005a2c:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005a2e:	f8df e090 	ldr.w	lr, [pc, #144]	; 8005ac0 <etharp_output_to_arp_index+0xfc>
 8005a32:	9003      	str	r0, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005a34:	eb08 0403 	add.w	r4, r8, r3
 8005a38:	4442      	add	r2, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005a3a:	f105 0925 	add.w	r9, r5, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005a3e:	1d28      	adds	r0, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005a40:	9202      	str	r2, [sp, #8]
 8005a42:	e88d 4001 	stmia.w	sp, {r0, lr}
 8005a46:	4622      	mov	r2, r4
 8005a48:	464b      	mov	r3, r9
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff ff47 	bl	80058e0 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005a52:	bb60      	cbnz	r0, 8005aae <etharp_output_to_arp_index+0xea>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005a54:	2203      	movs	r2, #3
 8005a56:	4623      	mov	r3, r4
 8005a58:	753a      	strb	r2, [r7, #20]
 8005a5a:	e7cc      	b.n	80059f6 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005a5c:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <etharp_output_to_arp_index+0xf0>)
 8005a5e:	4916      	ldr	r1, [pc, #88]	; (8005ab8 <etharp_output_to_arp_index+0xf4>)
 8005a60:	4816      	ldr	r0, [pc, #88]	; (8005abc <etharp_output_to_arp_index+0xf8>)
 8005a62:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005a66:	f008 fab9 	bl	800dfdc <iprintf>
 8005a6a:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005a6e:	e7ba      	b.n	80059e6 <etharp_output_to_arp_index+0x22>
 8005a70:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005a74:	00dc      	lsls	r4, r3, #3
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005a76:	1d23      	adds	r3, r4, #4
 8005a78:	4443      	add	r3, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005a7a:	f105 0925 	add.w	r9, r5, #37	; 0x25
 8005a7e:	f04f 0e01 	mov.w	lr, #1
 8005a82:	480f      	ldr	r0, [pc, #60]	; (8005ac0 <etharp_output_to_arp_index+0xfc>)
 8005a84:	9302      	str	r3, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005a86:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005a88:	464b      	mov	r3, r9
 8005a8a:	9001      	str	r0, [sp, #4]
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	4649      	mov	r1, r9
 8005a90:	f8cd e00c 	str.w	lr, [sp, #12]
 8005a94:	4a0b      	ldr	r2, [pc, #44]	; (8005ac4 <etharp_output_to_arp_index+0x100>)
 8005a96:	4628      	mov	r0, r5
 8005a98:	f7ff ff22 	bl	80058e0 <etharp_raw>
 8005a9c:	f104 030c 	add.w	r3, r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005aa0:	b108      	cbz	r0, 8005aa6 <etharp_output_to_arp_index+0xe2>
 8005aa2:	4443      	add	r3, r8
 8005aa4:	e7a7      	b.n	80059f6 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	4443      	add	r3, r8
 8005aaa:	753a      	strb	r2, [r7, #20]
 8005aac:	e7a3      	b.n	80059f6 <etharp_output_to_arp_index+0x32>
 8005aae:	4623      	mov	r3, r4
 8005ab0:	e7a1      	b.n	80059f6 <etharp_output_to_arp_index+0x32>
 8005ab2:	bf00      	nop
 8005ab4:	08011090 	.word	0x08011090
 8005ab8:	08011044 	.word	0x08011044
 8005abc:	0800e670 	.word	0x0800e670
 8005ac0:	08012764 	.word	0x08012764
 8005ac4:	080126f0 	.word	0x080126f0
 8005ac8:	20003d88 	.word	0x20003d88

08005acc <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	468e      	mov	lr, r1
    u8_t state = arp_table[i].state;
 8005ad2:	4cc7      	ldr	r4, [pc, #796]	; (8005df0 <etharp_find_entry.isra.0+0x324>)
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	f000 8205 	beq.w	8005ee4 <etharp_find_entry.isra.0+0x418>
 8005ada:	7d22      	ldrb	r2, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d061      	beq.n	8005ba4 <etharp_find_entry.isra.0+0xd8>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005ae0:	6801      	ldr	r1, [r0, #0]
 8005ae2:	6863      	ldr	r3, [r4, #4]
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	f000 8374 	beq.w	80061d2 <etharp_find_entry.isra.0+0x706>
      if (state == ETHARP_STATE_PENDING) {
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	f000 8172 	beq.w	8005dd4 <etharp_find_entry.isra.0+0x308>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005af0:	f04f 0900 	mov.w	r9, #0
  s8_t old_queue = ARP_TABLE_SIZE;
 8005af4:	230a      	movs	r3, #10
          if (arp_table[i].ctime >= age_stable) {
 8005af6:	8a62      	ldrh	r2, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005af8:	46cc      	mov	ip, r9
            old_stable = i;
 8005afa:	46cb      	mov	fp, r9
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005afc:	4698      	mov	r8, r3
    u8_t state = arp_table[i].state;
 8005afe:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005b02:	f1ba 0f00 	cmp.w	sl, #0
 8005b06:	f040 8212 	bne.w	8005f2e <etharp_find_entry.isra.0+0x462>
    u8_t state = arp_table[i].state;
 8005b0a:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
      empty = i;
 8005b0e:	2501      	movs	r5, #1
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b10:	2f00      	cmp	r7, #0
 8005b12:	d157      	bne.n	8005bc4 <etharp_find_entry.isra.0+0xf8>
    u8_t state = arp_table[i].state;
 8005b14:	f894 705c 	ldrb.w	r7, [r4, #92]	; 0x5c
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	f040 8087 	bne.w	8005c2c <etharp_find_entry.isra.0+0x160>
    u8_t state = arp_table[i].state;
 8005b1e:	f894 7074 	ldrb.w	r7, [r4, #116]	; 0x74
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b22:	2f00      	cmp	r7, #0
 8005b24:	f040 80c5 	bne.w	8005cb2 <etharp_find_entry.isra.0+0x1e6>
    u8_t state = arp_table[i].state;
 8005b28:	f894 708c 	ldrb.w	r7, [r4, #140]	; 0x8c
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b2c:	2f00      	cmp	r7, #0
 8005b2e:	f040 80d7 	bne.w	8005ce0 <etharp_find_entry.isra.0+0x214>
    u8_t state = arp_table[i].state;
 8005b32:	f894 70a4 	ldrb.w	r7, [r4, #164]	; 0xa4
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	f040 80e9 	bne.w	8005d0e <etharp_find_entry.isra.0+0x242>
    u8_t state = arp_table[i].state;
 8005b3c:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	f040 80fc 	bne.w	8005d3e <etharp_find_entry.isra.0+0x272>
    u8_t state = arp_table[i].state;
 8005b46:	f894 70d4 	ldrb.w	r7, [r4, #212]	; 0xd4
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b4a:	2f00      	cmp	r7, #0
 8005b4c:	f040 810f 	bne.w	8005d6e <etharp_find_entry.isra.0+0x2a2>
    u8_t state = arp_table[i].state;
 8005b50:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b54:	2f00      	cmp	r7, #0
 8005b56:	f040 8122 	bne.w	8005d9e <etharp_find_entry.isra.0+0x2d2>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005b5a:	f01e 0f02 	tst.w	lr, #2
 8005b5e:	f040 82f8 	bne.w	8006152 <etharp_find_entry.isra.0+0x686>
 8005b62:	2d0a      	cmp	r5, #10
 8005b64:	4607      	mov	r7, r0
 8005b66:	d078      	beq.n	8005c5a <etharp_find_entry.isra.0+0x18e>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005b68:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005b6c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005b70:	462e      	mov	r6, r5
 8005b72:	7d1b      	ldrb	r3, [r3, #20]
    i = empty;
 8005b74:	b2ed      	uxtb	r5, r5
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005b76:	b133      	cbz	r3, 8005b86 <etharp_find_entry.isra.0+0xba>
 8005b78:	4b9e      	ldr	r3, [pc, #632]	; (8005df4 <etharp_find_entry.isra.0+0x328>)
 8005b7a:	499f      	ldr	r1, [pc, #636]	; (8005df8 <etharp_find_entry.isra.0+0x32c>)
 8005b7c:	489f      	ldr	r0, [pc, #636]	; (8005dfc <etharp_find_entry.isra.0+0x330>)
 8005b7e:	f240 1287 	movw	r2, #391	; 0x187
 8005b82:	f008 fa2b 	bl	800dfdc <iprintf>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005b86:	0073      	lsls	r3, r6, #1
  if (ipaddr != NULL) {
 8005b88:	b127      	cbz	r7, 8005b94 <etharp_find_entry.isra.0+0xc8>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005b8a:	199a      	adds	r2, r3, r6
 8005b8c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6051      	str	r1, [r2, #4]
  arp_table[i].ctime = 0;
 8005b94:	4433      	add	r3, r6
 8005b96:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005b9a:	2300      	movs	r3, #0
  return (err_t)i;
 8005b9c:	b268      	sxtb	r0, r5
  arp_table[i].ctime = 0;
 8005b9e:	8263      	strh	r3, [r4, #18]
 8005ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    u8_t state = arp_table[i].state;
 8005ba4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    } else if (state != ETHARP_STATE_EMPTY) {
 8005ba8:	f1ba 0f00 	cmp.w	sl, #0
 8005bac:	d120      	bne.n	8005bf0 <etharp_find_entry.isra.0+0x124>
    u8_t state = arp_table[i].state;
 8005bae:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
  s8_t old_queue = ARP_TABLE_SIZE;
 8005bb2:	230a      	movs	r3, #10
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	46d1      	mov	r9, sl
 8005bb8:	46d4      	mov	ip, sl
      empty = i;
 8005bba:	4655      	mov	r5, sl
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005bbc:	469b      	mov	fp, r3
 8005bbe:	4698      	mov	r8, r3
    } else if (state != ETHARP_STATE_EMPTY) {
 8005bc0:	2f00      	cmp	r7, #0
 8005bc2:	d0a7      	beq.n	8005b14 <etharp_find_entry.isra.0+0x48>
 8005bc4:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005bc6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8005bc8:	42b1      	cmp	r1, r6
 8005bca:	f000 8318 	beq.w	80061fe <etharp_find_entry.isra.0+0x732>
      if (state == ETHARP_STATE_PENDING) {
 8005bce:	2f01      	cmp	r7, #1
 8005bd0:	f000 8123 	beq.w	8005e1a <etharp_find_entry.isra.0+0x34e>
          if (arp_table[i].ctime >= age_stable) {
 8005bd4:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
 8005bd8:	4297      	cmp	r7, r2
 8005bda:	d302      	bcc.n	8005be2 <etharp_find_entry.isra.0+0x116>
 8005bdc:	463a      	mov	r2, r7
            old_stable = i;
 8005bde:	f04f 0b02 	mov.w	fp, #2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005be2:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005be4:	f894 705c 	ldrb.w	r7, [r4, #92]	; 0x5c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005be8:	d196      	bne.n	8005b18 <etharp_find_entry.isra.0+0x4c>
 8005bea:	bb07      	cbnz	r7, 8005c2e <etharp_find_entry.isra.0+0x162>
      empty = i;
 8005bec:	2503      	movs	r5, #3
 8005bee:	e796      	b.n	8005b1e <etharp_find_entry.isra.0+0x52>
  s8_t old_queue = ARP_TABLE_SIZE;
 8005bf0:	230a      	movs	r3, #10
 8005bf2:	6801      	ldr	r1, [r0, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005bf4:	4691      	mov	r9, r2
 8005bf6:	4694      	mov	ip, r2
      empty = i;
 8005bf8:	4615      	mov	r5, r2
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005bfa:	469b      	mov	fp, r3
 8005bfc:	4698      	mov	r8, r3
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005bfe:	69e7      	ldr	r7, [r4, #28]
 8005c00:	42b9      	cmp	r1, r7
 8005c02:	f000 82e8 	beq.w	80061d6 <etharp_find_entry.isra.0+0x70a>
      if (state == ETHARP_STATE_PENDING) {
 8005c06:	f1ba 0f01 	cmp.w	sl, #1
 8005c0a:	f000 80fb 	beq.w	8005e04 <etharp_find_entry.isra.0+0x338>
          if (arp_table[i].ctime >= age_stable) {
 8005c0e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 8005c10:	4297      	cmp	r7, r2
 8005c12:	d302      	bcc.n	8005c1a <etharp_find_entry.isra.0+0x14e>
 8005c14:	463a      	mov	r2, r7
            old_stable = i;
 8005c16:	f04f 0b01 	mov.w	fp, #1
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c1a:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005c1c:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c20:	f47f af76 	bne.w	8005b10 <etharp_find_entry.isra.0+0x44>
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	d1ce      	bne.n	8005bc6 <etharp_find_entry.isra.0+0xfa>
      empty = i;
 8005c28:	2502      	movs	r5, #2
 8005c2a:	e773      	b.n	8005b14 <etharp_find_entry.isra.0+0x48>
 8005c2c:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005c2e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8005c30:	42b1      	cmp	r1, r6
 8005c32:	f000 82e8 	beq.w	8006206 <etharp_find_entry.isra.0+0x73a>
      if (state == ETHARP_STATE_PENDING) {
 8005c36:	2f01      	cmp	r7, #1
 8005c38:	f000 80fb 	beq.w	8005e32 <etharp_find_entry.isra.0+0x366>
          if (arp_table[i].ctime >= age_stable) {
 8005c3c:	f8b4 705a 	ldrh.w	r7, [r4, #90]	; 0x5a
 8005c40:	4297      	cmp	r7, r2
 8005c42:	d302      	bcc.n	8005c4a <etharp_find_entry.isra.0+0x17e>
 8005c44:	463a      	mov	r2, r7
            old_stable = i;
 8005c46:	f04f 0b03 	mov.w	fp, #3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c4a:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005c4c:	f894 7074 	ldrb.w	r7, [r4, #116]	; 0x74
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c50:	f47f af67 	bne.w	8005b22 <etharp_find_entry.isra.0+0x56>
 8005c54:	bb77      	cbnz	r7, 8005cb4 <etharp_find_entry.isra.0+0x1e8>
      empty = i;
 8005c56:	2504      	movs	r5, #4
 8005c58:	e766      	b.n	8005b28 <etharp_find_entry.isra.0+0x5c>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005c5a:	f01e 0f01 	tst.w	lr, #1
 8005c5e:	f000 8278 	beq.w	8006152 <etharp_find_entry.isra.0+0x686>
    if (old_stable < ARP_TABLE_SIZE) {
 8005c62:	f1bb 0f0a 	cmp.w	fp, #10
 8005c66:	f000 80ac 	beq.w	8005dc2 <etharp_find_entry.isra.0+0x2f6>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005c6a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
      i = old_stable;
 8005c6e:	fa5f f58b 	uxtb.w	r5, fp
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005c72:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 8005c76:	b133      	cbz	r3, 8005c86 <etharp_find_entry.isra.0+0x1ba>
 8005c78:	4b5e      	ldr	r3, [pc, #376]	; (8005df4 <etharp_find_entry.isra.0+0x328>)
 8005c7a:	4961      	ldr	r1, [pc, #388]	; (8005e00 <etharp_find_entry.isra.0+0x334>)
 8005c7c:	485f      	ldr	r0, [pc, #380]	; (8005dfc <etharp_find_entry.isra.0+0x330>)
 8005c7e:	f240 126f 	movw	r2, #367	; 0x16f
 8005c82:	f008 f9ab 	bl	800dfdc <iprintf>
  if (arp_table[i].q != NULL) {
 8005c86:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8005c8a:	eb08 0905 	add.w	r9, r8, r5
 8005c8e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    etharp_free_entry(i);
 8005c92:	462e      	mov	r6, r5
  if (arp_table[i].q != NULL) {
 8005c94:	f854 0009 	ldr.w	r0, [r4, r9]
 8005c98:	b120      	cbz	r0, 8005ca4 <etharp_find_entry.isra.0+0x1d8>
    free_etharp_q(arp_table[i].q);
 8005c9a:	f002 fb1b 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f844 3009 	str.w	r3, [r4, r9]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005ca4:	44a8      	add	r8, r5
 8005ca6:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8005caa:	2300      	movs	r3, #0
 8005cac:	f888 3014 	strb.w	r3, [r8, #20]
 8005cb0:	e769      	b.n	8005b86 <etharp_find_entry.isra.0+0xba>
 8005cb2:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005cb4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8005cb6:	42b1      	cmp	r1, r6
 8005cb8:	f000 82a7 	beq.w	800620a <etharp_find_entry.isra.0+0x73e>
      if (state == ETHARP_STATE_PENDING) {
 8005cbc:	2f01      	cmp	r7, #1
 8005cbe:	f000 80c4 	beq.w	8005e4a <etharp_find_entry.isra.0+0x37e>
          if (arp_table[i].ctime >= age_stable) {
 8005cc2:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
 8005cc6:	4297      	cmp	r7, r2
 8005cc8:	d302      	bcc.n	8005cd0 <etharp_find_entry.isra.0+0x204>
 8005cca:	463a      	mov	r2, r7
            old_stable = i;
 8005ccc:	f04f 0b04 	mov.w	fp, #4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005cd0:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005cd2:	f894 708c 	ldrb.w	r7, [r4, #140]	; 0x8c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005cd6:	f47f af29 	bne.w	8005b2c <etharp_find_entry.isra.0+0x60>
 8005cda:	b917      	cbnz	r7, 8005ce2 <etharp_find_entry.isra.0+0x216>
      empty = i;
 8005cdc:	2505      	movs	r5, #5
 8005cde:	e728      	b.n	8005b32 <etharp_find_entry.isra.0+0x66>
 8005ce0:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005ce2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005ce4:	42b1      	cmp	r1, r6
 8005ce6:	f000 828c 	beq.w	8006202 <etharp_find_entry.isra.0+0x736>
      if (state == ETHARP_STATE_PENDING) {
 8005cea:	2f01      	cmp	r7, #1
 8005cec:	f000 80b9 	beq.w	8005e62 <etharp_find_entry.isra.0+0x396>
          if (arp_table[i].ctime >= age_stable) {
 8005cf0:	f8b4 708a 	ldrh.w	r7, [r4, #138]	; 0x8a
 8005cf4:	4297      	cmp	r7, r2
 8005cf6:	d302      	bcc.n	8005cfe <etharp_find_entry.isra.0+0x232>
 8005cf8:	463a      	mov	r2, r7
            old_stable = i;
 8005cfa:	f04f 0b05 	mov.w	fp, #5
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005cfe:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005d00:	f894 70a4 	ldrb.w	r7, [r4, #164]	; 0xa4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d04:	f47f af17 	bne.w	8005b36 <etharp_find_entry.isra.0+0x6a>
 8005d08:	b917      	cbnz	r7, 8005d10 <etharp_find_entry.isra.0+0x244>
      empty = i;
 8005d0a:	2506      	movs	r5, #6
 8005d0c:	e716      	b.n	8005b3c <etharp_find_entry.isra.0+0x70>
 8005d0e:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005d10:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 8005d14:	42b1      	cmp	r1, r6
 8005d16:	f000 8295 	beq.w	8006244 <etharp_find_entry.isra.0+0x778>
      if (state == ETHARP_STATE_PENDING) {
 8005d1a:	2f01      	cmp	r7, #1
 8005d1c:	f000 80ad 	beq.w	8005e7a <etharp_find_entry.isra.0+0x3ae>
          if (arp_table[i].ctime >= age_stable) {
 8005d20:	f8b4 70a2 	ldrh.w	r7, [r4, #162]	; 0xa2
 8005d24:	4297      	cmp	r7, r2
 8005d26:	d302      	bcc.n	8005d2e <etharp_find_entry.isra.0+0x262>
 8005d28:	463a      	mov	r2, r7
            old_stable = i;
 8005d2a:	f04f 0b06 	mov.w	fp, #6
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d2e:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005d30:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d34:	f47f af04 	bne.w	8005b40 <etharp_find_entry.isra.0+0x74>
 8005d38:	b917      	cbnz	r7, 8005d40 <etharp_find_entry.isra.0+0x274>
      empty = i;
 8005d3a:	2507      	movs	r5, #7
 8005d3c:	e703      	b.n	8005b46 <etharp_find_entry.isra.0+0x7a>
 8005d3e:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005d40:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
 8005d44:	42b1      	cmp	r1, r6
 8005d46:	f000 827f 	beq.w	8006248 <etharp_find_entry.isra.0+0x77c>
      if (state == ETHARP_STATE_PENDING) {
 8005d4a:	2f01      	cmp	r7, #1
 8005d4c:	f000 80a2 	beq.w	8005e94 <etharp_find_entry.isra.0+0x3c8>
          if (arp_table[i].ctime >= age_stable) {
 8005d50:	f8b4 70ba 	ldrh.w	r7, [r4, #186]	; 0xba
 8005d54:	4297      	cmp	r7, r2
 8005d56:	d302      	bcc.n	8005d5e <etharp_find_entry.isra.0+0x292>
 8005d58:	463a      	mov	r2, r7
            old_stable = i;
 8005d5a:	f04f 0b07 	mov.w	fp, #7
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d5e:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005d60:	f894 70d4 	ldrb.w	r7, [r4, #212]	; 0xd4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d64:	f47f aef1 	bne.w	8005b4a <etharp_find_entry.isra.0+0x7e>
 8005d68:	b917      	cbnz	r7, 8005d70 <etharp_find_entry.isra.0+0x2a4>
      empty = i;
 8005d6a:	2508      	movs	r5, #8
 8005d6c:	e6f0      	b.n	8005b50 <etharp_find_entry.isra.0+0x84>
 8005d6e:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005d70:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
 8005d74:	42b1      	cmp	r1, r6
 8005d76:	f000 80d6 	beq.w	8005f26 <etharp_find_entry.isra.0+0x45a>
      if (state == ETHARP_STATE_PENDING) {
 8005d7a:	2f01      	cmp	r7, #1
 8005d7c:	f000 8097 	beq.w	8005eae <etharp_find_entry.isra.0+0x3e2>
          if (arp_table[i].ctime >= age_stable) {
 8005d80:	f8b4 70d2 	ldrh.w	r7, [r4, #210]	; 0xd2
 8005d84:	4297      	cmp	r7, r2
 8005d86:	d302      	bcc.n	8005d8e <etharp_find_entry.isra.0+0x2c2>
 8005d88:	463a      	mov	r2, r7
            old_stable = i;
 8005d8a:	f04f 0b08 	mov.w	fp, #8
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d8e:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005d90:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005d94:	f47f aede 	bne.w	8005b54 <etharp_find_entry.isra.0+0x88>
 8005d98:	b917      	cbnz	r7, 8005da0 <etharp_find_entry.isra.0+0x2d4>
      empty = i;
 8005d9a:	2509      	movs	r5, #9
 8005d9c:	e6dd      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
 8005d9e:	6801      	ldr	r1, [r0, #0]
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005da0:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
 8005da4:	42b1      	cmp	r1, r6
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005da6:	bf08      	it	eq
 8005da8:	2009      	moveq	r0, #9
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005daa:	f000 80bd 	beq.w	8005f28 <etharp_find_entry.isra.0+0x45c>
      if (state == ETHARP_STATE_PENDING) {
 8005dae:	2f01      	cmp	r7, #1
 8005db0:	f000 808a 	beq.w	8005ec8 <etharp_find_entry.isra.0+0x3fc>
          if (arp_table[i].ctime >= age_stable) {
 8005db4:	f8b4 10ea 	ldrh.w	r1, [r4, #234]	; 0xea
            old_stable = i;
 8005db8:	4291      	cmp	r1, r2
 8005dba:	bf28      	it	cs
 8005dbc:	f04f 0b09 	movcs.w	fp, #9
 8005dc0:	e6cb      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005dc2:	f1b8 0f0a 	cmp.w	r8, #10
 8005dc6:	f040 808a 	bne.w	8005ede <etharp_find_entry.isra.0+0x412>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005dca:	2b0a      	cmp	r3, #10
 8005dcc:	f000 81c1 	beq.w	8006152 <etharp_find_entry.isra.0+0x686>
      i = old_queue;
 8005dd0:	b2dd      	uxtb	r5, r3
 8005dd2:	e758      	b.n	8005c86 <etharp_find_entry.isra.0+0x1ba>
        if (arp_table[i].q != NULL) {
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	f000 81db 	beq.w	8006192 <etharp_find_entry.isra.0+0x6c6>
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005ddc:	2200      	movs	r2, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005dde:	f04f 0b0a 	mov.w	fp, #10
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005de2:	4691      	mov	r9, r2
            old_queue = i;
 8005de4:	4613      	mov	r3, r2
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005de6:	46d8      	mov	r8, fp
          if (arp_table[i].ctime >= age_queue) {
 8005de8:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8005dec:	e687      	b.n	8005afe <etharp_find_entry.isra.0+0x32>
 8005dee:	bf00      	nop
 8005df0:	20003d88 	.word	0x20003d88
 8005df4:	08011090 	.word	0x08011090
 8005df8:	08010fc8 	.word	0x08010fc8
 8005dfc:	0800e670 	.word	0x0800e670
 8005e00:	08010fb0 	.word	0x08010fb0
        if (arp_table[i].q != NULL) {
 8005e04:	69a7      	ldr	r7, [r4, #24]
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	f000 81ca 	beq.w	80061a0 <etharp_find_entry.isra.0+0x6d4>
          if (arp_table[i].ctime >= age_queue) {
 8005e0c:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 8005e0e:	4567      	cmp	r7, ip
 8005e10:	f4ff af03 	bcc.w	8005c1a <etharp_find_entry.isra.0+0x14e>
 8005e14:	46bc      	mov	ip, r7
            old_queue = i;
 8005e16:	4653      	mov	r3, sl
 8005e18:	e6ff      	b.n	8005c1a <etharp_find_entry.isra.0+0x14e>
        if (arp_table[i].q != NULL) {
 8005e1a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8005e1c:	2f00      	cmp	r7, #0
 8005e1e:	f000 81c6 	beq.w	80061ae <etharp_find_entry.isra.0+0x6e2>
          if (arp_table[i].ctime >= age_queue) {
 8005e22:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
 8005e26:	4567      	cmp	r7, ip
 8005e28:	f4ff aedb 	bcc.w	8005be2 <etharp_find_entry.isra.0+0x116>
 8005e2c:	46bc      	mov	ip, r7
            old_queue = i;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e6d7      	b.n	8005be2 <etharp_find_entry.isra.0+0x116>
        if (arp_table[i].q != NULL) {
 8005e32:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005e34:	2f00      	cmp	r7, #0
 8005e36:	f000 81c3 	beq.w	80061c0 <etharp_find_entry.isra.0+0x6f4>
          if (arp_table[i].ctime >= age_queue) {
 8005e3a:	f8b4 705a 	ldrh.w	r7, [r4, #90]	; 0x5a
 8005e3e:	4567      	cmp	r7, ip
 8005e40:	f4ff af03 	bcc.w	8005c4a <etharp_find_entry.isra.0+0x17e>
 8005e44:	46bc      	mov	ip, r7
            old_queue = i;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e6ff      	b.n	8005c4a <etharp_find_entry.isra.0+0x17e>
        if (arp_table[i].q != NULL) {
 8005e4a:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8005e4c:	2f00      	cmp	r7, #0
 8005e4e:	f000 81c4 	beq.w	80061da <etharp_find_entry.isra.0+0x70e>
          if (arp_table[i].ctime >= age_queue) {
 8005e52:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
 8005e56:	4567      	cmp	r7, ip
 8005e58:	f4ff af3a 	bcc.w	8005cd0 <etharp_find_entry.isra.0+0x204>
 8005e5c:	46bc      	mov	ip, r7
            old_queue = i;
 8005e5e:	2304      	movs	r3, #4
 8005e60:	e736      	b.n	8005cd0 <etharp_find_entry.isra.0+0x204>
        if (arp_table[i].q != NULL) {
 8005e62:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 81c1 	beq.w	80061ec <etharp_find_entry.isra.0+0x720>
          if (arp_table[i].ctime >= age_queue) {
 8005e6a:	f8b4 708a 	ldrh.w	r7, [r4, #138]	; 0x8a
 8005e6e:	4567      	cmp	r7, ip
 8005e70:	f4ff af45 	bcc.w	8005cfe <etharp_find_entry.isra.0+0x232>
 8005e74:	46bc      	mov	ip, r7
            old_queue = i;
 8005e76:	2305      	movs	r3, #5
 8005e78:	e741      	b.n	8005cfe <etharp_find_entry.isra.0+0x232>
        if (arp_table[i].q != NULL) {
 8005e7a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 8005e7e:	2f00      	cmp	r7, #0
 8005e80:	f000 81c5 	beq.w	800620e <etharp_find_entry.isra.0+0x742>
          if (arp_table[i].ctime >= age_queue) {
 8005e84:	f8b4 70a2 	ldrh.w	r7, [r4, #162]	; 0xa2
 8005e88:	4567      	cmp	r7, ip
 8005e8a:	f4ff af50 	bcc.w	8005d2e <etharp_find_entry.isra.0+0x262>
 8005e8e:	46bc      	mov	ip, r7
            old_queue = i;
 8005e90:	2306      	movs	r3, #6
 8005e92:	e74c      	b.n	8005d2e <etharp_find_entry.isra.0+0x262>
        if (arp_table[i].q != NULL) {
 8005e94:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8005e98:	2f00      	cmp	r7, #0
 8005e9a:	f000 81c1 	beq.w	8006220 <etharp_find_entry.isra.0+0x754>
          if (arp_table[i].ctime >= age_queue) {
 8005e9e:	f8b4 70ba 	ldrh.w	r7, [r4, #186]	; 0xba
 8005ea2:	4567      	cmp	r7, ip
 8005ea4:	f4ff af5b 	bcc.w	8005d5e <etharp_find_entry.isra.0+0x292>
 8005ea8:	46bc      	mov	ip, r7
            old_queue = i;
 8005eaa:	2307      	movs	r3, #7
 8005eac:	e757      	b.n	8005d5e <etharp_find_entry.isra.0+0x292>
        if (arp_table[i].q != NULL) {
 8005eae:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
 8005eb2:	2f00      	cmp	r7, #0
 8005eb4:	f000 81bd 	beq.w	8006232 <etharp_find_entry.isra.0+0x766>
          if (arp_table[i].ctime >= age_queue) {
 8005eb8:	f8b4 70d2 	ldrh.w	r7, [r4, #210]	; 0xd2
 8005ebc:	4567      	cmp	r7, ip
 8005ebe:	f4ff af66 	bcc.w	8005d8e <etharp_find_entry.isra.0+0x2c2>
 8005ec2:	46bc      	mov	ip, r7
            old_queue = i;
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	e762      	b.n	8005d8e <etharp_find_entry.isra.0+0x2c2>
        if (arp_table[i].q != NULL) {
 8005ec8:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	f000 81bd 	beq.w	800624c <etharp_find_entry.isra.0+0x780>
          if (arp_table[i].ctime >= age_queue) {
 8005ed2:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
            old_queue = i;
 8005ed6:	4562      	cmp	r2, ip
 8005ed8:	bf28      	it	cs
 8005eda:	2309      	movcs	r3, #9
 8005edc:	e63d      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
      i = old_pending;
 8005ede:	fa5f f588 	uxtb.w	r5, r8
 8005ee2:	e6d0      	b.n	8005c86 <etharp_find_entry.isra.0+0x1ba>
    u8_t state = arp_table[i].state;
 8005ee4:	7d23      	ldrb	r3, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005ee6:	b323      	cbz	r3, 8005f32 <etharp_find_entry.isra.0+0x466>
      if (state == ETHARP_STATE_PENDING) {
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f000 80c9 	beq.w	8006080 <etharp_find_entry.isra.0+0x5b4>
  s8_t old_queue = ARP_TABLE_SIZE;
 8005eee:	230a      	movs	r3, #10
          if (arp_table[i].ctime >= age_stable) {
 8005ef0:	8a61      	ldrh	r1, [r4, #18]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005ef2:	4698      	mov	r8, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005ef4:	4684      	mov	ip, r0
 8005ef6:	4607      	mov	r7, r0
            old_stable = i;
 8005ef8:	4683      	mov	fp, r0
    u8_t state = arp_table[i].state;
 8005efa:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	f000 813c 	beq.w	800617c <etharp_find_entry.isra.0+0x6b0>
      if (state == ETHARP_STATE_PENDING) {
 8005f04:	2a01      	cmp	r2, #1
 8005f06:	f000 81f0 	beq.w	80062ea <etharp_find_entry.isra.0+0x81e>
          if (arp_table[i].ctime >= age_stable) {
 8005f0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005f0c:	428a      	cmp	r2, r1
 8005f0e:	bf38      	it	cc
 8005f10:	250a      	movcc	r5, #10
 8005f12:	f080 81fd 	bcs.w	8006310 <etharp_find_entry.isra.0+0x844>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005f16:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005f18:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005f1c:	d117      	bne.n	8005f4e <etharp_find_entry.isra.0+0x482>
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	d13c      	bne.n	8005f9c <etharp_find_entry.isra.0+0x4d0>
      empty = i;
 8005f22:	2502      	movs	r5, #2
 8005f24:	e014      	b.n	8005f50 <etharp_find_entry.isra.0+0x484>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005f26:	2008      	movs	r0, #8
        return i;
 8005f28:	b240      	sxtb	r0, r0
 8005f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005f2e:	250a      	movs	r5, #10
 8005f30:	e665      	b.n	8005bfe <etharp_find_entry.isra.0+0x132>
    u8_t state = arp_table[i].state;
 8005f32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 810f 	bne.w	800615a <etharp_find_entry.isra.0+0x68e>
  s8_t old_queue = ARP_TABLE_SIZE;
 8005f3c:	230a      	movs	r3, #10
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005f3e:	469b      	mov	fp, r3
 8005f40:	4698      	mov	r8, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005f42:	4601      	mov	r1, r0
 8005f44:	4684      	mov	ip, r0
 8005f46:	4607      	mov	r7, r0
      empty = i;
 8005f48:	4605      	mov	r5, r0
    u8_t state = arp_table[i].state;
 8005f4a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f4e:	bb2a      	cbnz	r2, 8005f9c <etharp_find_entry.isra.0+0x4d0>
    u8_t state = arp_table[i].state;
 8005f50:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f54:	bb9a      	cbnz	r2, 8005fbe <etharp_find_entry.isra.0+0x4f2>
    u8_t state = arp_table[i].state;
 8005f56:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d13f      	bne.n	8005fde <etharp_find_entry.isra.0+0x512>
    u8_t state = arp_table[i].state;
 8005f5e:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	d14b      	bne.n	8005ffe <etharp_find_entry.isra.0+0x532>
    u8_t state = arp_table[i].state;
 8005f66:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f6a:	2a00      	cmp	r2, #0
 8005f6c:	d167      	bne.n	800603e <etharp_find_entry.isra.0+0x572>
    u8_t state = arp_table[i].state;
 8005f6e:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	d153      	bne.n	800601e <etharp_find_entry.isra.0+0x552>
    u8_t state = arp_table[i].state;
 8005f76:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f7a:	2a00      	cmp	r2, #0
 8005f7c:	d170      	bne.n	8006060 <etharp_find_entry.isra.0+0x594>
    u8_t state = arp_table[i].state;
 8005f7e:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    } else if (state != ETHARP_STATE_EMPTY) {
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	f43f ade9 	beq.w	8005b5a <etharp_find_entry.isra.0+0x8e>
      if (state == ETHARP_STATE_PENDING) {
 8005f88:	2a01      	cmp	r2, #1
 8005f8a:	f000 80d7 	beq.w	800613c <etharp_find_entry.isra.0+0x670>
          if (arp_table[i].ctime >= age_stable) {
 8005f8e:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
            old_stable = i;
 8005f92:	428a      	cmp	r2, r1
 8005f94:	bf28      	it	cs
 8005f96:	f04f 0b09 	movcs.w	fp, #9
 8005f9a:	e5de      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
      if (state == ETHARP_STATE_PENDING) {
 8005f9c:	2a01      	cmp	r2, #1
 8005f9e:	f000 8086 	beq.w	80060ae <etharp_find_entry.isra.0+0x5e2>
          if (arp_table[i].ctime >= age_stable) {
 8005fa2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8005fa6:	428a      	cmp	r2, r1
 8005fa8:	d302      	bcc.n	8005fb0 <etharp_find_entry.isra.0+0x4e4>
 8005faa:	4611      	mov	r1, r2
            old_stable = i;
 8005fac:	f04f 0b02 	mov.w	fp, #2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005fb0:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005fb2:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005fb6:	d1cd      	bne.n	8005f54 <etharp_find_entry.isra.0+0x488>
 8005fb8:	b90a      	cbnz	r2, 8005fbe <etharp_find_entry.isra.0+0x4f2>
      empty = i;
 8005fba:	2503      	movs	r5, #3
 8005fbc:	e7cb      	b.n	8005f56 <etharp_find_entry.isra.0+0x48a>
      if (state == ETHARP_STATE_PENDING) {
 8005fbe:	2a01      	cmp	r2, #1
 8005fc0:	d06a      	beq.n	8006098 <etharp_find_entry.isra.0+0x5cc>
          if (arp_table[i].ctime >= age_stable) {
 8005fc2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005fc6:	428a      	cmp	r2, r1
 8005fc8:	d302      	bcc.n	8005fd0 <etharp_find_entry.isra.0+0x504>
 8005fca:	4611      	mov	r1, r2
            old_stable = i;
 8005fcc:	f04f 0b03 	mov.w	fp, #3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005fd0:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005fd2:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005fd6:	d1c0      	bne.n	8005f5a <etharp_find_entry.isra.0+0x48e>
 8005fd8:	b90a      	cbnz	r2, 8005fde <etharp_find_entry.isra.0+0x512>
      empty = i;
 8005fda:	2504      	movs	r5, #4
 8005fdc:	e7bf      	b.n	8005f5e <etharp_find_entry.isra.0+0x492>
      if (state == ETHARP_STATE_PENDING) {
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	d071      	beq.n	80060c6 <etharp_find_entry.isra.0+0x5fa>
          if (arp_table[i].ctime >= age_stable) {
 8005fe2:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 8005fe6:	428a      	cmp	r2, r1
 8005fe8:	d302      	bcc.n	8005ff0 <etharp_find_entry.isra.0+0x524>
 8005fea:	4611      	mov	r1, r2
            old_stable = i;
 8005fec:	f04f 0b04 	mov.w	fp, #4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005ff0:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8005ff2:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005ff6:	d1b4      	bne.n	8005f62 <etharp_find_entry.isra.0+0x496>
 8005ff8:	b90a      	cbnz	r2, 8005ffe <etharp_find_entry.isra.0+0x532>
      empty = i;
 8005ffa:	2505      	movs	r5, #5
 8005ffc:	e7b3      	b.n	8005f66 <etharp_find_entry.isra.0+0x49a>
      if (state == ETHARP_STATE_PENDING) {
 8005ffe:	2a01      	cmp	r2, #1
 8006000:	d06c      	beq.n	80060dc <etharp_find_entry.isra.0+0x610>
          if (arp_table[i].ctime >= age_stable) {
 8006002:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8006006:	428a      	cmp	r2, r1
 8006008:	d302      	bcc.n	8006010 <etharp_find_entry.isra.0+0x544>
 800600a:	4611      	mov	r1, r2
            old_stable = i;
 800600c:	f04f 0b05 	mov.w	fp, #5
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006010:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8006012:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006016:	d1a8      	bne.n	8005f6a <etharp_find_entry.isra.0+0x49e>
 8006018:	b98a      	cbnz	r2, 800603e <etharp_find_entry.isra.0+0x572>
      empty = i;
 800601a:	2506      	movs	r5, #6
 800601c:	e7a7      	b.n	8005f6e <etharp_find_entry.isra.0+0x4a2>
      if (state == ETHARP_STATE_PENDING) {
 800601e:	2a01      	cmp	r2, #1
 8006020:	d07f      	beq.n	8006122 <etharp_find_entry.isra.0+0x656>
          if (arp_table[i].ctime >= age_stable) {
 8006022:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8006026:	428a      	cmp	r2, r1
 8006028:	d302      	bcc.n	8006030 <etharp_find_entry.isra.0+0x564>
 800602a:	4611      	mov	r1, r2
            old_stable = i;
 800602c:	f04f 0b07 	mov.w	fp, #7
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006030:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8006032:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006036:	d1a0      	bne.n	8005f7a <etharp_find_entry.isra.0+0x4ae>
 8006038:	b992      	cbnz	r2, 8006060 <etharp_find_entry.isra.0+0x594>
      empty = i;
 800603a:	2508      	movs	r5, #8
 800603c:	e79f      	b.n	8005f7e <etharp_find_entry.isra.0+0x4b2>
      if (state == ETHARP_STATE_PENDING) {
 800603e:	2a01      	cmp	r2, #1
 8006040:	d057      	beq.n	80060f2 <etharp_find_entry.isra.0+0x626>
          if (arp_table[i].ctime >= age_stable) {
 8006042:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
 8006046:	428a      	cmp	r2, r1
 8006048:	d302      	bcc.n	8006050 <etharp_find_entry.isra.0+0x584>
 800604a:	4611      	mov	r1, r2
            old_stable = i;
 800604c:	f04f 0b06 	mov.w	fp, #6
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006050:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8006052:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006056:	d18c      	bne.n	8005f72 <etharp_find_entry.isra.0+0x4a6>
 8006058:	2a00      	cmp	r2, #0
 800605a:	d1e0      	bne.n	800601e <etharp_find_entry.isra.0+0x552>
      empty = i;
 800605c:	2507      	movs	r5, #7
 800605e:	e78a      	b.n	8005f76 <etharp_find_entry.isra.0+0x4aa>
      if (state == ETHARP_STATE_PENDING) {
 8006060:	2a01      	cmp	r2, #1
 8006062:	d052      	beq.n	800610a <etharp_find_entry.isra.0+0x63e>
          if (arp_table[i].ctime >= age_stable) {
 8006064:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
 8006068:	428a      	cmp	r2, r1
 800606a:	d302      	bcc.n	8006072 <etharp_find_entry.isra.0+0x5a6>
 800606c:	4611      	mov	r1, r2
            old_stable = i;
 800606e:	f04f 0b08 	mov.w	fp, #8
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006072:	2d0a      	cmp	r5, #10
    u8_t state = arp_table[i].state;
 8006074:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006078:	d183      	bne.n	8005f82 <etharp_find_entry.isra.0+0x4b6>
 800607a:	2a00      	cmp	r2, #0
 800607c:	d184      	bne.n	8005f88 <etharp_find_entry.isra.0+0x4bc>
 800607e:	e68c      	b.n	8005d9a <etharp_find_entry.isra.0+0x2ce>
        if (arp_table[i].q != NULL) {
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8105 	beq.w	8006292 <etharp_find_entry.isra.0+0x7c6>
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006088:	f04f 0b0a 	mov.w	fp, #10
 800608c:	46d8      	mov	r8, fp
          if (arp_table[i].ctime >= age_queue) {
 800608e:	8a67      	ldrh	r7, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006090:	4601      	mov	r1, r0
 8006092:	4684      	mov	ip, r0
            old_queue = i;
 8006094:	4603      	mov	r3, r0
 8006096:	e730      	b.n	8005efa <etharp_find_entry.isra.0+0x42e>
        if (arp_table[i].q != NULL) {
 8006098:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800609a:	2a00      	cmp	r2, #0
 800609c:	f000 8113 	beq.w	80062c6 <etharp_find_entry.isra.0+0x7fa>
          if (arp_table[i].ctime >= age_queue) {
 80060a0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80060a4:	42ba      	cmp	r2, r7
 80060a6:	d393      	bcc.n	8005fd0 <etharp_find_entry.isra.0+0x504>
 80060a8:	4617      	mov	r7, r2
            old_queue = i;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e790      	b.n	8005fd0 <etharp_find_entry.isra.0+0x504>
        if (arp_table[i].q != NULL) {
 80060ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	f000 80ff 	beq.w	80062b4 <etharp_find_entry.isra.0+0x7e8>
          if (arp_table[i].ctime >= age_queue) {
 80060b6:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80060ba:	42ba      	cmp	r2, r7
 80060bc:	f4ff af78 	bcc.w	8005fb0 <etharp_find_entry.isra.0+0x4e4>
 80060c0:	4617      	mov	r7, r2
            old_queue = i;
 80060c2:	2302      	movs	r3, #2
 80060c4:	e774      	b.n	8005fb0 <etharp_find_entry.isra.0+0x4e4>
        if (arp_table[i].q != NULL) {
 80060c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	f000 80d0 	beq.w	800626e <etharp_find_entry.isra.0+0x7a2>
          if (arp_table[i].ctime >= age_queue) {
 80060ce:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 80060d2:	42ba      	cmp	r2, r7
 80060d4:	d38c      	bcc.n	8005ff0 <etharp_find_entry.isra.0+0x524>
 80060d6:	4617      	mov	r7, r2
            old_queue = i;
 80060d8:	2304      	movs	r3, #4
 80060da:	e789      	b.n	8005ff0 <etharp_find_entry.isra.0+0x524>
        if (arp_table[i].q != NULL) {
 80060dc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80060de:	2a00      	cmp	r2, #0
 80060e0:	f000 80ce 	beq.w	8006280 <etharp_find_entry.isra.0+0x7b4>
          if (arp_table[i].ctime >= age_queue) {
 80060e4:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80060e8:	42ba      	cmp	r2, r7
 80060ea:	d391      	bcc.n	8006010 <etharp_find_entry.isra.0+0x544>
 80060ec:	4617      	mov	r7, r2
            old_queue = i;
 80060ee:	2305      	movs	r3, #5
 80060f0:	e78e      	b.n	8006010 <etharp_find_entry.isra.0+0x544>
        if (arp_table[i].q != NULL) {
 80060f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	f000 80d3 	beq.w	80062a2 <etharp_find_entry.isra.0+0x7d6>
          if (arp_table[i].ctime >= age_queue) {
 80060fc:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
 8006100:	42ba      	cmp	r2, r7
 8006102:	d3a5      	bcc.n	8006050 <etharp_find_entry.isra.0+0x584>
 8006104:	4617      	mov	r7, r2
            old_queue = i;
 8006106:	2306      	movs	r3, #6
 8006108:	e7a2      	b.n	8006050 <etharp_find_entry.isra.0+0x584>
        if (arp_table[i].q != NULL) {
 800610a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 800610e:	2a00      	cmp	r2, #0
 8006110:	f000 80e2 	beq.w	80062d8 <etharp_find_entry.isra.0+0x80c>
          if (arp_table[i].ctime >= age_queue) {
 8006114:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
 8006118:	42ba      	cmp	r2, r7
 800611a:	d3aa      	bcc.n	8006072 <etharp_find_entry.isra.0+0x5a6>
 800611c:	4617      	mov	r7, r2
            old_queue = i;
 800611e:	2308      	movs	r3, #8
 8006120:	e7a7      	b.n	8006072 <etharp_find_entry.isra.0+0x5a6>
        if (arp_table[i].q != NULL) {
 8006122:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8006126:	2a00      	cmp	r2, #0
 8006128:	f000 80e9 	beq.w	80062fe <etharp_find_entry.isra.0+0x832>
          if (arp_table[i].ctime >= age_queue) {
 800612c:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8006130:	42ba      	cmp	r2, r7
 8006132:	f4ff af7d 	bcc.w	8006030 <etharp_find_entry.isra.0+0x564>
 8006136:	4617      	mov	r7, r2
            old_queue = i;
 8006138:	2307      	movs	r3, #7
 800613a:	e779      	b.n	8006030 <etharp_find_entry.isra.0+0x564>
        if (arp_table[i].q != NULL) {
 800613c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8006140:	2a00      	cmp	r2, #0
 8006142:	f000 80d5 	beq.w	80062f0 <etharp_find_entry.isra.0+0x824>
          if (arp_table[i].ctime >= age_queue) {
 8006146:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
            old_queue = i;
 800614a:	42ba      	cmp	r2, r7
 800614c:	bf28      	it	cs
 800614e:	2309      	movcs	r3, #9
 8006150:	e503      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
    return (s8_t)ERR_MEM;
 8006152:	f04f 30ff 	mov.w	r0, #4294967295
 8006156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 800615a:	2b01      	cmp	r3, #1
 800615c:	d110      	bne.n	8006180 <etharp_find_entry.isra.0+0x6b4>
  s8_t old_queue = ARP_TABLE_SIZE;
 800615e:	230a      	movs	r3, #10
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006160:	469b      	mov	fp, r3
 8006162:	4698      	mov	r8, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006164:	4601      	mov	r1, r0
 8006166:	4684      	mov	ip, r0
 8006168:	4681      	mov	r9, r0
      empty = i;
 800616a:	4605      	mov	r5, r0
        if (arp_table[i].q != NULL) {
 800616c:	69a2      	ldr	r2, [r4, #24]
 800616e:	2a00      	cmp	r2, #0
 8006170:	d075      	beq.n	800625e <etharp_find_entry.isra.0+0x792>
          if (arp_table[i].ctime >= age_queue) {
 8006172:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 8006174:	454f      	cmp	r7, r9
 8006176:	d370      	bcc.n	800625a <etharp_find_entry.isra.0+0x78e>
            old_queue = i;
 8006178:	2301      	movs	r3, #1
 800617a:	e6cc      	b.n	8005f16 <etharp_find_entry.isra.0+0x44a>
      empty = i;
 800617c:	2501      	movs	r5, #1
 800617e:	e6e4      	b.n	8005f4a <etharp_find_entry.isra.0+0x47e>
  s8_t old_queue = ARP_TABLE_SIZE;
 8006180:	230a      	movs	r3, #10
          if (arp_table[i].ctime >= age_stable) {
 8006182:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006184:	4698      	mov	r8, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006186:	4684      	mov	ip, r0
 8006188:	4607      	mov	r7, r0
      empty = i;
 800618a:	4605      	mov	r5, r0
            old_stable = i;
 800618c:	f04f 0b01 	mov.w	fp, #1
 8006190:	e6c1      	b.n	8005f16 <etharp_find_entry.isra.0+0x44a>
  s8_t old_queue = ARP_TABLE_SIZE;
 8006192:	230a      	movs	r3, #10
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8006194:	4694      	mov	ip, r2
            old_pending = i;
 8006196:	4690      	mov	r8, r2
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006198:	469b      	mov	fp, r3
          if (arp_table[i].ctime >= age_pending) {
 800619a:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800619e:	e4ae      	b.n	8005afe <etharp_find_entry.isra.0+0x32>
 80061a0:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 80061a2:	454f      	cmp	r7, r9
 80061a4:	f4ff ad39 	bcc.w	8005c1a <etharp_find_entry.isra.0+0x14e>
 80061a8:	46b9      	mov	r9, r7
            old_pending = i;
 80061aa:	46d0      	mov	r8, sl
 80061ac:	e535      	b.n	8005c1a <etharp_find_entry.isra.0+0x14e>
          if (arp_table[i].ctime >= age_pending) {
 80061ae:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
 80061b2:	454f      	cmp	r7, r9
 80061b4:	f4ff ad15 	bcc.w	8005be2 <etharp_find_entry.isra.0+0x116>
 80061b8:	46b9      	mov	r9, r7
            old_pending = i;
 80061ba:	f04f 0802 	mov.w	r8, #2
 80061be:	e510      	b.n	8005be2 <etharp_find_entry.isra.0+0x116>
          if (arp_table[i].ctime >= age_pending) {
 80061c0:	f8b4 705a 	ldrh.w	r7, [r4, #90]	; 0x5a
 80061c4:	454f      	cmp	r7, r9
 80061c6:	f4ff ad40 	bcc.w	8005c4a <etharp_find_entry.isra.0+0x17e>
 80061ca:	46b9      	mov	r9, r7
            old_pending = i;
 80061cc:	f04f 0803 	mov.w	r8, #3
 80061d0:	e53b      	b.n	8005c4a <etharp_find_entry.isra.0+0x17e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80061d2:	2000      	movs	r0, #0
 80061d4:	e6a8      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
 80061d6:	2001      	movs	r0, #1
 80061d8:	e6a6      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
          if (arp_table[i].ctime >= age_pending) {
 80061da:	f8b4 7072 	ldrh.w	r7, [r4, #114]	; 0x72
 80061de:	454f      	cmp	r7, r9
 80061e0:	f4ff ad76 	bcc.w	8005cd0 <etharp_find_entry.isra.0+0x204>
 80061e4:	46b9      	mov	r9, r7
            old_pending = i;
 80061e6:	f04f 0804 	mov.w	r8, #4
 80061ea:	e571      	b.n	8005cd0 <etharp_find_entry.isra.0+0x204>
          if (arp_table[i].ctime >= age_pending) {
 80061ec:	f8b4 708a 	ldrh.w	r7, [r4, #138]	; 0x8a
 80061f0:	454f      	cmp	r7, r9
 80061f2:	f4ff ad84 	bcc.w	8005cfe <etharp_find_entry.isra.0+0x232>
 80061f6:	46b9      	mov	r9, r7
            old_pending = i;
 80061f8:	f04f 0805 	mov.w	r8, #5
 80061fc:	e57f      	b.n	8005cfe <etharp_find_entry.isra.0+0x232>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80061fe:	2002      	movs	r0, #2
 8006200:	e692      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
 8006202:	2005      	movs	r0, #5
 8006204:	e690      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
 8006206:	2003      	movs	r0, #3
 8006208:	e68e      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
 800620a:	2004      	movs	r0, #4
 800620c:	e68c      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
          if (arp_table[i].ctime >= age_pending) {
 800620e:	f8b4 70a2 	ldrh.w	r7, [r4, #162]	; 0xa2
 8006212:	454f      	cmp	r7, r9
 8006214:	f4ff ad8b 	bcc.w	8005d2e <etharp_find_entry.isra.0+0x262>
 8006218:	46b9      	mov	r9, r7
            old_pending = i;
 800621a:	f04f 0806 	mov.w	r8, #6
 800621e:	e586      	b.n	8005d2e <etharp_find_entry.isra.0+0x262>
          if (arp_table[i].ctime >= age_pending) {
 8006220:	f8b4 70ba 	ldrh.w	r7, [r4, #186]	; 0xba
 8006224:	454f      	cmp	r7, r9
 8006226:	f4ff ad9a 	bcc.w	8005d5e <etharp_find_entry.isra.0+0x292>
 800622a:	46b9      	mov	r9, r7
            old_pending = i;
 800622c:	f04f 0807 	mov.w	r8, #7
 8006230:	e595      	b.n	8005d5e <etharp_find_entry.isra.0+0x292>
          if (arp_table[i].ctime >= age_pending) {
 8006232:	f8b4 70d2 	ldrh.w	r7, [r4, #210]	; 0xd2
 8006236:	454f      	cmp	r7, r9
 8006238:	f4ff ada9 	bcc.w	8005d8e <etharp_find_entry.isra.0+0x2c2>
 800623c:	46b9      	mov	r9, r7
            old_pending = i;
 800623e:	f04f 0808 	mov.w	r8, #8
 8006242:	e5a4      	b.n	8005d8e <etharp_find_entry.isra.0+0x2c2>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006244:	2006      	movs	r0, #6
 8006246:	e66f      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
 8006248:	2007      	movs	r0, #7
 800624a:	e66d      	b.n	8005f28 <etharp_find_entry.isra.0+0x45c>
          if (arp_table[i].ctime >= age_pending) {
 800624c:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
            old_pending = i;
 8006250:	454a      	cmp	r2, r9
 8006252:	bf28      	it	cs
 8006254:	f04f 0809 	movcs.w	r8, #9
 8006258:	e47f      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 800625a:	464f      	mov	r7, r9
 800625c:	e65b      	b.n	8005f16 <etharp_find_entry.isra.0+0x44a>
 800625e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006260:	4562      	cmp	r2, ip
 8006262:	d3fa      	bcc.n	800625a <etharp_find_entry.isra.0+0x78e>
 8006264:	4694      	mov	ip, r2
 8006266:	464f      	mov	r7, r9
            old_pending = i;
 8006268:	f04f 0801 	mov.w	r8, #1
 800626c:	e653      	b.n	8005f16 <etharp_find_entry.isra.0+0x44a>
          if (arp_table[i].ctime >= age_pending) {
 800626e:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 8006272:	4562      	cmp	r2, ip
 8006274:	f4ff aebc 	bcc.w	8005ff0 <etharp_find_entry.isra.0+0x524>
 8006278:	4694      	mov	ip, r2
            old_pending = i;
 800627a:	f04f 0804 	mov.w	r8, #4
 800627e:	e6b7      	b.n	8005ff0 <etharp_find_entry.isra.0+0x524>
          if (arp_table[i].ctime >= age_pending) {
 8006280:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8006284:	4562      	cmp	r2, ip
 8006286:	f4ff aec3 	bcc.w	8006010 <etharp_find_entry.isra.0+0x544>
 800628a:	4694      	mov	ip, r2
            old_pending = i;
 800628c:	f04f 0805 	mov.w	r8, #5
 8006290:	e6be      	b.n	8006010 <etharp_find_entry.isra.0+0x544>
  s8_t old_queue = ARP_TABLE_SIZE;
 8006292:	230a      	movs	r3, #10
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8006294:	469b      	mov	fp, r3
          if (arp_table[i].ctime >= age_pending) {
 8006296:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800629a:	4601      	mov	r1, r0
 800629c:	4607      	mov	r7, r0
            old_pending = i;
 800629e:	4680      	mov	r8, r0
 80062a0:	e62b      	b.n	8005efa <etharp_find_entry.isra.0+0x42e>
          if (arp_table[i].ctime >= age_pending) {
 80062a2:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
 80062a6:	4562      	cmp	r2, ip
 80062a8:	f4ff aed2 	bcc.w	8006050 <etharp_find_entry.isra.0+0x584>
 80062ac:	4694      	mov	ip, r2
            old_pending = i;
 80062ae:	f04f 0806 	mov.w	r8, #6
 80062b2:	e6cd      	b.n	8006050 <etharp_find_entry.isra.0+0x584>
          if (arp_table[i].ctime >= age_pending) {
 80062b4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80062b8:	4562      	cmp	r2, ip
 80062ba:	f4ff ae79 	bcc.w	8005fb0 <etharp_find_entry.isra.0+0x4e4>
 80062be:	4694      	mov	ip, r2
            old_pending = i;
 80062c0:	f04f 0802 	mov.w	r8, #2
 80062c4:	e674      	b.n	8005fb0 <etharp_find_entry.isra.0+0x4e4>
          if (arp_table[i].ctime >= age_pending) {
 80062c6:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80062ca:	4562      	cmp	r2, ip
 80062cc:	f4ff ae80 	bcc.w	8005fd0 <etharp_find_entry.isra.0+0x504>
 80062d0:	4694      	mov	ip, r2
            old_pending = i;
 80062d2:	f04f 0803 	mov.w	r8, #3
 80062d6:	e67b      	b.n	8005fd0 <etharp_find_entry.isra.0+0x504>
          if (arp_table[i].ctime >= age_pending) {
 80062d8:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
 80062dc:	4562      	cmp	r2, ip
 80062de:	f4ff aec8 	bcc.w	8006072 <etharp_find_entry.isra.0+0x5a6>
 80062e2:	4694      	mov	ip, r2
            old_pending = i;
 80062e4:	f04f 0808 	mov.w	r8, #8
 80062e8:	e6c3      	b.n	8006072 <etharp_find_entry.isra.0+0x5a6>
      if (state == ETHARP_STATE_PENDING) {
 80062ea:	46b9      	mov	r9, r7
 80062ec:	250a      	movs	r5, #10
 80062ee:	e73d      	b.n	800616c <etharp_find_entry.isra.0+0x6a0>
          if (arp_table[i].ctime >= age_pending) {
 80062f0:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
            old_pending = i;
 80062f4:	4562      	cmp	r2, ip
 80062f6:	bf28      	it	cs
 80062f8:	f04f 0809 	movcs.w	r8, #9
 80062fc:	e42d      	b.n	8005b5a <etharp_find_entry.isra.0+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 80062fe:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8006302:	4562      	cmp	r2, ip
 8006304:	f4ff ae94 	bcc.w	8006030 <etharp_find_entry.isra.0+0x564>
 8006308:	4694      	mov	ip, r2
            old_pending = i;
 800630a:	f04f 0807 	mov.w	r8, #7
 800630e:	e68f      	b.n	8006030 <etharp_find_entry.isra.0+0x564>
          if (arp_table[i].ctime >= age_stable) {
 8006310:	4611      	mov	r1, r2
 8006312:	250a      	movs	r5, #10
 8006314:	e73a      	b.n	800618c <etharp_find_entry.isra.0+0x6c0>
 8006316:	bf00      	nop

08006318 <etharp_tmr>:
{
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4c21      	ldr	r4, [pc, #132]	; (80063a4 <etharp_tmr+0x8c>)
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800631e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80063ac <etharp_tmr+0x94>
 8006322:	4f21      	ldr	r7, [pc, #132]	; (80063a8 <etharp_tmr+0x90>)
{
 8006324:	b084      	sub	sp, #16
 8006326:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800632a:	2600      	movs	r6, #0
    u8_t state = arp_table[i].state;
 800632c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800632e:	b172      	cbz	r2, 800634e <etharp_tmr+0x36>
      arp_table[i].ctime++;
 8006330:	89e3      	ldrh	r3, [r4, #14]
 8006332:	3301      	adds	r3, #1
 8006334:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006336:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800633a:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800633c:	d20f      	bcs.n	800635e <etharp_tmr+0x46>
 800633e:	2a01      	cmp	r2, #1
 8006340:	d00b      	beq.n	800635a <etharp_tmr+0x42>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8006342:	2a03      	cmp	r2, #3
 8006344:	d017      	beq.n	8006376 <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8006346:	2a04      	cmp	r2, #4
 8006348:	d101      	bne.n	800634e <etharp_tmr+0x36>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800634a:	2302      	movs	r3, #2
 800634c:	7423      	strb	r3, [r4, #16]
 800634e:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006350:	42ac      	cmp	r4, r5
 8006352:	d1eb      	bne.n	800632c <etharp_tmr+0x14>
}
 8006354:	b004      	add	sp, #16
 8006356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800635a:	2b04      	cmp	r3, #4
 800635c:	d911      	bls.n	8006382 <etharp_tmr+0x6a>
  if (arp_table[i].q != NULL) {
 800635e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006362:	b118      	cbz	r0, 800636c <etharp_tmr+0x54>
    free_etharp_q(arp_table[i].q);
 8006364:	f001 ffb6 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 8006368:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800636c:	7426      	strb	r6, [r4, #16]
 800636e:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006370:	42ac      	cmp	r4, r5
 8006372:	d1db      	bne.n	800632c <etharp_tmr+0x14>
 8006374:	e7ee      	b.n	8006354 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8006376:	2304      	movs	r3, #4
 8006378:	7423      	strb	r3, [r4, #16]
 800637a:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800637c:	42ac      	cmp	r4, r5
 800637e:	d1d5      	bne.n	800632c <etharp_tmr+0x14>
 8006380:	e7e8      	b.n	8006354 <etharp_tmr+0x3c>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006382:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006384:	9203      	str	r2, [sp, #12]
 8006386:	f100 0325 	add.w	r3, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800638a:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800638c:	9402      	str	r4, [sp, #8]
 800638e:	9200      	str	r2, [sp, #0]
 8006390:	f8cd 8004 	str.w	r8, [sp, #4]
 8006394:	4619      	mov	r1, r3
 8006396:	463a      	mov	r2, r7
 8006398:	3418      	adds	r4, #24
 800639a:	f7ff faa1 	bl	80058e0 <etharp_raw>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800639e:	42ac      	cmp	r4, r5
 80063a0:	d1c4      	bne.n	800632c <etharp_tmr+0x14>
 80063a2:	e7d7      	b.n	8006354 <etharp_tmr+0x3c>
 80063a4:	20003d8c 	.word	0x20003d8c
 80063a8:	080126f0 	.word	0x080126f0
 80063ac:	08012764 	.word	0x08012764

080063b0 <etharp_cleanup_netif>:
{
 80063b0:	b538      	push	{r3, r4, r5, lr}
    u8_t state = arp_table[i].state;
 80063b2:	4c57      	ldr	r4, [pc, #348]	; (8006510 <etharp_cleanup_netif+0x160>)
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80063b4:	7d23      	ldrb	r3, [r4, #20]
{
 80063b6:	4605      	mov	r5, r0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80063b8:	b113      	cbz	r3, 80063c0 <etharp_cleanup_netif+0x10>
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	4298      	cmp	r0, r3
 80063be:	d047      	beq.n	8006450 <etharp_cleanup_netif+0xa0>
 80063c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80063c4:	b113      	cbz	r3, 80063cc <etharp_cleanup_netif+0x1c>
 80063c6:	6a23      	ldr	r3, [r4, #32]
 80063c8:	429d      	cmp	r5, r3
 80063ca:	d04a      	beq.n	8006462 <etharp_cleanup_netif+0xb2>
 80063cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063d0:	b113      	cbz	r3, 80063d8 <etharp_cleanup_netif+0x28>
 80063d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063d4:	429d      	cmp	r5, r3
 80063d6:	d04e      	beq.n	8006476 <etharp_cleanup_netif+0xc6>
 80063d8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80063dc:	b113      	cbz	r3, 80063e4 <etharp_cleanup_netif+0x34>
 80063de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063e0:	429d      	cmp	r5, r3
 80063e2:	d052      	beq.n	800648a <etharp_cleanup_netif+0xda>
 80063e4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80063e8:	b113      	cbz	r3, 80063f0 <etharp_cleanup_netif+0x40>
 80063ea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80063ec:	429d      	cmp	r5, r3
 80063ee:	d056      	beq.n	800649e <etharp_cleanup_netif+0xee>
 80063f0:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 80063f4:	b11b      	cbz	r3, 80063fe <etharp_cleanup_netif+0x4e>
 80063f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80063fa:	429d      	cmp	r5, r3
 80063fc:	d059      	beq.n	80064b2 <etharp_cleanup_netif+0x102>
 80063fe:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8006402:	b11b      	cbz	r3, 800640c <etharp_cleanup_netif+0x5c>
 8006404:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006408:	429d      	cmp	r5, r3
 800640a:	d05c      	beq.n	80064c6 <etharp_cleanup_netif+0x116>
 800640c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8006410:	b11b      	cbz	r3, 800641a <etharp_cleanup_netif+0x6a>
 8006412:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006416:	429d      	cmp	r5, r3
 8006418:	d061      	beq.n	80064de <etharp_cleanup_netif+0x12e>
 800641a:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 800641e:	b11b      	cbz	r3, 8006428 <etharp_cleanup_netif+0x78>
 8006420:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8006424:	429d      	cmp	r5, r3
 8006426:	d066      	beq.n	80064f6 <etharp_cleanup_netif+0x146>
 8006428:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800642c:	b11b      	cbz	r3, 8006436 <etharp_cleanup_netif+0x86>
 800642e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006432:	42ab      	cmp	r3, r5
 8006434:	d000      	beq.n	8006438 <etharp_cleanup_netif+0x88>
 8006436:	bd38      	pop	{r3, r4, r5, pc}
  if (arp_table[i].q != NULL) {
 8006438:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800643c:	b120      	cbz	r0, 8006448 <etharp_cleanup_netif+0x98>
    free_etharp_q(arp_table[i].q);
 800643e:	f001 ff49 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006448:	2300      	movs	r3, #0
 800644a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
 800644e:	e7f2      	b.n	8006436 <etharp_cleanup_netif+0x86>
  if (arp_table[i].q != NULL) {
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	b118      	cbz	r0, 800645c <etharp_cleanup_netif+0xac>
    free_etharp_q(arp_table[i].q);
 8006454:	f001 ff3e 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800645c:	2300      	movs	r3, #0
 800645e:	7523      	strb	r3, [r4, #20]
 8006460:	e7ae      	b.n	80063c0 <etharp_cleanup_netif+0x10>
  if (arp_table[i].q != NULL) {
 8006462:	69a0      	ldr	r0, [r4, #24]
 8006464:	b118      	cbz	r0, 800646e <etharp_cleanup_netif+0xbe>
    free_etharp_q(arp_table[i].q);
 8006466:	f001 ff35 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	61a3      	str	r3, [r4, #24]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800646e:	2300      	movs	r3, #0
 8006470:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8006474:	e7aa      	b.n	80063cc <etharp_cleanup_netif+0x1c>
  if (arp_table[i].q != NULL) {
 8006476:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006478:	b118      	cbz	r0, 8006482 <etharp_cleanup_netif+0xd2>
    free_etharp_q(arp_table[i].q);
 800647a:	f001 ff2b 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	6323      	str	r3, [r4, #48]	; 0x30
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006482:	2300      	movs	r3, #0
 8006484:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006488:	e7a6      	b.n	80063d8 <etharp_cleanup_netif+0x28>
  if (arp_table[i].q != NULL) {
 800648a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800648c:	b118      	cbz	r0, 8006496 <etharp_cleanup_netif+0xe6>
    free_etharp_q(arp_table[i].q);
 800648e:	f001 ff21 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	64a3      	str	r3, [r4, #72]	; 0x48
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006496:	2300      	movs	r3, #0
 8006498:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800649c:	e7a2      	b.n	80063e4 <etharp_cleanup_netif+0x34>
  if (arp_table[i].q != NULL) {
 800649e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80064a0:	b118      	cbz	r0, 80064aa <etharp_cleanup_netif+0xfa>
    free_etharp_q(arp_table[i].q);
 80064a2:	f001 ff17 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	6623      	str	r3, [r4, #96]	; 0x60
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 80064b0:	e79e      	b.n	80063f0 <etharp_cleanup_netif+0x40>
  if (arp_table[i].q != NULL) {
 80064b2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80064b4:	b118      	cbz	r0, 80064be <etharp_cleanup_netif+0x10e>
    free_etharp_q(arp_table[i].q);
 80064b6:	f001 ff0d 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	67a3      	str	r3, [r4, #120]	; 0x78
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80064be:	2300      	movs	r3, #0
 80064c0:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 80064c4:	e79b      	b.n	80063fe <etharp_cleanup_netif+0x4e>
  if (arp_table[i].q != NULL) {
 80064c6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80064ca:	b120      	cbz	r0, 80064d6 <etharp_cleanup_netif+0x126>
    free_etharp_q(arp_table[i].q);
 80064cc:	f001 ff02 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80064dc:	e796      	b.n	800640c <etharp_cleanup_netif+0x5c>
  if (arp_table[i].q != NULL) {
 80064de:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80064e2:	b120      	cbz	r0, 80064ee <etharp_cleanup_netif+0x13e>
    free_etharp_q(arp_table[i].q);
 80064e4:	f001 fef6 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80064f4:	e791      	b.n	800641a <etharp_cleanup_netif+0x6a>
  if (arp_table[i].q != NULL) {
 80064f6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 80064fa:	b120      	cbz	r0, 8006506 <etharp_cleanup_netif+0x156>
    free_etharp_q(arp_table[i].q);
 80064fc:	f001 feea 	bl	80082d4 <pbuf_free>
    arp_table[i].q = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006506:	2300      	movs	r3, #0
 8006508:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
 800650c:	e78c      	b.n	8006428 <etharp_cleanup_netif+0x78>
 800650e:	bf00      	nop
 8006510:	20003d88 	.word	0x20003d88

08006514 <etharp_input>:
{
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800651a:	2900      	cmp	r1, #0
 800651c:	f000 8089 	beq.w	8006632 <etharp_input+0x11e>
  hdr = (struct etharp_hdr *)p->payload;
 8006520:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8006522:	882b      	ldrh	r3, [r5, #0]
 8006524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006528:	4604      	mov	r4, r0
 800652a:	d005      	beq.n	8006538 <etharp_input+0x24>
  pbuf_free(p);
 800652c:	4620      	mov	r0, r4
 800652e:	f001 fed1 	bl	80082d4 <pbuf_free>
}
 8006532:	b006      	add	sp, #24
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8006538:	792b      	ldrb	r3, [r5, #4]
 800653a:	2b06      	cmp	r3, #6
 800653c:	d1f6      	bne.n	800652c <etharp_input+0x18>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800653e:	796b      	ldrb	r3, [r5, #5]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d1f3      	bne.n	800652c <etharp_input+0x18>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8006544:	886b      	ldrh	r3, [r5, #2]
 8006546:	2b08      	cmp	r3, #8
 8006548:	d1f0      	bne.n	800652c <etharp_input+0x18>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800654a:	684f      	ldr	r7, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800654c:	f8d5 000e 	ldr.w	r0, [r5, #14]
 8006550:	9005      	str	r0, [sp, #20]
 8006552:	460e      	mov	r6, r1
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8006554:	69ab      	ldr	r3, [r5, #24]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006556:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800655a:	2f00      	cmp	r7, #0
 800655c:	d071      	beq.n	8006642 <etharp_input+0x12e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800655e:	42bb      	cmp	r3, r7
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8006560:	bf0d      	iteet	eq
 8006562:	2701      	moveq	r7, #1
 8006564:	2700      	movne	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006566:	f04f 0902 	movne.w	r9, #2
 800656a:	46b9      	moveq	r9, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800656c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8006570:	2b06      	cmp	r3, #6
 8006572:	d007      	beq.n	8006584 <etharp_input+0x70>
 8006574:	4b34      	ldr	r3, [pc, #208]	; (8006648 <etharp_input+0x134>)
 8006576:	4935      	ldr	r1, [pc, #212]	; (800664c <etharp_input+0x138>)
 8006578:	4835      	ldr	r0, [pc, #212]	; (8006650 <etharp_input+0x13c>)
 800657a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800657e:	f007 fd2d 	bl	800dfdc <iprintf>
 8006582:	9805      	ldr	r0, [sp, #20]
  if (ip4_addr_isany(ipaddr) ||
 8006584:	2800      	cmp	r0, #0
 8006586:	d03e      	beq.n	8006606 <etharp_input+0xf2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006588:	4631      	mov	r1, r6
 800658a:	f000 fd6f 	bl	800706c <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800658e:	4682      	mov	sl, r0
 8006590:	bbc8      	cbnz	r0, 8006606 <etharp_input+0xf2>
      ip4_addr_ismulticast(ipaddr)) {
 8006592:	9b05      	ldr	r3, [sp, #20]
 8006594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006598:	2be0      	cmp	r3, #224	; 0xe0
 800659a:	d034      	beq.n	8006606 <etharp_input+0xf2>
  i = etharp_find_entry(ipaddr, flags, netif);
 800659c:	4649      	mov	r1, r9
 800659e:	a805      	add	r0, sp, #20
 80065a0:	f7ff fa94 	bl	8005acc <etharp_find_entry.isra.0>
  if (i < 0) {
 80065a4:	2800      	cmp	r0, #0
 80065a6:	db2e      	blt.n	8006606 <etharp_input+0xf2>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80065a8:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8006658 <etharp_input+0x144>
 80065ac:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80065b0:	00c9      	lsls	r1, r1, #3
 80065b2:	eb0e 0201 	add.w	r2, lr, r1
 80065b6:	f04f 0902 	mov.w	r9, #2
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80065ba:	2318      	movs	r3, #24
 80065bc:	f04f 0c0c 	mov.w	ip, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 80065c0:	f882 9014 	strb.w	r9, [r2, #20]
  arp_table[i].netif = netif;
 80065c4:	6096      	str	r6, [r2, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80065c6:	fb13 c300 	smlabb	r3, r3, r0, ip
 80065ca:	f8d8 0000 	ldr.w	r0, [r8]
 80065ce:	f84e 0003 	str.w	r0, [lr, r3]
 80065d2:	4473      	add	r3, lr
 80065d4:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80065d8:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 80065da:	f85e 9001 	ldr.w	r9, [lr, r1]
  arp_table[i].ctime = 0;
 80065de:	f8a2 a012 	strh.w	sl, [r2, #18]
  if (arp_table[i].q != NULL) {
 80065e2:	f1b9 0f00 	cmp.w	r9, #0
 80065e6:	d00e      	beq.n	8006606 <etharp_input+0xf2>
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80065e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	f106 0225 	add.w	r2, r6, #37	; 0x25
    arp_table[i].q = NULL;
 80065f2:	f84e a001 	str.w	sl, [lr, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80065f6:	4643      	mov	r3, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	4630      	mov	r0, r6
 80065fc:	f006 fea6 	bl	800d34c <ethernet_output>
    pbuf_free(p);
 8006600:	4648      	mov	r0, r9
 8006602:	f001 fe67 	bl	80082d4 <pbuf_free>
  switch (hdr->opcode) {
 8006606:	88eb      	ldrh	r3, [r5, #6]
 8006608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660c:	d18e      	bne.n	800652c <etharp_input+0x18>
    if (for_us) {
 800660e:	2f00      	cmp	r7, #0
 8006610:	d08c      	beq.n	800652c <etharp_input+0x18>
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006612:	1d30      	adds	r0, r6, #4
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006614:	f106 0325 	add.w	r3, r6, #37	; 0x25
      etharp_raw(netif,
 8006618:	2702      	movs	r7, #2
 800661a:	ad05      	add	r5, sp, #20
 800661c:	9000      	str	r0, [sp, #0]
 800661e:	f8cd 8004 	str.w	r8, [sp, #4]
 8006622:	4642      	mov	r2, r8
 8006624:	4619      	mov	r1, r3
 8006626:	9703      	str	r7, [sp, #12]
 8006628:	9502      	str	r5, [sp, #8]
 800662a:	4630      	mov	r0, r6
 800662c:	f7ff f958 	bl	80058e0 <etharp_raw>
 8006630:	e77c      	b.n	800652c <etharp_input+0x18>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <etharp_input+0x134>)
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <etharp_input+0x140>)
 8006636:	4806      	ldr	r0, [pc, #24]	; (8006650 <etharp_input+0x13c>)
 8006638:	f44f 7222 	mov.w	r2, #648	; 0x288
 800663c:	f007 fcce 	bl	800dfdc <iprintf>
 8006640:	e777      	b.n	8006532 <etharp_input+0x1e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006642:	f04f 0902 	mov.w	r9, #2
 8006646:	e791      	b.n	800656c <etharp_input+0x58>
 8006648:	08011090 	.word	0x08011090
 800664c:	08011014 	.word	0x08011014
 8006650:	0800e670 	.word	0x0800e670
 8006654:	080110c8 	.word	0x080110c8
 8006658:	20003d88 	.word	0x20003d88

0800665c <etharp_query>:
{
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	460c      	mov	r4, r1
 8006662:	b085      	sub	sp, #20
 8006664:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006666:	4601      	mov	r1, r0
 8006668:	6820      	ldr	r0, [r4, #0]
{
 800666a:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800666c:	f000 fcfe 	bl	800706c <ip4_addr_isbroadcast_u32>
 8006670:	2800      	cmp	r0, #0
 8006672:	d170      	bne.n	8006756 <etharp_query+0xfa>
      ip4_addr_ismulticast(ipaddr) ||
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800667a:	2ae0      	cmp	r2, #224	; 0xe0
 800667c:	d06b      	beq.n	8006756 <etharp_query+0xfa>
      ip4_addr_isany(ipaddr)) {
 800667e:	2b00      	cmp	r3, #0
 8006680:	d069      	beq.n	8006756 <etharp_query+0xfa>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006682:	2101      	movs	r1, #1
 8006684:	4620      	mov	r0, r4
 8006686:	f7ff fa21 	bl	8005acc <etharp_find_entry.isra.0>
  if (i < 0) {
 800668a:	1e05      	subs	r5, r0, #0
 800668c:	db42      	blt.n	8006714 <etharp_query+0xb8>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800668e:	ea4f 0945 	mov.w	r9, r5, lsl #1
 8006692:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80067ec <etharp_query+0x190>
 8006696:	eb09 0a05 	add.w	sl, r9, r5
 800669a:	eb08 0aca 	add.w	sl, r8, sl, lsl #3
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800669e:	f107 0b25 	add.w	fp, r7, #37	; 0x25
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80066a2:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80066a6:	b14b      	cbz	r3, 80066bc <etharp_query+0x60>
  if (is_new_entry || (q == NULL)) {
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	d075      	beq.n	8006798 <etharp_query+0x13c>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80066ac:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80066b2:	d81c      	bhi.n	80066ee <etharp_query+0x92>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80066b4:	d032      	beq.n	800671c <etharp_query+0xc0>
}
 80066b6:	b005      	add	sp, #20
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80066bc:	f04f 0e01 	mov.w	lr, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80066c0:	4a46      	ldr	r2, [pc, #280]	; (80067dc <etharp_query+0x180>)
 80066c2:	9201      	str	r2, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80066c4:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	9402      	str	r4, [sp, #8]
 80066ca:	f8cd e00c 	str.w	lr, [sp, #12]
 80066ce:	465b      	mov	r3, fp
 80066d0:	4a43      	ldr	r2, [pc, #268]	; (80067e0 <etharp_query+0x184>)
    arp_table[i].netif = netif;
 80066d2:	f8ca 7008 	str.w	r7, [sl, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80066d6:	4659      	mov	r1, fp
 80066d8:	4638      	mov	r0, r7
    arp_table[i].state = ETHARP_STATE_PENDING;
 80066da:	f88a e014 	strb.w	lr, [sl, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80066de:	f7ff f8ff 	bl	80058e0 <etharp_raw>
    if (q == NULL) {
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	d0e7      	beq.n	80066b6 <etharp_query+0x5a>
 80066e6:	f89a 3014 	ldrb.w	r3, [sl, #20]
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d9e2      	bls.n	80066b4 <etharp_query+0x58>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80066ee:	220c      	movs	r2, #12
    ETHARP_SET_HINT(netif, i);
 80066f0:	4c3c      	ldr	r4, [pc, #240]	; (80067e4 <etharp_query+0x188>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80066f2:	2318      	movs	r3, #24
 80066f4:	fb13 2305 	smlabb	r3, r3, r5, r2
 80066f8:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 80066fc:	f8cd e000 	str.w	lr, [sp]
 8006700:	465a      	mov	r2, fp
 8006702:	4631      	mov	r1, r6
 8006704:	4638      	mov	r0, r7
 8006706:	4443      	add	r3, r8
    ETHARP_SET_HINT(netif, i);
 8006708:	7025      	strb	r5, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800670a:	f006 fe1f 	bl	800d34c <ethernet_output>
}
 800670e:	b005      	add	sp, #20
 8006710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006714:	4628      	mov	r0, r5
 8006716:	b005      	add	sp, #20
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (p) {
 800671c:	2e00      	cmp	r6, #0
 800671e:	d054      	beq.n	80067ca <etharp_query+0x16e>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006720:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80067f0 <etharp_query+0x194>
 8006724:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80067f4 <etharp_query+0x198>
    while (p) {
 8006728:	4634      	mov	r4, r6
 800672a:	e005      	b.n	8006738 <etharp_query+0xdc>
      if (p->type != PBUF_ROM) {
 800672c:	7b23      	ldrb	r3, [r4, #12]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d151      	bne.n	80067d6 <etharp_query+0x17a>
      p = p->next;
 8006732:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8006734:	2c00      	cmp	r4, #0
 8006736:	d03d      	beq.n	80067b4 <etharp_query+0x158>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006738:	8963      	ldrh	r3, [r4, #10]
 800673a:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 800673e:	4573      	cmp	r3, lr
 8006740:	d1f4      	bne.n	800672c <etharp_query+0xd0>
 8006742:	6827      	ldr	r7, [r4, #0]
 8006744:	4828      	ldr	r0, [pc, #160]	; (80067e8 <etharp_query+0x18c>)
 8006746:	465b      	mov	r3, fp
 8006748:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800674c:	4651      	mov	r1, sl
 800674e:	b13f      	cbz	r7, 8006760 <etharp_query+0x104>
 8006750:	f007 fc44 	bl	800dfdc <iprintf>
 8006754:	e7ea      	b.n	800672c <etharp_query+0xd0>
    return ERR_ARG;
 8006756:	f06f 000f 	mvn.w	r0, #15
}
 800675a:	b005      	add	sp, #20
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (p->type != PBUF_ROM) {
 8006760:	7b23      	ldrb	r3, [r4, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d026      	beq.n	80067b4 <etharp_query+0x158>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8006766:	4671      	mov	r1, lr
 8006768:	2200      	movs	r2, #0
 800676a:	2002      	movs	r0, #2
 800676c:	f001 fe20 	bl	80083b0 <pbuf_alloc>
      if (p != NULL) {
 8006770:	4604      	mov	r4, r0
 8006772:	b368      	cbz	r0, 80067d0 <etharp_query+0x174>
        if (pbuf_copy(p, q) != ERR_OK) {
 8006774:	4631      	mov	r1, r6
 8006776:	f002 f837 	bl	80087e8 <pbuf_copy>
 800677a:	bb00      	cbnz	r0, 80067be <etharp_query+0x162>
      if (arp_table[i].q != NULL) {
 800677c:	eb09 0305 	add.w	r3, r9, r5
 8006780:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 8006784:	b108      	cbz	r0, 800678a <etharp_query+0x12e>
        pbuf_free(arp_table[i].q);
 8006786:	f001 fda5 	bl	80082d4 <pbuf_free>
      arp_table[i].q = p;
 800678a:	444d      	add	r5, r9
      result = ERR_OK;
 800678c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800678e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
}
 8006792:	b005      	add	sp, #20
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006798:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800679a:	2101      	movs	r1, #1
 800679c:	4a0f      	ldr	r2, [pc, #60]	; (80067dc <etharp_query+0x180>)
 800679e:	9103      	str	r1, [sp, #12]
 80067a0:	9201      	str	r2, [sp, #4]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	9402      	str	r4, [sp, #8]
 80067a6:	4638      	mov	r0, r7
 80067a8:	465b      	mov	r3, fp
 80067aa:	4659      	mov	r1, fp
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <etharp_query+0x184>)
 80067ae:	f7ff f897 	bl	80058e0 <etharp_raw>
 80067b2:	e780      	b.n	80066b6 <etharp_query+0x5a>
      pbuf_ref(p);
 80067b4:	4630      	mov	r0, r6
 80067b6:	f001 ffb9 	bl	800872c <pbuf_ref>
 80067ba:	4634      	mov	r4, r6
 80067bc:	e7de      	b.n	800677c <etharp_query+0x120>
          pbuf_free(p);
 80067be:	4620      	mov	r0, r4
 80067c0:	f001 fd88 	bl	80082d4 <pbuf_free>
      result = ERR_MEM;
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e775      	b.n	80066b6 <etharp_query+0x5a>
      pbuf_ref(p);
 80067ca:	4630      	mov	r0, r6
 80067cc:	f001 ffae 	bl	800872c <pbuf_ref>
      result = ERR_MEM;
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e76f      	b.n	80066b6 <etharp_query+0x5a>
 80067d6:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 80067da:	e7c4      	b.n	8006766 <etharp_query+0x10a>
 80067dc:	08012764 	.word	0x08012764
 80067e0:	080126f0 	.word	0x080126f0
 80067e4:	20003e78 	.word	0x20003e78
 80067e8:	0800e670 	.word	0x0800e670
 80067ec:	20003d88 	.word	0x20003d88
 80067f0:	08011090 	.word	0x08011090
 80067f4:	08011074 	.word	0x08011074

080067f8 <etharp_output>:
{
 80067f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fa:	460e      	mov	r6, r1
 80067fc:	b085      	sub	sp, #20
 80067fe:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006800:	4604      	mov	r4, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	f000 809d 	beq.w	8006942 <etharp_output+0x14a>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006808:	2e00      	cmp	r6, #0
 800680a:	f000 8092 	beq.w	8006932 <etharp_output+0x13a>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800680e:	2d00      	cmp	r5, #0
 8006810:	f000 80c1 	beq.w	8006996 <etharp_output+0x19e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006814:	4621      	mov	r1, r4
 8006816:	6828      	ldr	r0, [r5, #0]
 8006818:	f000 fc28 	bl	800706c <ip4_addr_isbroadcast_u32>
 800681c:	2800      	cmp	r0, #0
 800681e:	d17c      	bne.n	800691a <etharp_output+0x122>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006820:	6829      	ldr	r1, [r5, #0]
 8006822:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 8006826:	2be0      	cmp	r3, #224	; 0xe0
 8006828:	f000 8096 	beq.w	8006958 <etharp_output+0x160>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	68a2      	ldr	r2, [r4, #8]
 8006830:	404b      	eors	r3, r1
 8006832:	4213      	tst	r3, r2
 8006834:	d00a      	beq.n	800684c <etharp_output+0x54>
        !ip4_addr_islinklocal(ipaddr)) {
 8006836:	b28a      	uxth	r2, r1
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006838:	f64f 63a9 	movw	r3, #65193	; 0xfea9
 800683c:	429a      	cmp	r2, r3
 800683e:	d005      	beq.n	800684c <etharp_output+0x54>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8006840:	68e1      	ldr	r1, [r4, #12]
 8006842:	2900      	cmp	r1, #0
 8006844:	f000 80c4 	beq.w	80069d0 <etharp_output+0x1d8>
            dst_addr = netif_ip4_gw(netif);
 8006848:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800684c:	4f62      	ldr	r7, [pc, #392]	; (80069d8 <etharp_output+0x1e0>)
 800684e:	4b63      	ldr	r3, [pc, #396]	; (80069dc <etharp_output+0x1e4>)
 8006850:	783a      	ldrb	r2, [r7, #0]
 8006852:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8006856:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800685a:	f890 e014 	ldrb.w	lr, [r0, #20]
 800685e:	f1be 0f01 	cmp.w	lr, #1
 8006862:	d903      	bls.n	800686c <etharp_output+0x74>
 8006864:	6840      	ldr	r0, [r0, #4]
 8006866:	4281      	cmp	r1, r0
 8006868:	f000 809d 	beq.w	80069a6 <etharp_output+0x1ae>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800686c:	7d1a      	ldrb	r2, [r3, #20]
 800686e:	2a01      	cmp	r2, #1
 8006870:	d903      	bls.n	800687a <etharp_output+0x82>
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	4291      	cmp	r1, r2
 8006876:	f000 809b 	beq.w	80069b0 <etharp_output+0x1b8>
 800687a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800687e:	2a01      	cmp	r2, #1
 8006880:	d903      	bls.n	800688a <etharp_output+0x92>
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	4291      	cmp	r1, r2
 8006886:	f000 8095 	beq.w	80069b4 <etharp_output+0x1bc>
 800688a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800688e:	2a01      	cmp	r2, #1
 8006890:	d903      	bls.n	800689a <etharp_output+0xa2>
 8006892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006894:	4291      	cmp	r1, r2
 8006896:	f000 808f 	beq.w	80069b8 <etharp_output+0x1c0>
 800689a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800689e:	2a01      	cmp	r2, #1
 80068a0:	d903      	bls.n	80068aa <etharp_output+0xb2>
 80068a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068a4:	4291      	cmp	r1, r2
 80068a6:	f000 8089 	beq.w	80069bc <etharp_output+0x1c4>
 80068aa:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80068ae:	2a01      	cmp	r2, #1
 80068b0:	d903      	bls.n	80068ba <etharp_output+0xc2>
 80068b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80068b4:	4291      	cmp	r1, r2
 80068b6:	f000 8083 	beq.w	80069c0 <etharp_output+0x1c8>
 80068ba:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80068be:	2a01      	cmp	r2, #1
 80068c0:	d902      	bls.n	80068c8 <etharp_output+0xd0>
 80068c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80068c4:	4291      	cmp	r1, r2
 80068c6:	d07f      	beq.n	80069c8 <etharp_output+0x1d0>
 80068c8:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80068cc:	2a01      	cmp	r2, #1
 80068ce:	d903      	bls.n	80068d8 <etharp_output+0xe0>
 80068d0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80068d4:	4291      	cmp	r1, r2
 80068d6:	d075      	beq.n	80069c4 <etharp_output+0x1cc>
 80068d8:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 80068dc:	2a01      	cmp	r2, #1
 80068de:	d903      	bls.n	80068e8 <etharp_output+0xf0>
 80068e0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80068e4:	4291      	cmp	r1, r2
 80068e6:	d071      	beq.n	80069cc <etharp_output+0x1d4>
 80068e8:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 80068ec:	2a01      	cmp	r2, #1
 80068ee:	d903      	bls.n	80068f8 <etharp_output+0x100>
 80068f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80068f4:	4291      	cmp	r1, r2
 80068f6:	d044      	beq.n	8006982 <etharp_output+0x18a>
 80068f8:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 80068fc:	2a01      	cmp	r2, #1
 80068fe:	d905      	bls.n	800690c <etharp_output+0x114>
 8006900:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006904:	4299      	cmp	r1, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006906:	bf08      	it	eq
 8006908:	2309      	moveq	r3, #9
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800690a:	d03b      	beq.n	8006984 <etharp_output+0x18c>
    return etharp_query(netif, dst_addr, q);
 800690c:	4632      	mov	r2, r6
 800690e:	4629      	mov	r1, r5
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff fea3 	bl	800665c <etharp_query>
}
 8006916:	b005      	add	sp, #20
 8006918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 800691a:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <etharp_output+0x1e8>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800691c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006920:	9200      	str	r2, [sp, #0]
 8006922:	4631      	mov	r1, r6
 8006924:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8006928:	4620      	mov	r0, r4
 800692a:	f006 fd0f 	bl	800d34c <ethernet_output>
}
 800692e:	b005      	add	sp, #20
 8006930:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 8006932:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <etharp_output+0x1ec>)
 8006934:	492c      	ldr	r1, [pc, #176]	; (80069e8 <etharp_output+0x1f0>)
 8006936:	482d      	ldr	r0, [pc, #180]	; (80069ec <etharp_output+0x1f4>)
 8006938:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800693c:	f007 fb4e 	bl	800dfdc <iprintf>
 8006940:	e765      	b.n	800680e <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006942:	4b28      	ldr	r3, [pc, #160]	; (80069e4 <etharp_output+0x1ec>)
 8006944:	492a      	ldr	r1, [pc, #168]	; (80069f0 <etharp_output+0x1f8>)
 8006946:	4829      	ldr	r0, [pc, #164]	; (80069ec <etharp_output+0x1f4>)
 8006948:	f240 321b 	movw	r2, #795	; 0x31b
 800694c:	f007 fb46 	bl	800dfdc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006950:	2e00      	cmp	r6, #0
 8006952:	f47f af5c 	bne.w	800680e <etharp_output+0x16>
 8006956:	e7ec      	b.n	8006932 <etharp_output+0x13a>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006958:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800695a:	78a9      	ldrb	r1, [r5, #2]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800695c:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800695e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006966:	2501      	movs	r5, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006968:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800696a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800696e:	f88d 5008 	strb.w	r5, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006972:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006976:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800697a:	f88d 200d 	strb.w	r2, [sp, #13]
    dest = &mcastaddr;
 800697e:	ab02      	add	r3, sp, #8
 8006980:	e7cc      	b.n	800691c <etharp_output+0x124>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006982:	2308      	movs	r3, #8
        ETHARP_SET_HINT(netif, i);
 8006984:	b2db      	uxtb	r3, r3
        return etharp_output_to_arp_index(netif, q, i);
 8006986:	461a      	mov	r2, r3
 8006988:	4631      	mov	r1, r6
 800698a:	4620      	mov	r0, r4
        ETHARP_SET_HINT(netif, i);
 800698c:	703b      	strb	r3, [r7, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800698e:	f7ff f819 	bl	80059c4 <etharp_output_to_arp_index>
}
 8006992:	b005      	add	sp, #20
 8006994:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <etharp_output+0x1ec>)
 8006998:	4916      	ldr	r1, [pc, #88]	; (80069f4 <etharp_output+0x1fc>)
 800699a:	4814      	ldr	r0, [pc, #80]	; (80069ec <etharp_output+0x1f4>)
 800699c:	f240 321d 	movw	r2, #797	; 0x31d
 80069a0:	f007 fb1c 	bl	800dfdc <iprintf>
 80069a4:	e736      	b.n	8006814 <etharp_output+0x1c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80069a6:	4631      	mov	r1, r6
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7ff f80b 	bl	80059c4 <etharp_output_to_arp_index>
 80069ae:	e7b2      	b.n	8006916 <etharp_output+0x11e>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80069b0:	2300      	movs	r3, #0
 80069b2:	e7e7      	b.n	8006984 <etharp_output+0x18c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80069b4:	2301      	movs	r3, #1
 80069b6:	e7e5      	b.n	8006984 <etharp_output+0x18c>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e7e3      	b.n	8006984 <etharp_output+0x18c>
 80069bc:	2303      	movs	r3, #3
 80069be:	e7e1      	b.n	8006984 <etharp_output+0x18c>
 80069c0:	2304      	movs	r3, #4
 80069c2:	e7df      	b.n	8006984 <etharp_output+0x18c>
 80069c4:	2306      	movs	r3, #6
 80069c6:	e7dd      	b.n	8006984 <etharp_output+0x18c>
 80069c8:	2305      	movs	r3, #5
 80069ca:	e7db      	b.n	8006984 <etharp_output+0x18c>
 80069cc:	2307      	movs	r3, #7
 80069ce:	e7d9      	b.n	8006984 <etharp_output+0x18c>
            return ERR_RTE;
 80069d0:	f06f 0003 	mvn.w	r0, #3
 80069d4:	e79f      	b.n	8006916 <etharp_output+0x11e>
 80069d6:	bf00      	nop
 80069d8:	20003e78 	.word	0x20003e78
 80069dc:	20003d88 	.word	0x20003d88
 80069e0:	080126f0 	.word	0x080126f0
 80069e4:	08011090 	.word	0x08011090
 80069e8:	08011038 	.word	0x08011038
 80069ec:	0800e670 	.word	0x0800e670
 80069f0:	080110c8 	.word	0x080110c8
 80069f4:	08010ff4 	.word	0x08010ff4

080069f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069fc:	4605      	mov	r5, r0
 80069fe:	b082      	sub	sp, #8
 8006a00:	460f      	mov	r7, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a02:	f100 0825 	add.w	r8, r0, #37	; 0x25
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d050      	beq.n	8006aac <etharp_request+0xb4>
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	211c      	movs	r1, #28
 8006a0e:	2002      	movs	r0, #2
 8006a10:	f001 fcce 	bl	80083b0 <pbuf_alloc>
  if (p == NULL) {
 8006a14:	4606      	mov	r6, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d050      	beq.n	8006abc <etharp_request+0xc4>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006a1a:	8943      	ldrh	r3, [r0, #10]
 8006a1c:	2b1b      	cmp	r3, #27
 8006a1e:	d93d      	bls.n	8006a9c <etharp_request+0xa4>
  hdr->opcode = lwip_htons(opcode);
 8006a20:	2001      	movs	r0, #1
  hdr = (struct etharp_hdr *)p->payload;
 8006a22:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8006a24:	f7fe ff44 	bl	80058b0 <lwip_htons>
 8006a28:	80e0      	strh	r0, [r4, #6]
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006a2a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d006      	beq.n	8006a40 <etharp_request+0x48>
 8006a32:	4b24      	ldr	r3, [pc, #144]	; (8006ac4 <etharp_request+0xcc>)
 8006a34:	4924      	ldr	r1, [pc, #144]	; (8006ac8 <etharp_request+0xd0>)
 8006a36:	4825      	ldr	r0, [pc, #148]	; (8006acc <etharp_request+0xd4>)
 8006a38:	f240 426b 	movw	r2, #1131	; 0x46b
 8006a3c:	f007 face 	bl	800dfdc <iprintf>
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8006a40:	f8d8 2000 	ldr.w	r2, [r8]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8006a44:	4b22      	ldr	r3, [pc, #136]	; (8006ad0 <etharp_request+0xd8>)
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8006a46:	60a2      	str	r2, [r4, #8]
 8006a48:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	889b      	ldrh	r3, [r3, #4]
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8006a50:	81a1      	strh	r1, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8006a52:	f8c4 2012 	str.w	r2, [r4, #18]
 8006a56:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8006a58:	686b      	ldr	r3, [r5, #4]
 8006a5a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	61a3      	str	r3, [r4, #24]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006a62:	2108      	movs	r1, #8
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006a64:	2301      	movs	r3, #1
 8006a66:	2700      	movs	r7, #0
  hdr->hwlen = ETH_HWADDR_LEN;
 8006a68:	f04f 0e06 	mov.w	lr, #6
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006a6c:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006a6e:	70a1      	strb	r1, [r4, #2]
  hdr->protolen = sizeof(ip4_addr_t);
 8006a70:	2304      	movs	r3, #4
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006a72:	f640 0106 	movw	r1, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 8006a76:	f884 e004 	strb.w	lr, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006a7a:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006a7c:	4642      	mov	r2, r8
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8006a7e:	7027      	strb	r7, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006a80:	70e7      	strb	r7, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006a82:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <etharp_request+0xdc>)
 8006a84:	9100      	str	r1, [sp, #0]
 8006a86:	4628      	mov	r0, r5
 8006a88:	4631      	mov	r1, r6
 8006a8a:	f006 fc5f 	bl	800d34c <ethernet_output>
  pbuf_free(p);
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f001 fc20 	bl	80082d4 <pbuf_free>
  return result;
 8006a94:	4638      	mov	r0, r7
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8006a96:	b002      	add	sp, #8
 8006a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <etharp_request+0xcc>)
 8006a9e:	490e      	ldr	r1, [pc, #56]	; (8006ad8 <etharp_request+0xe0>)
 8006aa0:	480a      	ldr	r0, [pc, #40]	; (8006acc <etharp_request+0xd4>)
 8006aa2:	f240 4264 	movw	r2, #1124	; 0x464
 8006aa6:	f007 fa99 	bl	800dfdc <iprintf>
 8006aaa:	e7b9      	b.n	8006a20 <etharp_request+0x28>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <etharp_request+0xcc>)
 8006aae:	490b      	ldr	r1, [pc, #44]	; (8006adc <etharp_request+0xe4>)
 8006ab0:	4806      	ldr	r0, [pc, #24]	; (8006acc <etharp_request+0xd4>)
 8006ab2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8006ab6:	f007 fa91 	bl	800dfdc <iprintf>
 8006aba:	e7a6      	b.n	8006a0a <etharp_request+0x12>
    return ERR_MEM;
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e7e9      	b.n	8006a96 <etharp_request+0x9e>
 8006ac2:	bf00      	nop
 8006ac4:	08011090 	.word	0x08011090
 8006ac8:	0801110c 	.word	0x0801110c
 8006acc:	0800e670 	.word	0x0800e670
 8006ad0:	08012764 	.word	0x08012764
 8006ad4:	080126f0 	.word	0x080126f0
 8006ad8:	080110d8 	.word	0x080110d8
 8006adc:	080110c8 	.word	0x080110c8

08006ae0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8006ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8006ae4:	4e42      	ldr	r6, [pc, #264]	; (8006bf0 <icmp_input+0x110>)
 8006ae6:	68b7      	ldr	r7, [r6, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8006ae8:	783c      	ldrb	r4, [r7, #0]
 8006aea:	f004 040f 	and.w	r4, r4, #15
 8006aee:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8006af0:	2c13      	cmp	r4, #19
{
 8006af2:	b085      	sub	sp, #20
 8006af4:	4605      	mov	r5, r0
  if (hlen < IP_HLEN) {
 8006af6:	d93b      	bls.n	8006b70 <icmp_input+0x90>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8006af8:	8943      	ldrh	r3, [r0, #10]
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d938      	bls.n	8006b70 <icmp_input+0x90>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8006afe:	6843      	ldr	r3, [r0, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d134      	bne.n	8006b70 <icmp_input+0x90>
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006b06:	6970      	ldr	r0, [r6, #20]
 8006b08:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8006b0c:	2be0      	cmp	r3, #224	; 0xe0
 8006b0e:	d02f      	beq.n	8006b70 <icmp_input+0x90>
 8006b10:	4688      	mov	r8, r1
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006b12:	6831      	ldr	r1, [r6, #0]
 8006b14:	f000 faaa 	bl	800706c <ip4_addr_isbroadcast_u32>
 8006b18:	4681      	mov	r9, r0
 8006b1a:	bb48      	cbnz	r0, 8006b70 <icmp_input+0x90>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006b1c:	892b      	ldrh	r3, [r5, #8]
 8006b1e:	2b07      	cmp	r3, #7
 8006b20:	d926      	bls.n	8006b70 <icmp_input+0x90>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006b22:	f104 010e 	add.w	r1, r4, #14
 8006b26:	4628      	mov	r0, r5
 8006b28:	f001 fb20 	bl	800816c <pbuf_header>
 8006b2c:	b330      	cbz	r0, 8006b7c <icmp_input+0x9c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8006b2e:	8929      	ldrh	r1, [r5, #8]
 8006b30:	4421      	add	r1, r4
 8006b32:	464a      	mov	r2, r9
 8006b34:	b289      	uxth	r1, r1
 8006b36:	2002      	movs	r0, #2
 8006b38:	f001 fc3a 	bl	80083b0 <pbuf_alloc>
      if (r == NULL) {
 8006b3c:	4681      	mov	r9, r0
 8006b3e:	b1b8      	cbz	r0, 8006b70 <icmp_input+0x90>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006b40:	8942      	ldrh	r2, [r0, #10]
 8006b42:	f104 0308 	add.w	r3, r4, #8
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d343      	bcc.n	8006bd2 <icmp_input+0xf2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
        goto icmperr;
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	6840      	ldr	r0, [r0, #4]
 8006b50:	f007 fcef 	bl	800e532 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8006b54:	4261      	negs	r1, r4
 8006b56:	4648      	mov	r0, r9
 8006b58:	f001 fb08 	bl	800816c <pbuf_header>
 8006b5c:	b398      	cbz	r0, 8006bc6 <icmp_input+0xe6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006b5e:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <icmp_input+0x114>)
 8006b60:	4925      	ldr	r1, [pc, #148]	; (8006bf8 <icmp_input+0x118>)
 8006b62:	4826      	ldr	r0, [pc, #152]	; (8006bfc <icmp_input+0x11c>)
 8006b64:	22af      	movs	r2, #175	; 0xaf
 8006b66:	f007 fa39 	bl	800dfdc <iprintf>
        pbuf_free(r);
 8006b6a:	4648      	mov	r0, r9
 8006b6c:	f001 fbb2 	bl	80082d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8006b70:	4628      	mov	r0, r5
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8006b72:	b005      	add	sp, #20
 8006b74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8006b78:	f001 bbac 	b.w	80082d4 <pbuf_free>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006b7c:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8006b80:	31f2      	adds	r1, #242	; 0xf2
 8006b82:	b209      	sxth	r1, r1
 8006b84:	4628      	mov	r0, r5
 8006b86:	f001 faf1 	bl	800816c <pbuf_header>
 8006b8a:	bb28      	cbnz	r0, 8006bd8 <icmp_input+0xf8>
    if (pbuf_header(p, (s16_t)hlen)) {
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
    iecho = (struct icmp_echo_hdr *)p->payload;
 8006b90:	686c      	ldr	r4, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8006b92:	f001 faeb 	bl	800816c <pbuf_header>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d1ea      	bne.n	8006b70 <icmp_input+0x90>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8006b9a:	686a      	ldr	r2, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8006b9c:	6971      	ldr	r1, [r6, #20]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006b9e:	6933      	ldr	r3, [r6, #16]
      ip4_addr_copy(iphdr->src, *src);
 8006ba0:	60d1      	str	r1, [r2, #12]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006ba2:	2601      	movs	r6, #1
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8006ba4:	21ff      	movs	r1, #255	; 0xff
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006ba6:	6113      	str	r3, [r2, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006ba8:	7020      	strb	r0, [r4, #0]
      iecho->chksum = 0;
 8006baa:	70a0      	strb	r0, [r4, #2]
 8006bac:	70e0      	strb	r0, [r4, #3]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006bae:	460b      	mov	r3, r1
      IPH_CHKSUM_SET(iphdr, 0);
 8006bb0:	7290      	strb	r0, [r2, #10]
 8006bb2:	72d0      	strb	r0, [r2, #11]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8006bb4:	7211      	strb	r1, [r2, #8]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	e88d 0141 	stmia.w	sp, {r0, r6, r8}
 8006bbc:	4910      	ldr	r1, [pc, #64]	; (8006c00 <icmp_input+0x120>)
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 f9c6 	bl	8006f50 <ip4_output_if>
 8006bc4:	e7d4      	b.n	8006b70 <icmp_input+0x90>
      if (pbuf_copy(r, p) != ERR_OK) {
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4648      	mov	r0, r9
 8006bca:	f001 fe0d 	bl	80087e8 <pbuf_copy>
 8006bce:	b150      	cbz	r0, 8006be6 <icmp_input+0x106>
        pbuf_free(r);
 8006bd0:	4648      	mov	r0, r9
 8006bd2:	f001 fb7f 	bl	80082d4 <pbuf_free>
        goto icmperr;
 8006bd6:	e7cb      	b.n	8006b70 <icmp_input+0x90>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <icmp_input+0x114>)
 8006bda:	490a      	ldr	r1, [pc, #40]	; (8006c04 <icmp_input+0x124>)
 8006bdc:	4807      	ldr	r0, [pc, #28]	; (8006bfc <icmp_input+0x11c>)
 8006bde:	22c0      	movs	r2, #192	; 0xc0
 8006be0:	f007 f9fc 	bl	800dfdc <iprintf>
        goto icmperr;
 8006be4:	e7c4      	b.n	8006b70 <icmp_input+0x90>
      pbuf_free(p);
 8006be6:	4628      	mov	r0, r5
 8006be8:	f001 fb74 	bl	80082d4 <pbuf_free>
 8006bec:	464d      	mov	r5, r9
 8006bee:	e7cd      	b.n	8006b8c <icmp_input+0xac>
 8006bf0:	20004274 	.word	0x20004274
 8006bf4:	0801117c 	.word	0x0801117c
 8006bf8:	080111b4 	.word	0x080111b4
 8006bfc:	0800e670 	.word	0x0800e670
 8006c00:	20004288 	.word	0x20004288
 8006c04:	080111ec 	.word	0x080111ec

08006c08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8006c08:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006c0a:	2200      	movs	r2, #0
{
 8006c0c:	b087      	sub	sp, #28
 8006c0e:	4607      	mov	r7, r0
 8006c10:	460e      	mov	r6, r1
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006c12:	2001      	movs	r0, #1
 8006c14:	2124      	movs	r1, #36	; 0x24
 8006c16:	f001 fbcb 	bl	80083b0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8006c1a:	b388      	cbz	r0, 8006c80 <icmp_dest_unreach+0x78>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006c1c:	8943      	ldrh	r3, [r0, #10]
 8006c1e:	2b23      	cmp	r3, #35	; 0x23
 8006c20:	4605      	mov	r5, r0
 8006c22:	d92f      	bls.n	8006c84 <icmp_dest_unreach+0x7c>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006c24:	686c      	ldr	r4, [r5, #4]
  iphdr = (struct ip_hdr *)p->payload;
 8006c26:	687b      	ldr	r3, [r7, #4]
  icmphdr->type = type;
  icmphdr->code = code;
 8006c28:	7066      	strb	r6, [r4, #1]
  icmphdr->type = type;
 8006c2a:	2203      	movs	r2, #3
  icmphdr->id = 0;
 8006c2c:	2600      	movs	r6, #0
  icmphdr->type = type;
 8006c2e:	7022      	strb	r2, [r4, #0]
  icmphdr->id = 0;
 8006c30:	6066      	str	r6, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	689f      	ldr	r7, [r3, #8]
 8006c38:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006c3c:	f8c4 e014 	str.w	lr, [r4, #20]
 8006c40:	60a0      	str	r0, [r4, #8]
 8006c42:	60e1      	str	r1, [r4, #12]
 8006c44:	6127      	str	r7, [r4, #16]
 8006c46:	6918      	ldr	r0, [r3, #16]
 8006c48:	699f      	ldr	r7, [r3, #24]
 8006c4a:	6959      	ldr	r1, [r3, #20]
 8006c4c:	61e1      	str	r1, [r4, #28]
 8006c4e:	6227      	str	r7, [r4, #32]
 8006c50:	61a0      	str	r0, [r4, #24]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006c52:	af06      	add	r7, sp, #24
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f000 f86c 	bl	8006d38 <ip4_route>
#endif
  if (netif != NULL) {
 8006c60:	b158      	cbz	r0, 8006c7a <icmp_dest_unreach+0x72>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006c62:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8006c64:	70a6      	strb	r6, [r4, #2]
 8006c66:	70e6      	strb	r6, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006c68:	463a      	mov	r2, r7
 8006c6a:	9002      	str	r0, [sp, #8]
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9600      	str	r6, [sp, #0]
 8006c70:	4631      	mov	r1, r6
 8006c72:	23ff      	movs	r3, #255	; 0xff
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 f96b 	bl	8006f50 <ip4_output_if>
  }
  pbuf_free(q);
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f001 fb2a 	bl	80082d4 <pbuf_free>
}
 8006c80:	b007      	add	sp, #28
 8006c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <icmp_dest_unreach+0x8c>)
 8006c86:	4904      	ldr	r1, [pc, #16]	; (8006c98 <icmp_dest_unreach+0x90>)
 8006c88:	4804      	ldr	r0, [pc, #16]	; (8006c9c <icmp_dest_unreach+0x94>)
 8006c8a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006c8e:	f007 f9a5 	bl	800dfdc <iprintf>
 8006c92:	e7c7      	b.n	8006c24 <icmp_dest_unreach+0x1c>
 8006c94:	0801117c 	.word	0x0801117c
 8006c98:	08011150 	.word	0x08011150
 8006c9c:	0800e670 	.word	0x0800e670

08006ca0 <icmp_time_exceeded>:
{
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006ca2:	2200      	movs	r2, #0
{
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	460e      	mov	r6, r1
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006caa:	2001      	movs	r0, #1
 8006cac:	2124      	movs	r1, #36	; 0x24
 8006cae:	f001 fb7f 	bl	80083b0 <pbuf_alloc>
  if (q == NULL) {
 8006cb2:	b388      	cbz	r0, 8006d18 <icmp_time_exceeded+0x78>
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006cb4:	8943      	ldrh	r3, [r0, #10]
 8006cb6:	2b23      	cmp	r3, #35	; 0x23
 8006cb8:	4605      	mov	r5, r0
 8006cba:	d92f      	bls.n	8006d1c <icmp_time_exceeded+0x7c>
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006cbc:	686c      	ldr	r4, [r5, #4]
  iphdr = (struct ip_hdr *)p->payload;
 8006cbe:	687b      	ldr	r3, [r7, #4]
  icmphdr->code = code;
 8006cc0:	7066      	strb	r6, [r4, #1]
  icmphdr->type = type;
 8006cc2:	220b      	movs	r2, #11
  icmphdr->id = 0;
 8006cc4:	2600      	movs	r6, #0
  icmphdr->type = type;
 8006cc6:	7022      	strb	r2, [r4, #0]
  icmphdr->id = 0;
 8006cc8:	6066      	str	r6, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	689f      	ldr	r7, [r3, #8]
 8006cd0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006cd4:	f8c4 e014 	str.w	lr, [r4, #20]
 8006cd8:	60a0      	str	r0, [r4, #8]
 8006cda:	60e1      	str	r1, [r4, #12]
 8006cdc:	6127      	str	r7, [r4, #16]
 8006cde:	6918      	ldr	r0, [r3, #16]
 8006ce0:	699f      	ldr	r7, [r3, #24]
 8006ce2:	6959      	ldr	r1, [r3, #20]
 8006ce4:	61e1      	str	r1, [r4, #28]
 8006ce6:	6227      	str	r7, [r4, #32]
 8006ce8:	61a0      	str	r0, [r4, #24]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8006cea:	af06      	add	r7, sp, #24
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f847 3d04 	str.w	r3, [r7, #-4]!
  netif = ip4_route(&iphdr_src);
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f000 f820 	bl	8006d38 <ip4_route>
  if (netif != NULL) {
 8006cf8:	b158      	cbz	r0, 8006d12 <icmp_time_exceeded+0x72>
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006cfa:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8006cfc:	70a6      	strb	r6, [r4, #2]
 8006cfe:	70e6      	strb	r6, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006d00:	463a      	mov	r2, r7
 8006d02:	9002      	str	r0, [sp, #8]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	9600      	str	r6, [sp, #0]
 8006d08:	4631      	mov	r1, r6
 8006d0a:	23ff      	movs	r3, #255	; 0xff
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 f91f 	bl	8006f50 <ip4_output_if>
  pbuf_free(q);
 8006d12:	4628      	mov	r0, r5
 8006d14:	f001 fade 	bl	80082d4 <pbuf_free>
}
 8006d18:	b007      	add	sp, #28
 8006d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <icmp_time_exceeded+0x8c>)
 8006d1e:	4904      	ldr	r1, [pc, #16]	; (8006d30 <icmp_time_exceeded+0x90>)
 8006d20:	4804      	ldr	r0, [pc, #16]	; (8006d34 <icmp_time_exceeded+0x94>)
 8006d22:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006d26:	f007 f959 	bl	800dfdc <iprintf>
 8006d2a:	e7c7      	b.n	8006cbc <icmp_time_exceeded+0x1c>
 8006d2c:	0801117c 	.word	0x0801117c
 8006d30:	08011150 	.word	0x08011150
 8006d34:	0800e670 	.word	0x0800e670

08006d38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8006d38:	b430      	push	{r4, r5}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8006d3a:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <ip4_route+0x60>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	b1ab      	cbz	r3, 8006d6c <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006d40:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006d44:	f002 0105 	and.w	r1, r2, #5
 8006d48:	2905      	cmp	r1, #5
 8006d4a:	d1f7      	bne.n	8006d3c <ip4_route+0x4>
 8006d4c:	6859      	ldr	r1, [r3, #4]
 8006d4e:	2900      	cmp	r1, #0
 8006d50:	d0f4      	beq.n	8006d3c <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006d52:	6804      	ldr	r4, [r0, #0]
 8006d54:	689d      	ldr	r5, [r3, #8]
 8006d56:	4061      	eors	r1, r4
 8006d58:	4229      	tst	r1, r5
 8006d5a:	d004      	beq.n	8006d66 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006d5c:	0792      	lsls	r2, r2, #30
 8006d5e:	d4ed      	bmi.n	8006d3c <ip4_route+0x4>
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	4294      	cmp	r4, r2
 8006d64:	d1ea      	bne.n	8006d3c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	bc30      	pop	{r4, r5}
 8006d6a:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <ip4_route+0x64>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f8      	beq.n	8006d66 <ip4_route+0x2e>
 8006d74:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006d78:	f002 0205 	and.w	r2, r2, #5
 8006d7c:	2a05      	cmp	r2, #5
 8006d7e:	d106      	bne.n	8006d8e <ip4_route+0x56>
 8006d80:	685a      	ldr	r2, [r3, #4]
    return NULL;
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	bf08      	it	eq
 8006d86:	2300      	moveq	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bc30      	pop	{r4, r5}
 8006d8c:	4770      	bx	lr
    return NULL;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bc30      	pop	{r4, r5}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	2000888c 	.word	0x2000888c
 8006d9c:	20008890 	.word	0x20008890

08006da0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006da4:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8006da8:	f899 3000 	ldrb.w	r3, [r9]
 8006dac:	091a      	lsrs	r2, r3, #4
 8006dae:	2a04      	cmp	r2, #4
{
 8006db0:	4605      	mov	r5, r0
  if (IPH_V(iphdr) != 4) {
 8006db2:	d005      	beq.n	8006dc0 <ip4_input+0x20>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006db4:	4628      	mov	r0, r5
 8006db6:	f001 fa8d 	bl	80082d4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL(iphdr);
 8006dc0:	f003 030f 	and.w	r3, r3, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006dc4:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  iphdr_hlen *= 4;
 8006dc8:	009f      	lsls	r7, r3, #2
 8006dca:	4688      	mov	r8, r1
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006dcc:	f7fe fd70 	bl	80058b0 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8006dd0:	892b      	ldrh	r3, [r5, #8]
 8006dd2:	4283      	cmp	r3, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006dd4:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8006dd6:	f200 8093 	bhi.w	8006f00 <ip4_input+0x160>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006dda:	896b      	ldrh	r3, [r5, #10]
 8006ddc:	42bb      	cmp	r3, r7
 8006dde:	d3e9      	bcc.n	8006db4 <ip4_input+0x14>
 8006de0:	892b      	ldrh	r3, [r5, #8]
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	d3e6      	bcc.n	8006db4 <ip4_input+0x14>
 8006de6:	2f13      	cmp	r7, #19
 8006de8:	d9e4      	bls.n	8006db4 <ip4_input+0x14>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8006dea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dee:	f8df a158 	ldr.w	sl, [pc, #344]	; 8006f48 <ip4_input+0x1a8>
 8006df2:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006dfa:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8006dfe:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006e02:	2be0      	cmp	r3, #224	; 0xe0
 8006e04:	f000 8089 	beq.w	8006f1a <ip4_input+0x17a>
        netif = netif_list;
 8006e08:	f8df b140 	ldr.w	fp, [pc, #320]	; 8006f4c <ip4_input+0x1ac>
 8006e0c:	4644      	mov	r4, r8
 8006e0e:	2601      	movs	r6, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006e10:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006e14:	07db      	lsls	r3, r3, #31
 8006e16:	d50a      	bpl.n	8006e2e <ip4_input+0x8e>
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	b143      	cbz	r3, 8006e2e <ip4_input+0x8e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006e1c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8006e20:	4283      	cmp	r3, r0
 8006e22:	d077      	beq.n	8006f14 <ip4_input+0x174>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006e24:	4621      	mov	r1, r4
 8006e26:	f000 f921 	bl	800706c <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d172      	bne.n	8006f14 <ip4_input+0x174>
      if (first) {
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	d064      	beq.n	8006efc <ip4_input+0x15c>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8006e32:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8006e36:	2b7f      	cmp	r3, #127	; 0x7f
 8006e38:	d007      	beq.n	8006e4a <ip4_input+0xaa>
        netif = netif_list;
 8006e3a:	f8db 4000 	ldr.w	r4, [fp]
      if (netif == inp) {
 8006e3e:	4544      	cmp	r4, r8
        netif = netif->next;
 8006e40:	bf08      	it	eq
 8006e42:	6824      	ldreq	r4, [r4, #0]
 8006e44:	2600      	movs	r6, #0
    } while (netif != NULL);
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	d1e2      	bne.n	8006e10 <ip4_input+0x70>
 8006e4a:	f8da 0010 	ldr.w	r0, [sl, #16]
          netif = NULL;
 8006e4e:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006e50:	4641      	mov	r1, r8
 8006e52:	f000 f90b 	bl	800706c <ip4_addr_isbroadcast_u32>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d1ac      	bne.n	8006db4 <ip4_input+0x14>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006e5a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006e62:	2be0      	cmp	r3, #224	; 0xe0
 8006e64:	d0a6      	beq.n	8006db4 <ip4_input+0x14>
  if (netif == NULL) {
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d0a4      	beq.n	8006db4 <ip4_input+0x14>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006e6a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8006e6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e72:	b13b      	cbz	r3, 8006e84 <ip4_input+0xe4>
    p = ip4_reass(p);
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 fa53 	bl	8007320 <ip4_reass>
    if (p == NULL) {
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d09c      	beq.n	8006dba <ip4_input+0x1a>
    iphdr = (struct ip_hdr *)p->payload;
 8006e80:	f8d0 9004 	ldr.w	r9, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8006e84:	e88a 0310 	stmia.w	sl, {r4, r8, r9}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006e88:	f899 3000 	ldrb.w	r3, [r9]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006e92:	4279      	negs	r1, r7
 8006e94:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006e96:	f8aa 300c 	strh.w	r3, [sl, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006e9a:	f001 f967 	bl	800816c <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8006e9e:	f899 3009 	ldrb.w	r3, [r9, #9]
 8006ea2:	2b06      	cmp	r3, #6
 8006ea4:	d031      	beq.n	8006f0a <ip4_input+0x16a>
 8006ea6:	2b11      	cmp	r3, #17
 8006ea8:	d048      	beq.n	8006f3c <ip4_input+0x19c>
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d041      	beq.n	8006f32 <ip4_input+0x192>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006eae:	4621      	mov	r1, r4
 8006eb0:	f8da 0014 	ldr.w	r0, [sl, #20]
 8006eb4:	f000 f8da 	bl	800706c <ip4_addr_isbroadcast_u32>
 8006eb8:	b978      	cbnz	r0, 8006eda <ip4_input+0x13a>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006eba:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006ec2:	2be0      	cmp	r3, #224	; 0xe0
 8006ec4:	d009      	beq.n	8006eda <ip4_input+0x13a>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f001 f9a7 	bl	800821c <pbuf_header_force>
        p->payload = iphdr;
 8006ece:	f8c5 9004 	str.w	r9, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f7ff fe97 	bl	8006c08 <icmp_dest_unreach>
      pbuf_free(p);
 8006eda:	4628      	mov	r0, r5
 8006edc:	f001 f9fa 	bl	80082d4 <pbuf_free>
  ip_data.current_netif = NULL;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8ca 3000 	str.w	r3, [sl]
  ip_data.current_input_netif = NULL;
 8006ee6:	f8ca 3004 	str.w	r3, [sl, #4]
  ip_data.current_ip4_header = NULL;
 8006eea:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 8006eee:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8006ef2:	f8ca 3010 	str.w	r3, [sl, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006ef6:	f8ca 3014 	str.w	r3, [sl, #20]
  return ERR_OK;
 8006efa:	e75e      	b.n	8006dba <ip4_input+0x1a>
        netif = netif->next;
 8006efc:	6824      	ldr	r4, [r4, #0]
 8006efe:	e79e      	b.n	8006e3e <ip4_input+0x9e>
    pbuf_realloc(p, iphdr_len);
 8006f00:	4601      	mov	r1, r0
 8006f02:	4628      	mov	r0, r5
 8006f04:	f001 fb7c 	bl	8008600 <pbuf_realloc>
 8006f08:	e767      	b.n	8006dda <ip4_input+0x3a>
      tcp_input(p, inp);
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f003 ff15 	bl	800ad3c <tcp_input>
      break;
 8006f12:	e7e5      	b.n	8006ee0 <ip4_input+0x140>
 8006f14:	f8da 0010 	ldr.w	r0, [sl, #16]
 8006f18:	e79a      	b.n	8006e50 <ip4_input+0xb0>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006f1a:	f898 402b 	ldrb.w	r4, [r8, #43]	; 0x2b
 8006f1e:	f014 0401 	ands.w	r4, r4, #1
 8006f22:	d095      	beq.n	8006e50 <ip4_input+0xb0>
 8006f24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	4644      	movne	r4, r8
 8006f2e:	2400      	moveq	r4, #0
 8006f30:	e78e      	b.n	8006e50 <ip4_input+0xb0>
      icmp_input(p, inp);
 8006f32:	4641      	mov	r1, r8
 8006f34:	4628      	mov	r0, r5
 8006f36:	f7ff fdd3 	bl	8006ae0 <icmp_input>
      break;
 8006f3a:	e7d1      	b.n	8006ee0 <ip4_input+0x140>
      udp_input(p, inp);
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f006 f81c 	bl	800cf7c <udp_input>
      break;
 8006f44:	e7cc      	b.n	8006ee0 <ip4_input+0x140>
 8006f46:	bf00      	nop
 8006f48:	20004274 	.word	0x20004274
 8006f4c:	2000888c 	.word	0x2000888c

08006f50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	b083      	sub	sp, #12
 8006f56:	4605      	mov	r5, r0
 8006f58:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8006f5c:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8006f60:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  if (dest != LWIP_IP_HDRINCL) {
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d05d      	beq.n	8007024 <ip4_output_if+0xd4>
 8006f68:	460f      	mov	r7, r1
 8006f6a:	4699      	mov	r9, r3
 8006f6c:	4616      	mov	r6, r2
    if (ip4_addr_isany(src)) {
 8006f6e:	b109      	cbz	r1, 8006f74 <ip4_output_if+0x24>
 8006f70:	680b      	ldr	r3, [r1, #0]
 8006f72:	b90b      	cbnz	r3, 8006f78 <ip4_output_if+0x28>
      src_used = netif_ip4_addr(netif);
 8006f74:	f108 0704 	add.w	r7, r8, #4
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006f78:	89eb      	ldrh	r3, [r5, #14]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d006      	beq.n	8006f8c <ip4_output_if+0x3c>
 8006f7e:	4b35      	ldr	r3, [pc, #212]	; (8007054 <ip4_output_if+0x104>)
 8006f80:	4935      	ldr	r1, [pc, #212]	; (8007058 <ip4_output_if+0x108>)
 8006f82:	4836      	ldr	r0, [pc, #216]	; (800705c <ip4_output_if+0x10c>)
 8006f84:	f240 3233 	movw	r2, #819	; 0x333
 8006f88:	f007 f828 	bl	800dfdc <iprintf>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006f8c:	2114      	movs	r1, #20
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f001 f8ec 	bl	800816c <pbuf_header>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d151      	bne.n	800703c <ip4_output_if+0xec>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006f98:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8006f9a:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006f9c:	2b13      	cmp	r3, #19
 8006f9e:	d931      	bls.n	8007004 <ip4_output_if+0xb4>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8006fa0:	f884 9008 	strb.w	r9, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006fa4:	f884 b009 	strb.w	fp, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006fa8:	2245      	movs	r2, #69	; 0x45
    ip4_addr_copy(iphdr->dest, *dest);
 8006faa:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006fac:	7022      	strb	r2, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8006fae:	f884 a001 	strb.w	sl, [r4, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 8006fb2:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006fb4:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006fb6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007068 <ip4_output_if+0x118>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006fba:	f7fe fc79 	bl	80058b0 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8006fbe:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006fc0:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8006fc2:	71a3      	strb	r3, [r4, #6]
 8006fc4:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006fc6:	f8b9 0000 	ldrh.w	r0, [r9]
 8006fca:	f7fe fc71 	bl	80058b0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006fce:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006fd2:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8006fda:	b367      	cbz	r7, 8007036 <ip4_output_if+0xe6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	72a3      	strb	r3, [r4, #10]
 8006fe4:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8006fe6:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8006fea:	b113      	cbz	r3, 8006ff2 <ip4_output_if+0xa2>
 8006fec:	892a      	ldrh	r2, [r5, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d810      	bhi.n	8007014 <ip4_output_if+0xc4>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4798      	blx	r3
}
 8006ffe:	b003      	add	sp, #12
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8007004:	4b13      	ldr	r3, [pc, #76]	; (8007054 <ip4_output_if+0x104>)
 8007006:	4916      	ldr	r1, [pc, #88]	; (8007060 <ip4_output_if+0x110>)
 8007008:	4814      	ldr	r0, [pc, #80]	; (800705c <ip4_output_if+0x10c>)
 800700a:	f240 3261 	movw	r2, #865	; 0x361
 800700e:	f006 ffe5 	bl	800dfdc <iprintf>
 8007012:	e7c5      	b.n	8006fa0 <ip4_output_if+0x50>
    return ip4_frag(p, netif, dest);
 8007014:	4632      	mov	r2, r6
 8007016:	4641      	mov	r1, r8
 8007018:	4628      	mov	r0, r5
 800701a:	f000 fbe1 	bl	80077e0 <ip4_frag>
}
 800701e:	b003      	add	sp, #12
 8007020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007024:	89c3      	ldrh	r3, [r0, #14]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d10b      	bne.n	8007042 <ip4_output_if+0xf2>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800702a:	686b      	ldr	r3, [r5, #4]
 800702c:	ae02      	add	r6, sp, #8
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f846 3d04 	str.w	r3, [r6, #-4]!
 8007034:	e7d7      	b.n	8006fe6 <ip4_output_if+0x96>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <ip4_output_if+0x114>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	e7d0      	b.n	8006fde <ip4_output_if+0x8e>
      return ERR_BUF;
 800703c:	f06f 0001 	mvn.w	r0, #1
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007040:	e7dd      	b.n	8006ffe <ip4_output_if+0xae>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007042:	4b04      	ldr	r3, [pc, #16]	; (8007054 <ip4_output_if+0x104>)
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <ip4_output_if+0x108>)
 8007046:	4805      	ldr	r0, [pc, #20]	; (800705c <ip4_output_if+0x10c>)
 8007048:	f240 3233 	movw	r2, #819	; 0x333
 800704c:	f006 ffc6 	bl	800dfdc <iprintf>
 8007050:	e7eb      	b.n	800702a <ip4_output_if+0xda>
 8007052:	bf00      	nop
 8007054:	08011220 	.word	0x08011220
 8007058:	08011284 	.word	0x08011284
 800705c:	0800e670 	.word	0x0800e670
 8007060:	08011254 	.word	0x08011254
 8007064:	08011290 	.word	0x08011290
 8007068:	20003e7a 	.word	0x20003e7a

0800706c <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800706c:	1e43      	subs	r3, r0, #1
 800706e:	3303      	adds	r3, #3
 8007070:	d814      	bhi.n	800709c <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8007072:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8007076:	f013 0302 	ands.w	r3, r3, #2
 800707a:	d00d      	beq.n	8007098 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800707c:	684b      	ldr	r3, [r1, #4]
 800707e:	4298      	cmp	r0, r3
 8007080:	d00a      	beq.n	8007098 <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8007082:	688a      	ldr	r2, [r1, #8]
 8007084:	4043      	eors	r3, r0
 8007086:	4213      	tst	r3, r2
 8007088:	d106      	bne.n	8007098 <ip4_addr_isbroadcast_u32+0x2c>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800708a:	43d2      	mvns	r2, r2
 800708c:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 8007090:	bf0c      	ite	eq
 8007092:	2001      	moveq	r0, #1
 8007094:	2000      	movne	r0, #0
 8007096:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8007098:	2000      	movs	r0, #0
  }
}
 800709a:	4770      	bx	lr
    return 1;
 800709c:	2001      	movs	r0, #1
 800709e:	4770      	bx	lr

080070a0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	b082      	sub	sp, #8
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 80070a6:	ae02      	add	r6, sp, #8
 80070a8:	6803      	ldr	r3, [r0, #0]
 80070aa:	f846 3d04 	str.w	r3, [r6, #-4]!

  rp = buf;
 80070ae:	4d2f      	ldr	r5, [pc, #188]	; (800716c <ip4addr_ntoa+0xcc>)
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 80070b0:	4c2f      	ldr	r4, [pc, #188]	; (8007170 <ip4addr_ntoa+0xd0>)
 80070b2:	f10d 0c08 	add.w	ip, sp, #8
  int len = 0;
 80070b6:	2700      	movs	r7, #0
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 80070b8:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
 80070bc:	f896 8000 	ldrb.w	r8, [r6]
  rp = buf;
 80070c0:	2000      	movs	r0, #0
 80070c2:	e000      	b.n	80070c6 <ip4addr_ntoa+0x26>
      inv[i++] = (char)('0' + rem);
 80070c4:	4610      	mov	r0, r2
      rem = *ap % (u8_t)10;
 80070c6:	fba4 3108 	umull	r3, r1, r4, r8
 80070ca:	08c9      	lsrs	r1, r1, #3
 80070cc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80070d0:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
      inv[i++] = (char)('0' + rem);
 80070d4:	f10d 0808 	add.w	r8, sp, #8
 80070d8:	4480      	add	r8, r0
 80070da:	3330      	adds	r3, #48	; 0x30
 80070dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80070e0:	1c42      	adds	r2, r0, #1
 80070e2:	f808 3c08 	strb.w	r3, [r8, #-8]
 80070e6:	b2d2      	uxtb	r2, r2
    } while (*ap);
 80070e8:	f001 08ff 	and.w	r8, r1, #255	; 0xff
 80070ec:	2900      	cmp	r1, #0
 80070ee:	d1e9      	bne.n	80070c4 <ip4addr_ntoa+0x24>
 80070f0:	f806 8b01 	strb.w	r8, [r6], #1
    while (i--) {
 80070f4:	b32a      	cbz	r2, 8007142 <ip4addr_ntoa+0xa2>
      if (len++ >= buflen) {
 80070f6:	2f0f      	cmp	r7, #15
 80070f8:	f107 0101 	add.w	r1, r7, #1
 80070fc:	dc1d      	bgt.n	800713a <ip4addr_ntoa+0x9a>
    while (i--) {
 80070fe:	1e42      	subs	r2, r0, #1
      *rp++ = inv[i];
 8007100:	702b      	strb	r3, [r5, #0]
    while (i--) {
 8007102:	b2d3      	uxtb	r3, r2
      *rp++ = inv[i];
 8007104:	1c6a      	adds	r2, r5, #1
    while (i--) {
 8007106:	b1f0      	cbz	r0, 8007146 <ip4addr_ntoa+0xa6>
      if (len++ >= buflen) {
 8007108:	290f      	cmp	r1, #15
 800710a:	f107 0802 	add.w	r8, r7, #2
 800710e:	dc14      	bgt.n	800713a <ip4addr_ntoa+0x9a>
      *rp++ = inv[i];
 8007110:	aa02      	add	r2, sp, #8
 8007112:	441a      	add	r2, r3
    while (i--) {
 8007114:	3802      	subs	r0, #2
      *rp++ = inv[i];
 8007116:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800711a:	706a      	strb	r2, [r5, #1]
    while (i--) {
 800711c:	b2c0      	uxtb	r0, r0
      *rp++ = inv[i];
 800711e:	1caa      	adds	r2, r5, #2
    while (i--) {
 8007120:	b30b      	cbz	r3, 8007166 <ip4addr_ntoa+0xc6>
      if (len++ >= buflen) {
 8007122:	f1b8 0f0f 	cmp.w	r8, #15
 8007126:	f107 0103 	add.w	r1, r7, #3
 800712a:	dc06      	bgt.n	800713a <ip4addr_ntoa+0x9a>
      *rp++ = inv[i];
 800712c:	ab02      	add	r3, sp, #8
 800712e:	4403      	add	r3, r0
 8007130:	1cea      	adds	r2, r5, #3
 8007132:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007136:	70ab      	strb	r3, [r5, #2]
    while (i--) {
 8007138:	b128      	cbz	r0, 8007146 <ip4addr_ntoa+0xa6>
        return NULL;
 800713a:	2000      	movs	r0, #0
}
 800713c:	b002      	add	sp, #8
 800713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (i--) {
 8007142:	462a      	mov	r2, r5
 8007144:	4639      	mov	r1, r7
    if (len++ >= buflen) {
 8007146:	290f      	cmp	r1, #15
 8007148:	f101 0701 	add.w	r7, r1, #1
 800714c:	dcf5      	bgt.n	800713a <ip4addr_ntoa+0x9a>
  for (n = 0; n < 4; n++) {
 800714e:	4566      	cmp	r6, ip
    *rp++ = '.';
 8007150:	f882 e000 	strb.w	lr, [r2]
 8007154:	f102 0501 	add.w	r5, r2, #1
  for (n = 0; n < 4; n++) {
 8007158:	d1b0      	bne.n	80070bc <ip4addr_ntoa+0x1c>
    ap++;
  }
  *--rp = 0;
  return buf;
 800715a:	4804      	ldr	r0, [pc, #16]	; (800716c <ip4addr_ntoa+0xcc>)
  *--rp = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	7013      	strb	r3, [r2, #0]
}
 8007160:	b002      	add	sp, #8
 8007162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (len++ >= buflen) {
 8007166:	4641      	mov	r1, r8
 8007168:	e7ed      	b.n	8007146 <ip4addr_ntoa+0xa6>
 800716a:	bf00      	nop
 800716c:	20003e7c 	.word	0x20003e7c
 8007170:	cccccccd 	.word	0xcccccccd

08007174 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8007174:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8007176:	4604      	mov	r4, r0
 8007178:	b148      	cbz	r0, 800718e <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800717a:	6960      	ldr	r0, [r4, #20]
 800717c:	b108      	cbz	r0, 8007182 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800717e:	f001 f8a9 	bl	80082d4 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8007182:	4621      	mov	r1, r4
 8007184:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8007186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800718a:	f000 bec3 	b.w	8007f14 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800718e:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <ipfrag_free_pbuf_custom+0x2c>)
 8007190:	4904      	ldr	r1, [pc, #16]	; (80071a4 <ipfrag_free_pbuf_custom+0x30>)
 8007192:	4805      	ldr	r0, [pc, #20]	; (80071a8 <ipfrag_free_pbuf_custom+0x34>)
 8007194:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8007198:	f006 ff20 	bl	800dfdc <iprintf>
 800719c:	e7ed      	b.n	800717a <ipfrag_free_pbuf_custom+0x6>
 800719e:	bf00      	nop
 80071a0:	080113c4 	.word	0x080113c4
 80071a4:	08011400 	.word	0x08011400
 80071a8:	0800e670 	.word	0x0800e670

080071ac <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80071ac:	4281      	cmp	r1, r0
{
 80071ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b2:	4607      	mov	r7, r0
 80071b4:	4688      	mov	r8, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80071b6:	d072      	beq.n	800729e <ip_reass_free_complete_datagram+0xf2>
  if (prev != NULL) {
 80071b8:	f1b8 0f00 	cmp.w	r8, #0
 80071bc:	d009      	beq.n	80071d2 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80071be:	f8d8 3000 	ldr.w	r3, [r8]
 80071c2:	429f      	cmp	r7, r3
 80071c4:	d005      	beq.n	80071d2 <ip_reass_free_complete_datagram+0x26>
 80071c6:	4b3f      	ldr	r3, [pc, #252]	; (80072c4 <ip_reass_free_complete_datagram+0x118>)
 80071c8:	493f      	ldr	r1, [pc, #252]	; (80072c8 <ip_reass_free_complete_datagram+0x11c>)
 80071ca:	4840      	ldr	r0, [pc, #256]	; (80072cc <ip_reass_free_complete_datagram+0x120>)
 80071cc:	22ad      	movs	r2, #173	; 0xad
 80071ce:	f006 ff05 	bl	800dfdc <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80071d2:	687d      	ldr	r5, [r7, #4]
 80071d4:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 80071d6:	889a      	ldrh	r2, [r3, #4]
 80071d8:	2a00      	cmp	r2, #0
 80071da:	d041      	beq.n	8007260 <ip_reass_free_complete_datagram+0xb4>
  u16_t pbufs_freed = 0;
 80071dc:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80071de:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80072c4 <ip_reass_free_complete_datagram+0x118>
 80071e2:	f8df a100 	ldr.w	sl, [pc, #256]	; 80072e4 <ip_reass_free_complete_datagram+0x138>
 80071e6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80072cc <ip_reass_free_complete_datagram+0x120>
 80071ea:	e005      	b.n	80071f8 <ip_reass_free_complete_datagram+0x4c>
    pbuf_free(pcur);
 80071ec:	4628      	mov	r0, r5
 80071ee:	f001 f871 	bl	80082d4 <pbuf_free>
    pbufs_freed += clen;
 80071f2:	b2a4      	uxth	r4, r4
  while (p != NULL) {
 80071f4:	4635      	mov	r5, r6
 80071f6:	b1ae      	cbz	r6, 8007224 <ip_reass_free_complete_datagram+0x78>
    iprh = (struct ip_reass_helper *)p->payload;
 80071f8:	686b      	ldr	r3, [r5, #4]
    clen = pbuf_clen(pcur);
 80071fa:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 80071fc:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 80071fe:	f001 fa89 	bl	8008714 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007202:	4404      	add	r4, r0
 8007204:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8007208:	dbf0      	blt.n	80071ec <ip_reass_free_complete_datagram+0x40>
 800720a:	465b      	mov	r3, fp
 800720c:	22cc      	movs	r2, #204	; 0xcc
 800720e:	4651      	mov	r1, sl
 8007210:	4648      	mov	r0, r9
 8007212:	f006 fee3 	bl	800dfdc <iprintf>
    pbuf_free(pcur);
 8007216:	4628      	mov	r0, r5
 8007218:	f001 f85c 	bl	80082d4 <pbuf_free>
    pbufs_freed += clen;
 800721c:	b2a4      	uxth	r4, r4
  while (p != NULL) {
 800721e:	4635      	mov	r5, r6
 8007220:	2e00      	cmp	r6, #0
 8007222:	d1e9      	bne.n	80071f8 <ip_reass_free_complete_datagram+0x4c>
  if (reassdatagrams == ipr) {
 8007224:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <ip_reass_free_complete_datagram+0x124>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4297      	cmp	r7, r2
 800722a:	d03f      	beq.n	80072ac <ip_reass_free_complete_datagram+0x100>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800722c:	f1b8 0f00 	cmp.w	r8, #0
 8007230:	d03f      	beq.n	80072b2 <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f8c8 3000 	str.w	r3, [r8]
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8007238:	4d26      	ldr	r5, [pc, #152]	; (80072d4 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800723a:	4639      	mov	r1, r7
 800723c:	2004      	movs	r0, #4
 800723e:	f000 fe69 	bl	8007f14 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8007242:	882b      	ldrh	r3, [r5, #0]
 8007244:	42a3      	cmp	r3, r4
 8007246:	d206      	bcs.n	8007256 <ip_reass_free_complete_datagram+0xaa>
 8007248:	4b1e      	ldr	r3, [pc, #120]	; (80072c4 <ip_reass_free_complete_datagram+0x118>)
 800724a:	4923      	ldr	r1, [pc, #140]	; (80072d8 <ip_reass_free_complete_datagram+0x12c>)
 800724c:	481f      	ldr	r0, [pc, #124]	; (80072cc <ip_reass_free_complete_datagram+0x120>)
 800724e:	22d2      	movs	r2, #210	; 0xd2
 8007250:	f006 fec4 	bl	800dfdc <iprintf>
 8007254:	882b      	ldrh	r3, [r5, #0]
  ip_reass_pbufcount -= pbufs_freed;
 8007256:	1b1b      	subs	r3, r3, r4
 8007258:	802b      	strh	r3, [r5, #0]
}
 800725a:	4620      	mov	r0, r4
 800725c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	607a      	str	r2, [r7, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007264:	463a      	mov	r2, r7
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007266:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007268:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800726c:	6894      	ldr	r4, [r2, #8]
 800726e:	6856      	ldr	r6, [r2, #4]
 8007270:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8007274:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007278:	609c      	str	r4, [r3, #8]
 800727a:	6018      	str	r0, [r3, #0]
 800727c:	605e      	str	r6, [r3, #4]
 800727e:	6910      	ldr	r0, [r2, #16]
 8007280:	6118      	str	r0, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8007282:	4628      	mov	r0, r5
 8007284:	f7ff fd0c 	bl	8006ca0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007288:	4628      	mov	r0, r5
 800728a:	f001 fa43 	bl	8008714 <pbuf_clen>
 800728e:	4604      	mov	r4, r0
    pbuf_free(p);
 8007290:	4628      	mov	r0, r5
 8007292:	f001 f81f 	bl	80082d4 <pbuf_free>
 8007296:	687d      	ldr	r5, [r7, #4]
  while (p != NULL) {
 8007298:	2d00      	cmp	r5, #0
 800729a:	d1a0      	bne.n	80071de <ip_reass_free_complete_datagram+0x32>
 800729c:	e7c2      	b.n	8007224 <ip_reass_free_complete_datagram+0x78>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <ip_reass_free_complete_datagram+0x118>)
 80072a0:	490e      	ldr	r1, [pc, #56]	; (80072dc <ip_reass_free_complete_datagram+0x130>)
 80072a2:	480a      	ldr	r0, [pc, #40]	; (80072cc <ip_reass_free_complete_datagram+0x120>)
 80072a4:	22ab      	movs	r2, #171	; 0xab
 80072a6:	f006 fe99 	bl	800dfdc <iprintf>
 80072aa:	e785      	b.n	80071b8 <ip_reass_free_complete_datagram+0xc>
    reassdatagrams = ipr->next;
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e7c2      	b.n	8007238 <ip_reass_free_complete_datagram+0x8c>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80072b2:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <ip_reass_free_complete_datagram+0x118>)
 80072b4:	490a      	ldr	r1, [pc, #40]	; (80072e0 <ip_reass_free_complete_datagram+0x134>)
 80072b6:	4805      	ldr	r0, [pc, #20]	; (80072cc <ip_reass_free_complete_datagram+0x120>)
 80072b8:	f240 1245 	movw	r2, #325	; 0x145
 80072bc:	f006 fe8e 	bl	800dfdc <iprintf>
 80072c0:	e7b7      	b.n	8007232 <ip_reass_free_complete_datagram+0x86>
 80072c2:	bf00      	nop
 80072c4:	080113c4 	.word	0x080113c4
 80072c8:	08011358 	.word	0x08011358
 80072cc:	0800e670 	.word	0x0800e670
 80072d0:	20003e90 	.word	0x20003e90
 80072d4:	20003e8c 	.word	0x20003e8c
 80072d8:	080113a8 	.word	0x080113a8
 80072dc:	0801134c 	.word	0x0801134c
 80072e0:	0801138c 	.word	0x0801138c
 80072e4:	0801136c 	.word	0x0801136c

080072e8 <ip_reass_tmr>:
{
 80072e8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80072ea:	4b0c      	ldr	r3, [pc, #48]	; (800731c <ip_reass_tmr+0x34>)
 80072ec:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80072ee:	b190      	cbz	r0, 8007316 <ip_reass_tmr+0x2e>
    if (r->timer > 0) {
 80072f0:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 80072f2:	6804      	ldr	r4, [r0, #0]
  while (r != NULL) {
 80072f4:	2500      	movs	r5, #0
      r->timer--;
 80072f6:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80072f8:	b143      	cbz	r3, 800730c <ip_reass_tmr+0x24>
      r->timer--;
 80072fa:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 80072fc:	b164      	cbz	r4, 8007318 <ip_reass_tmr+0x30>
 80072fe:	4605      	mov	r5, r0
 8007300:	4620      	mov	r0, r4
    if (r->timer > 0) {
 8007302:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8007304:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 8007306:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f6      	bne.n	80072fa <ip_reass_tmr+0x12>
      ip_reass_free_complete_datagram(tmp, prev);
 800730c:	4629      	mov	r1, r5
 800730e:	f7ff ff4d 	bl	80071ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8007312:	2c00      	cmp	r4, #0
 8007314:	d1f4      	bne.n	8007300 <ip_reass_tmr+0x18>
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	bd38      	pop	{r3, r4, r5, pc}
 800731a:	bf00      	nop
 800731c:	20003e90 	.word	0x20003e90

08007320 <ip4_reass>:
{
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8007324:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8007326:	782b      	ldrb	r3, [r5, #0]
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	2b05      	cmp	r3, #5
{
 800732e:	b085      	sub	sp, #20
 8007330:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8007332:	f040 80d4 	bne.w	80074de <ip4_reass+0x1be>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007336:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007338:	f8df b49c 	ldr.w	fp, [pc, #1180]	; 80077d8 <ip4_reass+0x4b8>
 800733c:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 80077dc <ip4_reass+0x4bc>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8007340:	f7fe fab6 	bl	80058b0 <lwip_htons>
 8007344:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8007348:	00db      	lsls	r3, r3, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800734a:	8868      	ldrh	r0, [r5, #2]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800734c:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800734e:	f7fe faaf 	bl	80058b0 <lwip_htons>
 8007352:	782b      	ldrb	r3, [r5, #0]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 800735c:	b29b      	uxth	r3, r3
  clen = pbuf_clen(p);
 800735e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8007360:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 8007362:	f001 f9d7 	bl	8008714 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007366:	f8bb 3000 	ldrh.w	r3, [fp]
 800736a:	4403      	add	r3, r0
 800736c:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800736e:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007370:	f300 80bd 	bgt.w	80074ee <ip4_reass+0x1ce>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007374:	f8d9 4000 	ldr.w	r4, [r9]
 8007378:	2c00      	cmp	r4, #0
 800737a:	f000 8083 	beq.w	8007484 <ip4_reass+0x164>
 800737e:	68ea      	ldr	r2, [r5, #12]
 8007380:	e002      	b.n	8007388 <ip4_reass+0x68>
 8007382:	6824      	ldr	r4, [r4, #0]
 8007384:	2c00      	cmp	r4, #0
 8007386:	d07d      	beq.n	8007484 <ip4_reass+0x164>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8007388:	6963      	ldr	r3, [r4, #20]
 800738a:	4293      	cmp	r3, r2
 800738c:	d1f9      	bne.n	8007382 <ip4_reass+0x62>
 800738e:	692b      	ldr	r3, [r5, #16]
 8007390:	69a1      	ldr	r1, [r4, #24]
 8007392:	4299      	cmp	r1, r3
 8007394:	d1f5      	bne.n	8007382 <ip4_reass+0x62>
 8007396:	89a1      	ldrh	r1, [r4, #12]
 8007398:	88ab      	ldrh	r3, [r5, #4]
 800739a:	4299      	cmp	r1, r3
 800739c:	d1f1      	bne.n	8007382 <ip4_reass+0x62>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800739e:	88e8      	ldrh	r0, [r5, #6]
 80073a0:	f7fe fa86 	bl	80058b0 <lwip_htons>
 80073a4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80073a8:	2800      	cmp	r0, #0
 80073aa:	f000 80e0 	beq.w	800756e <ip4_reass+0x24e>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80073ae:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 80073b0:	f013 0320 	ands.w	r3, r3, #32
 80073b4:	9303      	str	r3, [sp, #12]
 80073b6:	d10c      	bne.n	80073d2 <ip4_reass+0xb2>
    u16_t datagram_len = (u16_t)(offset + len);
 80073b8:	9a01      	ldr	r2, [sp, #4]
 80073ba:	9902      	ldr	r1, [sp, #8]
 80073bc:	4613      	mov	r3, r2
 80073be:	440b      	add	r3, r1
 80073c0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f200 808b 	bhi.w	80074de <ip4_reass+0x1be>
 80073c8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80073cc:	4293      	cmp	r3, r2
 80073ce:	f200 8086 	bhi.w	80074de <ip4_reass+0x1be>
  fraghdr = (struct ip_hdr*)new_p->payload;
 80073d2:	687e      	ldr	r6, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80073d4:	8870      	ldrh	r0, [r6, #2]
 80073d6:	f7fe fa6b 	bl	80058b0 <lwip_htons>
 80073da:	7835      	ldrb	r5, [r6, #0]
 80073dc:	f005 050f 	and.w	r5, r5, #15
 80073e0:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80073e4:	88f0      	ldrh	r0, [r6, #6]
 80073e6:	f7fe fa63 	bl	80058b0 <lwip_htons>
  iprh = (struct ip_reass_helper*)new_p->payload;
 80073ea:	f8d7 8004 	ldr.w	r8, [r7, #4]
  iprh->next_pbuf = NULL;
 80073ee:	2300      	movs	r3, #0
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80073f0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80073f4:	00c0      	lsls	r0, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80073f6:	b2ad      	uxth	r5, r5
  iprh->next_pbuf = NULL;
 80073f8:	f888 3000 	strb.w	r3, [r8]
 80073fc:	f888 3001 	strb.w	r3, [r8, #1]
 8007400:	f888 3002 	strb.w	r3, [r8, #2]
 8007404:	f888 3003 	strb.w	r3, [r8, #3]
  for (q = ipr->p; q != NULL;) {
 8007408:	6863      	ldr	r3, [r4, #4]
  iprh->start = offset;
 800740a:	f8a8 0004 	strh.w	r0, [r8, #4]
  iprh->end = offset + len;
 800740e:	eb05 0c00 	add.w	ip, r5, r0
 8007412:	fa1f fc8c 	uxth.w	ip, ip
 8007416:	f8a8 c006 	strh.w	ip, [r8, #6]
  for (q = ipr->p; q != NULL;) {
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80ba 	beq.w	8007594 <ip4_reass+0x274>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8007420:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 8007422:	88aa      	ldrh	r2, [r5, #4]
 8007424:	4282      	cmp	r2, r0
 8007426:	d84b      	bhi.n	80074c0 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 8007428:	d04e      	beq.n	80074c8 <ip4_reass+0x1a8>
    } else if (iprh->start < iprh_tmp->end) {
 800742a:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 800742e:	4586      	cmp	lr, r0
 8007430:	d84a      	bhi.n	80074c8 <ip4_reass+0x1a8>
 8007432:	2601      	movs	r6, #1
 8007434:	e00d      	b.n	8007452 <ip4_reass+0x132>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8007436:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8007438:	8899      	ldrh	r1, [r3, #4]
 800743a:	4288      	cmp	r0, r1
 800743c:	f0c0 8141 	bcc.w	80076c2 <ip4_reass+0x3a2>
    } else if (iprh->start == iprh_tmp->start) {
 8007440:	d042      	beq.n	80074c8 <ip4_reass+0x1a8>
    } else if (iprh->start < iprh_tmp->end) {
 8007442:	88da      	ldrh	r2, [r3, #6]
 8007444:	4290      	cmp	r0, r2
 8007446:	d33f      	bcc.n	80074c8 <ip4_reass+0x1a8>
          valid = 0;
 8007448:	4571      	cmp	r1, lr
 800744a:	bf18      	it	ne
 800744c:	2600      	movne	r6, #0
 800744e:	461d      	mov	r5, r3
 8007450:	4696      	mov	lr, r2
    q = iprh_tmp->next_pbuf;
 8007452:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 8007454:	2a00      	cmp	r2, #0
 8007456:	d1ee      	bne.n	8007436 <ip4_reass+0x116>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007458:	4570      	cmp	r0, lr
 800745a:	f0c0 8188 	bcc.w	800776e <ip4_reass+0x44e>
      if (iprh_prev->end != iprh->start) {
 800745e:	4586      	cmp	lr, r0
      iprh_prev->next_pbuf = new_p;
 8007460:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8007462:	f000 8099 	beq.w	8007598 <ip4_reass+0x278>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	b11b      	cbz	r3, 8007472 <ip4_reass+0x152>
 800746a:	7fa3      	ldrb	r3, [r4, #30]
 800746c:	07db      	lsls	r3, r3, #31
 800746e:	f140 8098 	bpl.w	80075a2 <ip4_reass+0x282>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007472:	f8bb 3000 	ldrh.w	r3, [fp]
 8007476:	449a      	add	sl, r3
  if (is_last) {
 8007478:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800747a:	f8ab a000 	strh.w	sl, [fp]
  if (is_last) {
 800747e:	bb8b      	cbnz	r3, 80074e4 <ip4_reass+0x1c4>
 8007480:	461e      	mov	r6, r3
 8007482:	e0c0      	b.n	8007606 <ip4_reass+0x2e6>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007484:	2004      	movs	r0, #4
 8007486:	f000 fd11 	bl	8007eac <memp_malloc>
  if (ipr == NULL) {
 800748a:	4604      	mov	r4, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	f000 8125 	beq.w	80076dc <ip4_reass+0x3bc>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007492:	2220      	movs	r2, #32
 8007494:	2100      	movs	r1, #0
 8007496:	4620      	mov	r0, r4
 8007498:	f007 f856 	bl	800e548 <memset>
  ipr->next = reassdatagrams;
 800749c:	f8d9 3000 	ldr.w	r3, [r9]
 80074a0:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 80074a2:	2203      	movs	r2, #3
 80074a4:	77e2      	strb	r2, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80074a6:	682a      	ldr	r2, [r5, #0]
 80074a8:	686e      	ldr	r6, [r5, #4]
 80074aa:	68a8      	ldr	r0, [r5, #8]
 80074ac:	68e9      	ldr	r1, [r5, #12]
 80074ae:	6161      	str	r1, [r4, #20]
 80074b0:	60a2      	str	r2, [r4, #8]
 80074b2:	60e6      	str	r6, [r4, #12]
 80074b4:	6120      	str	r0, [r4, #16]
 80074b6:	692a      	ldr	r2, [r5, #16]
  reassdatagrams = ipr;
 80074b8:	f8c9 4000 	str.w	r4, [r9]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80074bc:	61a2      	str	r2, [r4, #24]
 80074be:	e776      	b.n	80073ae <ip4_reass+0x8e>
        if (iprh->end > iprh_tmp->start) {
 80074c0:	4562      	cmp	r2, ip
      iprh->next_pbuf = q;
 80074c2:	f8c8 3000 	str.w	r3, [r8]
        if (iprh->end > iprh_tmp->start) {
 80074c6:	d265      	bcs.n	8007594 <ip4_reass+0x274>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80074c8:	4638      	mov	r0, r7
 80074ca:	f001 f923 	bl	8008714 <pbuf_clen>
 80074ce:	f8bb 3000 	ldrh.w	r3, [fp]
 80074d2:	1a1b      	subs	r3, r3, r0
  pbuf_free(new_p);
 80074d4:	4638      	mov	r0, r7
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80074d6:	f8ab 3000 	strh.w	r3, [fp]
  pbuf_free(new_p);
 80074da:	f000 fefb 	bl	80082d4 <pbuf_free>
  pbuf_free(p);
 80074de:	4638      	mov	r0, r7
 80074e0:	f000 fef8 	bl	80082d4 <pbuf_free>
  return NULL;
 80074e4:	2700      	movs	r7, #0
}
 80074e6:	4638      	mov	r0, r7
 80074e8:	b005      	add	sp, #20
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	2600      	movs	r6, #0
    r = reassdatagrams;
 80074f0:	f8d9 3000 	ldr.w	r3, [r9]
    while (r != NULL) {
 80074f4:	b393      	cbz	r3, 800755c <ip4_reass+0x23c>
 80074f6:	f04f 0e00 	mov.w	lr, #0
 80074fa:	4671      	mov	r1, lr
 80074fc:	4670      	mov	r0, lr
 80074fe:	4674      	mov	r4, lr
 8007500:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8007504:	e00c      	b.n	8007520 <ip4_reass+0x200>
        other_datagrams++;
 8007506:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8007508:	b1d0      	cbz	r0, 8007540 <ip4_reass+0x220>
        } else if (r->timer <= oldest->timer) {
 800750a:	7fc2      	ldrb	r2, [r0, #31]
 800750c:	f893 801f 	ldrb.w	r8, [r3, #31]
 8007510:	4590      	cmp	r8, r2
 8007512:	bf9c      	itt	ls
 8007514:	4671      	movls	r1, lr
 8007516:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	469e      	mov	lr, r3
 800751c:	b1b2      	cbz	r2, 800754c <ip4_reass+0x22c>
 800751e:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007520:	695a      	ldr	r2, [r3, #20]
 8007522:	4562      	cmp	r2, ip
 8007524:	d1ef      	bne.n	8007506 <ip4_reass+0x1e6>
 8007526:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	4542      	cmp	r2, r8
 800752e:	d1ea      	bne.n	8007506 <ip4_reass+0x1e6>
 8007530:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8007534:	88aa      	ldrh	r2, [r5, #4]
 8007536:	4590      	cmp	r8, r2
 8007538:	d0ee      	beq.n	8007518 <ip4_reass+0x1f8>
        other_datagrams++;
 800753a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800753c:	2800      	cmp	r0, #0
 800753e:	d1e4      	bne.n	800750a <ip4_reass+0x1ea>
      if (r->next != NULL) {
 8007540:	681a      	ldr	r2, [r3, #0]
        if (oldest == NULL) {
 8007542:	4671      	mov	r1, lr
 8007544:	4618      	mov	r0, r3
 8007546:	469e      	mov	lr, r3
      if (r->next != NULL) {
 8007548:	2a00      	cmp	r2, #0
 800754a:	d1e8      	bne.n	800751e <ip4_reass+0x1fe>
    if (oldest != NULL) {
 800754c:	b110      	cbz	r0, 8007554 <ip4_reass+0x234>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800754e:	f7ff fe2d 	bl	80071ac <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8007552:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8007554:	45b2      	cmp	sl, r6
 8007556:	dd01      	ble.n	800755c <ip4_reass+0x23c>
 8007558:	2c01      	cmp	r4, #1
 800755a:	dcc9      	bgt.n	80074f0 <ip4_reass+0x1d0>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800755c:	2e00      	cmp	r6, #0
 800755e:	d0be      	beq.n	80074de <ip4_reass+0x1be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007560:	f8bb 3000 	ldrh.w	r3, [fp]
 8007564:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007566:	2b0a      	cmp	r3, #10
 8007568:	f77f af04 	ble.w	8007374 <ip4_reass+0x54>
 800756c:	e7b7      	b.n	80074de <ip4_reass+0x1be>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800756e:	89e0      	ldrh	r0, [r4, #14]
 8007570:	f7fe f99e 	bl	80058b0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007574:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007578:	2800      	cmp	r0, #0
 800757a:	f43f af18 	beq.w	80073ae <ip4_reass+0x8e>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800757e:	682a      	ldr	r2, [r5, #0]
 8007580:	686e      	ldr	r6, [r5, #4]
 8007582:	68a8      	ldr	r0, [r5, #8]
 8007584:	68e9      	ldr	r1, [r5, #12]
 8007586:	6161      	str	r1, [r4, #20]
 8007588:	60a2      	str	r2, [r4, #8]
 800758a:	60e6      	str	r6, [r4, #12]
 800758c:	6120      	str	r0, [r4, #16]
 800758e:	692a      	ldr	r2, [r5, #16]
 8007590:	61a2      	str	r2, [r4, #24]
 8007592:	e70c      	b.n	80073ae <ip4_reass+0x8e>
      ipr->p = new_p;
 8007594:	6067      	str	r7, [r4, #4]
 8007596:	2601      	movs	r6, #1
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	b143      	cbz	r3, 80075ae <ip4_reass+0x28e>
 800759c:	7fa3      	ldrb	r3, [r4, #30]
 800759e:	07da      	lsls	r2, r3, #31
 80075a0:	d405      	bmi.n	80075ae <ip4_reass+0x28e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80075a2:	f8bb 3000 	ldrh.w	r3, [fp]
 80075a6:	449a      	add	sl, r3
 80075a8:	f8ab a000 	strh.w	sl, [fp]
 80075ac:	e79a      	b.n	80074e4 <ip4_reass+0x1c4>
    if (valid) {
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	f43f af5f 	beq.w	8007472 <ip4_reass+0x152>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f43f af5b 	beq.w	8007472 <ip4_reass+0x152>
 80075bc:	685d      	ldr	r5, [r3, #4]
 80075be:	88ab      	ldrh	r3, [r5, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f47f af56 	bne.w	8007472 <ip4_reass+0x152>
        q = iprh->next_pbuf;
 80075c6:	f8d8 3000 	ldr.w	r3, [r8]
        while (q != NULL) {
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80f5 	beq.w	80077ba <ip4_reass+0x49a>
          iprh = (struct ip_reass_helper*)q->payload;
 80075d0:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80075d2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80075d6:	8899      	ldrh	r1, [r3, #4]
 80075d8:	4291      	cmp	r1, r2
 80075da:	d007      	beq.n	80075ec <ip4_reass+0x2cc>
 80075dc:	e749      	b.n	8007472 <ip4_reass+0x152>
          iprh = (struct ip_reass_helper*)q->payload;
 80075de:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80075e0:	88d9      	ldrh	r1, [r3, #6]
 80075e2:	8893      	ldrh	r3, [r2, #4]
 80075e4:	4299      	cmp	r1, r3
 80075e6:	f47f af44 	bne.w	8007472 <ip4_reass+0x152>
 80075ea:	4613      	mov	r3, r2
          q = iprh->next_pbuf;
 80075ec:	681a      	ldr	r2, [r3, #0]
        while (q != NULL) {
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	d1f5      	bne.n	80075de <ip4_reass+0x2be>
          LWIP_ASSERT("sanity check",
 80075f2:	429d      	cmp	r5, r3
 80075f4:	f000 80c7 	beq.w	8007786 <ip4_reass+0x466>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80075f8:	f8bb 3000 	ldrh.w	r3, [fp]
 80075fc:	449a      	add	sl, r3
  if (is_last) {
 80075fe:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8007600:	f8ab a000 	strh.w	sl, [fp]
  if (is_last) {
 8007604:	b953      	cbnz	r3, 800761c <ip4_reass+0x2fc>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007606:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8007608:	9a01      	ldr	r2, [sp, #4]
 800760a:	9902      	ldr	r1, [sp, #8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800760c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8007610:	440a      	add	r2, r1
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007612:	2e01      	cmp	r6, #1
    ipr->datagram_len = datagram_len;
 8007614:	83a2      	strh	r2, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8007616:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8007618:	f47f af64 	bne.w	80074e4 <ip4_reass+0x1c4>
    ipr->datagram_len += IP_HLEN;
 800761c:	8ba2      	ldrh	r2, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800761e:	6861      	ldr	r1, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007620:	4623      	mov	r3, r4
    ipr->datagram_len += IP_HLEN;
 8007622:	3214      	adds	r2, #20
 8007624:	83a2      	strh	r2, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8007626:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800762a:	684e      	ldr	r6, [r1, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800762c:	6858      	ldr	r0, [r3, #4]
 800762e:	68dd      	ldr	r5, [r3, #12]
 8007630:	6899      	ldr	r1, [r3, #8]
 8007632:	60b1      	str	r1, [r6, #8]
 8007634:	60f5      	str	r5, [r6, #12]
 8007636:	6070      	str	r0, [r6, #4]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8007638:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800763a:	6032      	str	r2, [r6, #0]
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8007640:	8ba0      	ldrh	r0, [r4, #28]
 8007642:	f7fe f935 	bl	80058b0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8007646:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8007648:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800764a:	71b3      	strb	r3, [r6, #6]
 800764c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800764e:	72b3      	strb	r3, [r6, #10]
 8007650:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007652:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8007654:	b165      	cbz	r5, 8007670 <ip4_reass+0x350>
      iprh = (struct ip_reass_helper*)r->payload;
 8007656:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8007658:	f06f 0113 	mvn.w	r1, #19
 800765c:	4628      	mov	r0, r5
 800765e:	f000 fd85 	bl	800816c <pbuf_header>
      pbuf_cat(p, r);
 8007662:	4629      	mov	r1, r5
 8007664:	4638      	mov	r0, r7
 8007666:	f001 f87f 	bl	8008768 <pbuf_cat>
      r = iprh->next_pbuf;
 800766a:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 800766c:	2d00      	cmp	r5, #0
 800766e:	d1f2      	bne.n	8007656 <ip4_reass+0x336>
    if (ipr == reassdatagrams) {
 8007670:	f8d9 2000 	ldr.w	r2, [r9]
 8007674:	4294      	cmp	r4, r2
 8007676:	d06b      	beq.n	8007750 <ip4_reass+0x430>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007678:	b14a      	cbz	r2, 800768e <ip4_reass+0x36e>
        if (ipr_prev->next == ipr) {
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	429c      	cmp	r4, r3
 800767e:	d065      	beq.n	800774c <ip4_reass+0x42c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007680:	b12b      	cbz	r3, 800768e <ip4_reass+0x36e>
        if (ipr_prev->next == ipr) {
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4294      	cmp	r4, r2
 8007686:	d00a      	beq.n	800769e <ip4_reass+0x37e>
 8007688:	4613      	mov	r3, r2
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f9      	bne.n	8007682 <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800768e:	4b4c      	ldr	r3, [pc, #304]	; (80077c0 <ip4_reass+0x4a0>)
 8007690:	494c      	ldr	r1, [pc, #304]	; (80077c4 <ip4_reass+0x4a4>)
 8007692:	484d      	ldr	r0, [pc, #308]	; (80077c8 <ip4_reass+0x4a8>)
 8007694:	f240 1245 	movw	r2, #325	; 0x145
 8007698:	f006 fca0 	bl	800dfdc <iprintf>
 800769c:	2300      	movs	r3, #0
    prev->next = ipr->next;
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80076a2:	4621      	mov	r1, r4
 80076a4:	2004      	movs	r0, #4
 80076a6:	f000 fc35 	bl	8007f14 <memp_free>
    ip_reass_pbufcount -= pbuf_clen(p);
 80076aa:	4638      	mov	r0, r7
 80076ac:	f001 f832 	bl	8008714 <pbuf_clen>
 80076b0:	f8bb 3000 	ldrh.w	r3, [fp]
 80076b4:	1a1b      	subs	r3, r3, r0
}
 80076b6:	4638      	mov	r0, r7
    ip_reass_pbufcount -= pbuf_clen(p);
 80076b8:	f8ab 3000 	strh.w	r3, [fp]
}
 80076bc:	b005      	add	sp, #20
 80076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80076c2:	4570      	cmp	r0, lr
      iprh->next_pbuf = q;
 80076c4:	f8c8 2000 	str.w	r2, [r8]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80076c8:	f4ff aefe 	bcc.w	80074c8 <ip4_reass+0x1a8>
 80076cc:	458c      	cmp	ip, r1
 80076ce:	f63f aefb 	bhi.w	80074c8 <ip4_reass+0x1a8>
        if (iprh_prev->end != iprh->start) {
 80076d2:	4570      	cmp	r0, lr
        iprh_prev->next_pbuf = new_p;
 80076d4:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 80076d6:	f47f aec6 	bne.w	8007466 <ip4_reass+0x146>
 80076da:	e75d      	b.n	8007598 <ip4_reass+0x278>
  if (ipr == NULL) {
 80076dc:	46a0      	mov	r8, r4
    r = reassdatagrams;
 80076de:	f8d9 3000 	ldr.w	r3, [r9]
    while (r != NULL) {
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d038      	beq.n	8007758 <ip4_reass+0x438>
 80076e6:	2600      	movs	r6, #0
 80076e8:	4631      	mov	r1, r6
 80076ea:	4630      	mov	r0, r6
 80076ec:	4634      	mov	r4, r6
 80076ee:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80076f2:	e00c      	b.n	800770e <ip4_reass+0x3ee>
        other_datagrams++;
 80076f4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80076f6:	b1d0      	cbz	r0, 800772e <ip4_reass+0x40e>
        } else if (r->timer <= oldest->timer) {
 80076f8:	7fc2      	ldrb	r2, [r0, #31]
 80076fa:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80076fe:	4594      	cmp	ip, r2
 8007700:	bf9c      	itt	ls
 8007702:	4631      	movls	r1, r6
 8007704:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	461e      	mov	r6, r3
 800770a:	b1b2      	cbz	r2, 800773a <ip4_reass+0x41a>
 800770c:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800770e:	695a      	ldr	r2, [r3, #20]
 8007710:	4572      	cmp	r2, lr
 8007712:	d1ef      	bne.n	80076f4 <ip4_reass+0x3d4>
 8007714:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	4562      	cmp	r2, ip
 800771c:	d1ea      	bne.n	80076f4 <ip4_reass+0x3d4>
 800771e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8007722:	88aa      	ldrh	r2, [r5, #4]
 8007724:	4594      	cmp	ip, r2
 8007726:	d0ee      	beq.n	8007706 <ip4_reass+0x3e6>
        other_datagrams++;
 8007728:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800772a:	2800      	cmp	r0, #0
 800772c:	d1e4      	bne.n	80076f8 <ip4_reass+0x3d8>
      if (r->next != NULL) {
 800772e:	681a      	ldr	r2, [r3, #0]
        if (oldest == NULL) {
 8007730:	4631      	mov	r1, r6
 8007732:	4618      	mov	r0, r3
 8007734:	461e      	mov	r6, r3
      if (r->next != NULL) {
 8007736:	2a00      	cmp	r2, #0
 8007738:	d1e8      	bne.n	800770c <ip4_reass+0x3ec>
    if (oldest != NULL) {
 800773a:	b110      	cbz	r0, 8007742 <ip4_reass+0x422>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800773c:	f7ff fd36 	bl	80071ac <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8007740:	4480      	add	r8, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8007742:	45c2      	cmp	sl, r8
 8007744:	dd0b      	ble.n	800775e <ip4_reass+0x43e>
 8007746:	2c01      	cmp	r4, #1
 8007748:	dcc9      	bgt.n	80076de <ip4_reass+0x3be>
 800774a:	e6c8      	b.n	80074de <ip4_reass+0x1be>
        if (ipr_prev->next == ipr) {
 800774c:	4613      	mov	r3, r2
 800774e:	e7a6      	b.n	800769e <ip4_reass+0x37e>
    reassdatagrams = ipr->next;
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	f8c9 3000 	str.w	r3, [r9]
 8007756:	e7a4      	b.n	80076a2 <ip4_reass+0x382>
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8007758:	45c2      	cmp	sl, r8
 800775a:	f73f aec0 	bgt.w	80074de <ip4_reass+0x1be>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800775e:	2004      	movs	r0, #4
 8007760:	f000 fba4 	bl	8007eac <memp_malloc>
    if (ipr == NULL)
 8007764:	4604      	mov	r4, r0
 8007766:	2800      	cmp	r0, #0
 8007768:	f47f ae93 	bne.w	8007492 <ip4_reass+0x172>
 800776c:	e6b7      	b.n	80074de <ip4_reass+0x1be>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800776e:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <ip4_reass+0x4a0>)
 8007770:	4916      	ldr	r1, [pc, #88]	; (80077cc <ip4_reass+0x4ac>)
 8007772:	4815      	ldr	r0, [pc, #84]	; (80077c8 <ip4_reass+0x4a8>)
 8007774:	f240 12ab 	movw	r2, #427	; 0x1ab
 8007778:	f006 fc30 	bl	800dfdc <iprintf>
 800777c:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 8007780:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8007784:	e66b      	b.n	800745e <ip4_reass+0x13e>
          LWIP_ASSERT("sanity check",
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <ip4_reass+0x4a0>)
 8007788:	4911      	ldr	r1, [pc, #68]	; (80077d0 <ip4_reass+0x4b0>)
 800778a:	480f      	ldr	r0, [pc, #60]	; (80077c8 <ip4_reass+0x4a8>)
 800778c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8007790:	f006 fc24 	bl	800dfdc <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b133      	cbz	r3, 80077a6 <ip4_reass+0x486>
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <ip4_reass+0x4a0>)
 800779a:	490e      	ldr	r1, [pc, #56]	; (80077d4 <ip4_reass+0x4b4>)
 800779c:	480a      	ldr	r0, [pc, #40]	; (80077c8 <ip4_reass+0x4a8>)
 800779e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80077a2:	f006 fc1b 	bl	800dfdc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80077a6:	f8bb 3000 	ldrh.w	r3, [fp]
 80077aa:	449a      	add	sl, r3
  if (is_last) {
 80077ac:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80077ae:	f8ab a000 	strh.w	sl, [fp]
  if (is_last) {
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f47f af32 	bne.w	800761c <ip4_reass+0x2fc>
 80077b8:	e725      	b.n	8007606 <ip4_reass+0x2e6>
        while (q != NULL) {
 80077ba:	4643      	mov	r3, r8
 80077bc:	e719      	b.n	80075f2 <ip4_reass+0x2d2>
 80077be:	bf00      	nop
 80077c0:	080113c4 	.word	0x080113c4
 80077c4:	0801138c 	.word	0x0801138c
 80077c8:	0800e670 	.word	0x0800e670
 80077cc:	080112f8 	.word	0x080112f8
 80077d0:	08011318 	.word	0x08011318
 80077d4:	08011328 	.word	0x08011328
 80077d8:	20003e8c 	.word	0x20003e8c
 80077dc:	20003e90 	.word	0x20003e90

080077e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80077e4:	f8d0 b004 	ldr.w	fp, [r0, #4]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80077e8:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80077ea:	f89b 6000 	ldrb.w	r6, [fp]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80077ee:	f1b3 0714 	subs.w	r7, r3, #20
 80077f2:	bf48      	it	mi
 80077f4:	f1a3 070d 	submi.w	r7, r3, #13
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80077f8:	f006 060f 	and.w	r6, r6, #15
{
 80077fc:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80077fe:	10ff      	asrs	r7, r7, #3
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007800:	00b6      	lsls	r6, r6, #2
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8007802:	b2bb      	uxth	r3, r7
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007804:	2e14      	cmp	r6, #20
{
 8007806:	9105      	str	r1, [sp, #20]
 8007808:	4605      	mov	r5, r0
 800780a:	9209      	str	r2, [sp, #36]	; 0x24
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800780c:	9308      	str	r3, [sp, #32]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800780e:	f040 80b8 	bne.w	8007982 <ip4_frag+0x1a2>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8007812:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8007816:	f7fe f84b 	bl	80058b0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800781a:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800781e:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8007822:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8007824:	f040 80ba 	bne.w	800799c <ip4_frag+0x1bc>

  left = p->tot_len - IP_HLEN;
 8007828:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800782c:	f1aa 0a14 	sub.w	sl, sl, #20
 8007830:	fa1f f38a 	uxth.w	r3, sl
 8007834:	9302      	str	r3, [sp, #8]

  while (left) {
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 808d 	beq.w	8007956 <ip4_frag+0x176>
 800783c:	b2bf      	uxth	r7, r7
 800783e:	00fb      	lsls	r3, r7, #3
 8007840:	9307      	str	r3, [sp, #28]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007842:	2200      	movs	r2, #0
 8007844:	2114      	movs	r1, #20
 8007846:	2002      	movs	r0, #2
 8007848:	f000 fdb2 	bl	80083b0 <pbuf_alloc>
    fragsize = LWIP_MIN(left, nfb * 8);
 800784c:	9b02      	ldr	r3, [sp, #8]
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	4293      	cmp	r3, r2
 8007852:	bfa8      	it	ge
 8007854:	4613      	movge	r3, r2
 8007856:	461f      	mov	r7, r3
 8007858:	b29b      	uxth	r3, r3
    if (rambuf == NULL) {
 800785a:	4681      	mov	r9, r0
    fragsize = LWIP_MIN(left, nfb * 8);
 800785c:	9303      	str	r3, [sp, #12]
    if (rambuf == NULL) {
 800785e:	2800      	cmp	r0, #0
 8007860:	f000 8099 	beq.w	8007996 <ip4_frag+0x1b6>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007864:	896b      	ldrh	r3, [r5, #10]
 8007866:	2b13      	cmp	r3, #19
 8007868:	f240 8083 	bls.w	8007972 <ip4_frag+0x192>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800786c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007870:	f8db 2000 	ldr.w	r2, [fp]
 8007874:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007878:	f8db 1008 	ldr.w	r1, [fp, #8]
 800787c:	f8db e00c 	ldr.w	lr, [fp, #12]
 8007880:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	6058      	str	r0, [r3, #4]
 8007888:	6099      	str	r1, [r3, #8]
 800788a:	f8db 2010 	ldr.w	r2, [fp, #16]
 800788e:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007890:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007894:	9306      	str	r3, [sp, #24]

    left_to_copy = fragsize;
    while (left_to_copy) {
 8007896:	b377      	cbz	r7, 80078f6 <ip4_frag+0x116>
 8007898:	9f03      	ldr	r7, [sp, #12]
 800789a:	e001      	b.n	80078a0 <ip4_frag+0xc0>
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy -= newpbuflen;
      if (left_to_copy) {
        poff = 0;
        p = p->next;
 800789c:	682d      	ldr	r5, [r5, #0]
 800789e:	2600      	movs	r6, #0
      u16_t plen = p->len - poff;
 80078a0:	896c      	ldrh	r4, [r5, #10]
 80078a2:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80078a4:	b2a4      	uxth	r4, r4
 80078a6:	42bc      	cmp	r4, r7
 80078a8:	bf28      	it	cs
 80078aa:	463c      	movcs	r4, r7
      if (!newpbuflen) {
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	d0f5      	beq.n	800789c <ip4_frag+0xbc>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80078b0:	2005      	movs	r0, #5
 80078b2:	f000 fafb 	bl	8007eac <memp_malloc>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80078b6:	2202      	movs	r2, #2
      if (pcr == NULL) {
 80078b8:	4680      	mov	r8, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80078ba:	4603      	mov	r3, r0
 80078bc:	4621      	mov	r1, r4
      if (pcr == NULL) {
 80078be:	2800      	cmp	r0, #0
 80078c0:	d04f      	beq.n	8007962 <ip4_frag+0x182>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80078c2:	9401      	str	r4, [sp, #4]
 80078c4:	6868      	ldr	r0, [r5, #4]
 80078c6:	4430      	add	r0, r6
 80078c8:	9000      	str	r0, [sp, #0]
 80078ca:	2004      	movs	r0, #4
 80078cc:	f000 fc1a 	bl	8008104 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80078d0:	4682      	mov	sl, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d041      	beq.n	800795a <ip4_frag+0x17a>
      pbuf_ref(p);
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 ff28 	bl	800872c <pbuf_ref>
      left_to_copy -= newpbuflen;
 80078dc:	1b3f      	subs	r7, r7, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80078de:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <ip4_frag+0x1d0>)
      pcr->original = p;
 80078e0:	f8c8 5014 	str.w	r5, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80078e4:	f8c8 3010 	str.w	r3, [r8, #16]
      pbuf_cat(rambuf, newpbuf);
 80078e8:	4651      	mov	r1, sl
 80078ea:	4648      	mov	r0, r9
      left_to_copy -= newpbuflen;
 80078ec:	b2bf      	uxth	r7, r7
      pbuf_cat(rambuf, newpbuf);
 80078ee:	f000 ff3b 	bl	8008768 <pbuf_cat>
      if (left_to_copy) {
 80078f2:	2f00      	cmp	r7, #0
 80078f4:	d1d2      	bne.n	800789c <ip4_frag+0xbc>
    }
    poff += newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80078f6:	9b05      	ldr	r3, [sp, #20]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80078f8:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 80078fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    tmp = (IP_OFFMASK & (ofo));
 80078fc:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8007900:	9a02      	ldr	r2, [sp, #8]
    last = (left <= netif->mtu - IP_HLEN);
 8007902:	3b13      	subs	r3, #19
    if (!last) {
 8007904:	429a      	cmp	r2, r3
      tmp = tmp | IP_MF;
 8007906:	bfa8      	it	ge
 8007908:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800790c:	f7fd ffd0 	bl	80058b0 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8007910:	9b03      	ldr	r3, [sp, #12]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007912:	9f06      	ldr	r7, [sp, #24]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8007914:	3314      	adds	r3, #20
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007916:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8007918:	b298      	uxth	r0, r3
 800791a:	f7fd ffc9 	bl	80058b0 <lwip_htons>
 800791e:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8007920:	9805      	ldr	r0, [sp, #20]
 8007922:	9a09      	ldr	r2, [sp, #36]	; 0x24
    IPH_CHKSUM_SET(iphdr, 0);
 8007924:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8007926:	4649      	mov	r1, r9
    IPH_CHKSUM_SET(iphdr, 0);
 8007928:	72bb      	strb	r3, [r7, #10]
 800792a:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 800792c:	6943      	ldr	r3, [r0, #20]
 800792e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8007930:	4648      	mov	r0, r9
 8007932:	f000 fccf 	bl	80082d4 <pbuf_free>
    left -= fragsize;
 8007936:	9a02      	ldr	r2, [sp, #8]
 8007938:	9b03      	ldr	r3, [sp, #12]
    ofo += nfb;
 800793a:	9908      	ldr	r1, [sp, #32]
    left -= fragsize;
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	9302      	str	r3, [sp, #8]
    ofo += nfb;
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	440b      	add	r3, r1
 8007948:	4426      	add	r6, r4
 800794a:	b29b      	uxth	r3, r3
 800794c:	b2b6      	uxth	r6, r6
 800794e:	9304      	str	r3, [sp, #16]
  while (left) {
 8007950:	2a00      	cmp	r2, #0
 8007952:	f47f af76 	bne.w	8007842 <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8007956:	2000      	movs	r0, #0
 8007958:	e008      	b.n	800796c <ip4_frag+0x18c>
  memp_free(MEMP_FRAG_PBUF, p);
 800795a:	4641      	mov	r1, r8
 800795c:	2005      	movs	r0, #5
 800795e:	f000 fad9 	bl	8007f14 <memp_free>
        pbuf_free(rambuf);
 8007962:	4648      	mov	r0, r9
 8007964:	f000 fcb6 	bl	80082d4 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
}
 800796c:	b00b      	add	sp, #44	; 0x2c
 800796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007972:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <ip4_frag+0x1d4>)
 8007974:	4910      	ldr	r1, [pc, #64]	; (80079b8 <ip4_frag+0x1d8>)
 8007976:	4811      	ldr	r0, [pc, #68]	; (80079bc <ip4_frag+0x1dc>)
 8007978:	f240 3209 	movw	r2, #777	; 0x309
 800797c:	f006 fb2e 	bl	800dfdc <iprintf>
 8007980:	e774      	b.n	800786c <ip4_frag+0x8c>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <ip4_frag+0x1d4>)
 8007984:	490e      	ldr	r1, [pc, #56]	; (80079c0 <ip4_frag+0x1e0>)
 8007986:	480d      	ldr	r0, [pc, #52]	; (80079bc <ip4_frag+0x1dc>)
 8007988:	f240 22e1 	movw	r2, #737	; 0x2e1
 800798c:	f006 fb26 	bl	800dfdc <iprintf>
 8007990:	f06f 0005 	mvn.w	r0, #5
 8007994:	e7ea      	b.n	800796c <ip4_frag+0x18c>
  return ERR_MEM;
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	e7e7      	b.n	800796c <ip4_frag+0x18c>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800799c:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <ip4_frag+0x1d4>)
 800799e:	4909      	ldr	r1, [pc, #36]	; (80079c4 <ip4_frag+0x1e4>)
 80079a0:	4806      	ldr	r0, [pc, #24]	; (80079bc <ip4_frag+0x1dc>)
 80079a2:	f240 22e6 	movw	r2, #742	; 0x2e6
 80079a6:	f006 fb19 	bl	800dfdc <iprintf>
 80079aa:	f06f 0005 	mvn.w	r0, #5
 80079ae:	e7dd      	b.n	800796c <ip4_frag+0x18c>
 80079b0:	08007175 	.word	0x08007175
 80079b4:	080113c4 	.word	0x080113c4
 80079b8:	080112d8 	.word	0x080112d8
 80079bc:	0800e670 	.word	0x0800e670
 80079c0:	08011294 	.word	0x08011294
 80079c4:	080112bc 	.word	0x080112bc

080079c8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80079c8:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <mem_init+0x4c>)
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80079ca:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <mem_init+0x50>)
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80079cc:	4813      	ldr	r0, [pc, #76]	; (8007a1c <mem_init+0x54>)
{
 80079ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80079d2:	4e13      	ldr	r6, [pc, #76]	; (8007a20 <mem_init+0x58>)
  lfree = (struct mem *)(void *)ram;
 80079d4:	4c13      	ldr	r4, [pc, #76]	; (8007a24 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
 80079d6:	4d14      	ldr	r5, [pc, #80]	; (8007a28 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80079d8:	f023 0303 	bic.w	r3, r3, #3
  mem->next = MEM_SIZE_ALIGNED;
 80079dc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
  mem->used = 0;
 80079e0:	2700      	movs	r7, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80079e2:	6033      	str	r3, [r6, #0]
  ram_end->used = 1;
 80079e4:	2601      	movs	r6, #1
  mem->next = MEM_SIZE_ALIGNED;
 80079e6:	6019      	str	r1, [r3, #0]
  mem->used = 0;
 80079e8:	711f      	strb	r7, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80079ea:	1859      	adds	r1, r3, r1
  ram_end->used = 1;
 80079ec:	f883 6644 	strb.w	r6, [r3, #1604]	; 0x644
  ram_end->next = MEM_SIZE_ALIGNED;
 80079f0:	f8c3 5640 	str.w	r5, [r3, #1600]	; 0x640
  lfree = (struct mem *)(void *)ram;
 80079f4:	6023      	str	r3, [r4, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80079f6:	6011      	str	r1, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80079f8:	f005 fda8 	bl	800d54c <sys_mutex_new>
 80079fc:	b908      	cbnz	r0, 8007a02 <mem_init+0x3a>
 80079fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <mem_init+0x64>)
 8007a04:	490a      	ldr	r1, [pc, #40]	; (8007a30 <mem_init+0x68>)
 8007a06:	480b      	ldr	r0, [pc, #44]	; (8007a34 <mem_init+0x6c>)
 8007a08:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 8007a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007a10:	f006 bae4 	b.w	800dfdc <iprintf>
 8007a14:	2000428f 	.word	0x2000428f
 8007a18:	20003ea0 	.word	0x20003ea0
 8007a1c:	20003e98 	.word	0x20003e98
 8007a20:	20003e9c 	.word	0x20003e9c
 8007a24:	20003e94 	.word	0x20003e94
 8007a28:	06400640 	.word	0x06400640
 8007a2c:	080114d8 	.word	0x080114d8
 8007a30:	08011508 	.word	0x08011508
 8007a34:	0800e670 	.word	0x0800e670

08007a38 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f000 8093 	beq.w	8007b64 <mem_free+0x12c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007a3e:	0783      	lsls	r3, r0, #30
{
 8007a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a44:	4604      	mov	r4, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007a46:	d167      	bne.n	8007b18 <mem_free+0xe0>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007a48:	4d50      	ldr	r5, [pc, #320]	; (8007b8c <mem_free+0x154>)
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d303      	bcc.n	8007a58 <mem_free+0x20>
 8007a50:	4e4f      	ldr	r6, [pc, #316]	; (8007b90 <mem_free+0x158>)
 8007a52:	6833      	ldr	r3, [r6, #0]
 8007a54:	429c      	cmp	r4, r3
 8007a56:	d313      	bcc.n	8007a80 <mem_free+0x48>
 8007a58:	4b4e      	ldr	r3, [pc, #312]	; (8007b94 <mem_free+0x15c>)
 8007a5a:	494f      	ldr	r1, [pc, #316]	; (8007b98 <mem_free+0x160>)
 8007a5c:	484f      	ldr	r0, [pc, #316]	; (8007b9c <mem_free+0x164>)
 8007a5e:	f240 12af 	movw	r2, #431	; 0x1af
 8007a62:	f006 fabb 	bl	800dfdc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007a66:	682b      	ldr	r3, [r5, #0]
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	d303      	bcc.n	8007a74 <mem_free+0x3c>
 8007a6c:	4e48      	ldr	r6, [pc, #288]	; (8007b90 <mem_free+0x158>)
 8007a6e:	6833      	ldr	r3, [r6, #0]
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d305      	bcc.n	8007a80 <mem_free+0x48>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007a74:	f005 fd96 	bl	800d5a4 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8007a7c:	f005 bd9e 	b.w	800d5bc <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8007a80:	4847      	ldr	r0, [pc, #284]	; (8007ba0 <mem_free+0x168>)
 8007a82:	f005 fd75 	bl	800d570 <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007a86:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007a8a:	f1a4 0708 	sub.w	r7, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d060      	beq.n	8007b54 <mem_free+0x11c>
  if (mem < lfree) {
 8007a92:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8007bbc <mem_free+0x184>
 8007a96:	f8d8 3000 	ldr.w	r3, [r8]
 8007a9a:	429f      	cmp	r7, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007a9c:	682b      	ldr	r3, [r5, #0]
    lfree = mem;
 8007a9e:	bf38      	it	cc
 8007aa0:	f8c8 7000 	strcc.w	r7, [r8]
  mem->used = 0;
 8007aa4:	2200      	movs	r2, #0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007aa6:	429f      	cmp	r7, r3
  mem->used = 0;
 8007aa8:	f804 2c04 	strb.w	r2, [r4, #-4]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007aac:	d33c      	bcc.n	8007b28 <mem_free+0xf0>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007aae:	6833      	ldr	r3, [r6, #0]
 8007ab0:	429f      	cmp	r7, r3
 8007ab2:	d262      	bcs.n	8007b7a <mem_free+0x142>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007ab4:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007ab8:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8007abc:	d853      	bhi.n	8007b66 <mem_free+0x12e>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	1899      	adds	r1, r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007ac2:	428f      	cmp	r7, r1
 8007ac4:	d011      	beq.n	8007aea <mem_free+0xb2>
 8007ac6:	7908      	ldrb	r0, [r1, #4]
 8007ac8:	b978      	cbnz	r0, 8007aea <mem_free+0xb2>
 8007aca:	6830      	ldr	r0, [r6, #0]
 8007acc:	4281      	cmp	r1, r0
 8007ace:	d00c      	beq.n	8007aea <mem_free+0xb2>
    if (lfree == nmem) {
 8007ad0:	f8d8 2000 	ldr.w	r2, [r8]
 8007ad4:	4291      	cmp	r1, r2
    mem->next = nmem->next;
 8007ad6:	880a      	ldrh	r2, [r1, #0]
 8007ad8:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007adc:	8809      	ldrh	r1, [r1, #0]
      lfree = mem;
 8007ade:	bf08      	it	eq
 8007ae0:	f8c8 7000 	streq.w	r7, [r8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007ae4:	4419      	add	r1, r3
 8007ae6:	1af8      	subs	r0, r7, r3
 8007ae8:	8048      	strh	r0, [r1, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8007aea:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 8007aee:	1858      	adds	r0, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007af0:	4287      	cmp	r7, r0
 8007af2:	d00c      	beq.n	8007b0e <mem_free+0xd6>
 8007af4:	7905      	ldrb	r5, [r0, #4]
 8007af6:	b955      	cbnz	r5, 8007b0e <mem_free+0xd6>
    pmem->next = mem->next;
 8007af8:	525a      	strh	r2, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007afa:	f834 2c08 	ldrh.w	r2, [r4, #-8]
    if (lfree == mem) {
 8007afe:	f8d8 5000 	ldr.w	r5, [r8]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007b02:	4413      	add	r3, r2
    if (lfree == mem) {
 8007b04:	42af      	cmp	r7, r5
      lfree = pmem;
 8007b06:	bf08      	it	eq
 8007b08:	f8c8 0000 	streq.w	r0, [r8]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007b0c:	8059      	strh	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007b0e:	4824      	ldr	r0, [pc, #144]	; (8007ba0 <mem_free+0x168>)
}
 8007b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8007b14:	f005 bd32 	b.w	800d57c <sys_mutex_unlock>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007b18:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <mem_free+0x15c>)
 8007b1a:	4922      	ldr	r1, [pc, #136]	; (8007ba4 <mem_free+0x16c>)
 8007b1c:	481f      	ldr	r0, [pc, #124]	; (8007b9c <mem_free+0x164>)
 8007b1e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8007b22:	f006 fa5b 	bl	800dfdc <iprintf>
 8007b26:	e78f      	b.n	8007a48 <mem_free+0x10>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007b28:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <mem_free+0x15c>)
 8007b2a:	491f      	ldr	r1, [pc, #124]	; (8007ba8 <mem_free+0x170>)
 8007b2c:	481b      	ldr	r0, [pc, #108]	; (8007b9c <mem_free+0x164>)
 8007b2e:	f240 125d 	movw	r2, #349	; 0x15d
 8007b32:	f006 fa53 	bl	800dfdc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007b36:	6833      	ldr	r3, [r6, #0]
 8007b38:	429f      	cmp	r7, r3
 8007b3a:	d21e      	bcs.n	8007b7a <mem_free+0x142>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007b3c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0b7      	beq.n	8007ab4 <mem_free+0x7c>
 8007b44:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <mem_free+0x15c>)
 8007b46:	4919      	ldr	r1, [pc, #100]	; (8007bac <mem_free+0x174>)
 8007b48:	4814      	ldr	r0, [pc, #80]	; (8007b9c <mem_free+0x164>)
 8007b4a:	f240 125f 	movw	r2, #351	; 0x15f
 8007b4e:	f006 fa45 	bl	800dfdc <iprintf>
 8007b52:	e7af      	b.n	8007ab4 <mem_free+0x7c>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007b54:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <mem_free+0x15c>)
 8007b56:	4916      	ldr	r1, [pc, #88]	; (8007bb0 <mem_free+0x178>)
 8007b58:	4810      	ldr	r0, [pc, #64]	; (8007b9c <mem_free+0x164>)
 8007b5a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007b5e:	f006 fa3d 	bl	800dfdc <iprintf>
 8007b62:	e796      	b.n	8007a92 <mem_free+0x5a>
 8007b64:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007b66:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <mem_free+0x15c>)
 8007b6c:	4911      	ldr	r1, [pc, #68]	; (8007bb4 <mem_free+0x17c>)
 8007b6e:	480b      	ldr	r0, [pc, #44]	; (8007b9c <mem_free+0x164>)
 8007b70:	f006 fa34 	bl	800dfdc <iprintf>
 8007b74:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007b78:	e7a1      	b.n	8007abe <mem_free+0x86>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <mem_free+0x15c>)
 8007b7c:	490e      	ldr	r1, [pc, #56]	; (8007bb8 <mem_free+0x180>)
 8007b7e:	4807      	ldr	r0, [pc, #28]	; (8007b9c <mem_free+0x164>)
 8007b80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007b84:	f006 fa2a 	bl	800dfdc <iprintf>
 8007b88:	e7d8      	b.n	8007b3c <mem_free+0x104>
 8007b8a:	bf00      	nop
 8007b8c:	20003e9c 	.word	0x20003e9c
 8007b90:	20003ea0 	.word	0x20003ea0
 8007b94:	080114d8 	.word	0x080114d8
 8007b98:	08011430 	.word	0x08011430
 8007b9c:	0800e670 	.word	0x0800e670
 8007ba0:	20003e98 	.word	0x20003e98
 8007ba4:	0801140c 	.word	0x0801140c
 8007ba8:	0801145c 	.word	0x0801145c
 8007bac:	08011490 	.word	0x08011490
 8007bb0:	08011448 	.word	0x08011448
 8007bb4:	080114ac 	.word	0x080114ac
 8007bb8:	08011474 	.word	0x08011474
 8007bbc:	20003e94 	.word	0x20003e94

08007bc0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007bc4:	3103      	adds	r1, #3
 8007bc6:	f64f 74fc 	movw	r4, #65532	; 0xfffc
 8007bca:	400c      	ands	r4, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8007bcc:	2c0b      	cmp	r4, #11
{
 8007bce:	4605      	mov	r5, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8007bd0:	d959      	bls.n	8007c86 <mem_trim+0xc6>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8007bd2:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8007bd6:	d871      	bhi.n	8007cbc <mem_trim+0xfc>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007bd8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8007cf8 <mem_trim+0x138>
 8007bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8007be0:	42ab      	cmp	r3, r5
 8007be2:	d83a      	bhi.n	8007c5a <mem_trim+0x9a>
 8007be4:	4a3d      	ldr	r2, [pc, #244]	; (8007cdc <mem_trim+0x11c>)
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	4295      	cmp	r5, r2
 8007bea:	d236      	bcs.n	8007c5a <mem_trim+0x9a>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007bec:	f1a5 0608 	sub.w	r6, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007bf0:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007bf4:	1af6      	subs	r6, r6, r3
 8007bf6:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007bf8:	3f08      	subs	r7, #8
 8007bfa:	1bbf      	subs	r7, r7, r6
 8007bfc:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007bfe:	42a7      	cmp	r7, r4
 8007c00:	d360      	bcc.n	8007cc4 <mem_trim+0x104>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8007c02:	d03d      	beq.n	8007c80 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007c04:	4836      	ldr	r0, [pc, #216]	; (8007ce0 <mem_trim+0x120>)
 8007c06:	f005 fcb3 	bl	800d570 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0e:	f835 2c08 	ldrh.w	r2, [r5, #-8]
 8007c12:	1899      	adds	r1, r3, r2
  if (mem2->used == 0) {
 8007c14:	7908      	ldrb	r0, [r1, #4]
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d037      	beq.n	8007c8a <mem_trim+0xca>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007c1a:	f104 0114 	add.w	r1, r4, #20
 8007c1e:	42b9      	cmp	r1, r7
 8007c20:	d815      	bhi.n	8007c4e <mem_trim+0x8e>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007c22:	f104 0108 	add.w	r1, r4, #8
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8007c26:	4c2f      	ldr	r4, [pc, #188]	; (8007ce4 <mem_trim+0x124>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007c28:	4431      	add	r1, r6
 8007c2a:	b289      	uxth	r1, r1
    if (mem2 < lfree) {
 8007c2c:	6827      	ldr	r7, [r4, #0]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007c2e:	1858      	adds	r0, r3, r1
    if (mem2 < lfree) {
 8007c30:	42b8      	cmp	r0, r7
      lfree = mem2;
 8007c32:	bf38      	it	cc
 8007c34:	6020      	strcc	r0, [r4, #0]
    }
    mem2->used = 0;
 8007c36:	2400      	movs	r4, #0
 8007c38:	7104      	strb	r4, [r0, #4]
    mem2->next = mem->next;
 8007c3a:	525a      	strh	r2, [r3, r1]
    mem2->prev = ptr;
 8007c3c:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 8007c3e:	f825 1c08 	strh.w	r1, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c42:	5a5a      	ldrh	r2, [r3, r1]
 8007c44:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007c48:	bf1c      	itt	ne
 8007c4a:	189b      	addne	r3, r3, r2
 8007c4c:	8059      	strhne	r1, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007c4e:	4824      	ldr	r0, [pc, #144]	; (8007ce0 <mem_trim+0x120>)
 8007c50:	f005 fc94 	bl	800d57c <sys_mutex_unlock>
  return rmem;
}
 8007c54:	4628      	mov	r0, r5
 8007c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007c5a:	4b23      	ldr	r3, [pc, #140]	; (8007ce8 <mem_trim+0x128>)
 8007c5c:	4923      	ldr	r1, [pc, #140]	; (8007cec <mem_trim+0x12c>)
 8007c5e:	4824      	ldr	r0, [pc, #144]	; (8007cf0 <mem_trim+0x130>)
 8007c60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007c64:	f006 f9ba 	bl	800dfdc <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007c68:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6c:	429d      	cmp	r5, r3
 8007c6e:	d303      	bcc.n	8007c78 <mem_trim+0xb8>
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <mem_trim+0x11c>)
 8007c72:	6812      	ldr	r2, [r2, #0]
 8007c74:	4295      	cmp	r5, r2
 8007c76:	d3b9      	bcc.n	8007bec <mem_trim+0x2c>
    SYS_ARCH_PROTECT(lev);
 8007c78:	f005 fc94 	bl	800d5a4 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8007c7c:	f005 fc9e 	bl	800d5bc <sys_arch_unprotect>
}
 8007c80:	4628      	mov	r0, r5
 8007c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    newsize = MIN_SIZE_ALIGNED;
 8007c86:	240c      	movs	r4, #12
 8007c88:	e7a6      	b.n	8007bd8 <mem_trim+0x18>
    if (lfree == mem2) {
 8007c8a:	4816      	ldr	r0, [pc, #88]	; (8007ce4 <mem_trim+0x124>)
    next = mem2->next;
 8007c8c:	5a9f      	ldrh	r7, [r3, r2]
    if (lfree == mem2) {
 8007c8e:	6802      	ldr	r2, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007c90:	3408      	adds	r4, #8
 8007c92:	4434      	add	r4, r6
 8007c94:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007c96:	4291      	cmp	r1, r2
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007c98:	eb03 0204 	add.w	r2, r3, r4
    mem2->used = 0;
 8007c9c:	f04f 0100 	mov.w	r1, #0
    mem2->next = next;
 8007ca0:	8017      	strh	r7, [r2, #0]
    mem2->prev = ptr;
 8007ca2:	8056      	strh	r6, [r2, #2]
    mem2->used = 0;
 8007ca4:	7111      	strb	r1, [r2, #4]
    mem->next = ptr2;
 8007ca6:	f825 4c08 	strh.w	r4, [r5, #-8]
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007caa:	bf08      	it	eq
 8007cac:	6002      	streq	r2, [r0, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007cae:	8812      	ldrh	r2, [r2, #0]
 8007cb0:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8007cb4:	d0cb      	beq.n	8007c4e <mem_trim+0x8e>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007cb6:	4413      	add	r3, r2
 8007cb8:	805c      	strh	r4, [r3, #2]
 8007cba:	e7c8      	b.n	8007c4e <mem_trim+0x8e>
    return NULL;
 8007cbc:	2500      	movs	r5, #0
}
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007cc4:	4b08      	ldr	r3, [pc, #32]	; (8007ce8 <mem_trim+0x128>)
 8007cc6:	490b      	ldr	r1, [pc, #44]	; (8007cf4 <mem_trim+0x134>)
 8007cc8:	4809      	ldr	r0, [pc, #36]	; (8007cf0 <mem_trim+0x130>)
 8007cca:	f240 2206 	movw	r2, #518	; 0x206
    return NULL;
 8007cce:	2500      	movs	r5, #0
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007cd0:	f006 f984 	bl	800dfdc <iprintf>
}
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cda:	bf00      	nop
 8007cdc:	20003ea0 	.word	0x20003ea0
 8007ce0:	20003e98 	.word	0x20003e98
 8007ce4:	20003e94 	.word	0x20003e94
 8007ce8:	080114d8 	.word	0x080114d8
 8007cec:	080115a8 	.word	0x080115a8
 8007cf0:	0800e670 	.word	0x0800e670
 8007cf4:	080115c0 	.word	0x080115c0
 8007cf8:	20003e9c 	.word	0x20003e9c

08007cfc <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d077      	beq.n	8007df0 <mem_malloc+0xf4>
{
 8007d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007d04:	3003      	adds	r0, #3
 8007d06:	f64f 77fc 	movw	r7, #65532	; 0xfffc
 8007d0a:	4007      	ands	r7, r0

  if (size < MIN_SIZE_ALIGNED) {
 8007d0c:	2f0b      	cmp	r7, #11
 8007d0e:	d92e      	bls.n	8007d6e <mem_malloc+0x72>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007d10:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 8007d14:	d869      	bhi.n	8007dea <mem_malloc+0xee>
 8007d16:	46b8      	mov	r8, r7
 8007d18:	f5c7 66c8 	rsb	r6, r7, #1600	; 0x640
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007d1c:	4843      	ldr	r0, [pc, #268]	; (8007e2c <mem_malloc+0x130>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d1e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8007e4c <mem_malloc+0x150>
  sys_mutex_lock(&mem_mutex);
 8007d22:	f005 fc25 	bl	800d570 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d26:	4b42      	ldr	r3, [pc, #264]	; (8007e30 <mem_malloc+0x134>)
 8007d28:	f8d9 c000 	ldr.w	ip, [r9]
 8007d2c:	6819      	ldr	r1, [r3, #0]
 8007d2e:	ebac 0501 	sub.w	r5, ip, r1
 8007d32:	b2ab      	uxth	r3, r5
 8007d34:	42b3      	cmp	r3, r6
 8007d36:	461d      	mov	r5, r3
 8007d38:	d213      	bcs.n	8007d62 <mem_malloc+0x66>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d3a:	f06f 0e07 	mvn.w	lr, #7
 8007d3e:	e006      	b.n	8007d4e <mem_malloc+0x52>
 8007d40:	5acb      	ldrh	r3, [r1, r3]
 8007d42:	441a      	add	r2, r3
      if ((!mem->used) &&
 8007d44:	4542      	cmp	r2, r8
 8007d46:	d218      	bcs.n	8007d7a <mem_malloc+0x7e>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d48:	42b3      	cmp	r3, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d4a:	461d      	mov	r5, r3
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d4c:	d209      	bcs.n	8007d62 <mem_malloc+0x66>
      mem = (struct mem *)(void *)&ram[ptr];
 8007d4e:	18cc      	adds	r4, r1, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d50:	ebae 0203 	sub.w	r2, lr, r3
      if ((!mem->used) &&
 8007d54:	7920      	ldrb	r0, [r4, #4]
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0f2      	beq.n	8007d40 <mem_malloc+0x44>
 8007d5a:	5acd      	ldrh	r5, [r1, r3]
 8007d5c:	462b      	mov	r3, r5
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007d5e:	42b3      	cmp	r3, r6
 8007d60:	d3f5      	bcc.n	8007d4e <mem_malloc+0x52>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007d62:	4832      	ldr	r0, [pc, #200]	; (8007e2c <mem_malloc+0x130>)
 8007d64:	f005 fc0a 	bl	800d57c <sys_mutex_unlock>
  return NULL;
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6e:	f04f 080c 	mov.w	r8, #12
    size = MIN_SIZE_ALIGNED;
 8007d72:	4647      	mov	r7, r8
 8007d74:	f240 6634 	movw	r6, #1588	; 0x634
 8007d78:	e7d0      	b.n	8007d1c <mem_malloc+0x20>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007d7a:	f108 0614 	add.w	r6, r8, #20
 8007d7e:	42b2      	cmp	r2, r6
 8007d80:	d221      	bcs.n	8007dc6 <mem_malloc+0xca>
          mem->used = 1;
 8007d82:	2301      	movs	r3, #1
 8007d84:	7123      	strb	r3, [r4, #4]
        if (mem == lfree) {
 8007d86:	45a4      	cmp	ip, r4
          while (cur->used && cur != ram_end) {
 8007d88:	4d2a      	ldr	r5, [pc, #168]	; (8007e34 <mem_malloc+0x138>)
        if (mem == lfree) {
 8007d8a:	d03a      	beq.n	8007e02 <mem_malloc+0x106>
        sys_mutex_unlock(&mem_mutex);
 8007d8c:	4827      	ldr	r0, [pc, #156]	; (8007e2c <mem_malloc+0x130>)
 8007d8e:	f005 fbf5 	bl	800d57c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d92:	f108 0808 	add.w	r8, r8, #8
 8007d96:	682b      	ldr	r3, [r5, #0]
 8007d98:	44a0      	add	r8, r4
 8007d9a:	4543      	cmp	r3, r8
 8007d9c:	d329      	bcc.n	8007df2 <mem_malloc+0xf6>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007d9e:	07a3      	lsls	r3, r4, #30
 8007da0:	d00d      	beq.n	8007dbe <mem_malloc+0xc2>
 8007da2:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <mem_malloc+0x13c>)
 8007da4:	4925      	ldr	r1, [pc, #148]	; (8007e3c <mem_malloc+0x140>)
 8007da6:	4826      	ldr	r0, [pc, #152]	; (8007e40 <mem_malloc+0x144>)
 8007da8:	f240 22d6 	movw	r2, #726	; 0x2d6
 8007dac:	f006 f916 	bl	800dfdc <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007db0:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <mem_malloc+0x13c>)
 8007db2:	4924      	ldr	r1, [pc, #144]	; (8007e44 <mem_malloc+0x148>)
 8007db4:	4822      	ldr	r0, [pc, #136]	; (8007e40 <mem_malloc+0x144>)
 8007db6:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8007dba:	f006 f90f 	bl	800dfdc <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007dbe:	f104 0008 	add.w	r0, r4, #8
 8007dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007dc6:	f107 0208 	add.w	r2, r7, #8
 8007dca:	442a      	add	r2, r5
 8007dcc:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007dce:	188e      	adds	r6, r1, r2
          mem->used = 1;
 8007dd0:	2701      	movs	r7, #1
          mem2->used = 0;
 8007dd2:	7130      	strb	r0, [r6, #4]
          mem2->next = mem->next;
 8007dd4:	528b      	strh	r3, [r1, r2]
          mem2->prev = ptr;
 8007dd6:	8075      	strh	r5, [r6, #2]
          mem->next = ptr2;
 8007dd8:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8007dda:	7127      	strb	r7, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007ddc:	5a8b      	ldrh	r3, [r1, r2]
 8007dde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007de2:	d0d0      	beq.n	8007d86 <mem_malloc+0x8a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007de4:	440b      	add	r3, r1
 8007de6:	805a      	strh	r2, [r3, #2]
 8007de8:	e7cd      	b.n	8007d86 <mem_malloc+0x8a>
    return NULL;
 8007dea:	2000      	movs	r0, #0
 8007dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8007df0:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007df2:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <mem_malloc+0x13c>)
 8007df4:	4914      	ldr	r1, [pc, #80]	; (8007e48 <mem_malloc+0x14c>)
 8007df6:	4812      	ldr	r0, [pc, #72]	; (8007e40 <mem_malloc+0x144>)
 8007df8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007dfc:	f006 f8ee 	bl	800dfdc <iprintf>
 8007e00:	e7cd      	b.n	8007d9e <mem_malloc+0xa2>
          while (cur->used && cur != ram_end) {
 8007e02:	682a      	ldr	r2, [r5, #0]
 8007e04:	4294      	cmp	r4, r2
 8007e06:	bf08      	it	eq
 8007e08:	4622      	moveq	r2, r4
 8007e0a:	d102      	bne.n	8007e12 <mem_malloc+0x116>
 8007e0c:	e00b      	b.n	8007e26 <mem_malloc+0x12a>
 8007e0e:	4594      	cmp	ip, r2
 8007e10:	d009      	beq.n	8007e26 <mem_malloc+0x12a>
            cur = (struct mem *)(void *)&ram[cur->next];
 8007e12:	f8bc c000 	ldrh.w	ip, [ip]
 8007e16:	448c      	add	ip, r1
          while (cur->used && cur != ram_end) {
 8007e18:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f6      	bne.n	8007e0e <mem_malloc+0x112>
          lfree = cur;
 8007e20:	f8c9 c000 	str.w	ip, [r9]
 8007e24:	e7b2      	b.n	8007d8c <mem_malloc+0x90>
 8007e26:	f8c9 2000 	str.w	r2, [r9]
 8007e2a:	e7af      	b.n	8007d8c <mem_malloc+0x90>
 8007e2c:	20003e98 	.word	0x20003e98
 8007e30:	20003e9c 	.word	0x20003e9c
 8007e34:	20003ea0 	.word	0x20003ea0
 8007e38:	080114d8 	.word	0x080114d8
 8007e3c:	08011554 	.word	0x08011554
 8007e40:	0800e670 	.word	0x0800e670
 8007e44:	08011584 	.word	0x08011584
 8007e48:	08011524 	.word	0x08011524
 8007e4c:	20003e94 	.word	0x20003e94

08007e50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e52:	4f12      	ldr	r7, [pc, #72]	; (8007e9c <memp_init+0x4c>)
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <memp_init+0x50>)
 8007e56:	4d13      	ldr	r5, [pc, #76]	; (8007ea4 <memp_init+0x54>)
 8007e58:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <memp_init+0x58>)
 8007e5a:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8007e5e:	2404      	movs	r4, #4
  *desc->tab = NULL;
 8007e60:	f04f 0e00 	mov.w	lr, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007e64:	3303      	adds	r3, #3
 8007e66:	f023 0303 	bic.w	r3, r3, #3
  *desc->tab = NULL;
 8007e6a:	f8c5 e000 	str.w	lr, [r5]
  for (i = 0; i < desc->num; ++i) {
 8007e6e:	b164      	cbz	r4, 8007e8a <memp_init+0x3a>
 8007e70:	2100      	movs	r1, #0
 8007e72:	8816      	ldrh	r6, [r2, #0]
 8007e74:	460a      	mov	r2, r1
 8007e76:	e000      	b.n	8007e7a <memp_init+0x2a>
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007e78:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	42a2      	cmp	r2, r4
    memp->next = *desc->tab;
 8007e7e:	6019      	str	r1, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007e80:	eb03 0006 	add.w	r0, r3, r6
    *desc->tab = memp;
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	4619      	mov	r1, r3
  for (i = 0; i < desc->num; ++i) {
 8007e88:	d1f6      	bne.n	8007e78 <memp_init+0x28>
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e8a:	45bc      	cmp	ip, r7
 8007e8c:	d005      	beq.n	8007e9a <memp_init+0x4a>
 8007e8e:	f857 2f04 	ldr.w	r2, [r7, #4]!
 8007e92:	6895      	ldr	r5, [r2, #8]
 8007e94:	6853      	ldr	r3, [r2, #4]
 8007e96:	8854      	ldrh	r4, [r2, #2]
 8007e98:	e7e4      	b.n	8007e64 <memp_init+0x14>
 8007e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9c:	08011740 	.word	0x08011740
 8007ea0:	200081ac 	.word	0x200081ac
 8007ea4:	20003ed4 	.word	0x20003ed4
 8007ea8:	08011670 	.word	0x08011670

08007eac <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007eac:	280c      	cmp	r0, #12
{
 8007eae:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007eb0:	d818      	bhi.n	8007ee4 <memp_malloc+0x38>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007eb2:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <memp_malloc+0x54>)
 8007eb4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  SYS_ARCH_PROTECT(old_level);
 8007eb8:	f005 fb74 	bl	800d5a4 <sys_arch_protect>
  memp = *desc->tab;
 8007ebc:	68a3      	ldr	r3, [r4, #8]
 8007ebe:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8007ec0:	4605      	mov	r5, r0
  if (memp != NULL) {
 8007ec2:	b1c4      	cbz	r4, 8007ef6 <memp_malloc+0x4a>
    *desc->tab = memp->next;
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007ec8:	07a3      	lsls	r3, r4, #30
 8007eca:	d006      	beq.n	8007eda <memp_malloc+0x2e>
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <memp_malloc+0x58>)
 8007ece:	490e      	ldr	r1, [pc, #56]	; (8007f08 <memp_malloc+0x5c>)
 8007ed0:	480e      	ldr	r0, [pc, #56]	; (8007f0c <memp_malloc+0x60>)
 8007ed2:	f240 1249 	movw	r2, #329	; 0x149
 8007ed6:	f006 f881 	bl	800dfdc <iprintf>
    SYS_ARCH_UNPROTECT(old_level);
 8007eda:	4628      	mov	r0, r5
 8007edc:	f005 fb6e 	bl	800d5bc <sys_arch_unprotect>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <memp_malloc+0x58>)
 8007ee6:	490a      	ldr	r1, [pc, #40]	; (8007f10 <memp_malloc+0x64>)
 8007ee8:	4808      	ldr	r0, [pc, #32]	; (8007f0c <memp_malloc+0x60>)
 8007eea:	f240 1287 	movw	r2, #391	; 0x187
 8007eee:	f006 f875 	bl	800dfdc <iprintf>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
  SYS_ARCH_UNPROTECT(old_level);
 8007ef6:	f005 fb61 	bl	800d5bc <sys_arch_unprotect>
  return NULL;
 8007efa:	4620      	mov	r0, r4
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	08011740 	.word	0x08011740
 8007f04:	080116d8 	.word	0x080116d8
 8007f08:	0801171c 	.word	0x0801171c
 8007f0c:	0800e670 	.word	0x0800e670
 8007f10:	080116b8 	.word	0x080116b8

08007f14 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007f14:	280c      	cmp	r0, #12
 8007f16:	d819      	bhi.n	8007f4c <memp_free+0x38>

  if (mem == NULL) {
 8007f18:	b1f9      	cbz	r1, 8007f5a <memp_free+0x46>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007f1a:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <memp_free+0x48>)
{
 8007f1c:	b570      	push	{r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8007f1e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007f22:	078b      	lsls	r3, r1, #30
 8007f24:	460c      	mov	r4, r1
 8007f26:	d109      	bne.n	8007f3c <memp_free+0x28>
  SYS_ARCH_PROTECT(old_level);
 8007f28:	f005 fb3c 	bl	800d5a4 <sys_arch_protect>
  memp->next = *desc->tab;
 8007f2c:	68ab      	ldr	r3, [r5, #8]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007f32:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007f38:	f005 bb40 	b.w	800d5bc <sys_arch_unprotect>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <memp_free+0x4c>)
 8007f3e:	4909      	ldr	r1, [pc, #36]	; (8007f64 <memp_free+0x50>)
 8007f40:	4809      	ldr	r0, [pc, #36]	; (8007f68 <memp_free+0x54>)
 8007f42:	f240 129d 	movw	r2, #413	; 0x19d
 8007f46:	f006 f849 	bl	800dfdc <iprintf>
 8007f4a:	e7ed      	b.n	8007f28 <memp_free+0x14>
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <memp_free+0x4c>)
 8007f4e:	4907      	ldr	r1, [pc, #28]	; (8007f6c <memp_free+0x58>)
 8007f50:	4805      	ldr	r0, [pc, #20]	; (8007f68 <memp_free+0x54>)
 8007f52:	f240 12db 	movw	r2, #475	; 0x1db
 8007f56:	f006 b841 	b.w	800dfdc <iprintf>
 8007f5a:	4770      	bx	lr
 8007f5c:	08011740 	.word	0x08011740
 8007f60:	080116d8 	.word	0x080116d8
 8007f64:	08011698 	.word	0x08011698
 8007f68:	0800e670 	.word	0x0800e670
 8007f6c:	0801167c 	.word	0x0801167c

08007f70 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop

08007f74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f7e:	460f      	mov	r7, r1
 8007f80:	4615      	mov	r5, r2
 8007f82:	4698      	mov	r8, r3
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8007f84:	2e00      	cmp	r6, #0
 8007f86:	d063      	beq.n	8008050 <netif_add+0xdc>
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 8007f88:	4a36      	ldr	r2, [pc, #216]	; (8008064 <netif_add+0xf0>)
  netif->state = state;
 8007f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8c:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8007f8e:	7813      	ldrb	r3, [r2, #0]
  netif->input = input;
 8007f90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f92:	6121      	str	r1, [r4, #16]
  netif->num = netif_num++;
 8007f94:	1c59      	adds	r1, r3, #1
 8007f96:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8007f9a:	7011      	strb	r1, [r2, #0]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007f9c:	2300      	movs	r3, #0
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007f9e:	2203      	movs	r2, #3
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007fa0:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007fa2:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007fa4:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 8007fa6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007faa:	f884 2020 	strb.w	r2, [r4, #32]
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  if (ip4_addr_isany(ipaddr)) {
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	d03b      	beq.n	800802a <netif_add+0xb6>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	b303      	cbz	r3, 8007ff8 <netif_add+0x84>
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007fb6:	b105      	cbz	r5, 8007fba <netif_add+0x46>
 8007fb8:	682d      	ldr	r5, [r5, #0]
 8007fba:	60a5      	str	r5, [r4, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007fbc:	f1b8 0f00 	cmp.w	r8, #0
 8007fc0:	d044      	beq.n	800804c <netif_add+0xd8>
 8007fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc6:	60e3      	str	r3, [r4, #12]
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007fcc:	b1f3      	cbz	r3, 800800c <netif_add+0x98>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007fce:	1d25      	adds	r5, r4, #4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	a901      	add	r1, sp, #4
 8007fd4:	f002 f80a 	bl	8009fec <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007fd8:	a901      	add	r1, sp, #4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f005 f94e 	bl	800d27c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	6063      	str	r3, [r4, #4]
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fe4:	b193      	cbz	r3, 800800c <netif_add+0x98>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007fe6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8007fea:	071b      	lsls	r3, r3, #28
 8007fec:	d50e      	bpl.n	800800c <netif_add+0x98>
      etharp_gratuitous(netif);
 8007fee:	4629      	mov	r1, r5
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f7fe fd01 	bl	80069f8 <etharp_request>
 8007ff6:	e009      	b.n	800800c <netif_add+0x98>
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007ff8:	9301      	str	r3, [sp, #4]
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007ffa:	b105      	cbz	r5, 8007ffe <netif_add+0x8a>
 8007ffc:	682d      	ldr	r5, [r5, #0]
 8007ffe:	60a5      	str	r5, [r4, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d02b      	beq.n	800805e <netif_add+0xea>
 8008006:	f8d8 3000 	ldr.w	r3, [r8]
 800800a:	60e3      	str	r3, [r4, #12]
  if (init(netif) != ERR_OK) {
 800800c:	4620      	mov	r0, r4
 800800e:	47b0      	blx	r6
 8008010:	b938      	cbnz	r0, 8008022 <netif_add+0xae>
  netif->next = netif_list;
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <netif_add+0xf4>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	6022      	str	r2, [r4, #0]
  return netif;
 8008018:	4620      	mov	r0, r4
  netif_list = netif;
 800801a:	601c      	str	r4, [r3, #0]
}
 800801c:	b003      	add	sp, #12
 800801e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8008022:	2000      	movs	r0, #0
}
 8008024:	b003      	add	sp, #12
 8008026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800802a:	4b10      	ldr	r3, [pc, #64]	; (800806c <netif_add+0xf8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0e2      	beq.n	8007ffa <netif_add+0x86>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008034:	1d23      	adds	r3, r4, #4
 8008036:	4699      	mov	r9, r3
 8008038:	4618      	mov	r0, r3
 800803a:	a901      	add	r1, sp, #4
 800803c:	f001 ffd6 	bl	8009fec <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008040:	a901      	add	r1, sp, #4
 8008042:	4648      	mov	r0, r9
 8008044:	f005 f91a 	bl	800d27c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008048:	6067      	str	r7, [r4, #4]
 800804a:	e7d6      	b.n	8007ffa <netif_add+0x86>
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800804c:	4643      	mov	r3, r8
 800804e:	e7ba      	b.n	8007fc6 <netif_add+0x52>
  LWIP_ASSERT("No init function given", init != NULL);
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <netif_add+0xfc>)
 8008052:	4908      	ldr	r1, [pc, #32]	; (8008074 <netif_add+0x100>)
 8008054:	4808      	ldr	r0, [pc, #32]	; (8008078 <netif_add+0x104>)
 8008056:	22fb      	movs	r2, #251	; 0xfb
 8008058:	f005 ffc0 	bl	800dfdc <iprintf>
 800805c:	e794      	b.n	8007f88 <netif_add+0x14>
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800805e:	4643      	mov	r3, r8
 8008060:	e7d3      	b.n	800800a <netif_add+0x96>
 8008062:	bf00      	nop
 8008064:	20003ed8 	.word	0x20003ed8
 8008068:	2000888c 	.word	0x2000888c
 800806c:	08011290 	.word	0x08011290
 8008070:	08011774 	.word	0x08011774
 8008074:	080117a8 	.word	0x080117a8
 8008078:	0800e670 	.word	0x0800e670

0800807c <netif_set_default>:
  netif_default = netif;
 800807c:	4b01      	ldr	r3, [pc, #4]	; (8008084 <netif_set_default+0x8>)
 800807e:	6018      	str	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20008890 	.word	0x20008890

08008088 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008088:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800808c:	07da      	lsls	r2, r3, #31
{
 800808e:	4601      	mov	r1, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008090:	d407      	bmi.n	80080a2 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8008092:	f043 0201 	orr.w	r2, r3, #1
 8008096:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800809a:	075a      	lsls	r2, r3, #29
 800809c:	d501      	bpl.n	80080a2 <netif_set_up+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800809e:	6842      	ldr	r2, [r0, #4]
 80080a0:	b902      	cbnz	r2, 80080a4 <netif_set_up+0x1c>
 80080a2:	4770      	bx	lr
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80080a4:	071b      	lsls	r3, r3, #28
 80080a6:	d5fc      	bpl.n	80080a2 <netif_set_up+0x1a>
      etharp_gratuitous(netif);
 80080a8:	3104      	adds	r1, #4
 80080aa:	f7fe bca5 	b.w	80069f8 <etharp_request>
 80080ae:	bf00      	nop

080080b0 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 80080b0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80080b4:	07d9      	lsls	r1, r3, #31
 80080b6:	d505      	bpl.n	80080c4 <netif_set_down+0x14>
    netif->flags &= ~NETIF_FLAG_UP;
 80080b8:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80080bc:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 80080be:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80080c2:	d400      	bmi.n	80080c6 <netif_set_down+0x16>
 80080c4:	4770      	bx	lr
      etharp_cleanup_netif(netif);
 80080c6:	f7fe b973 	b.w	80063b0 <etharp_cleanup_netif>
 80080ca:	bf00      	nop

080080cc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80080cc:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80080ce:	f005 fa69 	bl	800d5a4 <sys_arch_protect>
 80080d2:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <pbuf_free_ooseq_callback+0x30>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	f005 fa70 	bl	800d5bc <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80080dc:	4b08      	ldr	r3, [pc, #32]	; (8008100 <pbuf_free_ooseq_callback+0x34>)
 80080de:	681c      	ldr	r4, [r3, #0]
 80080e0:	b914      	cbnz	r4, 80080e8 <pbuf_free_ooseq_callback+0x1c>
 80080e2:	e009      	b.n	80080f8 <pbuf_free_ooseq_callback+0x2c>
 80080e4:	68e4      	ldr	r4, [r4, #12]
 80080e6:	b13c      	cbz	r4, 80080f8 <pbuf_free_ooseq_callback+0x2c>
    if (NULL != pcb->ooseq) {
 80080e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d0fa      	beq.n	80080e4 <pbuf_free_ooseq_callback+0x18>
      tcp_segs_free(pcb->ooseq);
 80080ee:	f001 f86b 	bl	80091c8 <tcp_segs_free>
      pcb->ooseq = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	6723      	str	r3, [r4, #112]	; 0x70
 80080f6:	bd10      	pop	{r4, pc}
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	bf00      	nop
 80080fc:	20008894 	.word	0x20008894
 8008100:	2000889c 	.word	0x2000889c

08008104 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	9c04      	ldr	r4, [sp, #16]
 8008108:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800810c:	2804      	cmp	r0, #4
 800810e:	d81c      	bhi.n	800814a <pbuf_alloced_custom+0x46>
 8008110:	e8df f000 	tbb	[pc, r0]
 8008114:	03171519 	.word	0x03171519
 8008118:	03          	.byte	0x03
 8008119:	00          	.byte	0x00
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
    break;
  case PBUF_RAW:
    offset = 0;
    break;
 800811a:	2000      	movs	r0, #0
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800811c:	180e      	adds	r6, r1, r0
 800811e:	42ae      	cmp	r6, r5
 8008120:	d81c      	bhi.n	800815c <pbuf_alloced_custom+0x58>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  p->pbuf.next = NULL;
 8008122:	2500      	movs	r5, #0
 8008124:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8008126:	b104      	cbz	r4, 800812a <pbuf_alloced_custom+0x26>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008128:	4404      	add	r4, r0
  } else {
    p->pbuf.payload = NULL;
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800812a:	2502      	movs	r5, #2
  p->pbuf.len = p->pbuf.tot_len = length;
  p->pbuf.type = type;
  p->pbuf.ref = 1;
 800812c:	2001      	movs	r0, #1
  p->pbuf.type = type;
 800812e:	731a      	strb	r2, [r3, #12]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008130:	735d      	strb	r5, [r3, #13]
  p->pbuf.ref = 1;
 8008132:	81d8      	strh	r0, [r3, #14]
 8008134:	605c      	str	r4, [r3, #4]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008136:	8119      	strh	r1, [r3, #8]
 8008138:	8159      	strh	r1, [r3, #10]
  return &p->pbuf;
 800813a:	4618      	mov	r0, r3
 800813c:	bd70      	pop	{r4, r5, r6, pc}
  switch (l) {
 800813e:	2024      	movs	r0, #36	; 0x24
 8008140:	e7ec      	b.n	800811c <pbuf_alloced_custom+0x18>
 8008142:	2010      	movs	r0, #16
 8008144:	e7ea      	b.n	800811c <pbuf_alloced_custom+0x18>
 8008146:	2038      	movs	r0, #56	; 0x38
 8008148:	e7e8      	b.n	800811c <pbuf_alloced_custom+0x18>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800814a:	4b05      	ldr	r3, [pc, #20]	; (8008160 <pbuf_alloced_custom+0x5c>)
 800814c:	4905      	ldr	r1, [pc, #20]	; (8008164 <pbuf_alloced_custom+0x60>)
 800814e:	4806      	ldr	r0, [pc, #24]	; (8008168 <pbuf_alloced_custom+0x64>)
 8008150:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008154:	f005 ff42 	bl	800dfdc <iprintf>
    return NULL;
 8008158:	2000      	movs	r0, #0
 800815a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800815c:	2000      	movs	r0, #0
}
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	08011870 	.word	0x08011870
 8008164:	080118a0 	.word	0x080118a0
 8008168:	0800e670 	.word	0x0800e670

0800816c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800816c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800816e:	4604      	mov	r4, r0
 8008170:	2800      	cmp	r0, #0
 8008172:	d039      	beq.n	80081e8 <pbuf_header+0x7c>
  if ((header_size_increment == 0) || (p == NULL)) {
 8008174:	2900      	cmp	r1, #0
 8008176:	d01a      	beq.n	80081ae <pbuf_header+0x42>
  if (header_size_increment < 0) {
 8008178:	db1b      	blt.n	80081b2 <pbuf_header+0x46>
    increment_magnitude = (u16_t)header_size_increment;
 800817a:	b288      	uxth	r0, r1
 800817c:	4602      	mov	r2, r0
  type = p->type;
 800817e:	7b23      	ldrb	r3, [r4, #12]
  payload = p->payload;
 8008180:	6865      	ldr	r5, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008182:	b143      	cbz	r3, 8008196 <pbuf_header+0x2a>
 8008184:	2b03      	cmp	r3, #3
 8008186:	d006      	beq.n	8008196 <pbuf_header+0x2a>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8008188:	3b01      	subs	r3, #1
 800818a:	2b01      	cmp	r3, #1
 800818c:	d823      	bhi.n	80081d6 <pbuf_header+0x6a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800818e:	2900      	cmp	r1, #0
 8008190:	db33      	blt.n	80081fa <pbuf_header+0x8e>
      return 1;
 8008192:	2001      	movs	r0, #1
 8008194:	bd38      	pop	{r3, r4, r5, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 8008196:	1a69      	subs	r1, r5, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008198:	f104 0310 	add.w	r3, r4, #16
 800819c:	4299      	cmp	r1, r3
    p->payload = (u8_t *)p->payload - header_size_increment;
 800819e:	6061      	str	r1, [r4, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80081a0:	d316      	bcc.n	80081d0 <pbuf_header+0x64>
 80081a2:	8963      	ldrh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80081a4:	8921      	ldrh	r1, [r4, #8]
  p->len += header_size_increment;
 80081a6:	4413      	add	r3, r2
  p->tot_len += header_size_increment;
 80081a8:	440a      	add	r2, r1
  p->len += header_size_increment;
 80081aa:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80081ac:	8122      	strh	r2, [r4, #8]
  return 0;
 80081ae:	2000      	movs	r0, #0
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)-header_size_increment;
 80081b2:	b28a      	uxth	r2, r1
 80081b4:	4250      	negs	r0, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80081b6:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80081b8:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80081ba:	4283      	cmp	r3, r0
 80081bc:	d2df      	bcs.n	800817e <pbuf_header+0x12>
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <pbuf_header+0x9c>)
 80081c0:	4912      	ldr	r1, [pc, #72]	; (800820c <pbuf_header+0xa0>)
 80081c2:	4813      	ldr	r0, [pc, #76]	; (8008210 <pbuf_header+0xa4>)
 80081c4:	f240 2247 	movw	r2, #583	; 0x247
 80081c8:	f005 ff08 	bl	800dfdc <iprintf>
 80081cc:	2001      	movs	r0, #1
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
      p->payload = payload;
 80081d0:	6065      	str	r5, [r4, #4]
      return 1;
 80081d2:	2001      	movs	r0, #1
 80081d4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("bad pbuf type", 0);
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <pbuf_header+0x9c>)
 80081d8:	490e      	ldr	r1, [pc, #56]	; (8008214 <pbuf_header+0xa8>)
 80081da:	480d      	ldr	r0, [pc, #52]	; (8008210 <pbuf_header+0xa4>)
 80081dc:	f240 2277 	movw	r2, #631	; 0x277
 80081e0:	f005 fefc 	bl	800dfdc <iprintf>
    return 1;
 80081e4:	2001      	movs	r0, #1
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80081e8:	4b07      	ldr	r3, [pc, #28]	; (8008208 <pbuf_header+0x9c>)
 80081ea:	490b      	ldr	r1, [pc, #44]	; (8008218 <pbuf_header+0xac>)
 80081ec:	4808      	ldr	r0, [pc, #32]	; (8008210 <pbuf_header+0xa4>)
 80081ee:	f240 223f 	movw	r2, #575	; 0x23f
 80081f2:	f005 fef3 	bl	800dfdc <iprintf>
    return 0;
 80081f6:	4620      	mov	r0, r4
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80081fa:	8963      	ldrh	r3, [r4, #10]
 80081fc:	4283      	cmp	r3, r0
 80081fe:	d3c8      	bcc.n	8008192 <pbuf_header+0x26>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008200:	1a69      	subs	r1, r5, r1
 8008202:	6061      	str	r1, [r4, #4]
 8008204:	e7ce      	b.n	80081a4 <pbuf_header+0x38>
 8008206:	bf00      	nop
 8008208:	08011870 	.word	0x08011870
 800820c:	08011a74 	.word	0x08011a74
 8008210:	0800e670 	.word	0x0800e670
 8008214:	08011a94 	.word	0x08011a94
 8008218:	0800e964 	.word	0x0800e964

0800821c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800821c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800821e:	4604      	mov	r4, r0
 8008220:	2800      	cmp	r0, #0
 8008222:	d03b      	beq.n	800829c <pbuf_header_force+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8008224:	2900      	cmp	r1, #0
 8008226:	d01c      	beq.n	8008262 <pbuf_header_force+0x46>
  if (header_size_increment < 0) {
 8008228:	db1d      	blt.n	8008266 <pbuf_header_force+0x4a>
    increment_magnitude = (u16_t)header_size_increment;
 800822a:	b28d      	uxth	r5, r1
 800822c:	462b      	mov	r3, r5
  type = p->type;
 800822e:	7b22      	ldrb	r2, [r4, #12]
  payload = p->payload;
 8008230:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008232:	b152      	cbz	r2, 800824a <pbuf_header_force+0x2e>
 8008234:	2a03      	cmp	r2, #3
 8008236:	d008      	beq.n	800824a <pbuf_header_force+0x2e>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8008238:	3a01      	subs	r2, #1
 800823a:	2a01      	cmp	r2, #1
 800823c:	d825      	bhi.n	800828a <pbuf_header_force+0x6e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800823e:	2900      	cmp	r1, #0
 8008240:	db35      	blt.n	80082ae <pbuf_header_force+0x92>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008242:	1a41      	subs	r1, r0, r1
 8008244:	6061      	str	r1, [r4, #4]
 8008246:	8962      	ldrh	r2, [r4, #10]
 8008248:	e006      	b.n	8008258 <pbuf_header_force+0x3c>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800824a:	1a41      	subs	r1, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800824c:	f104 0210 	add.w	r2, r4, #16
 8008250:	4291      	cmp	r1, r2
    p->payload = (u8_t *)p->payload - header_size_increment;
 8008252:	6061      	str	r1, [r4, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008254:	d316      	bcc.n	8008284 <pbuf_header_force+0x68>
 8008256:	8962      	ldrh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 8008258:	8921      	ldrh	r1, [r4, #8]
  p->len += header_size_increment;
 800825a:	441a      	add	r2, r3
  p->tot_len += header_size_increment;
 800825c:	440b      	add	r3, r1
  p->len += header_size_increment;
 800825e:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 8008260:	8123      	strh	r3, [r4, #8]
  return 0;
 8008262:	2000      	movs	r0, #0
 8008264:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)-header_size_increment;
 8008266:	b28b      	uxth	r3, r1
 8008268:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800826a:	8962      	ldrh	r2, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800826c:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800826e:	42aa      	cmp	r2, r5
 8008270:	d2dd      	bcs.n	800822e <pbuf_header_force+0x12>
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <pbuf_header_force+0xa4>)
 8008274:	4913      	ldr	r1, [pc, #76]	; (80082c4 <pbuf_header_force+0xa8>)
 8008276:	4814      	ldr	r0, [pc, #80]	; (80082c8 <pbuf_header_force+0xac>)
 8008278:	f240 2247 	movw	r2, #583	; 0x247
 800827c:	f005 feae 	bl	800dfdc <iprintf>
 8008280:	2001      	movs	r0, #1
 8008282:	bd38      	pop	{r3, r4, r5, pc}
      p->payload = payload;
 8008284:	6060      	str	r0, [r4, #4]
      return 1;
 8008286:	2001      	movs	r0, #1
 8008288:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("bad pbuf type", 0);
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <pbuf_header_force+0xa4>)
 800828c:	490f      	ldr	r1, [pc, #60]	; (80082cc <pbuf_header_force+0xb0>)
 800828e:	480e      	ldr	r0, [pc, #56]	; (80082c8 <pbuf_header_force+0xac>)
 8008290:	f240 2277 	movw	r2, #631	; 0x277
 8008294:	f005 fea2 	bl	800dfdc <iprintf>
    return 1;
 8008298:	2001      	movs	r0, #1
 800829a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800829c:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <pbuf_header_force+0xa4>)
 800829e:	490c      	ldr	r1, [pc, #48]	; (80082d0 <pbuf_header_force+0xb4>)
 80082a0:	4809      	ldr	r0, [pc, #36]	; (80082c8 <pbuf_header_force+0xac>)
 80082a2:	f240 223f 	movw	r2, #575	; 0x23f
 80082a6:	f005 fe99 	bl	800dfdc <iprintf>
    return 0;
 80082aa:	4620      	mov	r0, r4
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80082ae:	8962      	ldrh	r2, [r4, #10]
 80082b0:	42aa      	cmp	r2, r5
 80082b2:	d302      	bcc.n	80082ba <pbuf_header_force+0x9e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80082b4:	1a41      	subs	r1, r0, r1
 80082b6:	6061      	str	r1, [r4, #4]
 80082b8:	e7ce      	b.n	8008258 <pbuf_header_force+0x3c>
      return 1;
 80082ba:	2001      	movs	r0, #1
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	bf00      	nop
 80082c0:	08011870 	.word	0x08011870
 80082c4:	08011a74 	.word	0x08011a74
 80082c8:	0800e670 	.word	0x0800e670
 80082cc:	08011a94 	.word	0x08011a94
 80082d0:	0800e964 	.word	0x0800e964

080082d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80082d8:	4605      	mov	r5, r0
 80082da:	2800      	cmp	r0, #0
 80082dc:	d053      	beq.n	8008386 <pbuf_free+0xb2>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80082de:	7b03      	ldrb	r3, [r0, #12]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d848      	bhi.n	8008376 <pbuf_free+0xa2>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80082e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800839c <pbuf_free+0xc8>
 80082e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80083ac <pbuf_free+0xd8>
 80082ec:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80083a4 <pbuf_free+0xd0>
{
 80082f0:	2600      	movs	r6, #0
    SYS_ARCH_PROTECT(old_level);
 80082f2:	f005 f957 	bl	800d5a4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80082f6:	89eb      	ldrh	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 80082f8:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80082fa:	b303      	cbz	r3, 800833e <pbuf_free+0x6a>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b29c      	uxth	r4, r3
 8008300:	81ec      	strh	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008302:	4638      	mov	r0, r7
 8008304:	f005 f95a 	bl	800d5bc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008308:	b964      	cbnz	r4, 8008324 <pbuf_free+0x50>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800830a:	7b6b      	ldrb	r3, [r5, #13]
      q = p->next;
 800830c:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800830e:	079b      	lsls	r3, r3, #30
 8008310:	d50b      	bpl.n	800832a <pbuf_free+0x56>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008312:	692b      	ldr	r3, [r5, #16]
 8008314:	b333      	cbz	r3, 8008364 <pbuf_free+0x90>
        pc->custom_free_function(p);
 8008316:	4628      	mov	r0, r5
 8008318:	4798      	blx	r3
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
        }
      }
      count++;
 800831a:	3601      	adds	r6, #1
 800831c:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800831e:	4625      	mov	r5, r4
 8008320:	2c00      	cmp	r4, #0
 8008322:	d1e6      	bne.n	80082f2 <pbuf_free+0x1e>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008324:	4630      	mov	r0, r6
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      type = p->type;
 800832a:	7b2b      	ldrb	r3, [r5, #12]
        if (type == PBUF_POOL) {
 800832c:	2b03      	cmp	r3, #3
 800832e:	d014      	beq.n	800835a <pbuf_free+0x86>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8008330:	3b01      	subs	r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	d90c      	bls.n	8008350 <pbuf_free+0x7c>
          mem_free(p);
 8008336:	4628      	mov	r0, r5
 8008338:	f7ff fb7e 	bl	8007a38 <mem_free>
 800833c:	e7ed      	b.n	800831a <pbuf_free+0x46>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800833e:	464b      	mov	r3, r9
 8008340:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008344:	4651      	mov	r1, sl
 8008346:	4640      	mov	r0, r8
 8008348:	f005 fe48 	bl	800dfdc <iprintf>
 800834c:	89eb      	ldrh	r3, [r5, #14]
 800834e:	e7d5      	b.n	80082fc <pbuf_free+0x28>
          memp_free(MEMP_PBUF, p);
 8008350:	4629      	mov	r1, r5
 8008352:	200b      	movs	r0, #11
 8008354:	f7ff fdde 	bl	8007f14 <memp_free>
 8008358:	e7df      	b.n	800831a <pbuf_free+0x46>
          memp_free(MEMP_PBUF_POOL, p);
 800835a:	4629      	mov	r1, r5
 800835c:	200c      	movs	r0, #12
 800835e:	f7ff fdd9 	bl	8007f14 <memp_free>
 8008362:	e7da      	b.n	800831a <pbuf_free+0x46>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008364:	464b      	mov	r3, r9
 8008366:	f240 22f9 	movw	r2, #761	; 0x2f9
 800836a:	490b      	ldr	r1, [pc, #44]	; (8008398 <pbuf_free+0xc4>)
 800836c:	4640      	mov	r0, r8
 800836e:	f005 fe35 	bl	800dfdc <iprintf>
 8008372:	692b      	ldr	r3, [r5, #16]
 8008374:	e7cf      	b.n	8008316 <pbuf_free+0x42>
  LWIP_ASSERT("pbuf_free: sane type",
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <pbuf_free+0xc8>)
 8008378:	4909      	ldr	r1, [pc, #36]	; (80083a0 <pbuf_free+0xcc>)
 800837a:	480a      	ldr	r0, [pc, #40]	; (80083a4 <pbuf_free+0xd0>)
 800837c:	f240 22de 	movw	r2, #734	; 0x2de
 8008380:	f005 fe2c 	bl	800dfdc <iprintf>
 8008384:	e7ae      	b.n	80082e4 <pbuf_free+0x10>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008386:	4b05      	ldr	r3, [pc, #20]	; (800839c <pbuf_free+0xc8>)
 8008388:	4907      	ldr	r1, [pc, #28]	; (80083a8 <pbuf_free+0xd4>)
 800838a:	4806      	ldr	r0, [pc, #24]	; (80083a4 <pbuf_free+0xd0>)
 800838c:	f240 22d2 	movw	r2, #722	; 0x2d2
    return 0;
 8008390:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 8008392:	f005 fe23 	bl	800dfdc <iprintf>
    return 0;
 8008396:	e7c5      	b.n	8008324 <pbuf_free+0x50>
 8008398:	08011a50 	.word	0x08011a50
 800839c:	08011870 	.word	0x08011870
 80083a0:	08011a20 	.word	0x08011a20
 80083a4:	0800e670 	.word	0x0800e670
 80083a8:	0800e964 	.word	0x0800e964
 80083ac:	08011a38 	.word	0x08011a38

080083b0 <pbuf_alloc>:
{
 80083b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	460d      	mov	r5, r1
 80083b6:	4617      	mov	r7, r2
  switch (layer) {
 80083b8:	2804      	cmp	r0, #4
 80083ba:	f200 80de 	bhi.w	800857a <pbuf_alloc+0x1ca>
 80083be:	e8df f000 	tbb	[pc, r0]
 80083c2:	98ad      	.short	0x98ad
 80083c4:	03a8      	.short	0x03a8
 80083c6:	03          	.byte	0x03
 80083c7:	00          	.byte	0x00
    break;
 80083c8:	2010      	movs	r0, #16
 80083ca:	4604      	mov	r4, r0
 80083cc:	f44f 7842 	mov.w	r8, #776	; 0x308
  switch (type) {
 80083d0:	2f03      	cmp	r7, #3
 80083d2:	f200 8093 	bhi.w	80084fc <pbuf_alloc+0x14c>
 80083d6:	e8df f007 	tbb	[pc, r7]
 80083da:	6275      	.short	0x6275
 80083dc:	0262      	.short	0x0262
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80083de:	200c      	movs	r0, #12
 80083e0:	f7ff fd64 	bl	8007eac <memp_malloc>
    if (p == NULL) {
 80083e4:	4606      	mov	r6, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f000 80df 	beq.w	80085aa <pbuf_alloc+0x1fa>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80083ec:	4404      	add	r4, r0
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80083ee:	45a8      	cmp	r8, r5
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80083f0:	f104 0403 	add.w	r4, r4, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80083f4:	bf28      	it	cs
 80083f6:	46a8      	movcs	r8, r5
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80083f8:	f024 0403 	bic.w	r4, r4, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80083fc:	eb04 0208 	add.w	r2, r4, r8
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008400:	fa1f f388 	uxth.w	r3, r8
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008404:	f506 7846 	add.w	r8, r6, #792	; 0x318
    p->type = type;
 8008408:	2003      	movs	r0, #3
    p->next = NULL;
 800840a:	2100      	movs	r1, #0
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800840c:	4590      	cmp	r8, r2
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800840e:	6074      	str	r4, [r6, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008410:	8173      	strh	r3, [r6, #10]
    p->tot_len = length;
 8008412:	8135      	strh	r5, [r6, #8]
    p->type = type;
 8008414:	7330      	strb	r0, [r6, #12]
    p->next = NULL;
 8008416:	6031      	str	r1, [r6, #0]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008418:	f0c0 8085 	bcc.w	8008526 <pbuf_alloc+0x176>
    rem_len = length - p->len;
 800841c:	1aed      	subs	r5, r5, r3
    while (rem_len > 0) {
 800841e:	2d00      	cmp	r5, #0
    p->ref = 1;
 8008420:	f04f 0301 	mov.w	r3, #1
 8008424:	81f3      	strh	r3, [r6, #14]
    while (rem_len > 0) {
 8008426:	dd46      	ble.n	80084b6 <pbuf_alloc+0x106>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008428:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80085dc <pbuf_alloc+0x22c>
 800842c:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 80085fc <pbuf_alloc+0x24c>
 8008430:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80085e4 <pbuf_alloc+0x234>
    while (rem_len > 0) {
 8008434:	4637      	mov	r7, r6
 8008436:	e019      	b.n	800846c <pbuf_alloc+0xbc>
      q->tot_len = (u16_t)rem_len;
 8008438:	b2aa      	uxth	r2, r5
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800843a:	f5b2 7f42 	cmp.w	r2, #776	; 0x308
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800843e:	f104 0310 	add.w	r3, r4, #16
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008442:	4611      	mov	r1, r2
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008444:	6063      	str	r3, [r4, #4]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008446:	bf28      	it	cs
 8008448:	f44f 7142 	movcs.w	r1, #776	; 0x308
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800844c:	079b      	lsls	r3, r3, #30
      q->tot_len = (u16_t)rem_len;
 800844e:	8122      	strh	r2, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008450:	8161      	strh	r1, [r4, #10]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008452:	f040 808a 	bne.w	800856a <pbuf_alloc+0x1ba>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008456:	8972      	ldrh	r2, [r6, #10]
 8008458:	6873      	ldr	r3, [r6, #4]
 800845a:	4413      	add	r3, r2
 800845c:	4598      	cmp	r8, r3
 800845e:	d37c      	bcc.n	800855a <pbuf_alloc+0x1aa>
      rem_len -= q->len;
 8008460:	8962      	ldrh	r2, [r4, #10]
 8008462:	1aad      	subs	r5, r5, r2
      q->ref = 1;
 8008464:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8008466:	2d00      	cmp	r5, #0
      q->ref = 1;
 8008468:	81e3      	strh	r3, [r4, #14]
    while (rem_len > 0) {
 800846a:	dd24      	ble.n	80084b6 <pbuf_alloc+0x106>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800846c:	200c      	movs	r0, #12
 800846e:	f7ff fd1d 	bl	8007eac <memp_malloc>
      q->flags = 0;
 8008472:	2300      	movs	r3, #0
      if (q == NULL) {
 8008474:	4604      	mov	r4, r0
      q->type = type;
 8008476:	2103      	movs	r1, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008478:	f64f 72ff 	movw	r2, #65535	; 0xffff
      if (q == NULL) {
 800847c:	2800      	cmp	r0, #0
 800847e:	d05b      	beq.n	8008538 <pbuf_alloc+0x188>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008480:	4295      	cmp	r5, r2
      q->type = type;
 8008482:	7301      	strb	r1, [r0, #12]
      q->flags = 0;
 8008484:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8008486:	6003      	str	r3, [r0, #0]
      r->next = q;
 8008488:	6038      	str	r0, [r7, #0]
 800848a:	4607      	mov	r7, r0
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800848c:	d1d4      	bne.n	8008438 <pbuf_alloc+0x88>
 800848e:	4653      	mov	r3, sl
 8008490:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008494:	4659      	mov	r1, fp
 8008496:	4648      	mov	r0, r9
 8008498:	f005 fda0 	bl	800dfdc <iprintf>
 800849c:	e7cc      	b.n	8008438 <pbuf_alloc+0x88>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800849e:	200b      	movs	r0, #11
 80084a0:	f7ff fd04 	bl	8007eac <memp_malloc>
    if (p == NULL) {
 80084a4:	4606      	mov	r6, r0
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d053      	beq.n	8008552 <pbuf_alloc+0x1a2>
    p->payload = NULL;
 80084aa:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 80084ac:	8105      	strh	r5, [r0, #8]
 80084ae:	8145      	strh	r5, [r0, #10]
    p->type = type;
 80084b0:	7307      	strb	r7, [r0, #12]
    p->payload = NULL;
 80084b2:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 80084b4:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 80084b6:	2201      	movs	r2, #1
  p->flags = 0;
 80084b8:	2300      	movs	r3, #0
  p->ref = 1;
 80084ba:	81f2      	strh	r2, [r6, #14]
  p->flags = 0;
 80084bc:	7373      	strb	r3, [r6, #13]
}
 80084be:	4630      	mov	r0, r6
 80084c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80084c4:	1ceb      	adds	r3, r5, #3
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	4418      	add	r0, r3
 80084cc:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80084ce:	4298      	cmp	r0, r3
 80084d0:	d33f      	bcc.n	8008552 <pbuf_alloc+0x1a2>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80084d2:	f7ff fc13 	bl	8007cfc <mem_malloc>
    if (p == NULL) {
 80084d6:	4606      	mov	r6, r0
 80084d8:	2800      	cmp	r0, #0
 80084da:	d03a      	beq.n	8008552 <pbuf_alloc+0x1a2>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80084dc:	4404      	add	r4, r0
 80084de:	3403      	adds	r4, #3
    p->next = NULL;
 80084e0:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80084e2:	f024 0403 	bic.w	r4, r4, #3
 80084e6:	6044      	str	r4, [r0, #4]
    p->len = p->tot_len = length;
 80084e8:	8105      	strh	r5, [r0, #8]
 80084ea:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80084ec:	6003      	str	r3, [r0, #0]
    p->type = type;
 80084ee:	7303      	strb	r3, [r0, #12]
 80084f0:	e7e1      	b.n	80084b6 <pbuf_alloc+0x106>
  switch (layer) {
 80084f2:	2034      	movs	r0, #52	; 0x34
 80084f4:	f44f 7839 	mov.w	r8, #740	; 0x2e4
 80084f8:	2432      	movs	r4, #50	; 0x32
 80084fa:	e769      	b.n	80083d0 <pbuf_alloc+0x20>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80084fc:	4b37      	ldr	r3, [pc, #220]	; (80085dc <pbuf_alloc+0x22c>)
 80084fe:	4938      	ldr	r1, [pc, #224]	; (80085e0 <pbuf_alloc+0x230>)
 8008500:	4838      	ldr	r0, [pc, #224]	; (80085e4 <pbuf_alloc+0x234>)
 8008502:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    return NULL;
 8008506:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008508:	f005 fd68 	bl	800dfdc <iprintf>
}
 800850c:	4630      	mov	r0, r6
 800850e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (layer) {
 8008512:	2020      	movs	r0, #32
 8008514:	f44f 783e 	mov.w	r8, #760	; 0x2f8
 8008518:	241e      	movs	r4, #30
 800851a:	e759      	b.n	80083d0 <pbuf_alloc+0x20>
 800851c:	2048      	movs	r0, #72	; 0x48
 800851e:	f44f 7834 	mov.w	r8, #720	; 0x2d0
 8008522:	2446      	movs	r4, #70	; 0x46
 8008524:	e754      	b.n	80083d0 <pbuf_alloc+0x20>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008526:	4b2d      	ldr	r3, [pc, #180]	; (80085dc <pbuf_alloc+0x22c>)
 8008528:	492f      	ldr	r1, [pc, #188]	; (80085e8 <pbuf_alloc+0x238>)
 800852a:	482e      	ldr	r0, [pc, #184]	; (80085e4 <pbuf_alloc+0x234>)
 800852c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008530:	f005 fd54 	bl	800dfdc <iprintf>
 8008534:	8973      	ldrh	r3, [r6, #10]
 8008536:	e771      	b.n	800841c <pbuf_alloc+0x6c>
  queued = pbuf_free_ooseq_pending;
 8008538:	4d2c      	ldr	r5, [pc, #176]	; (80085ec <pbuf_alloc+0x23c>)
  SYS_ARCH_PROTECT(old_level);
 800853a:	f005 f833 	bl	800d5a4 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800853e:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8008540:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8008542:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8008544:	702b      	strb	r3, [r5, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008546:	f005 f839 	bl	800d5bc <sys_arch_unprotect>
  if (!queued) {
 800854a:	b30c      	cbz	r4, 8008590 <pbuf_alloc+0x1e0>
        pbuf_free(p);
 800854c:	4630      	mov	r0, r6
 800854e:	f7ff fec1 	bl	80082d4 <pbuf_free>
        return NULL;
 8008552:	2600      	movs	r6, #0
}
 8008554:	4630      	mov	r0, r6
 8008556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800855a:	4653      	mov	r3, sl
 800855c:	f240 1255 	movw	r2, #341	; 0x155
 8008560:	4921      	ldr	r1, [pc, #132]	; (80085e8 <pbuf_alloc+0x238>)
 8008562:	4648      	mov	r0, r9
 8008564:	f005 fd3a 	bl	800dfdc <iprintf>
 8008568:	e77a      	b.n	8008460 <pbuf_alloc+0xb0>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800856a:	4653      	mov	r3, sl
 800856c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008570:	491f      	ldr	r1, [pc, #124]	; (80085f0 <pbuf_alloc+0x240>)
 8008572:	4648      	mov	r0, r9
 8008574:	f005 fd32 	bl	800dfdc <iprintf>
 8008578:	e76d      	b.n	8008456 <pbuf_alloc+0xa6>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800857a:	4b18      	ldr	r3, [pc, #96]	; (80085dc <pbuf_alloc+0x22c>)
 800857c:	491d      	ldr	r1, [pc, #116]	; (80085f4 <pbuf_alloc+0x244>)
 800857e:	4819      	ldr	r0, [pc, #100]	; (80085e4 <pbuf_alloc+0x234>)
 8008580:	f44f 728b 	mov.w	r2, #278	; 0x116
    return NULL;
 8008584:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008586:	f005 fd29 	bl	800dfdc <iprintf>
}
 800858a:	4630      	mov	r0, r6
 800858c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008590:	4622      	mov	r2, r4
 8008592:	4621      	mov	r1, r4
 8008594:	4818      	ldr	r0, [pc, #96]	; (80085f8 <pbuf_alloc+0x248>)
 8008596:	f7fd f8dd 	bl	8005754 <tcpip_callback_with_block>
 800859a:	2800      	cmp	r0, #0
 800859c:	d0d6      	beq.n	800854c <pbuf_alloc+0x19c>
 800859e:	f005 f801 	bl	800d5a4 <sys_arch_protect>
 80085a2:	702c      	strb	r4, [r5, #0]
 80085a4:	f005 f80a 	bl	800d5bc <sys_arch_unprotect>
 80085a8:	e7d0      	b.n	800854c <pbuf_alloc+0x19c>
  queued = pbuf_free_ooseq_pending;
 80085aa:	4c10      	ldr	r4, [pc, #64]	; (80085ec <pbuf_alloc+0x23c>)
  SYS_ARCH_PROTECT(old_level);
 80085ac:	f004 fffa 	bl	800d5a4 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 80085b0:	7825      	ldrb	r5, [r4, #0]
  pbuf_free_ooseq_pending = 1;
 80085b2:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 80085b4:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 80085b6:	7023      	strb	r3, [r4, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80085b8:	f005 f800 	bl	800d5bc <sys_arch_unprotect>
  if (!queued) {
 80085bc:	2d00      	cmp	r5, #0
 80085be:	d1c8      	bne.n	8008552 <pbuf_alloc+0x1a2>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80085c0:	4632      	mov	r2, r6
 80085c2:	4631      	mov	r1, r6
 80085c4:	480c      	ldr	r0, [pc, #48]	; (80085f8 <pbuf_alloc+0x248>)
 80085c6:	f7fd f8c5 	bl	8005754 <tcpip_callback_with_block>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d0c1      	beq.n	8008552 <pbuf_alloc+0x1a2>
 80085ce:	f004 ffe9 	bl	800d5a4 <sys_arch_protect>
 80085d2:	7026      	strb	r6, [r4, #0]
 80085d4:	f004 fff2 	bl	800d5bc <sys_arch_unprotect>
 80085d8:	e771      	b.n	80084be <pbuf_alloc+0x10e>
 80085da:	bf00      	nop
 80085dc:	08011870 	.word	0x08011870
 80085e0:	08011854 	.word	0x08011854
 80085e4:	0800e670 	.word	0x0800e670
 80085e8:	080117dc 	.word	0x080117dc
 80085ec:	20008894 	.word	0x20008894
 80085f0:	08011824 	.word	0x08011824
 80085f4:	080117c0 	.word	0x080117c0
 80085f8:	080080cd 	.word	0x080080cd
 80085fc:	08011810 	.word	0x08011810

08008600 <pbuf_realloc>:
{
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008606:	4604      	mov	r4, r0
 8008608:	2800      	cmp	r0, #0
 800860a:	d06d      	beq.n	80086e8 <pbuf_realloc+0xe8>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800860c:	7b23      	ldrb	r3, [r4, #12]
 800860e:	2b03      	cmp	r3, #3
 8008610:	d906      	bls.n	8008620 <pbuf_realloc+0x20>
 8008612:	4b39      	ldr	r3, [pc, #228]	; (80086f8 <pbuf_realloc+0xf8>)
 8008614:	4939      	ldr	r1, [pc, #228]	; (80086fc <pbuf_realloc+0xfc>)
 8008616:	483a      	ldr	r0, [pc, #232]	; (8008700 <pbuf_realloc+0x100>)
 8008618:	f240 12f7 	movw	r2, #503	; 0x1f7
 800861c:	f005 fcde 	bl	800dfdc <iprintf>
  if (new_len >= p->tot_len) {
 8008620:	8926      	ldrh	r6, [r4, #8]
 8008622:	42ae      	cmp	r6, r5
 8008624:	d923      	bls.n	800866e <pbuf_realloc+0x6e>
  grow = new_len - p->tot_len;
 8008626:	1bae      	subs	r6, r5, r6
 8008628:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800862c:	429e      	cmp	r6, r3
 800862e:	dc28      	bgt.n	8008682 <pbuf_realloc+0x82>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008630:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80086f8 <pbuf_realloc+0xf8>
 8008634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008708 <pbuf_realloc+0x108>
 8008638:	4f31      	ldr	r7, [pc, #196]	; (8008700 <pbuf_realloc+0x100>)
 800863a:	e006      	b.n	800864a <pbuf_realloc+0x4a>
    q->tot_len += (u16_t)grow;
 800863c:	8923      	ldrh	r3, [r4, #8]
 800863e:	4433      	add	r3, r6
 8008640:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008642:	6824      	ldr	r4, [r4, #0]
    rem_len -= q->len;
 8008644:	1a69      	subs	r1, r5, r1
 8008646:	b28d      	uxth	r5, r1
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008648:	b19c      	cbz	r4, 8008672 <pbuf_realloc+0x72>
  while (rem_len > q->len) {
 800864a:	8961      	ldrh	r1, [r4, #10]
 800864c:	42a9      	cmp	r1, r5
 800864e:	d3f5      	bcc.n	800863c <pbuf_realloc+0x3c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8008650:	7b23      	ldrb	r3, [r4, #12]
 8008652:	b923      	cbnz	r3, 800865e <pbuf_realloc+0x5e>
 8008654:	42a9      	cmp	r1, r5
 8008656:	d002      	beq.n	800865e <pbuf_realloc+0x5e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008658:	7b63      	ldrb	r3, [r4, #13]
 800865a:	079b      	lsls	r3, r3, #30
 800865c:	d529      	bpl.n	80086b2 <pbuf_realloc+0xb2>
  if (q->next != NULL) {
 800865e:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8008660:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008662:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008664:	b108      	cbz	r0, 800866a <pbuf_realloc+0x6a>
    pbuf_free(q->next);
 8008666:	f7ff fe35 	bl	80082d4 <pbuf_free>
  q->next = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008672:	464b      	mov	r3, r9
 8008674:	f240 220f 	movw	r2, #527	; 0x20f
 8008678:	4641      	mov	r1, r8
 800867a:	4638      	mov	r0, r7
 800867c:	f005 fcae 	bl	800dfdc <iprintf>
 8008680:	e7e3      	b.n	800864a <pbuf_realloc+0x4a>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008682:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80086f8 <pbuf_realloc+0xf8>
 8008686:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8008710 <pbuf_realloc+0x110>
 800868a:	4f1d      	ldr	r7, [pc, #116]	; (8008700 <pbuf_realloc+0x100>)
 800868c:	e00d      	b.n	80086aa <pbuf_realloc+0xaa>
    rem_len -= q->len;
 800868e:	1a6d      	subs	r5, r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008690:	4643      	mov	r3, r8
 8008692:	f240 220b 	movw	r2, #523	; 0x20b
 8008696:	4649      	mov	r1, r9
 8008698:	4638      	mov	r0, r7
 800869a:	f005 fc9f 	bl	800dfdc <iprintf>
    q->tot_len += (u16_t)grow;
 800869e:	8923      	ldrh	r3, [r4, #8]
 80086a0:	4433      	add	r3, r6
 80086a2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80086a4:	6824      	ldr	r4, [r4, #0]
    rem_len -= q->len;
 80086a6:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80086a8:	b1b4      	cbz	r4, 80086d8 <pbuf_realloc+0xd8>
  while (rem_len > q->len) {
 80086aa:	8961      	ldrh	r1, [r4, #10]
 80086ac:	428d      	cmp	r5, r1
 80086ae:	d8ee      	bhi.n	800868e <pbuf_realloc+0x8e>
 80086b0:	e7ce      	b.n	8008650 <pbuf_realloc+0x50>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	1b1b      	subs	r3, r3, r4
 80086b6:	18e9      	adds	r1, r5, r3
 80086b8:	4620      	mov	r0, r4
 80086ba:	b289      	uxth	r1, r1
 80086bc:	f7ff fa80 	bl	8007bc0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80086c0:	4604      	mov	r4, r0
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d1cb      	bne.n	800865e <pbuf_realloc+0x5e>
 80086c6:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <pbuf_realloc+0xf8>)
 80086c8:	490e      	ldr	r1, [pc, #56]	; (8008704 <pbuf_realloc+0x104>)
 80086ca:	480d      	ldr	r0, [pc, #52]	; (8008700 <pbuf_realloc+0x100>)
 80086cc:	f240 221d 	movw	r2, #541	; 0x21d
 80086d0:	f005 fc84 	bl	800dfdc <iprintf>
  q->len = rem_len;
 80086d4:	8164      	strh	r4, [r4, #10]
 80086d6:	deff      	udf	#255	; 0xff
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80086d8:	4643      	mov	r3, r8
 80086da:	f240 220f 	movw	r2, #527	; 0x20f
 80086de:	490a      	ldr	r1, [pc, #40]	; (8008708 <pbuf_realloc+0x108>)
 80086e0:	4638      	mov	r0, r7
 80086e2:	f005 fc7b 	bl	800dfdc <iprintf>
 80086e6:	e7e0      	b.n	80086aa <pbuf_realloc+0xaa>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80086e8:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <pbuf_realloc+0xf8>)
 80086ea:	4908      	ldr	r1, [pc, #32]	; (800870c <pbuf_realloc+0x10c>)
 80086ec:	4804      	ldr	r0, [pc, #16]	; (8008700 <pbuf_realloc+0x100>)
 80086ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80086f2:	f005 fc73 	bl	800dfdc <iprintf>
 80086f6:	e789      	b.n	800860c <pbuf_realloc+0xc>
 80086f8:	08011870 	.word	0x08011870
 80086fc:	08011abc 	.word	0x08011abc
 8008700:	0800e670 	.word	0x0800e670
 8008704:	08011b04 	.word	0x08011b04
 8008708:	08011ad8 	.word	0x08011ad8
 800870c:	08011aa4 	.word	0x08011aa4
 8008710:	08011af0 	.word	0x08011af0

08008714 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8008714:	b138      	cbz	r0, 8008726 <pbuf_clen+0x12>
 8008716:	2300      	movs	r3, #0
    ++len;
    p = p->next;
 8008718:	6800      	ldr	r0, [r0, #0]
    ++len;
 800871a:	3301      	adds	r3, #1
 800871c:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800871e:	2800      	cmp	r0, #0
 8008720:	d1fa      	bne.n	8008718 <pbuf_clen+0x4>
  }
  return len;
}
 8008722:	4618      	mov	r0, r3
 8008724:	4770      	bx	lr
  len = 0;
 8008726:	4603      	mov	r3, r0
 8008728:	e7fb      	b.n	8008722 <pbuf_clen+0xe>
 800872a:	bf00      	nop

0800872c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800872c:	b1a0      	cbz	r0, 8008758 <pbuf_ref+0x2c>
{
 800872e:	b510      	push	{r4, lr}
 8008730:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 8008732:	f004 ff37 	bl	800d5a4 <sys_arch_protect>
 8008736:	89e3      	ldrh	r3, [r4, #14]
 8008738:	3301      	adds	r3, #1
 800873a:	81e3      	strh	r3, [r4, #14]
 800873c:	f004 ff3e 	bl	800d5bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008740:	89e3      	ldrh	r3, [r4, #14]
 8008742:	b103      	cbz	r3, 8008746 <pbuf_ref+0x1a>
 8008744:	bd10      	pop	{r4, pc}
 8008746:	4b05      	ldr	r3, [pc, #20]	; (800875c <pbuf_ref+0x30>)
 8008748:	4905      	ldr	r1, [pc, #20]	; (8008760 <pbuf_ref+0x34>)
 800874a:	4806      	ldr	r0, [pc, #24]	; (8008764 <pbuf_ref+0x38>)
 800874c:	f240 3239 	movw	r2, #825	; 0x339
  }
}
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008754:	f005 bc42 	b.w	800dfdc <iprintf>
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	08011870 	.word	0x08011870
 8008760:	08011b20 	.word	0x08011b20
 8008764:	0800e670 	.word	0x0800e670

08008768 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008768:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800876a:	b338      	cbz	r0, 80087bc <pbuf_cat+0x54>
 800876c:	460d      	mov	r5, r1
 800876e:	b329      	cbz	r1, 80087bc <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008770:	6804      	ldr	r4, [r0, #0]
 8008772:	b90c      	cbnz	r4, 8008778 <pbuf_cat+0x10>
 8008774:	e02b      	b.n	80087ce <pbuf_cat+0x66>
 8008776:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008778:	8903      	ldrh	r3, [r0, #8]
 800877a:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800877c:	6822      	ldr	r2, [r4, #0]
    p->tot_len += t->tot_len;
 800877e:	440b      	add	r3, r1
 8008780:	8103      	strh	r3, [r0, #8]
 8008782:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 8008784:	2a00      	cmp	r2, #0
 8008786:	d1f6      	bne.n	8008776 <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008788:	8963      	ldrh	r3, [r4, #10]
 800878a:	8922      	ldrh	r2, [r4, #8]
 800878c:	429a      	cmp	r2, r3
 800878e:	d010      	beq.n	80087b2 <pbuf_cat+0x4a>
 8008790:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <pbuf_cat+0x6c>)
 8008792:	4911      	ldr	r1, [pc, #68]	; (80087d8 <pbuf_cat+0x70>)
 8008794:	4811      	ldr	r0, [pc, #68]	; (80087dc <pbuf_cat+0x74>)
 8008796:	f240 3255 	movw	r2, #853	; 0x355
 800879a:	f005 fc1f 	bl	800dfdc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	b133      	cbz	r3, 80087b0 <pbuf_cat+0x48>
 80087a2:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <pbuf_cat+0x6c>)
 80087a4:	490e      	ldr	r1, [pc, #56]	; (80087e0 <pbuf_cat+0x78>)
 80087a6:	480d      	ldr	r0, [pc, #52]	; (80087dc <pbuf_cat+0x74>)
 80087a8:	f240 3256 	movw	r2, #854	; 0x356
 80087ac:	f005 fc16 	bl	800dfdc <iprintf>
 80087b0:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80087b2:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80087b4:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80087b6:	4413      	add	r3, r2
 80087b8:	8123      	strh	r3, [r4, #8]
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <pbuf_cat+0x6c>)
 80087be:	4909      	ldr	r1, [pc, #36]	; (80087e4 <pbuf_cat+0x7c>)
 80087c0:	4806      	ldr	r0, [pc, #24]	; (80087dc <pbuf_cat+0x74>)
 80087c2:	f240 324d 	movw	r2, #845	; 0x34d
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80087c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80087ca:	f005 bc07 	b.w	800dfdc <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 80087ce:	4604      	mov	r4, r0
 80087d0:	e7da      	b.n	8008788 <pbuf_cat+0x20>
 80087d2:	bf00      	nop
 80087d4:	08011870 	.word	0x08011870
 80087d8:	080118fc 	.word	0x080118fc
 80087dc:	0800e670 	.word	0x0800e670
 80087e0:	0801192c 	.word	0x0801192c
 80087e4:	080118c4 	.word	0x080118c4

080087e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80087e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f000 8087 	beq.w	8008900 <pbuf_copy+0x118>
 80087f2:	460e      	mov	r6, r1
 80087f4:	2900      	cmp	r1, #0
 80087f6:	f000 8083 	beq.w	8008900 <pbuf_copy+0x118>
 80087fa:	8902      	ldrh	r2, [r0, #8]
 80087fc:	890b      	ldrh	r3, [r1, #8]
 80087fe:	429a      	cmp	r2, r3
 8008800:	4607      	mov	r7, r0
 8008802:	d37d      	bcc.n	8008900 <pbuf_copy+0x118>
 8008804:	f04f 0800 	mov.w	r8, #0
 8008808:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800880a:	f8df a110 	ldr.w	sl, [pc, #272]	; 800891c <pbuf_copy+0x134>
 800880e:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008930 <pbuf_copy+0x148>
 8008812:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8008924 <pbuf_copy+0x13c>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008816:	4645      	mov	r5, r8
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008818:	897b      	ldrh	r3, [r7, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	6871      	ldr	r1, [r6, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800881e:	eba4 0408 	sub.w	r4, r4, r8
 8008822:	1b5b      	subs	r3, r3, r5
 8008824:	42a3      	cmp	r3, r4
      len = p_to->len - offset_to;
 8008826:	bfb4      	ite	lt
 8008828:	b29c      	uxthlt	r4, r3
      len = p_from->len - offset_from;
 800882a:	b2a4      	uxthge	r4, r4
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800882c:	4428      	add	r0, r5
 800882e:	4441      	add	r1, r8
 8008830:	4622      	mov	r2, r4
 8008832:	f005 fe7e 	bl	800e532 <memcpy>
    offset_to += len;
 8008836:	4425      	add	r5, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008838:	897b      	ldrh	r3, [r7, #10]
    offset_to += len;
 800883a:	b2ad      	uxth	r5, r5
    offset_from += len;
 800883c:	44a0      	add	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800883e:	42ab      	cmp	r3, r5
    offset_from += len;
 8008840:	fa1f f888 	uxth.w	r8, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008844:	d32e      	bcc.n	80088a4 <pbuf_copy+0xbc>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008846:	8973      	ldrh	r3, [r6, #10]
 8008848:	4598      	cmp	r8, r3
 800884a:	d822      	bhi.n	8008892 <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
 800884c:	4598      	cmp	r8, r3
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800884e:	897b      	ldrh	r3, [r7, #10]
      p_from = p_from->next;
 8008850:	bf24      	itt	cs
 8008852:	6836      	ldrcs	r6, [r6, #0]
      offset_from = 0;
 8008854:	f04f 0800 	movcs.w	r8, #0
    if (offset_to == p_to->len) {
 8008858:	42ab      	cmp	r3, r5
 800885a:	d00e      	beq.n	800887a <pbuf_copy+0x92>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800885c:	b196      	cbz	r6, 8008884 <pbuf_copy+0x9c>
 800885e:	8974      	ldrh	r4, [r6, #10]
 8008860:	8933      	ldrh	r3, [r6, #8]
 8008862:	429c      	cmp	r4, r3
 8008864:	d026      	beq.n	80088b4 <pbuf_copy+0xcc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008866:	893a      	ldrh	r2, [r7, #8]
 8008868:	897b      	ldrh	r3, [r7, #10]
 800886a:	429a      	cmp	r2, r3
 800886c:	d1d4      	bne.n	8008818 <pbuf_copy+0x30>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d13a      	bne.n	80088ea <pbuf_copy+0x102>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008874:	b156      	cbz	r6, 800888c <pbuf_copy+0xa4>
 8008876:	8974      	ldrh	r4, [r6, #10]
 8008878:	e7ce      	b.n	8008818 <pbuf_copy+0x30>
      p_to = p_to->next;
 800887a:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800887c:	b347      	cbz	r7, 80088d0 <pbuf_copy+0xe8>
      offset_to = 0;
 800887e:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008880:	2e00      	cmp	r6, #0
 8008882:	d1ec      	bne.n	800885e <pbuf_copy+0x76>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008884:	893a      	ldrh	r2, [r7, #8]
 8008886:	897b      	ldrh	r3, [r7, #10]
 8008888:	429a      	cmp	r2, r3
 800888a:	d0f0      	beq.n	800886e <pbuf_copy+0x86>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800888c:	4630      	mov	r0, r6
 800888e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008892:	4653      	mov	r3, sl
 8008894:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008898:	491f      	ldr	r1, [pc, #124]	; (8008918 <pbuf_copy+0x130>)
 800889a:	4648      	mov	r0, r9
 800889c:	f005 fb9e 	bl	800dfdc <iprintf>
 80088a0:	8973      	ldrh	r3, [r6, #10]
 80088a2:	e7d3      	b.n	800884c <pbuf_copy+0x64>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80088a4:	4653      	mov	r3, sl
 80088a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80088aa:	4659      	mov	r1, fp
 80088ac:	4648      	mov	r0, r9
 80088ae:	f005 fb95 	bl	800dfdc <iprintf>
 80088b2:	e7c8      	b.n	8008846 <pbuf_copy+0x5e>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80088b4:	6833      	ldr	r3, [r6, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0d5      	beq.n	8008866 <pbuf_copy+0x7e>
 80088ba:	4b18      	ldr	r3, [pc, #96]	; (800891c <pbuf_copy+0x134>)
 80088bc:	4918      	ldr	r1, [pc, #96]	; (8008920 <pbuf_copy+0x138>)
 80088be:	4819      	ldr	r0, [pc, #100]	; (8008924 <pbuf_copy+0x13c>)
 80088c0:	f240 32de 	movw	r2, #990	; 0x3de
 80088c4:	f005 fb8a 	bl	800dfdc <iprintf>
 80088c8:	f06f 0005 	mvn.w	r0, #5
 80088cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d0db      	beq.n	800888c <pbuf_copy+0xa4>
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <pbuf_copy+0x134>)
 80088d6:	4914      	ldr	r1, [pc, #80]	; (8008928 <pbuf_copy+0x140>)
 80088d8:	4812      	ldr	r0, [pc, #72]	; (8008924 <pbuf_copy+0x13c>)
 80088da:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80088de:	f005 fb7d 	bl	800dfdc <iprintf>
 80088e2:	f06f 000f 	mvn.w	r0, #15
 80088e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <pbuf_copy+0x134>)
 80088ec:	490c      	ldr	r1, [pc, #48]	; (8008920 <pbuf_copy+0x138>)
 80088ee:	480d      	ldr	r0, [pc, #52]	; (8008924 <pbuf_copy+0x13c>)
 80088f0:	f240 32e3 	movw	r2, #995	; 0x3e3
 80088f4:	f005 fb72 	bl	800dfdc <iprintf>
 80088f8:	f06f 0005 	mvn.w	r0, #5
 80088fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <pbuf_copy+0x134>)
 8008902:	490a      	ldr	r1, [pc, #40]	; (800892c <pbuf_copy+0x144>)
 8008904:	4807      	ldr	r0, [pc, #28]	; (8008924 <pbuf_copy+0x13c>)
 8008906:	f240 32bd 	movw	r2, #957	; 0x3bd
 800890a:	f005 fb67 	bl	800dfdc <iprintf>
 800890e:	f06f 000f 	mvn.w	r0, #15
 8008912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008916:	bf00      	nop
 8008918:	08011984 	.word	0x08011984
 800891c:	08011870 	.word	0x08011870
 8008920:	080119b0 	.word	0x080119b0
 8008924:	0800e670 	.word	0x0800e670
 8008928:	080119a0 	.word	0x080119a0
 800892c:	0801193c 	.word	0x0801193c
 8008930:	0801196c 	.word	0x0801196c

08008934 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008938:	4605      	mov	r5, r0
 800893a:	b350      	cbz	r0, 8008992 <pbuf_copy_partial+0x5e>
 800893c:	4688      	mov	r8, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800893e:	2900      	cmp	r1, #0
 8008940:	d030      	beq.n	80089a4 <pbuf_copy_partial+0x70>
 8008942:	4616      	mov	r6, r2
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008944:	4617      	mov	r7, r2
 8008946:	b162      	cbz	r2, 8008962 <pbuf_copy_partial+0x2e>
 8008948:	2700      	movs	r7, #0
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800894a:	eb08 0007 	add.w	r0, r8, r7
    if ((offset != 0) && (offset >= p->len)) {
 800894e:	896a      	ldrh	r2, [r5, #10]
 8008950:	b153      	cbz	r3, 8008968 <pbuf_copy_partial+0x34>
 8008952:	429a      	cmp	r2, r3
      offset -= p->len;
 8008954:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 8008958:	d806      	bhi.n	8008968 <pbuf_copy_partial+0x34>
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800895a:	682d      	ldr	r5, [r5, #0]
      offset -= p->len;
 800895c:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800895e:	2d00      	cmp	r5, #0
 8008960:	d1f3      	bne.n	800894a <pbuf_copy_partial+0x16>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8008962:	4638      	mov	r0, r7
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      buf_copy_len = p->len - offset;
 8008968:	1ad4      	subs	r4, r2, r3
 800896a:	b2a4      	uxth	r4, r4
 800896c:	42b4      	cmp	r4, r6
 800896e:	bf28      	it	cs
 8008970:	4634      	movcs	r4, r6
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008972:	6869      	ldr	r1, [r5, #4]
      len -= buf_copy_len;
 8008974:	1b36      	subs	r6, r6, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8008976:	4622      	mov	r2, r4
 8008978:	4419      	add	r1, r3
      copied_total += buf_copy_len;
 800897a:	4427      	add	r7, r4
      len -= buf_copy_len;
 800897c:	b2b6      	uxth	r6, r6
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800897e:	f005 fdd8 	bl	800e532 <memcpy>
      copied_total += buf_copy_len;
 8008982:	b2bf      	uxth	r7, r7
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008984:	682d      	ldr	r5, [r5, #0]
 8008986:	2e00      	cmp	r6, #0
 8008988:	d0eb      	beq.n	8008962 <pbuf_copy_partial+0x2e>
      offset = 0;
 800898a:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800898c:	2d00      	cmp	r5, #0
 800898e:	d1dc      	bne.n	800894a <pbuf_copy_partial+0x16>
 8008990:	e7e7      	b.n	8008962 <pbuf_copy_partial+0x2e>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <pbuf_copy_partial+0x84>)
 8008994:	4909      	ldr	r1, [pc, #36]	; (80089bc <pbuf_copy_partial+0x88>)
 8008996:	480a      	ldr	r0, [pc, #40]	; (80089c0 <pbuf_copy_partial+0x8c>)
 8008998:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800899c:	462f      	mov	r7, r5
 800899e:	f005 fb1d 	bl	800dfdc <iprintf>
 80089a2:	e7de      	b.n	8008962 <pbuf_copy_partial+0x2e>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80089a4:	4b04      	ldr	r3, [pc, #16]	; (80089b8 <pbuf_copy_partial+0x84>)
 80089a6:	4907      	ldr	r1, [pc, #28]	; (80089c4 <pbuf_copy_partial+0x90>)
 80089a8:	4805      	ldr	r0, [pc, #20]	; (80089c0 <pbuf_copy_partial+0x8c>)
 80089aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80089ae:	4647      	mov	r7, r8
 80089b0:	f005 fb14 	bl	800dfdc <iprintf>
 80089b4:	e7d5      	b.n	8008962 <pbuf_copy_partial+0x2e>
 80089b6:	bf00      	nop
 80089b8:	08011870 	.word	0x08011870
 80089bc:	080119dc 	.word	0x080119dc
 80089c0:	0800e670 	.word	0x0800e670
 80089c4:	080119fc 	.word	0x080119fc

080089c8 <tcp_pcb_purge.part.1>:
 * (pcb->ooseq, pcb->unsent and pcb->unacked are freed).
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4606      	mov	r6, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80089cc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80089ce:	b118      	cbz	r0, 80089d8 <tcp_pcb_purge.part.1+0x10>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80089d0:	f7ff fc80 	bl	80082d4 <pbuf_free>
      pcb->refused_data = NULL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	6773      	str	r3, [r6, #116]	; 0x74
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80089d8:	6f34      	ldr	r4, [r6, #112]	; 0x70
  while (seg != NULL) {
 80089da:	b164      	cbz	r4, 80089f6 <tcp_pcb_purge.part.1+0x2e>
    if (seg->p != NULL) {
 80089dc:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
 80089de:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
 80089e0:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 80089e2:	b10b      	cbz	r3, 80089e8 <tcp_pcb_purge.part.1+0x20>
      pbuf_free(seg->p);
 80089e4:	f7ff fc76 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80089e8:	4621      	mov	r1, r4
 80089ea:	2003      	movs	r0, #3
 80089ec:	f7ff fa92 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 80089f0:	462c      	mov	r4, r5
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	d1f2      	bne.n	80089dc <tcp_pcb_purge.part.1+0x14>

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;

    tcp_segs_free(pcb->unsent);
 80089f6:	6eb4      	ldr	r4, [r6, #104]	; 0x68
    pcb->ooseq = NULL;
 80089f8:	2200      	movs	r2, #0
    pcb->rtime = -1;
 80089fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pcb->ooseq = NULL;
 80089fe:	6732      	str	r2, [r6, #112]	; 0x70
    pcb->rtime = -1;
 8008a00:	8633      	strh	r3, [r6, #48]	; 0x30
  while (seg != NULL) {
 8008a02:	b164      	cbz	r4, 8008a1e <tcp_pcb_purge.part.1+0x56>
    if (seg->p != NULL) {
 8008a04:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
 8008a06:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
 8008a08:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 8008a0a:	b10b      	cbz	r3, 8008a10 <tcp_pcb_purge.part.1+0x48>
      pbuf_free(seg->p);
 8008a0c:	f7ff fc62 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008a10:	4621      	mov	r1, r4
 8008a12:	2003      	movs	r0, #3
 8008a14:	f7ff fa7e 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 8008a18:	462c      	mov	r4, r5
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	d1f2      	bne.n	8008a04 <tcp_pcb_purge.part.1+0x3c>
    tcp_segs_free(pcb->unacked);
 8008a1e:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  while (seg != NULL) {
 8008a20:	b164      	cbz	r4, 8008a3c <tcp_pcb_purge.part.1+0x74>
    if (seg->p != NULL) {
 8008a22:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
 8008a24:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
 8008a26:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 8008a28:	b10b      	cbz	r3, 8008a2e <tcp_pcb_purge.part.1+0x66>
      pbuf_free(seg->p);
 8008a2a:	f7ff fc53 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008a2e:	4621      	mov	r1, r4
 8008a30:	2003      	movs	r0, #3
 8008a32:	f7ff fa6f 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 8008a36:	462c      	mov	r4, r5
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	d1f2      	bne.n	8008a22 <tcp_pcb_purge.part.1+0x5a>
    pcb->unacked = pcb->unsent = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	66b3      	str	r3, [r6, #104]	; 0x68
 8008a40:	66f3      	str	r3, [r6, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008a42:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
 8008a46:	bd70      	pop	{r4, r5, r6, pc}

08008a48 <tcp_init>:
{
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <tcp_bind>:
{
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8008a4e:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <tcp_bind+0xcc>)
 8008a50:	2900      	cmp	r1, #0
 8008a52:	bf08      	it	eq
 8008a54:	4619      	moveq	r1, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d05b      	beq.n	8008b12 <tcp_bind+0xc6>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008a5a:	7d03      	ldrb	r3, [r0, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d14e      	bne.n	8008afe <tcp_bind+0xb2>
  if (port == 0) {
 8008a60:	b31a      	cbz	r2, 8008aaa <tcp_bind+0x5e>
 8008a62:	4e2e      	ldr	r6, [pc, #184]	; (8008b1c <tcp_bind+0xd0>)
 8008a64:	f106 0710 	add.w	r7, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008a68:	f856 3b04 	ldr.w	r3, [r6], #4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	b913      	cbnz	r3, 8008a76 <tcp_bind+0x2a>
 8008a70:	e00d      	b.n	8008a8e <tcp_bind+0x42>
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	b15b      	cbz	r3, 8008a8e <tcp_bind+0x42>
        if (cpcb->local_port == port) {
 8008a76:	8adc      	ldrh	r4, [r3, #22]
 8008a78:	4294      	cmp	r4, r2
 8008a7a:	d1fa      	bne.n	8008a72 <tcp_bind+0x26>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008a7c:	681c      	ldr	r4, [r3, #0]
 8008a7e:	b11c      	cbz	r4, 8008a88 <tcp_bind+0x3c>
                ip_addr_isany(ipaddr) ||
 8008a80:	680d      	ldr	r5, [r1, #0]
 8008a82:	b10d      	cbz	r5, 8008a88 <tcp_bind+0x3c>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008a84:	42ac      	cmp	r4, r5
 8008a86:	d1f4      	bne.n	8008a72 <tcp_bind+0x26>
              return ERR_USE;
 8008a88:	f06f 0007 	mvn.w	r0, #7
 8008a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8008a8e:	42be      	cmp	r6, r7
 8008a90:	d1ea      	bne.n	8008a68 <tcp_bind+0x1c>
  if (!ip_addr_isany(ipaddr)) {
 8008a92:	680b      	ldr	r3, [r1, #0]
 8008a94:	b103      	cbz	r3, 8008a98 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008a96:	6003      	str	r3, [r0, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008a98:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <tcp_bind+0xd4>)
  pcb->local_port = port;
 8008a9a:	82c2      	strh	r2, [r0, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	60c2      	str	r2, [r0, #12]
 8008aa0:	6018      	str	r0, [r3, #0]
 8008aa2:	f004 f935 	bl	800cd10 <tcp_timer_needed>
  return ERR_OK;
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aaa:	f8df c084 	ldr.w	ip, [pc, #132]	; 8008b30 <tcp_bind+0xe4>
 8008aae:	f8df e084 	ldr.w	lr, [pc, #132]	; 8008b34 <tcp_bind+0xe8>
 8008ab2:	f8bc 2000 	ldrh.w	r2, [ip]
  if (port == 0) {
 8008ab6:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8008aba:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8008abe:	42ba      	cmp	r2, r7
 8008ac0:	bf18      	it	ne
 8008ac2:	3201      	addne	r2, #1
 8008ac4:	4d15      	ldr	r5, [pc, #84]	; (8008b1c <tcp_bind+0xd0>)
 8008ac6:	bf14      	ite	ne
 8008ac8:	b292      	uxthne	r2, r2
 8008aca:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	b913      	cbnz	r3, 8008adc <tcp_bind+0x90>
 8008ad6:	e00d      	b.n	8008af4 <tcp_bind+0xa8>
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	b15b      	cbz	r3, 8008af4 <tcp_bind+0xa8>
      if (pcb->local_port == tcp_port) {
 8008adc:	8adc      	ldrh	r4, [r3, #22]
 8008ade:	4294      	cmp	r4, r2
 8008ae0:	d1fa      	bne.n	8008ad8 <tcp_bind+0x8c>
 8008ae2:	3e01      	subs	r6, #1
 8008ae4:	b2b6      	uxth	r6, r6
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d1e9      	bne.n	8008abe <tcp_bind+0x72>
 8008aea:	f8ac 2000 	strh.w	r2, [ip]
      return ERR_BUF;
 8008aee:	f06f 0001 	mvn.w	r0, #1
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008af4:	4575      	cmp	r5, lr
 8008af6:	d1ea      	bne.n	8008ace <tcp_bind+0x82>
 8008af8:	f8ac 2000 	strh.w	r2, [ip]
 8008afc:	e7c9      	b.n	8008a92 <tcp_bind+0x46>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <tcp_bind+0xd8>)
 8008b00:	4909      	ldr	r1, [pc, #36]	; (8008b28 <tcp_bind+0xdc>)
 8008b02:	480a      	ldr	r0, [pc, #40]	; (8008b2c <tcp_bind+0xe0>)
 8008b04:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008b08:	f005 fa68 	bl	800dfdc <iprintf>
 8008b0c:	f06f 0005 	mvn.w	r0, #5
 8008b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8008b12:	f06f 0005 	mvn.w	r0, #5
}
 8008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b18:	08011290 	.word	0x08011290
 8008b1c:	08011c48 	.word	0x08011c48
 8008b20:	200088a8 	.word	0x200088a8
 8008b24:	08011b78 	.word	0x08011b78
 8008b28:	08011ba8 	.word	0x08011ba8
 8008b2c:	0800e670 	.word	0x0800e670
 8008b30:	2000000c 	.word	0x2000000c
 8008b34:	08011c58 	.word	0x08011c58

08008b38 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008b38:	7d03      	ldrb	r3, [r0, #20]
{
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d141      	bne.n	8008bc6 <tcp_listen_with_backlog_and_err+0x8e>
 8008b42:	4604      	mov	r4, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008b44:	2002      	movs	r0, #2
 8008b46:	f7ff f9b1 	bl	8007eac <memp_malloc>
  if (lpcb == NULL) {
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d033      	beq.n	8008bb8 <tcp_listen_with_backlog_and_err+0x80>
  lpcb->callback_arg = pcb->callback_arg;
 8008b50:	6922      	ldr	r2, [r4, #16]
  lpcb->local_port = pcb->local_port;
 8008b52:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->callback_arg = pcb->callback_arg;
 8008b54:	6102      	str	r2, [r0, #16]
  lpcb->state = LISTEN;
 8008b56:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8008b58:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008b5a:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8008b5c:	7d62      	ldrb	r2, [r4, #21]
 8008b5e:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008b60:	7a22      	ldrb	r2, [r4, #8]
 8008b62:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8008b64:	7aa2      	ldrb	r2, [r4, #10]
 8008b66:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8008b68:	7a62      	ldrb	r2, [r4, #9]
 8008b6a:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008b70:	b18b      	cbz	r3, 8008b96 <tcp_listen_with_backlog_and_err+0x5e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b72:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <tcp_listen_with_backlog_and_err+0xa4>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4294      	cmp	r4, r2
 8008b78:	d009      	beq.n	8008b8e <tcp_listen_with_backlog_and_err+0x56>
 8008b7a:	b152      	cbz	r2, 8008b92 <tcp_listen_with_backlog_and_err+0x5a>
 8008b7c:	68d3      	ldr	r3, [r2, #12]
 8008b7e:	429c      	cmp	r4, r3
 8008b80:	d01d      	beq.n	8008bbe <tcp_listen_with_backlog_and_err+0x86>
 8008b82:	b133      	cbz	r3, 8008b92 <tcp_listen_with_backlog_and_err+0x5a>
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	4294      	cmp	r4, r2
 8008b88:	d01a      	beq.n	8008bc0 <tcp_listen_with_backlog_and_err+0x88>
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	e7f9      	b.n	8008b82 <tcp_listen_with_backlog_and_err+0x4a>
 8008b8e:	68e2      	ldr	r2, [r4, #12]
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8008b96:	4621      	mov	r1, r4
 8008b98:	2001      	movs	r0, #1
 8008b9a:	f7ff f9bb 	bl	8007f14 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008b9e:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <tcp_listen_with_backlog_and_err+0xa8>)
  lpcb->accept = tcp_accept_null;
 8008ba0:	4a10      	ldr	r2, [pc, #64]	; (8008be4 <tcp_listen_with_backlog_and_err+0xac>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	60e9      	str	r1, [r5, #12]
  lpcb->accept = tcp_accept_null;
 8008ba6:	61aa      	str	r2, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008ba8:	601d      	str	r5, [r3, #0]
 8008baa:	f004 f8b1 	bl	800cd10 <tcp_timer_needed>
  res = ERR_OK;
 8008bae:	2300      	movs	r3, #0
  if (err != NULL) {
 8008bb0:	b106      	cbz	r6, 8008bb4 <tcp_listen_with_backlog_and_err+0x7c>
    *err = res;
 8008bb2:	7033      	strb	r3, [r6, #0]
}
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8008bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbc:	e7f8      	b.n	8008bb0 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	68e2      	ldr	r2, [r4, #12]
 8008bc2:	60da      	str	r2, [r3, #12]
 8008bc4:	e7e5      	b.n	8008b92 <tcp_listen_with_backlog_and_err+0x5a>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008bc6:	4b08      	ldr	r3, [pc, #32]	; (8008be8 <tcp_listen_with_backlog_and_err+0xb0>)
 8008bc8:	4908      	ldr	r1, [pc, #32]	; (8008bec <tcp_listen_with_backlog_and_err+0xb4>)
 8008bca:	4809      	ldr	r0, [pc, #36]	; (8008bf0 <tcp_listen_with_backlog_and_err+0xb8>)
 8008bcc:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8008bd0:	f005 fa04 	bl	800dfdc <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8008bd4:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008bd6:	f06f 030e 	mvn.w	r3, #14
 8008bda:	e7e9      	b.n	8008bb0 <tcp_listen_with_backlog_and_err+0x78>
 8008bdc:	200088a8 	.word	0x200088a8
 8008be0:	200088a4 	.word	0x200088a4
 8008be4:	080099c9 	.word	0x080099c9
 8008be8:	08011b78 	.word	0x08011b78
 8008bec:	08011c24 	.word	0x08011c24
 8008bf0:	0800e670 	.word	0x0800e670

08008bf4 <tcp_update_rcv_ann_wnd>:
{
 8008bf4:	b538      	push	{r3, r4, r5, lr}
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008bf6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008bf8:	8d04      	ldrh	r4, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008bfa:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008bfc:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8008bfe:	4603      	mov	r3, r0
 8008c00:	1a60      	subs	r0, r4, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008c02:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008c06:	4428      	add	r0, r5
 8008c08:	bf94      	ite	ls
 8008c0a:	1a82      	subls	r2, r0, r2
 8008c0c:	f5a0 6200 	subhi.w	r2, r0, #2048	; 0x800
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	db01      	blt.n	8008c18 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008c14:	855c      	strh	r4, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008c18:	1a6a      	subs	r2, r5, r1
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	dd02      	ble.n	8008c24 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8008c1e:	2000      	movs	r0, #0
 8008c20:	8558      	strh	r0, [r3, #42]	; 0x2a
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008c24:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008c26:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	d202      	bcs.n	8008c34 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008c2e:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008c30:	2000      	movs	r0, #0
}
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008c34:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <tcp_update_rcv_ann_wnd+0x50>)
 8008c36:	4904      	ldr	r1, [pc, #16]	; (8008c48 <tcp_update_rcv_ann_wnd+0x54>)
 8008c38:	4804      	ldr	r0, [pc, #16]	; (8008c4c <tcp_update_rcv_ann_wnd+0x58>)
 8008c3a:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008c3e:	f005 f9cd 	bl	800dfdc <iprintf>
 8008c42:	e7f4      	b.n	8008c2e <tcp_update_rcv_ann_wnd+0x3a>
 8008c44:	08011b78 	.word	0x08011b78
 8008c48:	08011ec8 	.word	0x08011ec8
 8008c4c:	0800e670 	.word	0x0800e670

08008c50 <tcp_recved>:
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008c50:	7d03      	ldrb	r3, [r0, #20]
 8008c52:	2b01      	cmp	r3, #1
{
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4604      	mov	r4, r0
 8008c58:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008c5a:	d03b      	beq.n	8008cd4 <tcp_recved+0x84>
  pcb->rcv_wnd += len;
 8008c5c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008c5e:	4429      	add	r1, r5
 8008c60:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008c62:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  pcb->rcv_wnd += len;
 8008c66:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008c68:	d80f      	bhi.n	8008c8a <tcp_recved+0x3a>
  } else if (pcb->rcv_wnd == 0) {
 8008c6a:	b961      	cbnz	r1, 8008c86 <tcp_recved+0x36>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008c6c:	7d23      	ldrb	r3, [r4, #20]
 8008c6e:	2b07      	cmp	r3, #7
 8008c70:	d00b      	beq.n	8008c8a <tcp_recved+0x3a>
 8008c72:	2b09      	cmp	r3, #9
 8008c74:	d009      	beq.n	8008c8a <tcp_recved+0x3a>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008c76:	4922      	ldr	r1, [pc, #136]	; (8008d00 <tcp_recved+0xb0>)
 8008c78:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <tcp_recved+0xb4>)
 8008c7a:	4823      	ldr	r0, [pc, #140]	; (8008d08 <tcp_recved+0xb8>)
 8008c7c:	f240 322d 	movw	r2, #813	; 0x32d
 8008c80:	f005 f9ac 	bl	800dfdc <iprintf>
 8008c84:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008c86:	460b      	mov	r3, r1
 8008c88:	e004      	b.n	8008c94 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c8e:	4613      	mov	r3, r2
 8008c90:	8522      	strh	r2, [r4, #40]	; 0x28
 8008c92:	4611      	mov	r1, r2
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008c94:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008c96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008c98:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8008c9a:	1a2e      	subs	r6, r5, r0
 8008c9c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008ca0:	4433      	add	r3, r6
 8008ca2:	bf94      	ite	ls
 8008ca4:	1a9a      	subls	r2, r3, r2
 8008ca6:	f5a3 6200 	subhi.w	r2, r3, #2048	; 0x800
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	db0d      	blt.n	8008cca <tcp_recved+0x7a>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008cb2:	8561      	strh	r1, [r4, #42]	; 0x2a
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008cb4:	db08      	blt.n	8008cc8 <tcp_recved+0x78>
    tcp_ack_now(pcb);
 8008cb6:	7ea3      	ldrb	r3, [r4, #26]
 8008cb8:	f043 0302 	orr.w	r3, r3, #2
 8008cbc:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008cbe:	4620      	mov	r0, r4
}
 8008cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8008cc4:	f003 bbb8 	b.w	800c438 <tcp_output>
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008cca:	2e00      	cmp	r6, #0
 8008ccc:	dd0a      	ble.n	8008ce4 <tcp_recved+0x94>
      pcb->rcv_ann_wnd = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <tcp_recved+0xb4>)
 8008cd6:	490d      	ldr	r1, [pc, #52]	; (8008d0c <tcp_recved+0xbc>)
 8008cd8:	480b      	ldr	r0, [pc, #44]	; (8008d08 <tcp_recved+0xb8>)
 8008cda:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008cde:	f005 f97d 	bl	800dfdc <iprintf>
 8008ce2:	e7bb      	b.n	8008c5c <tcp_recved+0xc>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008ce4:	1b45      	subs	r5, r0, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008ce6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008cea:	d201      	bcs.n	8008cf0 <tcp_recved+0xa0>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008cec:	8565      	strh	r5, [r4, #42]	; 0x2a
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008cf0:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <tcp_recved+0xb4>)
 8008cf2:	4907      	ldr	r1, [pc, #28]	; (8008d10 <tcp_recved+0xc0>)
 8008cf4:	4804      	ldr	r0, [pc, #16]	; (8008d08 <tcp_recved+0xb8>)
 8008cf6:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008cfa:	f005 f96f 	bl	800dfdc <iprintf>
 8008cfe:	e7f5      	b.n	8008cec <tcp_recved+0x9c>
 8008d00:	08011d1c 	.word	0x08011d1c
 8008d04:	08011b78 	.word	0x08011b78
 8008d08:	0800e670 	.word	0x0800e670
 8008d0c:	08011cf4 	.word	0x08011cf4
 8008d10:	08011ec8 	.word	0x08011ec8

08008d14 <tcp_slowtmr>:
{
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008d18:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8009038 <tcp_slowtmr+0x324>
  ++tcp_timer_ctr;
 8008d1c:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800903c <tcp_slowtmr+0x328>
  ++tcp_ticks;
 8008d20:	f8d8 2000 	ldr.w	r2, [r8]
  ++tcp_timer_ctr;
 8008d24:	f899 3000 	ldrb.w	r3, [r9]
  ++tcp_ticks;
 8008d28:	3201      	adds	r2, #1
  ++tcp_timer_ctr;
 8008d2a:	3301      	adds	r3, #1
{
 8008d2c:	b083      	sub	sp, #12
  ++tcp_ticks;
 8008d2e:	f8c8 2000 	str.w	r2, [r8]
  ++tcp_timer_ctr;
 8008d32:	f889 3000 	strb.w	r3, [r9]
  pcb = tcp_active_pcbs;
 8008d36:	4bb5      	ldr	r3, [pc, #724]	; (800900c <tcp_slowtmr+0x2f8>)
 8008d38:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8008d3a:	2c00      	cmp	r4, #0
 8008d3c:	d069      	beq.n	8008e12 <tcp_slowtmr+0xfe>
 8008d3e:	f04f 0a00 	mov.w	sl, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008d42:	7d23      	ldrb	r3, [r4, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8106 	beq.w	8008f56 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	f000 810e 	beq.w	8008f6c <tcp_slowtmr+0x258>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008d50:	2b0a      	cmp	r3, #10
 8008d52:	f000 8116 	beq.w	8008f82 <tcp_slowtmr+0x26e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008d56:	f899 3000 	ldrb.w	r3, [r9]
 8008d5a:	7f62      	ldrb	r2, [r4, #29]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	f000 811d 	beq.w	8008f9c <tcp_slowtmr+0x288>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008d62:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8008d64:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008d66:	2a02      	cmp	r2, #2
 8008d68:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008d6c:	f000 811b 	beq.w	8008fa6 <tcp_slowtmr+0x292>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8008d70:	2b0b      	cmp	r3, #11
 8008d72:	f240 80bf 	bls.w	8008ef4 <tcp_slowtmr+0x1e0>
 8008d76:	2102      	movs	r1, #2
      ++pcb_remove;
 8008d78:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8008d7c:	2a06      	cmp	r2, #6
 8008d7e:	f000 80de 	beq.w	8008f3e <tcp_slowtmr+0x22a>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008d82:	7a27      	ldrb	r7, [r4, #8]
 8008d84:	f017 0708 	ands.w	r7, r7, #8
 8008d88:	d006      	beq.n	8008d98 <tcp_slowtmr+0x84>
 8008d8a:	2a04      	cmp	r2, #4
 8008d8c:	f000 815a 	beq.w	8009044 <tcp_slowtmr+0x330>
       ((pcb->state == ESTABLISHED) ||
 8008d90:	2a07      	cmp	r2, #7
 8008d92:	f000 8157 	beq.w	8009044 <tcp_slowtmr+0x330>
    pcb_reset = 0;
 8008d96:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8008d98:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008d9a:	b155      	cbz	r5, 8008db2 <tcp_slowtmr+0x9e>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008d9c:	f8d8 2000 	ldr.w	r2, [r8]
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8008da6:	1a52      	subs	r2, r2, r1
 8008da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8008dac:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008db0:	d263      	bcs.n	8008e7a <tcp_slowtmr+0x166>
    if (pcb->state == SYN_RCVD) {
 8008db2:	7d23      	ldrb	r3, [r4, #20]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d071      	beq.n	8008e9c <tcp_slowtmr+0x188>
    if (pcb->state == LAST_ACK) {
 8008db8:	2b09      	cmp	r3, #9
 8008dba:	f000 80fa 	beq.w	8008fb2 <tcp_slowtmr+0x29e>
    if (pcb_remove) {
 8008dbe:	f1bb 0f00 	cmp.w	fp, #0
 8008dc2:	d076      	beq.n	8008eb2 <tcp_slowtmr+0x19e>
  if (pcb->state != CLOSED &&
 8008dc4:	2b01      	cmp	r3, #1
      tcp_err_fn err_fn = pcb->errf;
 8008dc6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
  if (pcb->state != CLOSED &&
 8008dca:	f200 81e2 	bhi.w	8009192 <tcp_slowtmr+0x47e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008dce:	4b8f      	ldr	r3, [pc, #572]	; (800900c <tcp_slowtmr+0x2f8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 8008dd2:	f1ba 0f00 	cmp.w	sl, #0
 8008dd6:	f000 80fe 	beq.w	8008fd6 <tcp_slowtmr+0x2c2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	f000 81d1 	beq.w	8009182 <tcp_slowtmr+0x46e>
        prev->next = pcb->next;
 8008de0:	68e3      	ldr	r3, [r4, #12]
 8008de2:	f8ca 300c 	str.w	r3, [sl, #12]
      if (pcb_reset) {
 8008de6:	2f00      	cmp	r7, #0
 8008de8:	f040 8104 	bne.w	8008ff4 <tcp_slowtmr+0x2e0>
      memp_free(MEMP_TCP_PCB, pcb2);
 8008dec:	4621      	mov	r1, r4
 8008dee:	2001      	movs	r0, #1
      tcp_active_pcbs_changed = 0;
 8008df0:	4d87      	ldr	r5, [pc, #540]	; (8009010 <tcp_slowtmr+0x2fc>)
      err_arg = pcb->callback_arg;
 8008df2:	6927      	ldr	r7, [r4, #16]
      pcb = pcb->next;
 8008df4:	68e4      	ldr	r4, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008df6:	f7ff f88d 	bl	8007f14 <memp_free>
      tcp_active_pcbs_changed = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008dfe:	b136      	cbz	r6, 8008e0e <tcp_slowtmr+0xfa>
 8008e00:	4638      	mov	r0, r7
 8008e02:	f06f 010c 	mvn.w	r1, #12
 8008e06:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 8008e08:	782b      	ldrb	r3, [r5, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d193      	bne.n	8008d36 <tcp_slowtmr+0x22>
  while (pcb != NULL) {
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	d197      	bne.n	8008d42 <tcp_slowtmr+0x2e>
  pcb = tcp_tw_pcbs;
 8008e12:	4e80      	ldr	r6, [pc, #512]	; (8009014 <tcp_slowtmr+0x300>)
 8008e14:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 8008e16:	b36c      	cbz	r4, 8008e74 <tcp_slowtmr+0x160>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e18:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009024 <tcp_slowtmr+0x310>
 8008e1c:	f8df a220 	ldr.w	sl, [pc, #544]	; 8009040 <tcp_slowtmr+0x32c>
 8008e20:	4f7d      	ldr	r7, [pc, #500]	; (8009018 <tcp_slowtmr+0x304>)
  while (pcb != NULL) {
 8008e22:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008e24:	7d23      	ldrb	r3, [r4, #20]
 8008e26:	2b0a      	cmp	r3, #10
 8008e28:	f000 8135 	beq.w	8009096 <tcp_slowtmr+0x382>
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008e32:	497a      	ldr	r1, [pc, #488]	; (800901c <tcp_slowtmr+0x308>)
 8008e34:	4638      	mov	r0, r7
 8008e36:	f005 f8d1 	bl	800dfdc <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3e:	6a22      	ldr	r2, [r4, #32]
 8008e40:	1a9b      	subs	r3, r3, r2
 8008e42:	2bf0      	cmp	r3, #240	; 0xf0
 8008e44:	f240 812e 	bls.w	80090a4 <tcp_slowtmr+0x390>
  if (pcb->state != CLOSED &&
 8008e48:	7d23      	ldrb	r3, [r4, #20]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	f200 817f 	bhi.w	800914e <tcp_slowtmr+0x43a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e50:	6833      	ldr	r3, [r6, #0]
      if (prev != NULL) {
 8008e52:	2d00      	cmp	r5, #0
 8008e54:	f000 8185 	beq.w	8009162 <tcp_slowtmr+0x44e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	f000 819e 	beq.w	800919a <tcp_slowtmr+0x486>
        prev->next = pcb->next;
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	60eb      	str	r3, [r5, #12]
 8008e62:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008e66:	4621      	mov	r1, r4
 8008e68:	2001      	movs	r0, #1
      pcb = pcb->next;
 8008e6a:	465c      	mov	r4, fp
      memp_free(MEMP_TCP_PCB, pcb2);
 8008e6c:	f7ff f852 	bl	8007f14 <memp_free>
  while (pcb != NULL) {
 8008e70:	2c00      	cmp	r4, #0
 8008e72:	d1d7      	bne.n	8008e24 <tcp_slowtmr+0x110>
}
 8008e74:	b003      	add	sp, #12
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (seg->p != NULL) {
 8008e7a:	686b      	ldr	r3, [r5, #4]
    struct tcp_seg *next = seg->next;
 8008e7c:	682e      	ldr	r6, [r5, #0]
      pbuf_free(seg->p);
 8008e7e:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 8008e80:	b10b      	cbz	r3, 8008e86 <tcp_slowtmr+0x172>
      pbuf_free(seg->p);
 8008e82:	f7ff fa27 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008e86:	4629      	mov	r1, r5
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f7ff f843 	bl	8007f14 <memp_free>
 8008e8e:	4635      	mov	r5, r6
  while (seg != NULL) {
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	d1f2      	bne.n	8008e7a <tcp_slowtmr+0x166>
    if (pcb->state == SYN_RCVD) {
 8008e94:	7d23      	ldrb	r3, [r4, #20]
      pcb->ooseq = NULL;
 8008e96:	6726      	str	r6, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d18d      	bne.n	8008db8 <tcp_slowtmr+0xa4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea0:	6a22      	ldr	r2, [r4, #32]
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	2b28      	cmp	r3, #40	; 0x28
 8008ea6:	f200 808b 	bhi.w	8008fc0 <tcp_slowtmr+0x2ac>
    if (pcb_remove) {
 8008eaa:	f1bb 0f00 	cmp.w	fp, #0
 8008eae:	f040 8087 	bne.w	8008fc0 <tcp_slowtmr+0x2ac>
      ++prev->polltmr;
 8008eb2:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008eb4:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8008eb6:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8008eb8:	3301      	adds	r3, #1
 8008eba:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8008ebc:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8008ebe:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008ec0:	d812      	bhi.n	8008ee8 <tcp_slowtmr+0x1d4>
        tcp_active_pcbs_changed = 0;
 8008ec2:	4e53      	ldr	r6, [pc, #332]	; (8009010 <tcp_slowtmr+0x2fc>)
        TCP_EVENT_POLL(prev, err);
 8008ec4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8008ec8:	2300      	movs	r3, #0
        tcp_active_pcbs_changed = 0;
 8008eca:	7033      	strb	r3, [r6, #0]
        prev->polltmr = 0;
 8008ecc:	76e3      	strb	r3, [r4, #27]
        TCP_EVENT_POLL(prev, err);
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	f000 8124 	beq.w	800911c <tcp_slowtmr+0x408>
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	6920      	ldr	r0, [r4, #16]
 8008ed8:	4790      	blx	r2
        if (tcp_active_pcbs_changed) {
 8008eda:	7833      	ldrb	r3, [r6, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f47f af2a 	bne.w	8008d36 <tcp_slowtmr+0x22>
        if (err == ERR_OK) {
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f000 811a 	beq.w	800911c <tcp_slowtmr+0x408>
 8008ee8:	46a2      	mov	sl, r4
      pcb = pcb->next;
 8008eea:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	f47f af28 	bne.w	8008d42 <tcp_slowtmr+0x2e>
 8008ef2:	e78e      	b.n	8008e12 <tcp_slowtmr+0xfe>
      if (pcb->persist_backoff > 0) {
 8008ef4:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8008ef8:	f1bb 0f00 	cmp.w	fp, #0
 8008efc:	f000 80d8 	beq.w	80090b0 <tcp_slowtmr+0x39c>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008f00:	4947      	ldr	r1, [pc, #284]	; (8009020 <tcp_slowtmr+0x30c>)
        if (pcb->persist_cnt < backoff_cnt) {
 8008f02:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008f06:	448b      	add	fp, r1
 8008f08:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	f200 8113 	bhi.w	8009138 <tcp_slowtmr+0x424>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8008f12:	4620      	mov	r0, r4
 8008f14:	f003 fd98 	bl	800ca48 <tcp_zero_window_probe>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f040 8130 	bne.w	800917e <tcp_slowtmr+0x46a>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008f1e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008f22:	7d22      	ldrb	r2, [r4, #20]
            pcb->persist_cnt = 0;
 8008f24:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008f28:	2b06      	cmp	r3, #6
              pcb->persist_backoff++;
 8008f2a:	bf9c      	itt	ls
 8008f2c:	3301      	addls	r3, #1
 8008f2e:	f884 3095 	strbls.w	r3, [r4, #149]	; 0x95
    if (pcb->state == FIN_WAIT_2) {
 8008f32:	2a06      	cmp	r2, #6
    pcb_remove = 0;
 8008f34:	4683      	mov	fp, r0
              pcb->persist_backoff++;
 8008f36:	f04f 0101 	mov.w	r1, #1
    if (pcb->state == FIN_WAIT_2) {
 8008f3a:	f47f af22 	bne.w	8008d82 <tcp_slowtmr+0x6e>
      if (pcb->flags & TF_RXCLOSED) {
 8008f3e:	7ea3      	ldrb	r3, [r4, #26]
 8008f40:	06db      	lsls	r3, r3, #27
 8008f42:	f57f af28 	bpl.w	8008d96 <tcp_slowtmr+0x82>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f46:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4a:	6a22      	ldr	r2, [r4, #32]
 8008f4c:	1a9b      	subs	r3, r3, r2
          ++pcb_remove;
 8008f4e:	2b28      	cmp	r3, #40	; 0x28
 8008f50:	bf88      	it	hi
 8008f52:	468b      	movhi	fp, r1
 8008f54:	e71f      	b.n	8008d96 <tcp_slowtmr+0x82>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008f56:	4b33      	ldr	r3, [pc, #204]	; (8009024 <tcp_slowtmr+0x310>)
 8008f58:	4933      	ldr	r1, [pc, #204]	; (8009028 <tcp_slowtmr+0x314>)
 8008f5a:	482f      	ldr	r0, [pc, #188]	; (8009018 <tcp_slowtmr+0x304>)
 8008f5c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8008f60:	f005 f83c 	bl	800dfdc <iprintf>
 8008f64:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	f47f aef2 	bne.w	8008d50 <tcp_slowtmr+0x3c>
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <tcp_slowtmr+0x310>)
 8008f6e:	492f      	ldr	r1, [pc, #188]	; (800902c <tcp_slowtmr+0x318>)
 8008f70:	4829      	ldr	r0, [pc, #164]	; (8009018 <tcp_slowtmr+0x304>)
 8008f72:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008f76:	f005 f831 	bl	800dfdc <iprintf>
 8008f7a:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008f7c:	2b0a      	cmp	r3, #10
 8008f7e:	f47f aeea 	bne.w	8008d56 <tcp_slowtmr+0x42>
 8008f82:	4b28      	ldr	r3, [pc, #160]	; (8009024 <tcp_slowtmr+0x310>)
 8008f84:	492a      	ldr	r1, [pc, #168]	; (8009030 <tcp_slowtmr+0x31c>)
 8008f86:	4824      	ldr	r0, [pc, #144]	; (8009018 <tcp_slowtmr+0x304>)
 8008f88:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008f8c:	f005 f826 	bl	800dfdc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008f90:	f899 3000 	ldrb.w	r3, [r9]
 8008f94:	7f62      	ldrb	r2, [r4, #29]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	f47f aee3 	bne.w	8008d62 <tcp_slowtmr+0x4e>
      pcb = pcb->next;
 8008f9c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	f47f aecf 	bne.w	8008d42 <tcp_slowtmr+0x2e>
 8008fa4:	e735      	b.n	8008e12 <tcp_slowtmr+0xfe>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d9a4      	bls.n	8008ef4 <tcp_slowtmr+0x1e0>
    pcb_reset = 0;
 8008faa:	2700      	movs	r7, #0
      ++pcb_remove;
 8008fac:	f04f 0b01 	mov.w	fp, #1
 8008fb0:	e6f2      	b.n	8008d98 <tcp_slowtmr+0x84>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb6:	6a22      	ldr	r2, [r4, #32]
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	2bf0      	cmp	r3, #240	; 0xf0
 8008fbc:	f67f af75 	bls.w	8008eaa <tcp_slowtmr+0x196>
      tcp_err_fn err_fn = pcb->errf;
 8008fc0:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7ff fcff 	bl	80089c8 <tcp_pcb_purge.part.1>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008fca:	4b10      	ldr	r3, [pc, #64]	; (800900c <tcp_slowtmr+0x2f8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 8008fce:	f1ba 0f00 	cmp.w	sl, #0
 8008fd2:	f47f af02 	bne.w	8008dda <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008fd6:	42a3      	cmp	r3, r4
 8008fd8:	d006      	beq.n	8008fe8 <tcp_slowtmr+0x2d4>
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <tcp_slowtmr+0x310>)
 8008fdc:	4915      	ldr	r1, [pc, #84]	; (8009034 <tcp_slowtmr+0x320>)
 8008fde:	480e      	ldr	r0, [pc, #56]	; (8009018 <tcp_slowtmr+0x304>)
 8008fe0:	f240 428d 	movw	r2, #1165	; 0x48d
 8008fe4:	f004 fffa 	bl	800dfdc <iprintf>
        tcp_active_pcbs = pcb->next;
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <tcp_slowtmr+0x2f8>)
 8008fea:	68e3      	ldr	r3, [r4, #12]
 8008fec:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008fee:	2f00      	cmp	r7, #0
 8008ff0:	f43f aefc 	beq.w	8008dec <tcp_slowtmr+0xd8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008ff4:	8b23      	ldrh	r3, [r4, #24]
 8008ff6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ff8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	8ae3      	ldrh	r3, [r4, #22]
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	4622      	mov	r2, r4
 8009002:	1d23      	adds	r3, r4, #4
 8009004:	f003 fbd0 	bl	800c7a8 <tcp_rst>
 8009008:	e6f0      	b.n	8008dec <tcp_slowtmr+0xd8>
 800900a:	bf00      	nop
 800900c:	2000889c 	.word	0x2000889c
 8009010:	20008898 	.word	0x20008898
 8009014:	200088ac 	.word	0x200088ac
 8009018:	0800e670 	.word	0x0800e670
 800901c:	08011e48 	.word	0x08011e48
 8009020:	08011ca4 	.word	0x08011ca4
 8009024:	08011b78 	.word	0x08011b78
 8009028:	08011d68 	.word	0x08011d68
 800902c:	08011d94 	.word	0x08011d94
 8009030:	08011dc0 	.word	0x08011dc0
 8009034:	08011e1c 	.word	0x08011e1c
 8009038:	200088a0 	.word	0x200088a0
 800903c:	20003eda 	.word	0x20003eda
 8009040:	08011ea0 	.word	0x08011ea0
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8009044:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009048:	f8d8 2000 	ldr.w	r2, [r8]
 800904c:	6a20      	ldr	r0, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800904e:	4e57      	ldr	r6, [pc, #348]	; (80091ac <tcp_slowtmr+0x498>)
 8009050:	f505 2324 	add.w	r3, r5, #671744	; 0xa4000
 8009054:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009058:	fba6 6303 	umull	r6, r3, r6, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800905c:	1a12      	subs	r2, r2, r0
 800905e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009062:	d866      	bhi.n	8009132 <tcp_slowtmr+0x41e>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009064:	4952      	ldr	r1, [pc, #328]	; (80091b0 <tcp_slowtmr+0x49c>)
 8009066:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800906a:	fb01 5303 	mla	r3, r1, r3, r5
                / TCP_SLOW_INTERVAL)
 800906e:	494f      	ldr	r1, [pc, #316]	; (80091ac <tcp_slowtmr+0x498>)
 8009070:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009074:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009078:	f67f ae8d 	bls.w	8008d96 <tcp_slowtmr+0x82>
        err = tcp_keepalive(pcb);
 800907c:	4620      	mov	r0, r4
 800907e:	f003 fc81 	bl	800c984 <tcp_keepalive>
        if (err == ERR_OK) {
 8009082:	2800      	cmp	r0, #0
 8009084:	f47f ae87 	bne.w	8008d96 <tcp_slowtmr+0x82>
          pcb->keep_cnt_sent++;
 8009088:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800908c:	3301      	adds	r3, #1
    pcb_reset = 0;
 800908e:	4607      	mov	r7, r0
          pcb->keep_cnt_sent++;
 8009090:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 8009094:	e680      	b.n	8008d98 <tcp_slowtmr+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009096:	f8d8 3000 	ldr.w	r3, [r8]
 800909a:	6a22      	ldr	r2, [r4, #32]
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	2bf0      	cmp	r3, #240	; 0xf0
 80090a0:	f63f aed6 	bhi.w	8008e50 <tcp_slowtmr+0x13c>
      pcb = pcb->next;
 80090a4:	4625      	mov	r5, r4
 80090a6:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	f47f aebb 	bne.w	8008e24 <tcp_slowtmr+0x110>
 80090ae:	e6e1      	b.n	8008e74 <tcp_slowtmr+0x160>
        if (pcb->rtime >= 0) {
 80090b0:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 80090b4:	2900      	cmp	r1, #0
 80090b6:	db02      	blt.n	80090be <tcp_slowtmr+0x3aa>
          ++pcb->rtime;
 80090b8:	3101      	adds	r1, #1
 80090ba:	b209      	sxth	r1, r1
 80090bc:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80090be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80090c0:	b3a8      	cbz	r0, 800912e <tcp_slowtmr+0x41a>
 80090c2:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80090c6:	4288      	cmp	r0, r1
 80090c8:	dc31      	bgt.n	800912e <tcp_slowtmr+0x41a>
          if (pcb->state != SYN_SENT) {
 80090ca:	2a02      	cmp	r2, #2
 80090cc:	d00a      	beq.n	80090e4 <tcp_slowtmr+0x3d0>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80090ce:	4939      	ldr	r1, [pc, #228]	; (80091b4 <tcp_slowtmr+0x4a0>)
 80090d0:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80090d4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 80090d8:	5cc9      	ldrb	r1, [r1, r3]
 80090da:	eb02 03e0 	add.w	r3, r2, r0, asr #3
 80090de:	408b      	lsls	r3, r1
 80090e0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80090e4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80090e8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80090ec:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 80090ee:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 80090f2:	4293      	cmp	r3, r2
 80090f4:	bf28      	it	cs
 80090f6:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80090f8:	004a      	lsls	r2, r1, #1
 80090fa:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 80090fc:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80090fe:	4293      	cmp	r3, r2
          pcb->rtime = 0;
 8009100:	f04f 0000 	mov.w	r0, #0
          pcb->ssthresh = eff_wnd >> 1;
 8009104:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          pcb->rtime = 0;
 8009108:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->ssthresh = (pcb->mss << 1);
 800910a:	bf38      	it	cc
 800910c:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8009110:	4620      	mov	r0, r4
 8009112:	f003 fba3 	bl	800c85c <tcp_rexmit_rto>
 8009116:	7d22      	ldrb	r2, [r4, #20]
 8009118:	2101      	movs	r1, #1
 800911a:	e62f      	b.n	8008d7c <tcp_slowtmr+0x68>
          tcp_output(prev);
 800911c:	4620      	mov	r0, r4
 800911e:	46a2      	mov	sl, r4
      pcb = pcb->next;
 8009120:	462c      	mov	r4, r5
          tcp_output(prev);
 8009122:	f003 f989 	bl	800c438 <tcp_output>
  while (pcb != NULL) {
 8009126:	2c00      	cmp	r4, #0
 8009128:	f47f ae0b 	bne.w	8008d42 <tcp_slowtmr+0x2e>
 800912c:	e671      	b.n	8008e12 <tcp_slowtmr+0xfe>
 800912e:	2101      	movs	r1, #1
 8009130:	e624      	b.n	8008d7c <tcp_slowtmr+0x68>
 8009132:	468b      	mov	fp, r1
        ++pcb_reset;
 8009134:	2701      	movs	r7, #1
 8009136:	e62f      	b.n	8008d98 <tcp_slowtmr+0x84>
          pcb->persist_cnt++;
 8009138:	3301      	adds	r3, #1
 800913a:	b2db      	uxtb	r3, r3
        if (pcb->persist_cnt >= backoff_cnt) {
 800913c:	4299      	cmp	r1, r3
          pcb->persist_cnt++;
 800913e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8009142:	f67f aee6 	bls.w	8008f12 <tcp_slowtmr+0x1fe>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009146:	2101      	movs	r1, #1
    pcb_remove = 0;
 8009148:	f04f 0b00 	mov.w	fp, #0
 800914c:	e616      	b.n	8008d7c <tcp_slowtmr+0x68>
  if (pcb->state != CLOSED &&
 800914e:	2b0a      	cmp	r3, #10
 8009150:	f43f ae7e 	beq.w	8008e50 <tcp_slowtmr+0x13c>
 8009154:	4620      	mov	r0, r4
 8009156:	f7ff fc37 	bl	80089c8 <tcp_pcb_purge.part.1>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800915a:	6833      	ldr	r3, [r6, #0]
      if (prev != NULL) {
 800915c:	2d00      	cmp	r5, #0
 800915e:	f47f ae7b 	bne.w	8008e58 <tcp_slowtmr+0x144>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009162:	42a3      	cmp	r3, r4
 8009164:	d006      	beq.n	8009174 <tcp_slowtmr+0x460>
 8009166:	464b      	mov	r3, r9
 8009168:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800916c:	4651      	mov	r1, sl
 800916e:	4638      	mov	r0, r7
 8009170:	f004 ff34 	bl	800dfdc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009174:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8009178:	f8c6 b000 	str.w	fp, [r6]
 800917c:	e673      	b.n	8008e66 <tcp_slowtmr+0x152>
 800917e:	7d22      	ldrb	r2, [r4, #20]
 8009180:	e7e1      	b.n	8009146 <tcp_slowtmr+0x432>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <tcp_slowtmr+0x4a4>)
 8009184:	490d      	ldr	r1, [pc, #52]	; (80091bc <tcp_slowtmr+0x4a8>)
 8009186:	480e      	ldr	r0, [pc, #56]	; (80091c0 <tcp_slowtmr+0x4ac>)
 8009188:	f240 4289 	movw	r2, #1161	; 0x489
 800918c:	f004 ff26 	bl	800dfdc <iprintf>
 8009190:	e626      	b.n	8008de0 <tcp_slowtmr+0xcc>
  if (pcb->state != CLOSED &&
 8009192:	2b0a      	cmp	r3, #10
 8009194:	f47f af16 	bne.w	8008fc4 <tcp_slowtmr+0x2b0>
 8009198:	e619      	b.n	8008dce <tcp_slowtmr+0xba>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800919a:	464b      	mov	r3, r9
 800919c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80091a0:	4908      	ldr	r1, [pc, #32]	; (80091c4 <tcp_slowtmr+0x4b0>)
 80091a2:	4638      	mov	r0, r7
 80091a4:	f004 ff1a 	bl	800dfdc <iprintf>
 80091a8:	e659      	b.n	8008e5e <tcp_slowtmr+0x14a>
 80091aa:	bf00      	nop
 80091ac:	10624dd3 	.word	0x10624dd3
 80091b0:	000124f8 	.word	0x000124f8
 80091b4:	08011b68 	.word	0x08011b68
 80091b8:	08011b78 	.word	0x08011b78
 80091bc:	08011df0 	.word	0x08011df0
 80091c0:	0800e670 	.word	0x0800e670
 80091c4:	08011e78 	.word	0x08011e78

080091c8 <tcp_segs_free>:
  while (seg != NULL) {
 80091c8:	b178      	cbz	r0, 80091ea <tcp_segs_free+0x22>
{
 80091ca:	b538      	push	{r3, r4, r5, lr}
 80091cc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80091ce:	6863      	ldr	r3, [r4, #4]
    struct tcp_seg *next = seg->next;
 80091d0:	6825      	ldr	r5, [r4, #0]
      pbuf_free(seg->p);
 80091d2:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 80091d4:	b10b      	cbz	r3, 80091da <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 80091d6:	f7ff f87d 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80091da:	4621      	mov	r1, r4
 80091dc:	2003      	movs	r0, #3
 80091de:	f7fe fe99 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 80091e2:	462c      	mov	r4, r5
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	d1f2      	bne.n	80091ce <tcp_segs_free+0x6>
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	4770      	bx	lr

080091ec <tcp_seg_free>:
  if (seg != NULL) {
 80091ec:	b158      	cbz	r0, 8009206 <tcp_seg_free+0x1a>
{
 80091ee:	b510      	push	{r4, lr}
 80091f0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80091f2:	6840      	ldr	r0, [r0, #4]
 80091f4:	b108      	cbz	r0, 80091fa <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80091f6:	f7ff f86d 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80091fa:	4621      	mov	r1, r4
 80091fc:	2003      	movs	r0, #3
}
 80091fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009202:	f7fe be87 	b.w	8007f14 <memp_free>
 8009206:	4770      	bx	lr

08009208 <tcp_seg_copy>:
{
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4605      	mov	r5, r0
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800920c:	2003      	movs	r0, #3
 800920e:	f7fe fe4d 	bl	8007eac <memp_malloc>
  if (cseg == NULL) {
 8009212:	4604      	mov	r4, r0
 8009214:	b150      	cbz	r0, 800922c <tcp_seg_copy+0x24>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009216:	6868      	ldr	r0, [r5, #4]
 8009218:	6829      	ldr	r1, [r5, #0]
 800921a:	68aa      	ldr	r2, [r5, #8]
 800921c:	68eb      	ldr	r3, [r5, #12]
 800921e:	6060      	str	r0, [r4, #4]
 8009220:	6021      	str	r1, [r4, #0]
 8009222:	60a2      	str	r2, [r4, #8]
 8009224:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8009226:	6860      	ldr	r0, [r4, #4]
 8009228:	f7ff fa80 	bl	800872c <pbuf_ref>
}
 800922c:	4620      	mov	r0, r4
 800922e:	bd38      	pop	{r3, r4, r5, pc}

08009230 <tcp_arg>:
  if (pcb != NULL) {
 8009230:	b100      	cbz	r0, 8009234 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8009232:	6101      	str	r1, [r0, #16]
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop

08009238 <tcp_recv>:
  if (pcb != NULL) {
 8009238:	b190      	cbz	r0, 8009260 <tcp_recv+0x28>
{
 800923a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800923c:	7d03      	ldrb	r3, [r0, #20]
 800923e:	2b01      	cmp	r3, #1
 8009240:	4604      	mov	r4, r0
 8009242:	460d      	mov	r5, r1
 8009244:	d002      	beq.n	800924c <tcp_recv+0x14>
    pcb->recv = recv;
 8009246:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800924a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800924c:	4b05      	ldr	r3, [pc, #20]	; (8009264 <tcp_recv+0x2c>)
 800924e:	4906      	ldr	r1, [pc, #24]	; (8009268 <tcp_recv+0x30>)
 8009250:	4806      	ldr	r0, [pc, #24]	; (800926c <tcp_recv+0x34>)
 8009252:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8009256:	f004 fec1 	bl	800dfdc <iprintf>
    pcb->recv = recv;
 800925a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	08011b78 	.word	0x08011b78
 8009268:	08011ccc 	.word	0x08011ccc
 800926c:	0800e670 	.word	0x0800e670

08009270 <tcp_sent>:
  if (pcb != NULL) {
 8009270:	b180      	cbz	r0, 8009294 <tcp_sent+0x24>
{
 8009272:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009274:	7d03      	ldrb	r3, [r0, #20]
 8009276:	2b01      	cmp	r3, #1
 8009278:	4604      	mov	r4, r0
 800927a:	460d      	mov	r5, r1
 800927c:	d001      	beq.n	8009282 <tcp_sent+0x12>
    pcb->sent = sent;
 800927e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8009280:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <tcp_sent+0x28>)
 8009284:	4905      	ldr	r1, [pc, #20]	; (800929c <tcp_sent+0x2c>)
 8009286:	4806      	ldr	r0, [pc, #24]	; (80092a0 <tcp_sent+0x30>)
 8009288:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800928c:	f004 fea6 	bl	800dfdc <iprintf>
    pcb->sent = sent;
 8009290:	67e5      	str	r5, [r4, #124]	; 0x7c
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	08011b78 	.word	0x08011b78
 800929c:	08011d40 	.word	0x08011d40
 80092a0:	0800e670 	.word	0x0800e670

080092a4 <tcp_err>:
  if (pcb != NULL) {
 80092a4:	b190      	cbz	r0, 80092cc <tcp_err+0x28>
{
 80092a6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80092a8:	7d03      	ldrb	r3, [r0, #20]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	d002      	beq.n	80092b8 <tcp_err+0x14>
    pcb->errf = err;
 80092b2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <tcp_err+0x2c>)
 80092ba:	4906      	ldr	r1, [pc, #24]	; (80092d4 <tcp_err+0x30>)
 80092bc:	4806      	ldr	r0, [pc, #24]	; (80092d8 <tcp_err+0x34>)
 80092be:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80092c2:	f004 fe8b 	bl	800dfdc <iprintf>
    pcb->errf = err;
 80092c6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	08011b78 	.word	0x08011b78
 80092d4:	08011bec 	.word	0x08011bec
 80092d8:	0800e670 	.word	0x0800e670

080092dc <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80092dc:	b118      	cbz	r0, 80092e6 <tcp_accept+0xa>
 80092de:	7d03      	ldrb	r3, [r0, #20]
 80092e0:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 80092e2:	bf08      	it	eq
 80092e4:	6181      	streq	r1, [r0, #24]
 80092e6:	4770      	bx	lr

080092e8 <tcp_poll>:
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80092e8:	7d03      	ldrb	r3, [r0, #20]
 80092ea:	2b01      	cmp	r3, #1
{
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	460e      	mov	r6, r1
 80092f2:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80092f4:	d003      	beq.n	80092fe <tcp_poll+0x16>
  pcb->pollinterval = interval;
 80092f6:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 80092f8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80092fe:	4b05      	ldr	r3, [pc, #20]	; (8009314 <tcp_poll+0x2c>)
 8009300:	4905      	ldr	r1, [pc, #20]	; (8009318 <tcp_poll+0x30>)
 8009302:	4806      	ldr	r0, [pc, #24]	; (800931c <tcp_poll+0x34>)
 8009304:	f240 7203 	movw	r2, #1795	; 0x703
 8009308:	f004 fe68 	bl	800dfdc <iprintf>
  pcb->pollinterval = interval;
 800930c:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 800930e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	08011b78 	.word	0x08011b78
 8009318:	08011cac 	.word	0x08011cac
 800931c:	0800e670 	.word	0x0800e670

08009320 <tcp_pcb_purge>:
  if (pcb->state != CLOSED &&
 8009320:	7d03      	ldrb	r3, [r0, #20]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d903      	bls.n	800932e <tcp_pcb_purge+0xe>
 8009326:	2b0a      	cmp	r3, #10
 8009328:	d001      	beq.n	800932e <tcp_pcb_purge+0xe>
 800932a:	f7ff bb4d 	b.w	80089c8 <tcp_pcb_purge.part.1>
 800932e:	4770      	bx	lr

08009330 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8009330:	6802      	ldr	r2, [r0, #0]
 8009332:	428a      	cmp	r2, r1
{
 8009334:	b510      	push	{r4, lr}
 8009336:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8009338:	d04b      	beq.n	80093d2 <tcp_pcb_remove+0xa2>
 800933a:	b14a      	cbz	r2, 8009350 <tcp_pcb_remove+0x20>
 800933c:	68d3      	ldr	r3, [r2, #12]
 800933e:	4299      	cmp	r1, r3
 8009340:	d039      	beq.n	80093b6 <tcp_pcb_remove+0x86>
 8009342:	b12b      	cbz	r3, 8009350 <tcp_pcb_remove+0x20>
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	4294      	cmp	r4, r2
 8009348:	d036      	beq.n	80093b8 <tcp_pcb_remove+0x88>
 800934a:	4613      	mov	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f9      	bne.n	8009344 <tcp_pcb_remove+0x14>
  if (pcb->state != CLOSED &&
 8009350:	7d23      	ldrb	r3, [r4, #20]
  TCP_RMV(pcblist, pcb);
 8009352:	2200      	movs	r2, #0
 8009354:	60e2      	str	r2, [r4, #12]
  if (pcb->state != CLOSED &&
 8009356:	bb0b      	cbnz	r3, 800939c <tcp_pcb_remove+0x6c>
  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8009358:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800935a:	07da      	lsls	r2, r3, #31
 800935c:	d42f      	bmi.n	80093be <tcp_pcb_remove+0x8e>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800935e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009360:	b133      	cbz	r3, 8009370 <tcp_pcb_remove+0x40>
 8009362:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <tcp_pcb_remove+0xa8>)
 8009364:	491d      	ldr	r1, [pc, #116]	; (80093dc <tcp_pcb_remove+0xac>)
 8009366:	481e      	ldr	r0, [pc, #120]	; (80093e0 <tcp_pcb_remove+0xb0>)
 8009368:	f240 7253 	movw	r2, #1875	; 0x753
 800936c:	f004 fe36 	bl	800dfdc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009370:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009372:	b133      	cbz	r3, 8009382 <tcp_pcb_remove+0x52>
 8009374:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <tcp_pcb_remove+0xa8>)
 8009376:	491b      	ldr	r1, [pc, #108]	; (80093e4 <tcp_pcb_remove+0xb4>)
 8009378:	4819      	ldr	r0, [pc, #100]	; (80093e0 <tcp_pcb_remove+0xb0>)
 800937a:	f240 7254 	movw	r2, #1876	; 0x754
 800937e:	f004 fe2d 	bl	800dfdc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009382:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009384:	b133      	cbz	r3, 8009394 <tcp_pcb_remove+0x64>
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <tcp_pcb_remove+0xa8>)
 8009388:	4917      	ldr	r1, [pc, #92]	; (80093e8 <tcp_pcb_remove+0xb8>)
 800938a:	4815      	ldr	r0, [pc, #84]	; (80093e0 <tcp_pcb_remove+0xb0>)
 800938c:	f240 7256 	movw	r2, #1878	; 0x756
 8009390:	f004 fe24 	bl	800dfdc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009394:	2300      	movs	r3, #0
 8009396:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009398:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800939a:	bd10      	pop	{r4, pc}
  if (pcb->state != CLOSED &&
 800939c:	2b0a      	cmp	r3, #10
 800939e:	d0de      	beq.n	800935e <tcp_pcb_remove+0x2e>
     pcb->state != TIME_WAIT &&
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d0f7      	beq.n	8009394 <tcp_pcb_remove+0x64>
 80093a4:	4620      	mov	r0, r4
 80093a6:	f7ff fb0f 	bl	80089c8 <tcp_pcb_purge.part.1>
  if (pcb->state != TIME_WAIT &&
 80093aa:	7d23      	ldrb	r3, [r4, #20]
 80093ac:	2b0a      	cmp	r3, #10
 80093ae:	d0d6      	beq.n	800935e <tcp_pcb_remove+0x2e>
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d0ef      	beq.n	8009394 <tcp_pcb_remove+0x64>
 80093b4:	e7d0      	b.n	8009358 <tcp_pcb_remove+0x28>
  TCP_RMV(pcblist, pcb);
 80093b6:	4613      	mov	r3, r2
 80093b8:	68e2      	ldr	r2, [r4, #12]
 80093ba:	60da      	str	r2, [r3, #12]
 80093bc:	e7c8      	b.n	8009350 <tcp_pcb_remove+0x20>
    pcb->flags |= TF_ACK_NOW;
 80093be:	f043 0302 	orr.w	r3, r3, #2
 80093c2:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80093c4:	4620      	mov	r0, r4
 80093c6:	f003 f837 	bl	800c438 <tcp_output>
  if (pcb->state != LISTEN) {
 80093ca:	7d23      	ldrb	r3, [r4, #20]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d1c6      	bne.n	800935e <tcp_pcb_remove+0x2e>
 80093d0:	e7e0      	b.n	8009394 <tcp_pcb_remove+0x64>
  TCP_RMV(pcblist, pcb);
 80093d2:	68cb      	ldr	r3, [r1, #12]
 80093d4:	6003      	str	r3, [r0, #0]
 80093d6:	e7bb      	b.n	8009350 <tcp_pcb_remove+0x20>
 80093d8:	08011b78 	.word	0x08011b78
 80093dc:	08011c58 	.word	0x08011c58
 80093e0:	0800e670 	.word	0x0800e670
 80093e4:	08011c70 	.word	0x08011c70
 80093e8:	08011c8c 	.word	0x08011c8c

080093ec <tcp_close_shutdown>:
{
 80093ec:	b530      	push	{r4, r5, lr}
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80093ee:	7d03      	ldrb	r3, [r0, #20]
{
 80093f0:	b083      	sub	sp, #12
 80093f2:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80093f4:	b119      	cbz	r1, 80093fe <tcp_close_shutdown+0x12>
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d014      	beq.n	8009424 <tcp_close_shutdown+0x38>
 80093fa:	2b07      	cmp	r3, #7
 80093fc:	d012      	beq.n	8009424 <tcp_close_shutdown+0x38>
  switch (pcb->state) {
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d079      	beq.n	80094f6 <tcp_close_shutdown+0x10a>
 8009402:	d339      	bcc.n	8009478 <tcp_close_shutdown+0x8c>
 8009404:	2b02      	cmp	r3, #2
 8009406:	d148      	bne.n	800949a <tcp_close_shutdown+0xae>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009408:	4621      	mov	r1, r4
 800940a:	4862      	ldr	r0, [pc, #392]	; (8009594 <tcp_close_shutdown+0x1a8>)
 800940c:	f7ff ff90 	bl	8009330 <tcp_pcb_remove>
 8009410:	2301      	movs	r3, #1
 8009412:	4a61      	ldr	r2, [pc, #388]	; (8009598 <tcp_close_shutdown+0x1ac>)
    memp_free(MEMP_TCP_PCB, pcb);
 8009414:	4618      	mov	r0, r3
 8009416:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009418:	7013      	strb	r3, [r2, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800941a:	f7fe fd7b 	bl	8007f14 <memp_free>
  return ERR_OK;
 800941e:	2000      	movs	r0, #0
}
 8009420:	b003      	add	sp, #12
 8009422:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009424:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009426:	2a00      	cmp	r2, #0
 8009428:	f000 80a0 	beq.w	800956c <tcp_close_shutdown+0x180>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800942c:	7ea3      	ldrb	r3, [r4, #26]
 800942e:	06da      	lsls	r2, r3, #27
 8009430:	d53c      	bpl.n	80094ac <tcp_close_shutdown+0xc0>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009432:	8b22      	ldrh	r2, [r4, #24]
 8009434:	8ae3      	ldrh	r3, [r4, #22]
 8009436:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009438:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800943a:	9201      	str	r2, [sp, #4]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4622      	mov	r2, r4
 8009440:	1d23      	adds	r3, r4, #4
 8009442:	f003 f9b1 	bl	800c7a8 <tcp_rst>
  if (pcb->state != CLOSED &&
 8009446:	7d21      	ldrb	r1, [r4, #20]
 8009448:	2901      	cmp	r1, #1
 800944a:	d905      	bls.n	8009458 <tcp_close_shutdown+0x6c>
 800944c:	290a      	cmp	r1, #10
 800944e:	d003      	beq.n	8009458 <tcp_close_shutdown+0x6c>
 8009450:	4620      	mov	r0, r4
 8009452:	f7ff fab9 	bl	80089c8 <tcp_pcb_purge.part.1>
 8009456:	7d21      	ldrb	r1, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 8009458:	4b4e      	ldr	r3, [pc, #312]	; (8009594 <tcp_close_shutdown+0x1a8>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4294      	cmp	r4, r2
 800945e:	d039      	beq.n	80094d4 <tcp_close_shutdown+0xe8>
 8009460:	2a00      	cmp	r2, #0
 8009462:	d039      	beq.n	80094d8 <tcp_close_shutdown+0xec>
 8009464:	68d3      	ldr	r3, [r2, #12]
 8009466:	429c      	cmp	r4, r3
 8009468:	d074      	beq.n	8009554 <tcp_close_shutdown+0x168>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d034      	beq.n	80094d8 <tcp_close_shutdown+0xec>
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	4294      	cmp	r4, r2
 8009472:	d070      	beq.n	8009556 <tcp_close_shutdown+0x16a>
 8009474:	4613      	mov	r3, r2
 8009476:	e7f8      	b.n	800946a <tcp_close_shutdown+0x7e>
    if (pcb->local_port != 0) {
 8009478:	8ae3      	ldrh	r3, [r4, #22]
 800947a:	b323      	cbz	r3, 80094c6 <tcp_close_shutdown+0xda>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800947c:	4b47      	ldr	r3, [pc, #284]	; (800959c <tcp_close_shutdown+0x1b0>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	4294      	cmp	r4, r2
 8009482:	f000 8083 	beq.w	800958c <tcp_close_shutdown+0x1a0>
 8009486:	b1e2      	cbz	r2, 80094c2 <tcp_close_shutdown+0xd6>
 8009488:	68d3      	ldr	r3, [r2, #12]
 800948a:	429c      	cmp	r4, r3
 800948c:	d016      	beq.n	80094bc <tcp_close_shutdown+0xd0>
 800948e:	b1c3      	cbz	r3, 80094c2 <tcp_close_shutdown+0xd6>
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	4294      	cmp	r4, r2
 8009494:	d013      	beq.n	80094be <tcp_close_shutdown+0xd2>
 8009496:	4613      	mov	r3, r2
 8009498:	e7f9      	b.n	800948e <tcp_close_shutdown+0xa2>
  switch (pcb->state) {
 800949a:	2b04      	cmp	r3, #4
 800949c:	d047      	beq.n	800952e <tcp_close_shutdown+0x142>
 800949e:	2b07      	cmp	r3, #7
 80094a0:	d05c      	beq.n	800955c <tcp_close_shutdown+0x170>
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d043      	beq.n	800952e <tcp_close_shutdown+0x142>
    tcp_output(pcb);
 80094a6:	2000      	movs	r0, #0
}
 80094a8:	b003      	add	sp, #12
 80094aa:	bd30      	pop	{r4, r5, pc}
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80094ac:	4b3c      	ldr	r3, [pc, #240]	; (80095a0 <tcp_close_shutdown+0x1b4>)
 80094ae:	493d      	ldr	r1, [pc, #244]	; (80095a4 <tcp_close_shutdown+0x1b8>)
 80094b0:	483d      	ldr	r0, [pc, #244]	; (80095a8 <tcp_close_shutdown+0x1bc>)
 80094b2:	f240 120f 	movw	r2, #271	; 0x10f
 80094b6:	f004 fd91 	bl	800dfdc <iprintf>
 80094ba:	e7ba      	b.n	8009432 <tcp_close_shutdown+0x46>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80094bc:	4613      	mov	r3, r2
 80094be:	68e2      	ldr	r2, [r4, #12]
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	2300      	movs	r3, #0
 80094c4:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80094c6:	4621      	mov	r1, r4
 80094c8:	2001      	movs	r0, #1
 80094ca:	f7fe fd23 	bl	8007f14 <memp_free>
      return ERR_OK;
 80094ce:	2000      	movs	r0, #0
}
 80094d0:	b003      	add	sp, #12
 80094d2:	bd30      	pop	{r4, r5, pc}
      TCP_RMV_ACTIVE(pcb);
 80094d4:	68e2      	ldr	r2, [r4, #12]
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	4b2f      	ldr	r3, [pc, #188]	; (8009598 <tcp_close_shutdown+0x1ac>)
 80094da:	2201      	movs	r2, #1
 80094dc:	2500      	movs	r5, #0
      if (pcb->state == ESTABLISHED) {
 80094de:	2904      	cmp	r1, #4
      TCP_RMV_ACTIVE(pcb);
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 80094e4:	d048      	beq.n	8009578 <tcp_close_shutdown+0x18c>
        if (tcp_input_pcb == pcb) {
 80094e6:	4b31      	ldr	r3, [pc, #196]	; (80095ac <tcp_close_shutdown+0x1c0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	429c      	cmp	r4, r3
 80094ec:	d1eb      	bne.n	80094c6 <tcp_close_shutdown+0xda>
          tcp_trigger_input_pcb_close();
 80094ee:	f002 f9dd 	bl	800b8ac <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80094f2:	4628      	mov	r0, r5
 80094f4:	e794      	b.n	8009420 <tcp_close_shutdown+0x34>
 80094f6:	492e      	ldr	r1, [pc, #184]	; (80095b0 <tcp_close_shutdown+0x1c4>)
         pcb->listener = NULL;
 80094f8:	2000      	movs	r0, #0
 80094fa:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80094fe:	f851 3b04 	ldr.w	r3, [r1], #4
 8009502:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009504:	b133      	cbz	r3, 8009514 <tcp_close_shutdown+0x128>
      if (pcb->listener == lpcb) {
 8009506:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009508:	4294      	cmp	r4, r2
         pcb->listener = NULL;
 800950a:	bf08      	it	eq
 800950c:	6798      	streq	r0, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1f8      	bne.n	8009506 <tcp_close_shutdown+0x11a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009514:	42a9      	cmp	r1, r5
 8009516:	d1f2      	bne.n	80094fe <tcp_close_shutdown+0x112>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009518:	4621      	mov	r1, r4
 800951a:	4826      	ldr	r0, [pc, #152]	; (80095b4 <tcp_close_shutdown+0x1c8>)
 800951c:	f7ff ff08 	bl	8009330 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009520:	4621      	mov	r1, r4
 8009522:	2002      	movs	r0, #2
 8009524:	f7fe fcf6 	bl	8007f14 <memp_free>
  return ERR_OK;
 8009528:	2000      	movs	r0, #0
}
 800952a:	b003      	add	sp, #12
 800952c:	bd30      	pop	{r4, r5, pc}
    err = tcp_send_fin(pcb);
 800952e:	4620      	mov	r0, r4
 8009530:	f002 f9c4 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009534:	b928      	cbnz	r0, 8009542 <tcp_close_shutdown+0x156>
      pcb->state = FIN_WAIT_1;
 8009536:	2305      	movs	r3, #5
 8009538:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800953a:	4620      	mov	r0, r4
 800953c:	f002 ff7c 	bl	800c438 <tcp_output>
 8009540:	e7b1      	b.n	80094a6 <tcp_close_shutdown+0xba>
  } else if (err == ERR_MEM) {
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	f47f af6c 	bne.w	8009420 <tcp_close_shutdown+0x34>
    pcb->flags |= TF_CLOSEPEND;
 8009548:	7ea3      	ldrb	r3, [r4, #26]
 800954a:	f043 0308 	orr.w	r3, r3, #8
 800954e:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009550:	2000      	movs	r0, #0
 8009552:	e765      	b.n	8009420 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 8009554:	4613      	mov	r3, r2
 8009556:	68e2      	ldr	r2, [r4, #12]
 8009558:	60da      	str	r2, [r3, #12]
 800955a:	e7bd      	b.n	80094d8 <tcp_close_shutdown+0xec>
    err = tcp_send_fin(pcb);
 800955c:	4620      	mov	r0, r4
 800955e:	f002 f9ad 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009562:	2800      	cmp	r0, #0
 8009564:	d1ed      	bne.n	8009542 <tcp_close_shutdown+0x156>
      pcb->state = LAST_ACK;
 8009566:	2309      	movs	r3, #9
 8009568:	7523      	strb	r3, [r4, #20]
 800956a:	e7e6      	b.n	800953a <tcp_close_shutdown+0x14e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800956c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800956e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009572:	f47f af5b 	bne.w	800942c <tcp_close_shutdown+0x40>
 8009576:	e742      	b.n	80093fe <tcp_close_shutdown+0x12>
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009578:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <tcp_close_shutdown+0x1cc>)
        pcb->state = TIME_WAIT;
 800957a:	220a      	movs	r2, #10
        TCP_REG(&tcp_tw_pcbs, pcb);
 800957c:	6819      	ldr	r1, [r3, #0]
 800957e:	60e1      	str	r1, [r4, #12]
        pcb->state = TIME_WAIT;
 8009580:	7522      	strb	r2, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009582:	601c      	str	r4, [r3, #0]
 8009584:	f003 fbc4 	bl	800cd10 <tcp_timer_needed>
      return ERR_OK;
 8009588:	4628      	mov	r0, r5
 800958a:	e749      	b.n	8009420 <tcp_close_shutdown+0x34>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800958c:	68e2      	ldr	r2, [r4, #12]
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e797      	b.n	80094c2 <tcp_close_shutdown+0xd6>
 8009592:	bf00      	nop
 8009594:	2000889c 	.word	0x2000889c
 8009598:	20008898 	.word	0x20008898
 800959c:	200088a8 	.word	0x200088a8
 80095a0:	08011b78 	.word	0x08011b78
 80095a4:	08011bd0 	.word	0x08011bd0
 80095a8:	0800e670 	.word	0x0800e670
 80095ac:	200088b0 	.word	0x200088b0
 80095b0:	08011c4c 	.word	0x08011c4c
 80095b4:	200088a4 	.word	0x200088a4
 80095b8:	200088ac 	.word	0x200088ac

080095bc <tcp_recv_null>:
{
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (p != NULL) {
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d03d      	beq.n	800963e <tcp_recv_null+0x82>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80095c2:	7d0b      	ldrb	r3, [r1, #20]
    tcp_recved(pcb, p->tot_len);
 80095c4:	8915      	ldrh	r5, [r2, #8]
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	4616      	mov	r6, r2
 80095ca:	460c      	mov	r4, r1
 80095cc:	d051      	beq.n	8009672 <tcp_recv_null+0xb6>
  pcb->rcv_wnd += len;
 80095ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80095d0:	442b      	add	r3, r5
 80095d2:	b29b      	uxth	r3, r3
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80095d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  pcb->rcv_wnd += len;
 80095d8:	8523      	strh	r3, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80095da:	d920      	bls.n	800961e <tcp_recv_null+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80095dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095e0:	4619      	mov	r1, r3
 80095e2:	8523      	strh	r3, [r4, #40]	; 0x28
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80095e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80095e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80095e8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80095ea:	1a2f      	subs	r7, r5, r0
 80095ec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80095f0:	4439      	add	r1, r7
 80095f2:	bf94      	ite	ls
 80095f4:	1a8a      	subls	r2, r1, r2
 80095f6:	f5a1 6200 	subhi.w	r2, r1, #2048	; 0x800
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	db2e      	blt.n	800965c <tcp_recv_null+0xa0>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80095fe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009602:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009604:	db06      	blt.n	8009614 <tcp_recv_null+0x58>
    tcp_ack_now(pcb);
 8009606:	7ea3      	ldrb	r3, [r4, #26]
 8009608:	f043 0302 	orr.w	r3, r3, #2
 800960c:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800960e:	4620      	mov	r0, r4
 8009610:	f002 ff12 	bl	800c438 <tcp_output>
    pbuf_free(p);
 8009614:	4630      	mov	r0, r6
 8009616:	f7fe fe5d 	bl	80082d4 <pbuf_free>
}
 800961a:	2000      	movs	r0, #0
 800961c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (pcb->rcv_wnd == 0) {
 800961e:	b963      	cbnz	r3, 800963a <tcp_recv_null+0x7e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8009620:	7d23      	ldrb	r3, [r4, #20]
 8009622:	2b07      	cmp	r3, #7
 8009624:	d0da      	beq.n	80095dc <tcp_recv_null+0x20>
 8009626:	2b09      	cmp	r3, #9
 8009628:	d0d8      	beq.n	80095dc <tcp_recv_null+0x20>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800962a:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <tcp_recv_null+0xd8>)
 800962c:	491a      	ldr	r1, [pc, #104]	; (8009698 <tcp_recv_null+0xdc>)
 800962e:	481b      	ldr	r0, [pc, #108]	; (800969c <tcp_recv_null+0xe0>)
 8009630:	f240 322d 	movw	r2, #813	; 0x32d
 8009634:	f004 fcd2 	bl	800dfdc <iprintf>
 8009638:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800963a:	4619      	mov	r1, r3
 800963c:	e7d2      	b.n	80095e4 <tcp_recv_null+0x28>
  } else if (err == ERR_OK) {
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1eb      	bne.n	800961a <tcp_recv_null+0x5e>
  if (pcb->state != LISTEN) {
 8009642:	7d0b      	ldrb	r3, [r1, #20]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d003      	beq.n	8009650 <tcp_recv_null+0x94>
    pcb->flags |= TF_RXCLOSED;
 8009648:	7e8b      	ldrb	r3, [r1, #26]
 800964a:	f043 0310 	orr.w	r3, r3, #16
 800964e:	768b      	strb	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 8009650:	4608      	mov	r0, r1
}
 8009652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_close_shutdown(pcb, 1);
 8009656:	2101      	movs	r1, #1
 8009658:	f7ff bec8 	b.w	80093ec <tcp_close_shutdown>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800965c:	2f00      	cmp	r7, #0
 800965e:	dd02      	ble.n	8009666 <tcp_recv_null+0xaa>
      pcb->rcv_ann_wnd = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009664:	e7d6      	b.n	8009614 <tcp_recv_null+0x58>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009666:	1b45      	subs	r5, r0, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009668:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800966c:	d209      	bcs.n	8009682 <tcp_recv_null+0xc6>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800966e:	8565      	strh	r5, [r4, #42]	; 0x2a
 8009670:	e7d0      	b.n	8009614 <tcp_recv_null+0x58>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009672:	4b08      	ldr	r3, [pc, #32]	; (8009694 <tcp_recv_null+0xd8>)
 8009674:	490a      	ldr	r1, [pc, #40]	; (80096a0 <tcp_recv_null+0xe4>)
 8009676:	4809      	ldr	r0, [pc, #36]	; (800969c <tcp_recv_null+0xe0>)
 8009678:	f44f 7248 	mov.w	r2, #800	; 0x320
 800967c:	f004 fcae 	bl	800dfdc <iprintf>
 8009680:	e7a5      	b.n	80095ce <tcp_recv_null+0x12>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009682:	4b04      	ldr	r3, [pc, #16]	; (8009694 <tcp_recv_null+0xd8>)
 8009684:	4907      	ldr	r1, [pc, #28]	; (80096a4 <tcp_recv_null+0xe8>)
 8009686:	4805      	ldr	r0, [pc, #20]	; (800969c <tcp_recv_null+0xe0>)
 8009688:	f44f 7242 	mov.w	r2, #776	; 0x308
 800968c:	f004 fca6 	bl	800dfdc <iprintf>
 8009690:	e7ed      	b.n	800966e <tcp_recv_null+0xb2>
 8009692:	bf00      	nop
 8009694:	08011b78 	.word	0x08011b78
 8009698:	08011d1c 	.word	0x08011d1c
 800969c:	0800e670 	.word	0x0800e670
 80096a0:	08011cf4 	.word	0x08011cf4
 80096a4:	08011ec8 	.word	0x08011ec8

080096a8 <tcp_process_refused_data>:
{
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80096aa:	6f45      	ldr	r5, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80096ac:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 80096b0:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 80096b2:	2300      	movs	r3, #0
{
 80096b4:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 80096b6:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80096b8:	b156      	cbz	r6, 80096d0 <tcp_process_refused_data+0x28>
 80096ba:	4601      	mov	r1, r0
 80096bc:	462a      	mov	r2, r5
 80096be:	6900      	ldr	r0, [r0, #16]
 80096c0:	47b0      	blx	r6
    if (err == ERR_OK) {
 80096c2:	b158      	cbz	r0, 80096dc <tcp_process_refused_data+0x34>
    } else if (err == ERR_ABRT) {
 80096c4:	300d      	adds	r0, #13
 80096c6:	d01d      	beq.n	8009704 <tcp_process_refused_data+0x5c>
      pcb->refused_data = refused_data;
 80096c8:	6765      	str	r5, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80096ca:	f06f 0004 	mvn.w	r0, #4
}
 80096ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 80096d0:	8929      	ldrh	r1, [r5, #8]
 80096d2:	f7ff fabd 	bl	8008c50 <tcp_recved>
    pbuf_free(p);
 80096d6:	4628      	mov	r0, r5
 80096d8:	f7fe fdfc 	bl	80082d4 <pbuf_free>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80096dc:	06bb      	lsls	r3, r7, #26
 80096de:	d50f      	bpl.n	8009700 <tcp_process_refused_data+0x58>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80096e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80096e2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80096e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
          pcb->rcv_wnd++;
 80096ea:	bf1c      	itt	ne
 80096ec:	3301      	addne	r3, #1
 80096ee:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80096f0:	b135      	cbz	r5, 8009700 <tcp_process_refused_data+0x58>
 80096f2:	2300      	movs	r3, #0
 80096f4:	461a      	mov	r2, r3
 80096f6:	4621      	mov	r1, r4
 80096f8:	6920      	ldr	r0, [r4, #16]
 80096fa:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 80096fc:	300d      	adds	r0, #13
 80096fe:	d001      	beq.n	8009704 <tcp_process_refused_data+0x5c>
  return ERR_OK;
 8009700:	2000      	movs	r0, #0
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 8009704:	f06f 000c 	mvn.w	r0, #12
 8009708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970a:	bf00      	nop

0800970c <tcp_fasttmr>:
{
 800970c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_timer_ctr;
 8009710:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8009824 <tcp_fasttmr+0x118>
        tcp_active_pcbs_changed = 0;
 8009714:	f8df a110 	ldr.w	sl, [pc, #272]	; 8009828 <tcp_fasttmr+0x11c>
  ++tcp_timer_ctr;
 8009718:	f898 3000 	ldrb.w	r3, [r8]
 800971c:	3301      	adds	r3, #1
 800971e:	f888 3000 	strb.w	r3, [r8]
        tcp_active_pcbs_changed = 0;
 8009722:	f04f 0900 	mov.w	r9, #0
  pcb = tcp_active_pcbs;
 8009726:	4b3e      	ldr	r3, [pc, #248]	; (8009820 <tcp_fasttmr+0x114>)
 8009728:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800972a:	2c00      	cmp	r4, #0
 800972c:	d076      	beq.n	800981c <tcp_fasttmr+0x110>
    if (pcb->last_timer != tcp_timer_ctr) {
 800972e:	f898 2000 	ldrb.w	r2, [r8]
 8009732:	7f63      	ldrb	r3, [r4, #29]
 8009734:	4293      	cmp	r3, r2
 8009736:	d032      	beq.n	800979e <tcp_fasttmr+0x92>
      if (pcb->flags & TF_ACK_DELAY) {
 8009738:	7ea3      	ldrb	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800973a:	7762      	strb	r2, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800973c:	07d9      	lsls	r1, r3, #31
 800973e:	d44b      	bmi.n	80097d8 <tcp_fasttmr+0xcc>
      if (pcb->flags & TF_CLOSEPEND) {
 8009740:	071a      	lsls	r2, r3, #28
 8009742:	d434      	bmi.n	80097ae <tcp_fasttmr+0xa2>
      if (pcb->refused_data != NULL) {
 8009744:	6f65      	ldr	r5, [r4, #116]	; 0x74
      next = pcb->next;
 8009746:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009748:	b325      	cbz	r5, 8009794 <tcp_fasttmr+0x88>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800974a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800974e:	f895 b00d 	ldrb.w	fp, [r5, #13]
        tcp_active_pcbs_changed = 0;
 8009752:	f88a 9000 	strb.w	r9, [sl]
    pcb->refused_data = NULL;
 8009756:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800975a:	2e00      	cmp	r6, #0
 800975c:	d04e      	beq.n	80097fc <tcp_fasttmr+0xf0>
 800975e:	2300      	movs	r3, #0
 8009760:	462a      	mov	r2, r5
 8009762:	4621      	mov	r1, r4
 8009764:	6920      	ldr	r0, [r4, #16]
 8009766:	47b0      	blx	r6
    if (err == ERR_OK) {
 8009768:	b9e8      	cbnz	r0, 80097a6 <tcp_fasttmr+0x9a>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800976a:	f01b 0f20 	tst.w	fp, #32
 800976e:	d00d      	beq.n	800978c <tcp_fasttmr+0x80>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009770:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d001      	beq.n	800977c <tcp_fasttmr+0x70>
          pcb->rcv_wnd++;
 8009778:	3301      	adds	r3, #1
 800977a:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800977c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8009780:	b125      	cbz	r5, 800978c <tcp_fasttmr+0x80>
 8009782:	2300      	movs	r3, #0
 8009784:	461a      	mov	r2, r3
 8009786:	4621      	mov	r1, r4
 8009788:	6920      	ldr	r0, [r4, #16]
 800978a:	47a8      	blx	r5
        if (tcp_active_pcbs_changed) {
 800978c:	f89a 3000 	ldrb.w	r3, [sl]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1c8      	bne.n	8009726 <tcp_fasttmr+0x1a>
      pcb = next;
 8009794:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8009796:	2c00      	cmp	r4, #0
 8009798:	d1c9      	bne.n	800972e <tcp_fasttmr+0x22>
 800979a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pcb = pcb->next;
 800979e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80097a0:	2c00      	cmp	r4, #0
 80097a2:	d1c4      	bne.n	800972e <tcp_fasttmr+0x22>
 80097a4:	e7f9      	b.n	800979a <tcp_fasttmr+0x8e>
    } else if (err == ERR_ABRT) {
 80097a6:	300d      	adds	r0, #13
      pcb->refused_data = refused_data;
 80097a8:	bf18      	it	ne
 80097aa:	6765      	strne	r5, [r4, #116]	; 0x74
 80097ac:	e7ee      	b.n	800978c <tcp_fasttmr+0x80>
  switch (pcb->state) {
 80097ae:	7d22      	ldrb	r2, [r4, #20]
        pcb->flags &= ~(TF_CLOSEPEND);
 80097b0:	f023 0308 	bic.w	r3, r3, #8
  switch (pcb->state) {
 80097b4:	2a04      	cmp	r2, #4
        pcb->flags &= ~(TF_CLOSEPEND);
 80097b6:	76a3      	strb	r3, [r4, #26]
  switch (pcb->state) {
 80097b8:	d003      	beq.n	80097c2 <tcp_fasttmr+0xb6>
 80097ba:	2a07      	cmp	r2, #7
 80097bc:	d026      	beq.n	800980c <tcp_fasttmr+0x100>
 80097be:	2a03      	cmp	r2, #3
 80097c0:	d1c0      	bne.n	8009744 <tcp_fasttmr+0x38>
    err = tcp_send_fin(pcb);
 80097c2:	4620      	mov	r0, r4
 80097c4:	f002 f87a 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 80097c8:	b988      	cbnz	r0, 80097ee <tcp_fasttmr+0xe2>
      pcb->state = FIN_WAIT_1;
 80097ca:	f04f 0305 	mov.w	r3, #5
 80097ce:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80097d0:	4620      	mov	r0, r4
 80097d2:	f002 fe31 	bl	800c438 <tcp_output>
 80097d6:	e7b5      	b.n	8009744 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 80097d8:	f043 0302 	orr.w	r3, r3, #2
 80097dc:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 80097de:	4620      	mov	r0, r4
 80097e0:	f002 fe2a 	bl	800c438 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80097e4:	7ea3      	ldrb	r3, [r4, #26]
 80097e6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80097ea:	76a3      	strb	r3, [r4, #26]
 80097ec:	e7a8      	b.n	8009740 <tcp_fasttmr+0x34>
  } else if (err == ERR_MEM) {
 80097ee:	3001      	adds	r0, #1
 80097f0:	d1a8      	bne.n	8009744 <tcp_fasttmr+0x38>
    pcb->flags |= TF_CLOSEPEND;
 80097f2:	7ea3      	ldrb	r3, [r4, #26]
 80097f4:	f043 0308 	orr.w	r3, r3, #8
 80097f8:	76a3      	strb	r3, [r4, #26]
 80097fa:	e7a3      	b.n	8009744 <tcp_fasttmr+0x38>
    tcp_recved(pcb, p->tot_len);
 80097fc:	4620      	mov	r0, r4
 80097fe:	8929      	ldrh	r1, [r5, #8]
 8009800:	f7ff fa26 	bl	8008c50 <tcp_recved>
    pbuf_free(p);
 8009804:	4628      	mov	r0, r5
 8009806:	f7fe fd65 	bl	80082d4 <pbuf_free>
 800980a:	e7ae      	b.n	800976a <tcp_fasttmr+0x5e>
    err = tcp_send_fin(pcb);
 800980c:	4620      	mov	r0, r4
 800980e:	f002 f855 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009812:	2800      	cmp	r0, #0
 8009814:	d1eb      	bne.n	80097ee <tcp_fasttmr+0xe2>
      pcb->state = LAST_ACK;
 8009816:	2309      	movs	r3, #9
 8009818:	7523      	strb	r3, [r4, #20]
 800981a:	e7d9      	b.n	80097d0 <tcp_fasttmr+0xc4>
 800981c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	2000889c 	.word	0x2000889c
 8009824:	20003eda 	.word	0x20003eda
 8009828:	20008898 	.word	0x20008898

0800982c <tcp_tmr>:
{
 800982c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800982e:	f7ff ff6d 	bl	800970c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009832:	4a06      	ldr	r2, [pc, #24]	; (800984c <tcp_tmr+0x20>)
 8009834:	7813      	ldrb	r3, [r2, #0]
 8009836:	3301      	adds	r3, #1
 8009838:	b2db      	uxtb	r3, r3
 800983a:	7013      	strb	r3, [r2, #0]
 800983c:	07db      	lsls	r3, r3, #31
 800983e:	d400      	bmi.n	8009842 <tcp_tmr+0x16>
 8009840:	bd08      	pop	{r3, pc}
}
 8009842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8009846:	f7ff ba65 	b.w	8008d14 <tcp_slowtmr>
 800984a:	bf00      	nop
 800984c:	20003ed9 	.word	0x20003ed9

08009850 <tcp_abandon>:
{
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009854:	7d03      	ldrb	r3, [r0, #20]
 8009856:	2b01      	cmp	r3, #1
{
 8009858:	b085      	sub	sp, #20
 800985a:	4605      	mov	r5, r0
 800985c:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800985e:	f000 8082 	beq.w	8009966 <tcp_abandon+0x116>
  if (pcb->state == TIME_WAIT) {
 8009862:	2b0a      	cmp	r3, #10
 8009864:	f000 8090 	beq.w	8009988 <tcp_abandon+0x138>
    errf = pcb->errf;
 8009868:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
    seqno = pcb->snd_nxt;
 800986c:	f8d5 a04c 	ldr.w	sl, [r5, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8009870:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 8009874:	9203      	str	r2, [sp, #12]
    errf_arg = pcb->callback_arg;
 8009876:	f8d5 9010 	ldr.w	r9, [r5, #16]
    if (pcb->state == CLOSED) {
 800987a:	2b00      	cmp	r3, #0
 800987c:	d155      	bne.n	800992a <tcp_abandon+0xda>
      if (pcb->local_port != 0) {
 800987e:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	d13c      	bne.n	8009902 <tcp_abandon+0xb2>
    int send_rst = 0;
 8009888:	461e      	mov	r6, r3
    if (pcb->unacked != NULL) {
 800988a:	6eef      	ldr	r7, [r5, #108]	; 0x6c
 800988c:	b167      	cbz	r7, 80098a8 <tcp_abandon+0x58>
    if (seg->p != NULL) {
 800988e:	687b      	ldr	r3, [r7, #4]
    struct tcp_seg *next = seg->next;
 8009890:	683c      	ldr	r4, [r7, #0]
      pbuf_free(seg->p);
 8009892:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 8009894:	b10b      	cbz	r3, 800989a <tcp_abandon+0x4a>
      pbuf_free(seg->p);
 8009896:	f7fe fd1d 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800989a:	4639      	mov	r1, r7
 800989c:	2003      	movs	r0, #3
 800989e:	f7fe fb39 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 80098a2:	4627      	mov	r7, r4
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	d1f2      	bne.n	800988e <tcp_abandon+0x3e>
    if (pcb->unsent != NULL) {
 80098a8:	6eaf      	ldr	r7, [r5, #104]	; 0x68
 80098aa:	b167      	cbz	r7, 80098c6 <tcp_abandon+0x76>
    if (seg->p != NULL) {
 80098ac:	687b      	ldr	r3, [r7, #4]
    struct tcp_seg *next = seg->next;
 80098ae:	683c      	ldr	r4, [r7, #0]
      pbuf_free(seg->p);
 80098b0:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 80098b2:	b10b      	cbz	r3, 80098b8 <tcp_abandon+0x68>
      pbuf_free(seg->p);
 80098b4:	f7fe fd0e 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80098b8:	4639      	mov	r1, r7
 80098ba:	2003      	movs	r0, #3
 80098bc:	f7fe fb2a 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 80098c0:	4627      	mov	r7, r4
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d1f2      	bne.n	80098ac <tcp_abandon+0x5c>
    if (pcb->ooseq != NULL) {
 80098c6:	6f2f      	ldr	r7, [r5, #112]	; 0x70
 80098c8:	b167      	cbz	r7, 80098e4 <tcp_abandon+0x94>
    if (seg->p != NULL) {
 80098ca:	687b      	ldr	r3, [r7, #4]
    struct tcp_seg *next = seg->next;
 80098cc:	683c      	ldr	r4, [r7, #0]
      pbuf_free(seg->p);
 80098ce:	4618      	mov	r0, r3
    if (seg->p != NULL) {
 80098d0:	b10b      	cbz	r3, 80098d6 <tcp_abandon+0x86>
      pbuf_free(seg->p);
 80098d2:	f7fe fcff 	bl	80082d4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80098d6:	4639      	mov	r1, r7
 80098d8:	2003      	movs	r0, #3
 80098da:	f7fe fb1b 	bl	8007f14 <memp_free>
  while (seg != NULL) {
 80098de:	4627      	mov	r7, r4
 80098e0:	2c00      	cmp	r4, #0
 80098e2:	d1f2      	bne.n	80098ca <tcp_abandon+0x7a>
    if (send_rst) {
 80098e4:	bb5e      	cbnz	r6, 800993e <tcp_abandon+0xee>
    memp_free(MEMP_TCP_PCB, pcb);
 80098e6:	4629      	mov	r1, r5
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7fe fb13 	bl	8007f14 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d035      	beq.n	8009960 <tcp_abandon+0x110>
 80098f4:	4648      	mov	r0, r9
 80098f6:	f06f 010c 	mvn.w	r1, #12
}
 80098fa:	b005      	add	sp, #20
 80098fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009900:	4718      	bx	r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009902:	4b28      	ldr	r3, [pc, #160]	; (80099a4 <tcp_abandon+0x154>)
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	4295      	cmp	r5, r2
 8009908:	d049      	beq.n	800999e <tcp_abandon+0x14e>
 800990a:	b14a      	cbz	r2, 8009920 <tcp_abandon+0xd0>
 800990c:	68d3      	ldr	r3, [r2, #12]
 800990e:	429d      	cmp	r5, r3
 8009910:	d032      	beq.n	8009978 <tcp_abandon+0x128>
 8009912:	b12b      	cbz	r3, 8009920 <tcp_abandon+0xd0>
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	4295      	cmp	r5, r2
 8009918:	d02f      	beq.n	800997a <tcp_abandon+0x12a>
 800991a:	4613      	mov	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1f9      	bne.n	8009914 <tcp_abandon+0xc4>
 8009920:	2300      	movs	r3, #0
    u16_t local_port = 0;
 8009922:	4698      	mov	r8, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009924:	60eb      	str	r3, [r5, #12]
    int send_rst = 0;
 8009926:	461e      	mov	r6, r3
 8009928:	e7af      	b.n	800988a <tcp_abandon+0x3a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800992a:	4629      	mov	r1, r5
 800992c:	481e      	ldr	r0, [pc, #120]	; (80099a8 <tcp_abandon+0x158>)
      local_port = pcb->local_port;
 800992e:	f8b5 8016 	ldrh.w	r8, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009932:	f7ff fcfd 	bl	8009330 <tcp_pcb_remove>
 8009936:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <tcp_abandon+0x15c>)
 8009938:	2201      	movs	r2, #1
 800993a:	701a      	strb	r2, [r3, #0]
 800993c:	e7a5      	b.n	800988a <tcp_abandon+0x3a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800993e:	8b2b      	ldrh	r3, [r5, #24]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	4659      	mov	r1, fp
 8009944:	1d2b      	adds	r3, r5, #4
 8009946:	4650      	mov	r0, sl
 8009948:	462a      	mov	r2, r5
 800994a:	f8cd 8000 	str.w	r8, [sp]
 800994e:	f002 ff2b 	bl	800c7a8 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8009952:	4629      	mov	r1, r5
 8009954:	2001      	movs	r0, #1
 8009956:	f7fe fadd 	bl	8007f14 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1c9      	bne.n	80098f4 <tcp_abandon+0xa4>
}
 8009960:	b005      	add	sp, #20
 8009962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009966:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <tcp_abandon+0x160>)
 8009968:	4912      	ldr	r1, [pc, #72]	; (80099b4 <tcp_abandon+0x164>)
 800996a:	4813      	ldr	r0, [pc, #76]	; (80099b8 <tcp_abandon+0x168>)
 800996c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009970:	f004 fb34 	bl	800dfdc <iprintf>
 8009974:	7d2b      	ldrb	r3, [r5, #20]
 8009976:	e774      	b.n	8009862 <tcp_abandon+0x12>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009978:	4613      	mov	r3, r2
 800997a:	68ea      	ldr	r2, [r5, #12]
 800997c:	60da      	str	r2, [r3, #12]
 800997e:	2300      	movs	r3, #0
    u16_t local_port = 0;
 8009980:	4698      	mov	r8, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009982:	60eb      	str	r3, [r5, #12]
    int send_rst = 0;
 8009984:	461e      	mov	r6, r3
 8009986:	e780      	b.n	800988a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009988:	4629      	mov	r1, r5
 800998a:	480c      	ldr	r0, [pc, #48]	; (80099bc <tcp_abandon+0x16c>)
 800998c:	f7ff fcd0 	bl	8009330 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009990:	4629      	mov	r1, r5
 8009992:	2001      	movs	r0, #1
}
 8009994:	b005      	add	sp, #20
 8009996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 800999a:	f7fe babb 	b.w	8007f14 <memp_free>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800999e:	68ea      	ldr	r2, [r5, #12]
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	e7bd      	b.n	8009920 <tcp_abandon+0xd0>
 80099a4:	200088a8 	.word	0x200088a8
 80099a8:	2000889c 	.word	0x2000889c
 80099ac:	20008898 	.word	0x20008898
 80099b0:	08011b78 	.word	0x08011b78
 80099b4:	08011b34 	.word	0x08011b34
 80099b8:	0800e670 	.word	0x0800e670
 80099bc:	200088ac 	.word	0x200088ac

080099c0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80099c0:	2101      	movs	r1, #1
 80099c2:	f7ff bf45 	b.w	8009850 <tcp_abandon>
 80099c6:	bf00      	nop

080099c8 <tcp_accept_null>:
{
 80099c8:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80099ca:	4608      	mov	r0, r1
 80099cc:	2101      	movs	r1, #1
 80099ce:	f7ff ff3f 	bl	8009850 <tcp_abandon>
}
 80099d2:	f06f 000c 	mvn.w	r0, #12
 80099d6:	bd08      	pop	{r3, pc}

080099d8 <tcp_kill_state>:
{
 80099d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80099da:	f1a0 0308 	sub.w	r3, r0, #8
 80099de:	2b01      	cmp	r3, #1
{
 80099e0:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80099e2:	d906      	bls.n	80099f2 <tcp_kill_state+0x1a>
 80099e4:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <tcp_kill_state+0x54>)
 80099e6:	4912      	ldr	r1, [pc, #72]	; (8009a30 <tcp_kill_state+0x58>)
 80099e8:	4812      	ldr	r0, [pc, #72]	; (8009a34 <tcp_kill_state+0x5c>)
 80099ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80099ee:	f004 faf5 	bl	800dfdc <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80099f2:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <tcp_kill_state+0x60>)
 80099f4:	6819      	ldr	r1, [r3, #0]
 80099f6:	b1c1      	cbz	r1, 8009a2a <tcp_kill_state+0x52>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80099f8:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <tcp_kill_state+0x64>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	681d      	ldr	r5, [r3, #0]
 80099fe:	4610      	mov	r0, r2
 8009a00:	e001      	b.n	8009a06 <tcp_kill_state+0x2e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a02:	68c9      	ldr	r1, [r1, #12]
 8009a04:	b161      	cbz	r1, 8009a20 <tcp_kill_state+0x48>
    if (pcb->state == state) {
 8009a06:	7d0b      	ldrb	r3, [r1, #20]
 8009a08:	42a3      	cmp	r3, r4
 8009a0a:	d1fa      	bne.n	8009a02 <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009a0c:	6a0b      	ldr	r3, [r1, #32]
 8009a0e:	1aeb      	subs	r3, r5, r3
 8009a10:	4293      	cmp	r3, r2
 8009a12:	bf28      	it	cs
 8009a14:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a16:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009a18:	bf28      	it	cs
 8009a1a:	461a      	movcs	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	d1f2      	bne.n	8009a06 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 8009a20:	b118      	cbz	r0, 8009a2a <tcp_kill_state+0x52>
}
 8009a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8009a26:	f7ff bf13 	b.w	8009850 <tcp_abandon>
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	08011b78 	.word	0x08011b78
 8009a30:	08011c14 	.word	0x08011c14
 8009a34:	0800e670 	.word	0x0800e670
 8009a38:	2000889c 	.word	0x2000889c
 8009a3c:	200088a0 	.word	0x200088a0

08009a40 <tcp_alloc>:
{
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a44:	2001      	movs	r0, #1
 8009a46:	f7fe fa31 	bl	8007eac <memp_malloc>
  if (pcb == NULL) {
 8009a4a:	b358      	cbz	r0, 8009aa4 <tcp_alloc+0x64>
 8009a4c:	4d47      	ldr	r5, [pc, #284]	; (8009b6c <tcp_alloc+0x12c>)
 8009a4e:	4604      	mov	r4, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009a50:	2298      	movs	r2, #152	; 0x98
 8009a52:	2100      	movs	r1, #0
 8009a54:	4620      	mov	r0, r4
 8009a56:	f004 fd77 	bl	800e548 <memset>
    pcb->tmr = tcp_ticks;
 8009a5a:	6828      	ldr	r0, [r5, #0]
    pcb->last_timer = tcp_timer_ctr;
 8009a5c:	4b44      	ldr	r3, [pc, #272]	; (8009b70 <tcp_alloc+0x130>)
    pcb->tmr = tcp_ticks;
 8009a5e:	6220      	str	r0, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8009a60:	f44f 65e6 	mov.w	r5, #1840	; 0x730
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009a64:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    pcb->last_timer = tcp_timer_ctr;
 8009a68:	f893 e000 	ldrb.w	lr, [r3]
    pcb->cwnd = 1;
 8009a6c:	4941      	ldr	r1, [pc, #260]	; (8009b74 <tcp_alloc+0x134>)
    pcb->recv = tcp_recv_null;
 8009a6e:	4a42      	ldr	r2, [pc, #264]	; (8009b78 <tcp_alloc+0x138>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009a70:	4b42      	ldr	r3, [pc, #264]	; (8009b7c <tcp_alloc+0x13c>)
    pcb->prio = prio;
 8009a72:	7566      	strb	r6, [r4, #21]
    pcb->ttl = TCP_TTL;
 8009a74:	27ff      	movs	r7, #255	; 0xff
    pcb->mss = INITIAL_MSS;
 8009a76:	f44f 7606 	mov.w	r6, #536	; 0x218
    pcb->snd_buf = TCP_SND_BUF;
 8009a7a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009a7e:	62a0      	str	r0, [r4, #40]	; 0x28
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009a80:	f04f 1506 	mov.w	r5, #393222	; 0x60006
    pcb->rtime = -1;
 8009a84:	f64f 70ff 	movw	r0, #65535	; 0xffff
    pcb->last_timer = tcp_timer_ctr;
 8009a88:	f884 e01d 	strb.w	lr, [r4, #29]
    pcb->ttl = TCP_TTL;
 8009a8c:	72a7      	strb	r7, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8009a8e:	8666      	strh	r6, [r4, #50]	; 0x32
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009a90:	f8c4 503e 	str.w	r5, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8009a94:	8620      	strh	r0, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8009a96:	64a1      	str	r1, [r4, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8009a98:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009a9c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009aa4:	4b36      	ldr	r3, [pc, #216]	; (8009b80 <tcp_alloc+0x140>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009aa6:	4d31      	ldr	r5, [pc, #196]	; (8009b6c <tcp_alloc+0x12c>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	b183      	cbz	r3, 8009ace <tcp_alloc+0x8e>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009aac:	6a19      	ldr	r1, [r3, #32]
 8009aae:	682c      	ldr	r4, [r5, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	1a61      	subs	r1, r4, r1
 8009ab4:	e005      	b.n	8009ac2 <tcp_alloc+0x82>
 8009ab6:	6a1a      	ldr	r2, [r3, #32]
 8009ab8:	1aa2      	subs	r2, r4, r2
 8009aba:	428a      	cmp	r2, r1
 8009abc:	bf24      	itt	cs
 8009abe:	4611      	movcs	r1, r2
 8009ac0:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f6      	bne.n	8009ab6 <tcp_alloc+0x76>
  tcp_abandon(pcb, 1);
 8009ac8:	2101      	movs	r1, #1
 8009aca:	f7ff fec1 	bl	8009850 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ace:	2001      	movs	r0, #1
 8009ad0:	f7fe f9ec 	bl	8007eac <memp_malloc>
    if (pcb == NULL) {
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d1ba      	bne.n	8009a50 <tcp_alloc+0x10>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ada:	4f2a      	ldr	r7, [pc, #168]	; (8009b84 <tcp_alloc+0x144>)
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	b191      	cbz	r1, 8009b06 <tcp_alloc+0xc6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ae0:	6828      	ldr	r0, [r5, #0]
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	e001      	b.n	8009aea <tcp_alloc+0xaa>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ae6:	68c9      	ldr	r1, [r1, #12]
 8009ae8:	b149      	cbz	r1, 8009afe <tcp_alloc+0xbe>
    if (pcb->state == state) {
 8009aea:	7d0b      	ldrb	r3, [r1, #20]
 8009aec:	2b09      	cmp	r3, #9
 8009aee:	d1fa      	bne.n	8009ae6 <tcp_alloc+0xa6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009af0:	6a0b      	ldr	r3, [r1, #32]
 8009af2:	1ac3      	subs	r3, r0, r3
 8009af4:	4293      	cmp	r3, r2
 8009af6:	bf24      	itt	cs
 8009af8:	461a      	movcs	r2, r3
 8009afa:	460c      	movcs	r4, r1
 8009afc:	e7f3      	b.n	8009ae6 <tcp_alloc+0xa6>
  if (inactive != NULL) {
 8009afe:	b114      	cbz	r4, 8009b06 <tcp_alloc+0xc6>
    tcp_abandon(inactive, 0);
 8009b00:	4620      	mov	r0, r4
 8009b02:	f7ff fea5 	bl	8009850 <tcp_abandon>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b06:	2001      	movs	r0, #1
 8009b08:	f7fe f9d0 	bl	8007eac <memp_malloc>
      if (pcb == NULL) {
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d19e      	bne.n	8009a50 <tcp_alloc+0x10>
        tcp_kill_state(CLOSING);
 8009b12:	2008      	movs	r0, #8
 8009b14:	f7ff ff60 	bl	80099d8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f7fe f9c7 	bl	8007eac <memp_malloc>
        if (pcb == NULL) {
 8009b1e:	4604      	mov	r4, r0
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d195      	bne.n	8009a50 <tcp_alloc+0x10>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009b24:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b28:	683b      	ldr	r3, [r7, #0]
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b2a:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009b2e:	bf0c      	ite	eq
 8009b30:	4630      	moveq	r0, r6
 8009b32:	207f      	movne	r0, #127	; 0x7f
  inactivity = 0;
 8009b34:	4621      	mov	r1, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b36:	b163      	cbz	r3, 8009b52 <tcp_alloc+0x112>
    if (pcb->prio <= mprio &&
 8009b38:	7d5f      	ldrb	r7, [r3, #21]
 8009b3a:	4287      	cmp	r7, r0
 8009b3c:	d807      	bhi.n	8009b4e <tcp_alloc+0x10e>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b3e:	6a1a      	ldr	r2, [r3, #32]
 8009b40:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8009b44:	428a      	cmp	r2, r1
 8009b46:	d302      	bcc.n	8009b4e <tcp_alloc+0x10e>
 8009b48:	4638      	mov	r0, r7
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	e7f1      	b.n	8009b36 <tcp_alloc+0xf6>
  if (inactive != NULL) {
 8009b52:	b11c      	cbz	r4, 8009b5c <tcp_alloc+0x11c>
  tcp_abandon(pcb, 1);
 8009b54:	4620      	mov	r0, r4
 8009b56:	2101      	movs	r1, #1
 8009b58:	f7ff fe7a 	bl	8009850 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f7fe f9a5 	bl	8007eac <memp_malloc>
  if (pcb != NULL) {
 8009b62:	4604      	mov	r4, r0
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d09b      	beq.n	8009aa0 <tcp_alloc+0x60>
 8009b68:	e772      	b.n	8009a50 <tcp_alloc+0x10>
 8009b6a:	bf00      	nop
 8009b6c:	200088a0 	.word	0x200088a0
 8009b70:	20003eda 	.word	0x20003eda
 8009b74:	07300001 	.word	0x07300001
 8009b78:	080095bd 	.word	0x080095bd
 8009b7c:	006ddd00 	.word	0x006ddd00
 8009b80:	200088ac 	.word	0x200088ac
 8009b84:	2000889c 	.word	0x2000889c

08009b88 <tcp_new_ip_type>:
{
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	f7fe f98e 	bl	8007eac <memp_malloc>
  if (pcb == NULL) {
 8009b90:	b350      	cbz	r0, 8009be8 <tcp_new_ip_type+0x60>
 8009b92:	4d44      	ldr	r5, [pc, #272]	; (8009ca4 <tcp_new_ip_type+0x11c>)
 8009b94:	4604      	mov	r4, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009b96:	2298      	movs	r2, #152	; 0x98
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f004 fcd4 	bl	800e548 <memset>
    pcb->last_timer = tcp_timer_ctr;
 8009ba0:	4b41      	ldr	r3, [pc, #260]	; (8009ca8 <tcp_new_ip_type+0x120>)
    pcb->tmr = tcp_ticks;
 8009ba2:	6828      	ldr	r0, [r5, #0]
    pcb->last_timer = tcp_timer_ctr;
 8009ba4:	781f      	ldrb	r7, [r3, #0]
    pcb->tmr = tcp_ticks;
 8009ba6:	6220      	str	r0, [r4, #32]
    pcb->prio = prio;
 8009ba8:	2640      	movs	r6, #64	; 0x40
    pcb->snd_buf = TCP_SND_BUF;
 8009baa:	f44f 65e6 	mov.w	r5, #1840	; 0x730
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009bae:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    pcb->cwnd = 1;
 8009bb2:	493e      	ldr	r1, [pc, #248]	; (8009cac <tcp_new_ip_type+0x124>)
    pcb->recv = tcp_recv_null;
 8009bb4:	4a3e      	ldr	r2, [pc, #248]	; (8009cb0 <tcp_new_ip_type+0x128>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009bb6:	4b3f      	ldr	r3, [pc, #252]	; (8009cb4 <tcp_new_ip_type+0x12c>)
    pcb->last_timer = tcp_timer_ctr;
 8009bb8:	7767      	strb	r7, [r4, #29]
    pcb->prio = prio;
 8009bba:	7566      	strb	r6, [r4, #21]
    pcb->ttl = TCP_TTL;
 8009bbc:	27ff      	movs	r7, #255	; 0xff
    pcb->mss = INITIAL_MSS;
 8009bbe:	f44f 7606 	mov.w	r6, #536	; 0x218
    pcb->snd_buf = TCP_SND_BUF;
 8009bc2:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009bc6:	62a0      	str	r0, [r4, #40]	; 0x28
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009bc8:	f04f 1506 	mov.w	r5, #393222	; 0x60006
    pcb->rtime = -1;
 8009bcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    pcb->ttl = TCP_TTL;
 8009bd0:	72a7      	strb	r7, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8009bd2:	8666      	strh	r6, [r4, #50]	; 0x32
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009bd4:	f8c4 503e 	str.w	r5, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8009bd8:	8620      	strh	r0, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8009bda:	64a1      	str	r1, [r4, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8009bdc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009be0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8009be4:	4620      	mov	r0, r4
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009be8:	4b33      	ldr	r3, [pc, #204]	; (8009cb8 <tcp_new_ip_type+0x130>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009bea:	4d2e      	ldr	r5, [pc, #184]	; (8009ca4 <tcp_new_ip_type+0x11c>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	b183      	cbz	r3, 8009c12 <tcp_new_ip_type+0x8a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009bf0:	6a19      	ldr	r1, [r3, #32]
 8009bf2:	682c      	ldr	r4, [r5, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	1a61      	subs	r1, r4, r1
 8009bf8:	e005      	b.n	8009c06 <tcp_new_ip_type+0x7e>
 8009bfa:	6a1a      	ldr	r2, [r3, #32]
 8009bfc:	1aa2      	subs	r2, r4, r2
 8009bfe:	428a      	cmp	r2, r1
 8009c00:	bf24      	itt	cs
 8009c02:	4611      	movcs	r1, r2
 8009c04:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1f6      	bne.n	8009bfa <tcp_new_ip_type+0x72>
  tcp_abandon(pcb, 1);
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	f7ff fe1f 	bl	8009850 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c12:	2001      	movs	r0, #1
 8009c14:	f7fe f94a 	bl	8007eac <memp_malloc>
    if (pcb == NULL) {
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d1bb      	bne.n	8009b96 <tcp_new_ip_type+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c1e:	4e27      	ldr	r6, [pc, #156]	; (8009cbc <tcp_new_ip_type+0x134>)
 8009c20:	6831      	ldr	r1, [r6, #0]
 8009c22:	b191      	cbz	r1, 8009c4a <tcp_new_ip_type+0xc2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c24:	6828      	ldr	r0, [r5, #0]
 8009c26:	4622      	mov	r2, r4
 8009c28:	e001      	b.n	8009c2e <tcp_new_ip_type+0xa6>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c2a:	68c9      	ldr	r1, [r1, #12]
 8009c2c:	b149      	cbz	r1, 8009c42 <tcp_new_ip_type+0xba>
    if (pcb->state == state) {
 8009c2e:	7d0b      	ldrb	r3, [r1, #20]
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d1fa      	bne.n	8009c2a <tcp_new_ip_type+0xa2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c34:	6a0b      	ldr	r3, [r1, #32]
 8009c36:	1ac3      	subs	r3, r0, r3
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	bf24      	itt	cs
 8009c3c:	461a      	movcs	r2, r3
 8009c3e:	460c      	movcs	r4, r1
 8009c40:	e7f3      	b.n	8009c2a <tcp_new_ip_type+0xa2>
  if (inactive != NULL) {
 8009c42:	b114      	cbz	r4, 8009c4a <tcp_new_ip_type+0xc2>
    tcp_abandon(inactive, 0);
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7ff fe03 	bl	8009850 <tcp_abandon>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	f7fe f92e 	bl	8007eac <memp_malloc>
      if (pcb == NULL) {
 8009c50:	4604      	mov	r4, r0
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d19f      	bne.n	8009b96 <tcp_new_ip_type+0xe>
        tcp_kill_state(CLOSING);
 8009c56:	2008      	movs	r0, #8
 8009c58:	f7ff febe 	bl	80099d8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7fe f925 	bl	8007eac <memp_malloc>
        if (pcb == NULL) {
 8009c62:	4604      	mov	r4, r0
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d196      	bne.n	8009b96 <tcp_new_ip_type+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c68:	6833      	ldr	r3, [r6, #0]
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c6a:	682f      	ldr	r7, [r5, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c6c:	2040      	movs	r0, #64	; 0x40
  inactivity = 0;
 8009c6e:	4621      	mov	r1, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c70:	b15b      	cbz	r3, 8009c8a <tcp_new_ip_type+0x102>
    if (pcb->prio <= mprio &&
 8009c72:	7d5e      	ldrb	r6, [r3, #21]
 8009c74:	4286      	cmp	r6, r0
 8009c76:	d806      	bhi.n	8009c86 <tcp_new_ip_type+0xfe>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c78:	6a1a      	ldr	r2, [r3, #32]
 8009c7a:	1aba      	subs	r2, r7, r2
    if (pcb->prio <= mprio &&
 8009c7c:	428a      	cmp	r2, r1
 8009c7e:	d302      	bcc.n	8009c86 <tcp_new_ip_type+0xfe>
 8009c80:	4630      	mov	r0, r6
 8009c82:	4611      	mov	r1, r2
 8009c84:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	e7f2      	b.n	8009c70 <tcp_new_ip_type+0xe8>
  if (inactive != NULL) {
 8009c8a:	b11c      	cbz	r4, 8009c94 <tcp_new_ip_type+0x10c>
  tcp_abandon(pcb, 1);
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	2101      	movs	r1, #1
 8009c90:	f7ff fdde 	bl	8009850 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c94:	2001      	movs	r0, #1
 8009c96:	f7fe f909 	bl	8007eac <memp_malloc>
  if (pcb != NULL) {
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d0a1      	beq.n	8009be4 <tcp_new_ip_type+0x5c>
 8009ca0:	e779      	b.n	8009b96 <tcp_new_ip_type+0xe>
 8009ca2:	bf00      	nop
 8009ca4:	200088a0 	.word	0x200088a0
 8009ca8:	20003eda 	.word	0x20003eda
 8009cac:	07300001 	.word	0x07300001
 8009cb0:	080095bd 	.word	0x080095bd
 8009cb4:	006ddd00 	.word	0x006ddd00
 8009cb8:	200088ac 	.word	0x200088ac
 8009cbc:	2000889c 	.word	0x2000889c

08009cc0 <tcp_close>:
{
 8009cc0:	b530      	push	{r4, r5, lr}
  if (pcb->state != LISTEN) {
 8009cc2:	7d03      	ldrb	r3, [r0, #20]
 8009cc4:	2b01      	cmp	r3, #1
{
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	4604      	mov	r4, r0
  if (pcb->state != LISTEN) {
 8009cca:	d06e      	beq.n	8009daa <tcp_close+0xea>
    pcb->flags |= TF_RXCLOSED;
 8009ccc:	7e82      	ldrb	r2, [r0, #26]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009cce:	2b04      	cmp	r3, #4
    pcb->flags |= TF_RXCLOSED;
 8009cd0:	f042 0210 	orr.w	r2, r2, #16
 8009cd4:	7682      	strb	r2, [r0, #26]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009cd6:	d014      	beq.n	8009d02 <tcp_close+0x42>
 8009cd8:	2b07      	cmp	r3, #7
 8009cda:	d012      	beq.n	8009d02 <tcp_close+0x42>
  switch (pcb->state) {
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d064      	beq.n	8009daa <tcp_close+0xea>
 8009ce0:	d34c      	bcc.n	8009d7c <tcp_close+0xbc>
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d17d      	bne.n	8009de2 <tcp_close+0x122>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	485c      	ldr	r0, [pc, #368]	; (8009e5c <tcp_close+0x19c>)
 8009cea:	f7ff fb21 	bl	8009330 <tcp_pcb_remove>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4a5b      	ldr	r2, [pc, #364]	; (8009e60 <tcp_close+0x1a0>)
    memp_free(MEMP_TCP_PCB, pcb);
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009cf6:	7013      	strb	r3, [r2, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009cf8:	f7fe f90c 	bl	8007f14 <memp_free>
  return ERR_OK;
 8009cfc:	2000      	movs	r0, #0
}
 8009cfe:	b003      	add	sp, #12
 8009d00:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009d02:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	d033      	beq.n	8009d70 <tcp_close+0xb0>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009d08:	8b22      	ldrh	r2, [r4, #24]
 8009d0a:	8ae3      	ldrh	r3, [r4, #22]
 8009d0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d0e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009d10:	9201      	str	r2, [sp, #4]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	4622      	mov	r2, r4
 8009d16:	1d23      	adds	r3, r4, #4
 8009d18:	f002 fd46 	bl	800c7a8 <tcp_rst>
  if (pcb->state != CLOSED &&
 8009d1c:	7d21      	ldrb	r1, [r4, #20]
 8009d1e:	2901      	cmp	r1, #1
 8009d20:	d905      	bls.n	8009d2e <tcp_close+0x6e>
 8009d22:	290a      	cmp	r1, #10
 8009d24:	d003      	beq.n	8009d2e <tcp_close+0x6e>
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7fe fe4e 	bl	80089c8 <tcp_pcb_purge.part.1>
 8009d2c:	7d21      	ldrb	r1, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 8009d2e:	4b4b      	ldr	r3, [pc, #300]	; (8009e5c <tcp_close+0x19c>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4294      	cmp	r4, r2
 8009d34:	d075      	beq.n	8009e22 <tcp_close+0x162>
 8009d36:	b14a      	cbz	r2, 8009d4c <tcp_close+0x8c>
 8009d38:	68d3      	ldr	r3, [r2, #12]
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	d031      	beq.n	8009da2 <tcp_close+0xe2>
 8009d3e:	b12b      	cbz	r3, 8009d4c <tcp_close+0x8c>
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	4294      	cmp	r4, r2
 8009d44:	d02e      	beq.n	8009da4 <tcp_close+0xe4>
 8009d46:	4613      	mov	r3, r2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f9      	bne.n	8009d40 <tcp_close+0x80>
 8009d4c:	4b44      	ldr	r3, [pc, #272]	; (8009e60 <tcp_close+0x1a0>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	2500      	movs	r5, #0
      if (pcb->state == ESTABLISHED) {
 8009d52:	2904      	cmp	r1, #4
      TCP_RMV_ACTIVE(pcb);
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 8009d58:	d06a      	beq.n	8009e30 <tcp_close+0x170>
        if (tcp_input_pcb == pcb) {
 8009d5a:	4b42      	ldr	r3, [pc, #264]	; (8009e64 <tcp_close+0x1a4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	429c      	cmp	r4, r3
 8009d60:	d062      	beq.n	8009e28 <tcp_close+0x168>
          memp_free(MEMP_TCP_PCB, pcb);
 8009d62:	2001      	movs	r0, #1
 8009d64:	4621      	mov	r1, r4
 8009d66:	f7fe f8d5 	bl	8007f14 <memp_free>
      return ERR_OK;
 8009d6a:	2000      	movs	r0, #0
}
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009d70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009d72:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009d76:	d1c7      	bne.n	8009d08 <tcp_close+0x48>
  switch (pcb->state) {
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1b2      	bne.n	8009ce2 <tcp_close+0x22>
    if (pcb->local_port != 0) {
 8009d7c:	8ae3      	ldrh	r3, [r4, #22]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0ef      	beq.n	8009d62 <tcp_close+0xa2>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d82:	4b39      	ldr	r3, [pc, #228]	; (8009e68 <tcp_close+0x1a8>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4294      	cmp	r4, r2
 8009d88:	d064      	beq.n	8009e54 <tcp_close+0x194>
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	d046      	beq.n	8009e1c <tcp_close+0x15c>
 8009d8e:	68d3      	ldr	r3, [r2, #12]
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d040      	beq.n	8009e16 <tcp_close+0x156>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d041      	beq.n	8009e1c <tcp_close+0x15c>
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	4294      	cmp	r4, r2
 8009d9c:	d03c      	beq.n	8009e18 <tcp_close+0x158>
 8009d9e:	4613      	mov	r3, r2
 8009da0:	e7f8      	b.n	8009d94 <tcp_close+0xd4>
      TCP_RMV_ACTIVE(pcb);
 8009da2:	4613      	mov	r3, r2
 8009da4:	68e2      	ldr	r2, [r4, #12]
 8009da6:	60da      	str	r2, [r3, #12]
 8009da8:	e7d0      	b.n	8009d4c <tcp_close+0x8c>
 8009daa:	4930      	ldr	r1, [pc, #192]	; (8009e6c <tcp_close+0x1ac>)
         pcb->listener = NULL;
 8009dac:	2000      	movs	r0, #0
 8009dae:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8009db2:	f851 3b04 	ldr.w	r3, [r1], #4
 8009db6:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009db8:	b133      	cbz	r3, 8009dc8 <tcp_close+0x108>
      if (pcb->listener == lpcb) {
 8009dba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009dbc:	4294      	cmp	r4, r2
         pcb->listener = NULL;
 8009dbe:	bf08      	it	eq
 8009dc0:	6798      	streq	r0, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1f8      	bne.n	8009dba <tcp_close+0xfa>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009dc8:	428d      	cmp	r5, r1
 8009dca:	d1f2      	bne.n	8009db2 <tcp_close+0xf2>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4828      	ldr	r0, [pc, #160]	; (8009e70 <tcp_close+0x1b0>)
 8009dd0:	f7ff faae 	bl	8009330 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	2002      	movs	r0, #2
 8009dd8:	f7fe f89c 	bl	8007f14 <memp_free>
  return ERR_OK;
 8009ddc:	2000      	movs	r0, #0
}
 8009dde:	b003      	add	sp, #12
 8009de0:	bd30      	pop	{r4, r5, pc}
  switch (pcb->state) {
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d005      	beq.n	8009df2 <tcp_close+0x132>
 8009de6:	2b07      	cmp	r3, #7
 8009de8:	d02c      	beq.n	8009e44 <tcp_close+0x184>
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d001      	beq.n	8009df2 <tcp_close+0x132>
    tcp_output(pcb);
 8009dee:	2000      	movs	r0, #0
 8009df0:	e7bc      	b.n	8009d6c <tcp_close+0xac>
    err = tcp_send_fin(pcb);
 8009df2:	4620      	mov	r0, r4
 8009df4:	f001 fd62 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009df8:	b928      	cbnz	r0, 8009e06 <tcp_close+0x146>
      pcb->state = FIN_WAIT_1;
 8009dfa:	2305      	movs	r3, #5
 8009dfc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f002 fb1a 	bl	800c438 <tcp_output>
 8009e04:	e7f3      	b.n	8009dee <tcp_close+0x12e>
  } else if (err == ERR_MEM) {
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d1b0      	bne.n	8009d6c <tcp_close+0xac>
    pcb->flags |= TF_CLOSEPEND;
 8009e0a:	7ea3      	ldrb	r3, [r4, #26]
 8009e0c:	f043 0308 	orr.w	r3, r3, #8
 8009e10:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009e12:	2000      	movs	r0, #0
 8009e14:	e7aa      	b.n	8009d6c <tcp_close+0xac>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e16:	4613      	mov	r3, r2
 8009e18:	68e2      	ldr	r2, [r4, #12]
 8009e1a:	60da      	str	r2, [r3, #12]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60e3      	str	r3, [r4, #12]
 8009e20:	e79f      	b.n	8009d62 <tcp_close+0xa2>
      TCP_RMV_ACTIVE(pcb);
 8009e22:	68e2      	ldr	r2, [r4, #12]
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e791      	b.n	8009d4c <tcp_close+0x8c>
          tcp_trigger_input_pcb_close();
 8009e28:	f001 fd40 	bl	800b8ac <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	e79d      	b.n	8009d6c <tcp_close+0xac>
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e30:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <tcp_close+0x1b4>)
        pcb->state = TIME_WAIT;
 8009e32:	220a      	movs	r2, #10
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e34:	6819      	ldr	r1, [r3, #0]
 8009e36:	60e1      	str	r1, [r4, #12]
        pcb->state = TIME_WAIT;
 8009e38:	7522      	strb	r2, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e3a:	601c      	str	r4, [r3, #0]
 8009e3c:	f002 ff68 	bl	800cd10 <tcp_timer_needed>
      return ERR_OK;
 8009e40:	4628      	mov	r0, r5
 8009e42:	e793      	b.n	8009d6c <tcp_close+0xac>
    err = tcp_send_fin(pcb);
 8009e44:	4620      	mov	r0, r4
 8009e46:	f001 fd39 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d1db      	bne.n	8009e06 <tcp_close+0x146>
      pcb->state = LAST_ACK;
 8009e4e:	2309      	movs	r3, #9
 8009e50:	7523      	strb	r3, [r4, #20]
 8009e52:	e7d4      	b.n	8009dfe <tcp_close+0x13e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e54:	68e2      	ldr	r2, [r4, #12]
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	e7e0      	b.n	8009e1c <tcp_close+0x15c>
 8009e5a:	bf00      	nop
 8009e5c:	2000889c 	.word	0x2000889c
 8009e60:	20008898 	.word	0x20008898
 8009e64:	200088b0 	.word	0x200088b0
 8009e68:	200088a8 	.word	0x200088a8
 8009e6c:	08011c4c 	.word	0x08011c4c
 8009e70:	200088a4 	.word	0x200088a4
 8009e74:	200088ac 	.word	0x200088ac

08009e78 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 8009e78:	7d03      	ldrb	r3, [r0, #20]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	f000 808d 	beq.w	8009f9a <tcp_shutdown+0x122>
{
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	4615      	mov	r5, r2
 8009e86:	460e      	mov	r6, r1
  if (shut_rx) {
 8009e88:	b9d1      	cbnz	r1, 8009ec0 <tcp_shutdown+0x48>
  if (shut_tx) {
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	d034      	beq.n	8009ef8 <tcp_shutdown+0x80>
 8009e8e:	2b07      	cmp	r3, #7
 8009e90:	d86d      	bhi.n	8009f6e <tcp_shutdown+0xf6>
 8009e92:	2501      	movs	r5, #1
 8009e94:	fa05 f203 	lsl.w	r2, r5, r3
 8009e98:	f012 0f98 	tst.w	r2, #152	; 0x98
 8009e9c:	d067      	beq.n	8009f6e <tcp_shutdown+0xf6>
  switch (pcb->state) {
 8009e9e:	42ab      	cmp	r3, r5
 8009ea0:	d02c      	beq.n	8009efc <tcp_shutdown+0x84>
 8009ea2:	d34a      	bcc.n	8009f3a <tcp_shutdown+0xc2>
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d118      	bne.n	8009eda <tcp_shutdown+0x62>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	483d      	ldr	r0, [pc, #244]	; (8009fa0 <tcp_shutdown+0x128>)
 8009eac:	f7ff fa40 	bl	8009330 <tcp_pcb_remove>
 8009eb0:	4b3c      	ldr	r3, [pc, #240]	; (8009fa4 <tcp_shutdown+0x12c>)
    memp_free(MEMP_TCP_PCB, pcb);
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009eb6:	701d      	strb	r5, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009eb8:	f7fe f82c 	bl	8007f14 <memp_free>
  return ERR_OK;
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= TF_RXCLOSED;
 8009ec0:	7e83      	ldrb	r3, [r0, #26]
 8009ec2:	f043 0310 	orr.w	r3, r3, #16
 8009ec6:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	d131      	bne.n	8009f30 <tcp_shutdown+0xb8>
    if (pcb->refused_data != NULL) {
 8009ecc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009ece:	b198      	cbz	r0, 8009ef8 <tcp_shutdown+0x80>
      pbuf_free(pcb->refused_data);
 8009ed0:	f7fe fa00 	bl	80082d4 <pbuf_free>
      pcb->refused_data = NULL;
 8009ed4:	6765      	str	r5, [r4, #116]	; 0x74
  return ERR_OK;
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	bd70      	pop	{r4, r5, r6, pc}
  switch (pcb->state) {
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	d003      	beq.n	8009ee6 <tcp_shutdown+0x6e>
 8009ede:	2b07      	cmp	r3, #7
 8009ee0:	d048      	beq.n	8009f74 <tcp_shutdown+0xfc>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d108      	bne.n	8009ef8 <tcp_shutdown+0x80>
    err = tcp_send_fin(pcb);
 8009ee6:	f001 fce9 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d14c      	bne.n	8009f88 <tcp_shutdown+0x110>
      pcb->state = FIN_WAIT_1;
 8009eee:	2305      	movs	r3, #5
 8009ef0:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f002 faa0 	bl	800c438 <tcp_output>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	4a2a      	ldr	r2, [pc, #168]	; (8009fa8 <tcp_shutdown+0x130>)
 8009efe:	f102 010c 	add.w	r1, r2, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8009f02:	f852 3b04 	ldr.w	r3, [r2], #4
 8009f06:	681b      	ldr	r3, [r3, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009f08:	b133      	cbz	r3, 8009f18 <tcp_shutdown+0xa0>
      if (pcb->listener == lpcb) {
 8009f0a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009f0c:	4284      	cmp	r4, r0
         pcb->listener = NULL;
 8009f0e:	bf08      	it	eq
 8009f10:	679e      	streq	r6, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f8      	bne.n	8009f0a <tcp_shutdown+0x92>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009f18:	428a      	cmp	r2, r1
 8009f1a:	d1f2      	bne.n	8009f02 <tcp_shutdown+0x8a>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4823      	ldr	r0, [pc, #140]	; (8009fac <tcp_shutdown+0x134>)
 8009f20:	f7ff fa06 	bl	8009330 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009f24:	4621      	mov	r1, r4
 8009f26:	2002      	movs	r0, #2
 8009f28:	f7fd fff4 	bl	8007f14 <memp_free>
  return ERR_OK;
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8009f30:	2101      	movs	r1, #1
}
 8009f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return tcp_close_shutdown(pcb, 1);
 8009f36:	f7ff ba59 	b.w	80093ec <tcp_close_shutdown>
    if (pcb->local_port != 0) {
 8009f3a:	8ac3      	ldrh	r3, [r0, #22]
 8009f3c:	b18b      	cbz	r3, 8009f62 <tcp_shutdown+0xea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f3e:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <tcp_shutdown+0x138>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	4290      	cmp	r0, r2
 8009f44:	d009      	beq.n	8009f5a <tcp_shutdown+0xe2>
 8009f46:	b152      	cbz	r2, 8009f5e <tcp_shutdown+0xe6>
 8009f48:	68d3      	ldr	r3, [r2, #12]
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	d018      	beq.n	8009f80 <tcp_shutdown+0x108>
 8009f4e:	b133      	cbz	r3, 8009f5e <tcp_shutdown+0xe6>
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	4294      	cmp	r4, r2
 8009f54:	d015      	beq.n	8009f82 <tcp_shutdown+0x10a>
 8009f56:	4613      	mov	r3, r2
 8009f58:	e7f9      	b.n	8009f4e <tcp_shutdown+0xd6>
 8009f5a:	68c2      	ldr	r2, [r0, #12]
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8009f62:	4621      	mov	r1, r4
 8009f64:	2001      	movs	r0, #1
 8009f66:	f7fd ffd5 	bl	8007f14 <memp_free>
  return ERR_OK;
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8009f6e:	f06f 000a 	mvn.w	r0, #10
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
    err = tcp_send_fin(pcb);
 8009f74:	f001 fca2 	bl	800b8bc <tcp_send_fin>
    if (err == ERR_OK) {
 8009f78:	b930      	cbnz	r0, 8009f88 <tcp_shutdown+0x110>
      pcb->state = LAST_ACK;
 8009f7a:	2309      	movs	r3, #9
 8009f7c:	7523      	strb	r3, [r4, #20]
 8009f7e:	e7b8      	b.n	8009ef2 <tcp_shutdown+0x7a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f80:	4613      	mov	r3, r2
 8009f82:	68e2      	ldr	r2, [r4, #12]
 8009f84:	60da      	str	r2, [r3, #12]
 8009f86:	e7ea      	b.n	8009f5e <tcp_shutdown+0xe6>
  } else if (err == ERR_MEM) {
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d000      	beq.n	8009f8e <tcp_shutdown+0x116>
}
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= TF_CLOSEPEND;
 8009f8e:	7ea3      	ldrb	r3, [r4, #26]
 8009f90:	f043 0308 	orr.w	r3, r3, #8
 8009f94:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009f96:	2000      	movs	r0, #0
 8009f98:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8009f9a:	f06f 000a 	mvn.w	r0, #10
 8009f9e:	4770      	bx	lr
 8009fa0:	2000889c 	.word	0x2000889c
 8009fa4:	20008898 	.word	0x20008898
 8009fa8:	08011c4c 	.word	0x08011c4c
 8009fac:	200088a4 	.word	0x200088a4
 8009fb0:	200088a8 	.word	0x200088a8

08009fb4 <tcp_next_iss>:
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009fb4:	4b03      	ldr	r3, [pc, #12]	; (8009fc4 <tcp_next_iss+0x10>)
 8009fb6:	4a04      	ldr	r2, [pc, #16]	; (8009fc8 <tcp_next_iss+0x14>)
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	6812      	ldr	r2, [r2, #0]
 8009fbc:	4410      	add	r0, r2
 8009fbe:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000008 	.word	0x20000008
 8009fc8:	200088a0 	.word	0x200088a0

08009fcc <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	f7fc feb1 	bl	8006d38 <ip4_route>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009fd6:	b138      	cbz	r0, 8009fe8 <tcp_eff_send_mss_impl+0x1c>
      return sendmss;
    }
    mtu = outif->mtu;
 8009fd8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009fda:	b128      	cbz	r0, 8009fe8 <tcp_eff_send_mss_impl+0x1c>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8009fdc:	3828      	subs	r0, #40	; 0x28
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009fde:	b280      	uxth	r0, r0
 8009fe0:	42a0      	cmp	r0, r4
 8009fe2:	bf28      	it	cs
 8009fe4:	4620      	movcs	r0, r4
 8009fe6:	bd10      	pop	{r4, pc}
      return sendmss;
 8009fe8:	4620      	mov	r0, r4
  }
  return sendmss;
}
 8009fea:	bd10      	pop	{r4, pc}

08009fec <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8009fec:	b108      	cbz	r0, 8009ff2 <tcp_netif_ip_addr_changed+0x6>
 8009fee:	6803      	ldr	r3, [r0, #0]
 8009ff0:	b903      	cbnz	r3, 8009ff4 <tcp_netif_ip_addr_changed+0x8>
 8009ff2:	4770      	bx	lr
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	; (800a068 <tcp_netif_ip_addr_changed+0x7c>)
{
 8009ff6:	b570      	push	{r4, r5, r6, lr}
 8009ff8:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009ffa:	6810      	ldr	r0, [r2, #0]
 8009ffc:	460d      	mov	r5, r1
  while (pcb != NULL) {
 8009ffe:	b128      	cbz	r0, 800a00c <tcp_netif_ip_addr_changed+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a000:	6802      	ldr	r2, [r0, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d01d      	beq.n	800a042 <tcp_netif_ip_addr_changed+0x56>
      pcb = pcb->next;
 800a006:	68c0      	ldr	r0, [r0, #12]
  while (pcb != NULL) {
 800a008:	2800      	cmp	r0, #0
 800a00a:	d1f9      	bne.n	800a000 <tcp_netif_ip_addr_changed+0x14>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a00c:	4b17      	ldr	r3, [pc, #92]	; (800a06c <tcp_netif_ip_addr_changed+0x80>)
 800a00e:	6818      	ldr	r0, [r3, #0]
  while (pcb != NULL) {
 800a010:	b130      	cbz	r0, 800a020 <tcp_netif_ip_addr_changed+0x34>
 800a012:	6823      	ldr	r3, [r4, #0]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a014:	6802      	ldr	r2, [r0, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d01c      	beq.n	800a054 <tcp_netif_ip_addr_changed+0x68>
      pcb = pcb->next;
 800a01a:	68c0      	ldr	r0, [r0, #12]
  while (pcb != NULL) {
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d1f9      	bne.n	800a014 <tcp_netif_ip_addr_changed+0x28>

    if (!ip_addr_isany(new_addr)) {
 800a020:	b30d      	cbz	r5, 800a066 <tcp_netif_ip_addr_changed+0x7a>
 800a022:	682b      	ldr	r3, [r5, #0]
 800a024:	b163      	cbz	r3, 800a040 <tcp_netif_ip_addr_changed+0x54>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <tcp_netif_ip_addr_changed+0x84>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	b14b      	cbz	r3, 800a040 <tcp_netif_ip_addr_changed+0x54>
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a02c:	6819      	ldr	r1, [r3, #0]
 800a02e:	6820      	ldr	r0, [r4, #0]
        next = lpcb->next;
 800a030:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a032:	4281      	cmp	r1, r0
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a034:	bf04      	itt	eq
 800a036:	6829      	ldreq	r1, [r5, #0]
 800a038:	6019      	streq	r1, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800a03a:	4613      	mov	r3, r2
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d1f5      	bne.n	800a02c <tcp_netif_ip_addr_changed+0x40>
 800a040:	bd70      	pop	{r4, r5, r6, pc}
      struct tcp_pcb *next = pcb->next;
 800a042:	68c6      	ldr	r6, [r0, #12]
  tcp_abandon(pcb, 1);
 800a044:	2101      	movs	r1, #1
 800a046:	f7ff fc03 	bl	8009850 <tcp_abandon>
  while (pcb != NULL) {
 800a04a:	2e00      	cmp	r6, #0
 800a04c:	d0de      	beq.n	800a00c <tcp_netif_ip_addr_changed+0x20>
 800a04e:	4630      	mov	r0, r6
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	e7d5      	b.n	800a000 <tcp_netif_ip_addr_changed+0x14>
      struct tcp_pcb *next = pcb->next;
 800a054:	68c6      	ldr	r6, [r0, #12]
  tcp_abandon(pcb, 1);
 800a056:	2101      	movs	r1, #1
 800a058:	f7ff fbfa 	bl	8009850 <tcp_abandon>
  while (pcb != NULL) {
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	d0df      	beq.n	800a020 <tcp_netif_ip_addr_changed+0x34>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	4630      	mov	r0, r6
 800a064:	e7d6      	b.n	800a014 <tcp_netif_ip_addr_changed+0x28>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	2000889c 	.word	0x2000889c
 800a06c:	200088a8 	.word	0x200088a8
 800a070:	200088a4 	.word	0x200088a4

0800a074 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a078:	68c3      	ldr	r3, [r0, #12]
{
 800a07a:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a07c:	8998      	ldrh	r0, [r3, #12]
{
 800a07e:	460f      	mov	r7, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a080:	f7fb fc16 	bl	80058b0 <lwip_htons>
 800a084:	07c2      	lsls	r2, r0, #31
 800a086:	d448      	bmi.n	800a11a <tcp_oos_insert_segment+0xa6>
    tcp_segs_free(next);
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 800a088:	2f00      	cmp	r7, #0
 800a08a:	d036      	beq.n	800a0fa <tcp_oos_insert_segment+0x86>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	4e25      	ldr	r6, [pc, #148]	; (800a124 <tcp_oos_insert_segment+0xb0>)
 800a090:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800a094:	892b      	ldrh	r3, [r5, #8]
 800a096:	6830      	ldr	r0, [r6, #0]
 800a098:	893a      	ldrh	r2, [r7, #8]
 800a09a:	eba3 030e 	sub.w	r3, r3, lr
 800a09e:	4403      	add	r3, r0
 800a0a0:	1a9a      	subs	r2, r3, r2
    while (next &&
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	bfb8      	it	lt
 800a0a6:	463c      	movlt	r4, r7
 800a0a8:	da12      	bge.n	800a0d0 <tcp_oos_insert_segment+0x5c>
 800a0aa:	e02a      	b.n	800a102 <tcp_oos_insert_segment+0x8e>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800a0ac:	683c      	ldr	r4, [r7, #0]
      tcp_seg_free(old_seg);
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	f7ff f89c 	bl	80091ec <tcp_seg_free>
    while (next &&
 800a0b4:	b30c      	cbz	r4, 800a0fa <tcp_oos_insert_segment+0x86>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a0b6:	68e1      	ldr	r1, [r4, #12]
 800a0b8:	6830      	ldr	r0, [r6, #0]
 800a0ba:	892b      	ldrh	r3, [r5, #8]
 800a0bc:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800a0c0:	8922      	ldrh	r2, [r4, #8]
 800a0c2:	4403      	add	r3, r0
 800a0c4:	eba3 030e 	sub.w	r3, r3, lr
 800a0c8:	1a9a      	subs	r2, r3, r2
    while (next &&
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	db19      	blt.n	800a102 <tcp_oos_insert_segment+0x8e>
 800a0ce:	4627      	mov	r7, r4
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a0d0:	8988      	ldrh	r0, [r1, #12]
 800a0d2:	f7fb fbed 	bl	80058b0 <lwip_htons>
 800a0d6:	07c3      	lsls	r3, r0, #31
 800a0d8:	d5e8      	bpl.n	800a0ac <tcp_oos_insert_segment+0x38>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a0da:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800a0de:	2001      	movs	r0, #1
 800a0e0:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 800a0e4:	f7fb fbe4 	bl	80058b0 <lwip_htons>
 800a0e8:	4320      	orrs	r0, r4
      next = next->next;
 800a0ea:	683c      	ldr	r4, [r7, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a0ec:	f8a8 000c 	strh.w	r0, [r8, #12]
      tcp_seg_free(old_seg);
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff f87b 	bl	80091ec <tcp_seg_free>
    while (next &&
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	d1dd      	bne.n	800a0b6 <tcp_oos_insert_segment+0x42>
    next = NULL;
 800a0fa:	2400      	movs	r4, #0
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 800a0fc:	602c      	str	r4, [r5, #0]
}
 800a0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (next &&
 800a102:	2b00      	cmp	r3, #0
 800a104:	ddfa      	ble.n	800a0fc <tcp_oos_insert_segment+0x88>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a106:	ebae 0000 	sub.w	r0, lr, r0
 800a10a:	b281      	uxth	r1, r0
 800a10c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a10e:	6868      	ldr	r0, [r5, #4]
 800a110:	f7fe fa76 	bl	8008600 <pbuf_realloc>
  cseg->next = next;
 800a114:	602c      	str	r4, [r5, #0]
}
 800a116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tcp_segs_free(next);
 800a11a:	4638      	mov	r0, r7
 800a11c:	f7ff f854 	bl	80091c8 <tcp_segs_free>
    next = NULL;
 800a120:	2400      	movs	r4, #0
 800a122:	e7eb      	b.n	800a0fc <tcp_oos_insert_segment+0x88>
 800a124:	20003f00 	.word	0x20003f00

0800a128 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a12c:	7d03      	ldrb	r3, [r0, #20]
 800a12e:	2b03      	cmp	r3, #3
{
 800a130:	b081      	sub	sp, #4
 800a132:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a134:	f240 80ed 	bls.w	800a312 <tcp_receive+0x1ea>

  if (flags & TCP_ACK) {
 800a138:	4b9e      	ldr	r3, [pc, #632]	; (800a3b4 <tcp_receive+0x28c>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a13a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 800a3dc <tcp_receive+0x2b4>
  if (flags & TCP_ACK) {
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	06df      	lsls	r7, r3, #27
 800a142:	d41b      	bmi.n	800a17c <tcp_receive+0x54>
 800a144:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a3e0 <tcp_receive+0x2b8>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a148:	f8b9 3000 	ldrh.w	r3, [r9]
 800a14c:	b11b      	cbz	r3, 800a156 <tcp_receive+0x2e>
 800a14e:	7d22      	ldrb	r2, [r4, #20]
 800a150:	2a06      	cmp	r2, #6
 800a152:	f240 80a9 	bls.w	800a2a8 <tcp_receive+0x180>
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a156:	f8d8 3000 	ldr.w	r3, [r8]
 800a15a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a15c:	1a99      	subs	r1, r3, r2
 800a15e:	2900      	cmp	r1, #0
 800a160:	db05      	blt.n	800a16e <tcp_receive+0x46>
 800a162:	3301      	adds	r3, #1
 800a164:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	1a5b      	subs	r3, r3, r1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dd03      	ble.n	800a176 <tcp_receive+0x4e>
      tcp_ack_now(pcb);
 800a16e:	7ea3      	ldrb	r3, [r4, #26]
 800a170:	f043 0302 	orr.w	r3, r3, #2
 800a174:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 800a176:	b001      	add	sp, #4
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a17c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a17e:	f8d8 2000 	ldr.w	r2, [r8]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a182:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800a186:	6d60      	ldr	r0, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a188:	1a99      	subs	r1, r3, r2
 800a18a:	2900      	cmp	r1, #0
 800a18c:	f2c0 80c9 	blt.w	800a322 <tcp_receive+0x1fa>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a190:	4f89      	ldr	r7, [pc, #548]	; (800a3b8 <tcp_receive+0x290>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a192:	4293      	cmp	r3, r2
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a194:	683b      	ldr	r3, [r7, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a196:	f000 80fc 	beq.w	800a392 <tcp_receive+0x26a>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a19a:	4298      	cmp	r0, r3
 800a19c:	f000 8101 	beq.w	800a3a2 <tcp_receive+0x27a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4686      	mov	lr, r0
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a1a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a1a6:	1a9e      	subs	r6, r3, r2
 800a1a8:	2e00      	cmp	r6, #0
 800a1aa:	f340 80d9 	ble.w	800a360 <tcp_receive+0x238>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a1ae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a1b0:	1a9a      	subs	r2, r3, r2
 800a1b2:	2a00      	cmp	r2, #0
 800a1b4:	f340 8116 	ble.w	800a3e4 <tcp_receive+0x2bc>
      tcp_send_empty_ack(pcb);
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f002 f8cd 	bl	800c358 <tcp_send_empty_ack>
 800a1be:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a3e0 <tcp_receive+0x2b8>
 800a1c2:	4e7e      	ldr	r6, [pc, #504]	; (800a3bc <tcp_receive+0x294>)
 800a1c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    while (pcb->unsent != NULL &&
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d040      	beq.n	800a24c <tcp_receive+0x124>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	683d      	ldr	r5, [r7, #0]
 800a1ce:	6858      	ldr	r0, [r3, #4]
 800a1d0:	f7fb fb72 	bl	80058b8 <lwip_htonl>
 800a1d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	f8b3 b008 	ldrh.w	fp, [r3, #8]
 800a1dc:	4682      	mov	sl, r0
 800a1de:	8990      	ldrh	r0, [r2, #12]
 800a1e0:	f7fb fb66 	bl	80058b0 <lwip_htons>
 800a1e4:	eba5 050b 	sub.w	r5, r5, fp
 800a1e8:	f010 0003 	ands.w	r0, r0, #3
 800a1ec:	bf18      	it	ne
 800a1ee:	2001      	movne	r0, #1
 800a1f0:	eba5 050a 	sub.w	r5, r5, sl
 800a1f4:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
 800a1f6:	2d00      	cmp	r5, #0
 800a1f8:	db28      	blt.n	800a24c <tcp_receive+0x124>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a1fe:	1a9b      	subs	r3, r3, r2
 800a200:	2b00      	cmp	r3, #0
 800a202:	dc23      	bgt.n	800a24c <tcp_receive+0x124>
      next = pcb->unsent;
 800a204:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800a206:	682b      	ldr	r3, [r5, #0]
 800a208:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d072      	beq.n	800a2f4 <tcp_receive+0x1cc>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a20e:	6868      	ldr	r0, [r5, #4]
 800a210:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
 800a214:	f7fe fa7e 	bl	8008714 <pbuf_clen>
 800a218:	4582      	cmp	sl, r0
 800a21a:	d363      	bcc.n	800a2e4 <tcp_receive+0x1bc>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a21c:	6868      	ldr	r0, [r5, #4]
 800a21e:	f7fe fa79 	bl	8008714 <pbuf_clen>
 800a222:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
      recv_acked += next->len;
 800a226:	892b      	ldrh	r3, [r5, #8]
 800a228:	8831      	ldrh	r1, [r6, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a22a:	1a10      	subs	r0, r2, r0
      recv_acked += next->len;
 800a22c:	440b      	add	r3, r1
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a22e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 800a232:	4628      	mov	r0, r5
      recv_acked += next->len;
 800a234:	8033      	strh	r3, [r6, #0]
      tcp_seg_free(next);
 800a236:	f7fe ffd9 	bl	80091ec <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 800a23a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a23e:	b113      	cbz	r3, 800a246 <tcp_receive+0x11e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800a240:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d059      	beq.n	800a2fa <tcp_receive+0x1d2>
 800a246:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    while (pcb->unsent != NULL &&
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1be      	bne.n	800a1ca <tcp_receive+0xa2>
    pcb->snd_buf += recv_acked;
 800a24c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a250:	8831      	ldrh	r1, [r6, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a252:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 800a254:	440b      	add	r3, r1
 800a256:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	f43f af74 	beq.w	800a148 <tcp_receive+0x20>
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a264:	1a5b      	subs	r3, r3, r1
 800a266:	2b00      	cmp	r3, #0
 800a268:	f6bf af6e 	bge.w	800a148 <tcp_receive+0x20>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a26c:	4954      	ldr	r1, [pc, #336]	; (800a3c0 <tcp_receive+0x298>)
      m = m - (pcb->sa >> 3);
 800a26e:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a272:	6809      	ldr	r1, [r1, #0]
 800a274:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 800a276:	eba1 01e3 	sub.w	r1, r1, r3, asr #3
 800a27a:	b289      	uxth	r1, r1
 800a27c:	b208      	sxth	r0, r1
      pcb->sa += m;
 800a27e:	440b      	add	r3, r1
 800a280:	b21a      	sxth	r2, r3
      if (m < 0) {
 800a282:	2800      	cmp	r0, #0
      m = m - (pcb->sv >> 2);
 800a284:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->sa += m;
 800a288:	87a2      	strh	r2, [r4, #60]	; 0x3c
        m = -m;
 800a28a:	bfbc      	itt	lt
 800a28c:	4249      	neglt	r1, r1
 800a28e:	b208      	sxthlt	r0, r1
      pcb->sv += m;
 800a290:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 800a294:	4403      	add	r3, r0
 800a296:	b29b      	uxth	r3, r3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a298:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->rttest = 0;
 800a29c:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a29e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->sv += m;
 800a2a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800a2a4:	6361      	str	r1, [r4, #52]	; 0x34
 800a2a6:	e74f      	b.n	800a148 <tcp_receive+0x20>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a2a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a2aa:	f8d8 1000 	ldr.w	r1, [r8]
 800a2ae:	1a57      	subs	r7, r2, r1
 800a2b0:	2f01      	cmp	r7, #1
 800a2b2:	d406      	bmi.n	800a2c2 <tcp_receive+0x19a>
 800a2b4:	f1c1 0001 	rsb	r0, r1, #1
 800a2b8:	1ac3      	subs	r3, r0, r3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f340 81b7 	ble.w	800a630 <tcp_receive+0x508>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a2c2:	1a8b      	subs	r3, r1, r2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	db46      	blt.n	800a356 <tcp_receive+0x22e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a2c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a2ca:	f1c3 0301 	rsb	r3, r3, #1
 800a2ce:	440b      	add	r3, r1
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f340 8113 	ble.w	800a4fe <tcp_receive+0x3d6>
      tcp_send_empty_ack(pcb);
 800a2d8:	4620      	mov	r0, r4
}
 800a2da:	b001      	add	sp, #4
 800a2dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 800a2e0:	f002 b83a 	b.w	800c358 <tcp_send_empty_ack>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a2e4:	4b37      	ldr	r3, [pc, #220]	; (800a3c4 <tcp_receive+0x29c>)
 800a2e6:	4938      	ldr	r1, [pc, #224]	; (800a3c8 <tcp_receive+0x2a0>)
 800a2e8:	4838      	ldr	r0, [pc, #224]	; (800a3cc <tcp_receive+0x2a4>)
 800a2ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a2ee:	f003 fe75 	bl	800dfdc <iprintf>
 800a2f2:	e793      	b.n	800a21c <tcp_receive+0xf4>
        pcb->unsent_oversize = 0;
 800a2f4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800a2f8:	e789      	b.n	800a20e <tcp_receive+0xe6>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800a2fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f47f af62 	bne.w	800a1c6 <tcp_receive+0x9e>
 800a302:	4b30      	ldr	r3, [pc, #192]	; (800a3c4 <tcp_receive+0x29c>)
 800a304:	4932      	ldr	r1, [pc, #200]	; (800a3d0 <tcp_receive+0x2a8>)
 800a306:	4831      	ldr	r0, [pc, #196]	; (800a3cc <tcp_receive+0x2a4>)
 800a308:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800a30c:	f003 fe66 	bl	800dfdc <iprintf>
 800a310:	e799      	b.n	800a246 <tcp_receive+0x11e>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a312:	4b2c      	ldr	r3, [pc, #176]	; (800a3c4 <tcp_receive+0x29c>)
 800a314:	492f      	ldr	r1, [pc, #188]	; (800a3d4 <tcp_receive+0x2ac>)
 800a316:	482d      	ldr	r0, [pc, #180]	; (800a3cc <tcp_receive+0x2a4>)
 800a318:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a31c:	f003 fe5e 	bl	800dfdc <iprintf>
 800a320:	e70a      	b.n	800a138 <tcp_receive+0x10>
 800a322:	4b2d      	ldr	r3, [pc, #180]	; (800a3d8 <tcp_receive+0x2b0>)
 800a324:	4f24      	ldr	r7, [pc, #144]	; (800a3b8 <tcp_receive+0x290>)
 800a326:	6819      	ldr	r1, [r3, #0]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a32c:	f8b4 605e 	ldrh.w	r6, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 800a330:	6522      	str	r2, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a332:	428e      	cmp	r6, r1
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a334:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a338:	bf38      	it	cc
 800a33a:	f8a4 105e 	strhcc.w	r1, [r4, #94]	; 0x5e
      pcb->snd_wl2 = ackno;
 800a33e:	6563      	str	r3, [r4, #84]	; 0x54
        if (pcb->persist_backoff == 0) {
 800a340:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 800a344:	b9f1      	cbnz	r1, 800a384 <tcp_receive+0x25c>
        if (pcb->persist_backoff == 0) {
 800a346:	b9da      	cbnz	r2, 800a380 <tcp_receive+0x258>
          pcb->persist_backoff = 1;
 800a348:	2201      	movs	r2, #1
          pcb->persist_cnt = 0;
 800a34a:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a34e:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 800a352:	469e      	mov	lr, r3
 800a354:	e726      	b.n	800a1a4 <tcp_receive+0x7c>
        tcp_ack_now(pcb);
 800a356:	7ea3      	ldrb	r3, [r4, #26]
 800a358:	f043 0302 	orr.w	r3, r3, #2
 800a35c:	76a3      	strb	r3, [r4, #26]
 800a35e:	e7bb      	b.n	800a2d8 <tcp_receive+0x1b0>
      if (tcplen == 0) {
 800a360:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800a3e0 <tcp_receive+0x2b8>
 800a364:	f8b9 6000 	ldrh.w	r6, [r9]
 800a368:	b926      	cbnz	r6, 800a374 <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a36a:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a36c:	4471      	add	r1, lr
 800a36e:	4288      	cmp	r0, r1
 800a370:	f000 82b4 	beq.w	800a8dc <tcp_receive+0x7b4>
        pcb->dupacks = 0;
 800a374:	2200      	movs	r2, #0
 800a376:	4e11      	ldr	r6, [pc, #68]	; (800a3bc <tcp_receive+0x294>)
 800a378:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a37a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a37e:	e722      	b.n	800a1c6 <tcp_receive+0x9e>
 800a380:	469e      	mov	lr, r3
 800a382:	e70f      	b.n	800a1a4 <tcp_receive+0x7c>
      } else if (pcb->persist_backoff > 0) {
 800a384:	2a00      	cmp	r2, #0
 800a386:	d0fb      	beq.n	800a380 <tcp_receive+0x258>
          pcb->persist_backoff = 0;
 800a388:	2200      	movs	r2, #0
 800a38a:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 800a38e:	469e      	mov	lr, r3
 800a390:	e708      	b.n	800a1a4 <tcp_receive+0x7c>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a392:	1ac1      	subs	r1, r0, r3
 800a394:	2900      	cmp	r1, #0
 800a396:	f6bf af00 	bge.w	800a19a <tcp_receive+0x72>
 800a39a:	490f      	ldr	r1, [pc, #60]	; (800a3d8 <tcp_receive+0x2b0>)
 800a39c:	6809      	ldr	r1, [r1, #0]
 800a39e:	89c9      	ldrh	r1, [r1, #14]
 800a3a0:	e7c4      	b.n	800a32c <tcp_receive+0x204>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <tcp_receive+0x2b0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	89d9      	ldrh	r1, [r3, #14]
 800a3a8:	428d      	cmp	r5, r1
 800a3aa:	f080 81fc 	bcs.w	800a7a6 <tcp_receive+0x67e>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	e7bc      	b.n	800a32c <tcp_receive+0x204>
 800a3b2:	bf00      	nop
 800a3b4:	20003ee0 	.word	0x20003ee0
 800a3b8:	20003edc 	.word	0x20003edc
 800a3bc:	20003ef4 	.word	0x20003ef4
 800a3c0:	200088a0 	.word	0x200088a0
 800a3c4:	080120ac 	.word	0x080120ac
 800a3c8:	080120fc 	.word	0x080120fc
 800a3cc:	0800e670 	.word	0x0800e670
 800a3d0:	08012124 	.word	0x08012124
 800a3d4:	080120e0 	.word	0x080120e0
 800a3d8:	20003f08 	.word	0x20003f08
 800a3dc:	20003f00 	.word	0x20003f00
 800a3e0:	20003f16 	.word	0x20003f16
      if (pcb->flags & TF_INFR) {
 800a3e4:	7ea2      	ldrb	r2, [r4, #26]
 800a3e6:	0756      	lsls	r6, r2, #29
 800a3e8:	d506      	bpl.n	800a3f8 <tcp_receive+0x2d0>
        pcb->flags &= ~TF_INFR;
 800a3ea:	f022 0204 	bic.w	r2, r2, #4
        pcb->cwnd = pcb->ssthresh;
 800a3ee:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
        pcb->flags &= ~TF_INFR;
 800a3f2:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a3f4:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a3f8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a3fa:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->state >= ESTABLISHED) {
 800a3fe:	7d21      	ldrb	r1, [r4, #20]
      pcb->lastack = ackno;
 800a400:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a402:	2903      	cmp	r1, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a404:	eb02 03e0 	add.w	r3, r2, r0, asr #3
      pcb->nrtx = 0;
 800a408:	f04f 0200 	mov.w	r2, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a40c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800a410:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      pcb->dupacks = 0;
 800a414:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800a418:	d90f      	bls.n	800a43a <tcp_receive+0x312>
        if (pcb->cwnd < pcb->ssthresh) {
 800a41a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a41e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800a422:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a424:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800a426:	bf9c      	itt	ls
 800a428:	435b      	mulls	r3, r3
 800a42a:	fb93 f3f2 	sdivls	r3, r3, r2
 800a42e:	4413      	add	r3, r2
 800a430:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800a432:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 800a434:	bf38      	it	cc
 800a436:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
 800a43a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a43c:	4eb4      	ldr	r6, [pc, #720]	; (800a710 <tcp_receive+0x5e8>)
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a43e:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 800a724 <tcp_receive+0x5fc>
 800a442:	4db4      	ldr	r5, [pc, #720]	; (800a714 <tcp_receive+0x5ec>)
      while (pcb->unacked != NULL &&
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 826d 	beq.w	800a924 <tcp_receive+0x7fc>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	6858      	ldr	r0, [r3, #4]
 800a44e:	f7fb fa33 	bl	80058b8 <lwip_htonl>
 800a452:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 800a45a:	4683      	mov	fp, r0
 800a45c:	8990      	ldrh	r0, [r2, #12]
 800a45e:	f7fb fa27 	bl	80058b0 <lwip_htons>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	f010 0003 	ands.w	r0, r0, #3
 800a468:	ebaa 0a03 	sub.w	sl, sl, r3
 800a46c:	bf18      	it	ne
 800a46e:	2001      	movne	r0, #1
 800a470:	44da      	add	sl, fp
 800a472:	4450      	add	r0, sl
      while (pcb->unacked != NULL &&
 800a474:	2800      	cmp	r0, #0
 800a476:	f300 8252 	bgt.w	800a91e <tcp_receive+0x7f6>
        next = pcb->unacked;
 800a47a:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a47e:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 800a482:	f8da 3000 	ldr.w	r3, [sl]
 800a486:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a488:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a48c:	f7fe f942 	bl	8008714 <pbuf_clen>
 800a490:	4583      	cmp	fp, r0
 800a492:	d32c      	bcc.n	800a4ee <tcp_receive+0x3c6>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a494:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a498:	f7fe f93c 	bl	8008714 <pbuf_clen>
 800a49c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
        recv_acked += next->len;
 800a4a0:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800a4a4:	8831      	ldrh	r1, [r6, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a4a6:	1a10      	subs	r0, r2, r0
        recv_acked += next->len;
 800a4a8:	440b      	add	r3, r1
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a4aa:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 800a4ae:	4650      	mov	r0, sl
        recv_acked += next->len;
 800a4b0:	8033      	strh	r3, [r6, #0]
        tcp_seg_free(next);
 800a4b2:	f7fe fe9b 	bl	80091ec <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800a4b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a4ba:	b1b3      	cbz	r3, 800a4ea <tcp_receive+0x3c2>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a4bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1c0      	bne.n	800a444 <tcp_receive+0x31c>
 800a4c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a4c4:	b153      	cbz	r3, 800a4dc <tcp_receive+0x3b4>
                ++pcb->dupacks;
 800a4c6:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 800a4c8:	fab2 f282 	clz	r2, r2
 800a4cc:	0952      	lsrs	r2, r2, #5
 800a4ce:	4252      	negs	r2, r2
      pcb->polltmr = 0;
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	f8df 9258 	ldr.w	r9, [pc, #600]	; 800a72c <tcp_receive+0x604>
 800a4d6:	8622      	strh	r2, [r4, #48]	; 0x30
 800a4d8:	76e1      	strb	r1, [r4, #27]
 800a4da:	e674      	b.n	800a1c6 <tcp_receive+0x9e>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a4dc:	464b      	mov	r3, r9
 800a4de:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800a4e2:	498d      	ldr	r1, [pc, #564]	; (800a718 <tcp_receive+0x5f0>)
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f003 fd79 	bl	800dfdc <iprintf>
 800a4ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a4ec:	e7aa      	b.n	800a444 <tcp_receive+0x31c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a4ee:	464b      	mov	r3, r9
 800a4f0:	f240 429e 	movw	r2, #1182	; 0x49e
 800a4f4:	4989      	ldr	r1, [pc, #548]	; (800a71c <tcp_receive+0x5f4>)
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f003 fd70 	bl	800dfdc <iprintf>
 800a4fc:	e7ca      	b.n	800a494 <tcp_receive+0x36c>
      if (pcb->rcv_nxt == seqno) {
 800a4fe:	428a      	cmp	r2, r1
 800a500:	f000 8311 	beq.w	800ab26 <tcp_receive+0x9fe>
        tcp_send_empty_ack(pcb);
 800a504:	4620      	mov	r0, r4
 800a506:	f001 ff27 	bl	800c358 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800a50a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	f000 8317 	beq.w	800ab40 <tcp_receive+0xa18>
 800a512:	f8d8 0000 	ldr.w	r0, [r8]
 800a516:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800a518:	f100 3eff 	add.w	lr, r0, #4294967295
 800a51c:	1c47      	adds	r7, r0, #1
 800a51e:	e00d      	b.n	800a53c <tcp_receive+0x414>
 800a520:	68f3      	ldr	r3, [r6, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	ebae 0303 	sub.w	r3, lr, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	db03      	blt.n	800a534 <tcp_receive+0x40c>
 800a52c:	f1bc 0f00 	cmp.w	ip, #0
 800a530:	f340 822c 	ble.w	800a98c <tcp_receive+0x864>
              if (next->next == NULL &&
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	462e      	mov	r6, r5
 800a538:	b1cb      	cbz	r3, 800a56e <tcp_receive+0x446>
 800a53a:	461d      	mov	r5, r3
            if (seqno == next->tcphdr->seqno) {
 800a53c:	68e9      	ldr	r1, [r5, #12]
 800a53e:	684a      	ldr	r2, [r1, #4]
 800a540:	4282      	cmp	r2, r0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800a542:	eba7 0c02 	sub.w	ip, r7, r2
            if (seqno == next->tcphdr->seqno) {
 800a546:	f000 81fa 	beq.w	800a93e <tcp_receive+0x816>
              if (prev == NULL) {
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	d1e8      	bne.n	800a520 <tcp_receive+0x3f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a54e:	1a83      	subs	r3, r0, r2
 800a550:	2b00      	cmp	r3, #0
 800a552:	daef      	bge.n	800a534 <tcp_receive+0x40c>
                  cseg = tcp_seg_copy(&inseg);
 800a554:	4872      	ldr	r0, [pc, #456]	; (800a720 <tcp_receive+0x5f8>)
 800a556:	f7fe fe57 	bl	8009208 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f43f ae0b 	beq.w	800a176 <tcp_receive+0x4e>
                    pcb->ooseq = cseg;
 800a560:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800a562:	4629      	mov	r1, r5
}
 800a564:	b001      	add	sp, #4
 800a566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 800a56a:	f7ff bd83 	b.w	800a074 <tcp_oos_insert_segment>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a56e:	1a82      	subs	r2, r0, r2
              if (next->next == NULL &&
 800a570:	2a00      	cmp	r2, #0
 800a572:	f77f ae00 	ble.w	800a176 <tcp_receive+0x4e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a576:	8988      	ldrh	r0, [r1, #12]
 800a578:	f7fb f99a 	bl	80058b0 <lwip_htons>
 800a57c:	07c2      	lsls	r2, r0, #31
 800a57e:	f53f adfa 	bmi.w	800a176 <tcp_receive+0x4e>
                next->next = tcp_seg_copy(&inseg);
 800a582:	4867      	ldr	r0, [pc, #412]	; (800a720 <tcp_receive+0x5f8>)
 800a584:	f7fe fe40 	bl	8009208 <tcp_seg_copy>
 800a588:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f43f adf3 	beq.w	800a176 <tcp_receive+0x4e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a590:	68eb      	ldr	r3, [r5, #12]
 800a592:	892a      	ldrh	r2, [r5, #8]
 800a594:	6859      	ldr	r1, [r3, #4]
 800a596:	f8d8 3000 	ldr.w	r3, [r8]
 800a59a:	440a      	add	r2, r1
 800a59c:	1ad2      	subs	r2, r2, r3
 800a59e:	2a00      	cmp	r2, #0
 800a5a0:	dd07      	ble.n	800a5b2 <tcp_receive+0x48a>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a5a2:	1a5b      	subs	r3, r3, r1
 800a5a4:	b299      	uxth	r1, r3
 800a5a6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a5a8:	6868      	ldr	r0, [r5, #4]
 800a5aa:	f7fe f829 	bl	8008600 <pbuf_realloc>
 800a5ae:	f8d8 3000 	ldr.w	r3, [r8]
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a5b2:	f8b9 2000 	ldrh.w	r2, [r9]
 800a5b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5b8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a5ba:	1a12      	subs	r2, r2, r0
 800a5bc:	1a52      	subs	r2, r2, r1
 800a5be:	4413      	add	r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f77f add8 	ble.w	800a176 <tcp_receive+0x4e>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a5c6:	682b      	ldr	r3, [r5, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	8998      	ldrh	r0, [r3, #12]
 800a5cc:	f7fb f970 	bl	80058b0 <lwip_htons>
 800a5d0:	07c3      	lsls	r3, r0, #31
 800a5d2:	f100 82dc 	bmi.w	800ab8e <tcp_receive+0xa66>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a5d6:	f8d8 0000 	ldr.w	r0, [r8]
 800a5da:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a5dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	1a09      	subs	r1, r1, r0
 800a5e2:	4411      	add	r1, r2
 800a5e4:	b289      	uxth	r1, r1
 800a5e6:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a5e8:	6858      	ldr	r0, [r3, #4]
 800a5ea:	f7fe f809 	bl	8008600 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	891d      	ldrh	r5, [r3, #8]
 800a5f4:	8990      	ldrh	r0, [r2, #12]
 800a5f6:	f7fb f95b 	bl	80058b0 <lwip_htons>
 800a5fa:	f010 0303 	ands.w	r3, r0, #3
 800a5fe:	bf18      	it	ne
 800a600:	2301      	movne	r3, #1
 800a602:	442b      	add	r3, r5
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a604:	f8d8 1000 	ldr.w	r1, [r8]
 800a608:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a60a:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800a60c:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a60e:	4419      	add	r1, r3
 800a610:	4402      	add	r2, r0
 800a612:	4291      	cmp	r1, r2
                    tcplen = TCP_TCPLEN(next->next);
 800a614:	f8a9 3000 	strh.w	r3, [r9]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a618:	f43f adad 	beq.w	800a176 <tcp_receive+0x4e>
 800a61c:	4b41      	ldr	r3, [pc, #260]	; (800a724 <tcp_receive+0x5fc>)
 800a61e:	4942      	ldr	r1, [pc, #264]	; (800a728 <tcp_receive+0x600>)
 800a620:	483c      	ldr	r0, [pc, #240]	; (800a714 <tcp_receive+0x5ec>)
 800a622:	f240 627b 	movw	r2, #1659	; 0x67b
}
 800a626:	b001      	add	sp, #4
 800a628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a62c:	f003 bcd6 	b.w	800dfdc <iprintf>
      struct pbuf *p = inseg.p;
 800a630:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800a720 <tcp_receive+0x5f8>
 800a634:	f8da 5004 	ldr.w	r5, [sl, #4]
      off = pcb->rcv_nxt - seqno;
 800a638:	463e      	mov	r6, r7
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a63a:	2d00      	cmp	r5, #0
 800a63c:	f000 8278 	beq.w	800ab30 <tcp_receive+0xa08>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800a640:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800a644:	429f      	cmp	r7, r3
 800a646:	f300 8199 	bgt.w	800a97c <tcp_receive+0x854>
      if (inseg.p->len < off) {
 800a64a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a64e:	8943      	ldrh	r3, [r0, #10]
 800a650:	429f      	cmp	r7, r3
 800a652:	f340 8184 	ble.w	800a95e <tcp_receive+0x836>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a656:	8902      	ldrh	r2, [r0, #8]
 800a658:	4297      	cmp	r7, r2
 800a65a:	f300 81b6 	bgt.w	800a9ca <tcp_receive+0x8a2>
        while (p->len < off) {
 800a65e:	896b      	ldrh	r3, [r5, #10]
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a660:	1bd2      	subs	r2, r2, r7
        while (p->len < off) {
 800a662:	42bb      	cmp	r3, r7
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a664:	b292      	uxth	r2, r2
        while (p->len < off) {
 800a666:	da07      	bge.n	800a678 <tcp_receive+0x550>
          p->len = 0;
 800a668:	2100      	movs	r1, #0
 800a66a:	8169      	strh	r1, [r5, #10]
          p->tot_len = new_tot_len;
 800a66c:	812a      	strh	r2, [r5, #8]
          p = p->next;
 800a66e:	682d      	ldr	r5, [r5, #0]
          off -= p->len;
 800a670:	1af6      	subs	r6, r6, r3
        while (p->len < off) {
 800a672:	896b      	ldrh	r3, [r5, #10]
 800a674:	42b3      	cmp	r3, r6
 800a676:	dbf8      	blt.n	800a66a <tcp_receive+0x542>
        if (pbuf_header(p, (s16_t)-off)) {
 800a678:	4271      	negs	r1, r6
 800a67a:	b209      	sxth	r1, r1
 800a67c:	4628      	mov	r0, r5
 800a67e:	f7fd fd75 	bl	800816c <pbuf_header>
 800a682:	2800      	cmp	r0, #0
 800a684:	f040 81ac 	bne.w	800a9e0 <tcp_receive+0x8b8>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a688:	f8ba 1008 	ldrh.w	r1, [sl, #8]
 800a68c:	f8d8 3000 	ldr.w	r3, [r8]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a690:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a692:	6a60      	ldr	r0, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a694:	f8c8 0000 	str.w	r0, [r8]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a698:	440b      	add	r3, r1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a69a:	f1c2 0201 	rsb	r2, r2, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a69e:	f8da 100c 	ldr.w	r1, [sl, #12]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a6a2:	1a1b      	subs	r3, r3, r0
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6a4:	2a00      	cmp	r2, #0
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a6a6:	f8aa 3008 	strh.w	r3, [sl, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a6aa:	6048      	str	r0, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6ac:	f73f ae14 	bgt.w	800a2d8 <tcp_receive+0x1b0>
 800a6b0:	460b      	mov	r3, r1
        tcplen = TCP_TCPLEN(&inseg);
 800a6b2:	8998      	ldrh	r0, [r3, #12]
 800a6b4:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 800a6b8:	f7fb f8fa 	bl	80058b0 <lwip_htons>
 800a6bc:	f010 0303 	ands.w	r3, r0, #3
 800a6c0:	bf18      	it	ne
 800a6c2:	2301      	movne	r3, #1
 800a6c4:	442b      	add	r3, r5
        if (tcplen > pcb->rcv_wnd) {
 800a6c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800a6c8:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800a6ca:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800a6cc:	f8a9 3000 	strh.w	r3, [r9]
        if (tcplen > pcb->rcv_wnd) {
 800a6d0:	f0c0 81ee 	bcc.w	800aab0 <tcp_receive+0x988>
        if (pcb->ooseq != NULL) {
 800a6d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d070      	beq.n	800a7bc <tcp_receive+0x694>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6da:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a6de:	8998      	ldrh	r0, [r3, #12]
 800a6e0:	f7fb f8e6 	bl	80058b0 <lwip_htons>
 800a6e4:	07c2      	lsls	r2, r0, #31
 800a6e6:	d466      	bmi.n	800a7b6 <tcp_receive+0x68e>
            next = pcb->ooseq;
 800a6e8:	6f26      	ldr	r6, [r4, #112]	; 0x70
            while (next &&
 800a6ea:	2e00      	cmp	r6, #0
 800a6ec:	f000 8248 	beq.w	800ab80 <tcp_receive+0xa58>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a6f0:	68f0      	ldr	r0, [r6, #12]
 800a6f2:	f8b9 3000 	ldrh.w	r3, [r9]
 800a6f6:	f8d8 7000 	ldr.w	r7, [r8]
 800a6fa:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a6fe:	8932      	ldrh	r2, [r6, #8]
 800a700:	19d9      	adds	r1, r3, r7
 800a702:	eba1 0e0c 	sub.w	lr, r1, ip
 800a706:	ebae 0202 	sub.w	r2, lr, r2
            while (next &&
 800a70a:	2a00      	cmp	r2, #0
 800a70c:	da28      	bge.n	800a760 <tcp_receive+0x638>
 800a70e:	e16f      	b.n	800a9f0 <tcp_receive+0x8c8>
 800a710:	20003ef4 	.word	0x20003ef4
 800a714:	0800e670 	.word	0x0800e670
 800a718:	08012124 	.word	0x08012124
 800a71c:	080120fc 	.word	0x080120fc
 800a720:	20003ee4 	.word	0x20003ee4
 800a724:	080120ac 	.word	0x080120ac
 800a728:	08012188 	.word	0x08012188
 800a72c:	20003f16 	.word	0x20003f16
              next = next->next;
 800a730:	6835      	ldr	r5, [r6, #0]
              tcp_seg_free(prev);
 800a732:	4630      	mov	r0, r6
 800a734:	f7fe fd5a 	bl	80091ec <tcp_seg_free>
            while (next &&
 800a738:	2d00      	cmp	r5, #0
 800a73a:	f000 818f 	beq.w	800aa5c <tcp_receive+0x934>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a73e:	68e8      	ldr	r0, [r5, #12]
 800a740:	f8b9 3000 	ldrh.w	r3, [r9]
 800a744:	f8d8 7000 	ldr.w	r7, [r8]
 800a748:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a74c:	892a      	ldrh	r2, [r5, #8]
 800a74e:	19d9      	adds	r1, r3, r7
 800a750:	eba1 0e0c 	sub.w	lr, r1, ip
 800a754:	ebae 0202 	sub.w	r2, lr, r2
            while (next &&
 800a758:	2a00      	cmp	r2, #0
 800a75a:	f2c0 814a 	blt.w	800a9f2 <tcp_receive+0x8ca>
 800a75e:	462e      	mov	r6, r5
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a760:	8980      	ldrh	r0, [r0, #12]
 800a762:	f7fb f8a5 	bl	80058b0 <lwip_htons>
 800a766:	07c3      	lsls	r3, r0, #31
 800a768:	d5e2      	bpl.n	800a730 <tcp_receive+0x608>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a76a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a76e:	8998      	ldrh	r0, [r3, #12]
 800a770:	f7fb f89e 	bl	80058b0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a774:	0787      	lsls	r7, r0, #30
 800a776:	d4db      	bmi.n	800a730 <tcp_receive+0x608>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a778:	f8da 700c 	ldr.w	r7, [sl, #12]
 800a77c:	2001      	movs	r0, #1
 800a77e:	89bd      	ldrh	r5, [r7, #12]
 800a780:	f7fb f896 	bl	80058b0 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 800a784:	f8da 300c 	ldr.w	r3, [sl, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a788:	4328      	orrs	r0, r5
 800a78a:	81b8      	strh	r0, [r7, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a78c:	8998      	ldrh	r0, [r3, #12]
 800a78e:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 800a792:	f7fb f88d 	bl	80058b0 <lwip_htons>
 800a796:	f010 0003 	ands.w	r0, r0, #3
 800a79a:	bf18      	it	ne
 800a79c:	2001      	movne	r0, #1
 800a79e:	4405      	add	r5, r0
 800a7a0:	f8a9 5000 	strh.w	r5, [r9]
 800a7a4:	e7c4      	b.n	800a730 <tcp_receive+0x608>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4686      	mov	lr, r0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	e4fa      	b.n	800a1a4 <tcp_receive+0x7c>
              pcb->ooseq = pcb->ooseq->next;
 800a7ae:	6803      	ldr	r3, [r0, #0]
 800a7b0:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800a7b2:	f7fe fd1b 	bl	80091ec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a7b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1f8      	bne.n	800a7ae <tcp_receive+0x686>
 800a7bc:	f8b9 3000 	ldrh.w	r3, [r9]
 800a7c0:	f8d8 1000 	ldr.w	r1, [r8]
 800a7c4:	4419      	add	r1, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a7c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800a7c8:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	f0c0 814d 	bcc.w	800aa6a <tcp_receive+0x942>
        pcb->rcv_wnd -= tcplen;
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fe fa0d 	bl	8008bf4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a7da:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a7de:	891a      	ldrh	r2, [r3, #8]
 800a7e0:	b122      	cbz	r2, 800a7ec <tcp_receive+0x6c4>
          recv_data = inseg.p;
 800a7e2:	49a7      	ldr	r1, [pc, #668]	; (800aa80 <tcp_receive+0x958>)
          inseg.p = NULL;
 800a7e4:	2200      	movs	r2, #0
          recv_data = inseg.p;
 800a7e6:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 800a7e8:	f8ca 2004 	str.w	r2, [sl, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7ec:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a7f0:	8998      	ldrh	r0, [r3, #12]
 800a7f2:	f7fb f85d 	bl	80058b0 <lwip_htons>
 800a7f6:	07c5      	lsls	r5, r0, #31
 800a7f8:	d504      	bpl.n	800a804 <tcp_receive+0x6dc>
          recv_flags |= TF_GOT_FIN;
 800a7fa:	4aa2      	ldr	r2, [pc, #648]	; (800aa84 <tcp_receive+0x95c>)
 800a7fc:	7813      	ldrb	r3, [r2, #0]
 800a7fe:	f043 0320 	orr.w	r3, r3, #32
 800a802:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800a804:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a806:	2d00      	cmp	r5, #0
 800a808:	f000 8090 	beq.w	800a92c <tcp_receive+0x804>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a80c:	68eb      	ldr	r3, [r5, #12]
        while (pcb->ooseq != NULL &&
 800a80e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a810:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 800a812:	428a      	cmp	r2, r1
 800a814:	f040 808a 	bne.w	800a92c <tcp_receive+0x804>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a818:	f8df a278 	ldr.w	sl, [pc, #632]	; 800aa94 <tcp_receive+0x96c>
 800a81c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 800aaac <tcp_receive+0x984>
 800a820:	4f99      	ldr	r7, [pc, #612]	; (800aa88 <tcp_receive+0x960>)
 800a822:	e037      	b.n	800a894 <tcp_receive+0x76c>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a824:	68eb      	ldr	r3, [r5, #12]
 800a826:	892e      	ldrh	r6, [r5, #8]
 800a828:	8998      	ldrh	r0, [r3, #12]
 800a82a:	f7fb f841 	bl	80058b0 <lwip_htons>
 800a82e:	f010 0003 	ands.w	r0, r0, #3
 800a832:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a834:	bf18      	it	ne
 800a836:	2001      	movne	r0, #1
 800a838:	4430      	add	r0, r6
 800a83a:	1a18      	subs	r0, r3, r0
 800a83c:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a83e:	4620      	mov	r0, r4
 800a840:	f7fe f9d8 	bl	8008bf4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a844:	6869      	ldr	r1, [r5, #4]
 800a846:	890b      	ldrh	r3, [r1, #8]
 800a848:	b13b      	cbz	r3, 800a85a <tcp_receive+0x732>
            if (recv_data) {
 800a84a:	4b8d      	ldr	r3, [pc, #564]	; (800aa80 <tcp_receive+0x958>)
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	2800      	cmp	r0, #0
 800a850:	d06a      	beq.n	800a928 <tcp_receive+0x800>
              pbuf_cat(recv_data, cseg->p);
 800a852:	f7fd ff89 	bl	8008768 <pbuf_cat>
            cseg->p = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a85a:	68eb      	ldr	r3, [r5, #12]
 800a85c:	8998      	ldrh	r0, [r3, #12]
 800a85e:	f7fb f827 	bl	80058b0 <lwip_htons>
 800a862:	07c1      	lsls	r1, r0, #31
 800a864:	d509      	bpl.n	800a87a <tcp_receive+0x752>
            recv_flags |= TF_GOT_FIN;
 800a866:	4a87      	ldr	r2, [pc, #540]	; (800aa84 <tcp_receive+0x95c>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a868:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800a86a:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a86c:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800a86e:	f043 0320 	orr.w	r3, r3, #32
 800a872:	7013      	strb	r3, [r2, #0]
              pcb->state = CLOSE_WAIT;
 800a874:	bf04      	itt	eq
 800a876:	2307      	moveq	r3, #7
 800a878:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800a87e:	4628      	mov	r0, r5
 800a880:	f7fe fcb4 	bl	80091ec <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a884:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a886:	2d00      	cmp	r5, #0
 800a888:	d050      	beq.n	800a92c <tcp_receive+0x804>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a88a:	68eb      	ldr	r3, [r5, #12]
        while (pcb->ooseq != NULL &&
 800a88c:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a88e:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 800a890:	428a      	cmp	r2, r1
 800a892:	d14b      	bne.n	800a92c <tcp_receive+0x804>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a894:	f8c8 2000 	str.w	r2, [r8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a898:	8998      	ldrh	r0, [r3, #12]
 800a89a:	892e      	ldrh	r6, [r5, #8]
 800a89c:	f7fb f808 	bl	80058b0 <lwip_htons>
 800a8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a8a2:	68ea      	ldr	r2, [r5, #12]
 800a8a4:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a8a8:	f010 0003 	ands.w	r0, r0, #3
 800a8ac:	bf18      	it	ne
 800a8ae:	2001      	movne	r0, #1
 800a8b0:	441e      	add	r6, r3
 800a8b2:	4430      	add	r0, r6
 800a8b4:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a8b6:	8990      	ldrh	r0, [r2, #12]
 800a8b8:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800a8ba:	f7fa fff9 	bl	80058b0 <lwip_htons>
 800a8be:	f010 0003 	ands.w	r0, r0, #3
 800a8c2:	bf18      	it	ne
 800a8c4:	2001      	movne	r0, #1
 800a8c6:	4458      	add	r0, fp
 800a8c8:	4286      	cmp	r6, r0
 800a8ca:	d2ab      	bcs.n	800a824 <tcp_receive+0x6fc>
 800a8cc:	4653      	mov	r3, sl
 800a8ce:	f240 52de 	movw	r2, #1502	; 0x5de
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f003 fb81 	bl	800dfdc <iprintf>
 800a8da:	e7a3      	b.n	800a824 <tcp_receive+0x6fc>
          if (pcb->rtime >= 0) {
 800a8dc:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	f6ff ad47 	blt.w	800a374 <tcp_receive+0x24c>
            if (pcb->lastack == ackno) {
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	f47f ad44 	bne.w	800a374 <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a8ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8f0:	1c53      	adds	r3, r2, #1
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800a8f6:	bf3c      	itt	cc
 800a8f8:	461a      	movcc	r2, r3
 800a8fa:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a8fe:	2a03      	cmp	r2, #3
 800a900:	f240 8133 	bls.w	800ab6a <tcp_receive+0xa42>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a904:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a908:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a90a:	4413      	add	r3, r2
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	429a      	cmp	r2, r3
 800a910:	f4bf ac57 	bcs.w	800a1c2 <tcp_receive+0x9a>
                  pcb->cwnd += pcb->mss;
 800a914:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a918:	4e5c      	ldr	r6, [pc, #368]	; (800aa8c <tcp_receive+0x964>)
 800a91a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a91c:	e453      	b.n	800a1c6 <tcp_receive+0x9e>
 800a91e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a920:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a922:	e5d1      	b.n	800a4c8 <tcp_receive+0x3a0>
 800a924:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a926:	e5ce      	b.n	800a4c6 <tcp_receive+0x39e>
              recv_data = cseg->p;
 800a928:	6019      	str	r1, [r3, #0]
 800a92a:	e794      	b.n	800a856 <tcp_receive+0x72e>
        tcp_ack(pcb);
 800a92c:	7ea3      	ldrb	r3, [r4, #26]
 800a92e:	07d8      	lsls	r0, r3, #31
 800a930:	d546      	bpl.n	800a9c0 <tcp_receive+0x898>
 800a932:	f023 0301 	bic.w	r3, r3, #1
 800a936:	f043 0302 	orr.w	r3, r3, #2
 800a93a:	76a3      	strb	r3, [r4, #26]
 800a93c:	e41b      	b.n	800a176 <tcp_receive+0x4e>
              if (inseg.len > next->len) {
 800a93e:	4854      	ldr	r0, [pc, #336]	; (800aa90 <tcp_receive+0x968>)
 800a940:	892b      	ldrh	r3, [r5, #8]
 800a942:	8902      	ldrh	r2, [r0, #8]
 800a944:	429a      	cmp	r2, r3
 800a946:	f67f ac16 	bls.w	800a176 <tcp_receive+0x4e>
                cseg = tcp_seg_copy(&inseg);
 800a94a:	f7fe fc5d 	bl	8009208 <tcp_seg_copy>
                if (cseg != NULL) {
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f ac11 	beq.w	800a176 <tcp_receive+0x4e>
                  if (prev != NULL) {
 800a954:	2e00      	cmp	r6, #0
 800a956:	f000 8111 	beq.w	800ab7c <tcp_receive+0xa54>
                    prev->next = cseg;
 800a95a:	6030      	str	r0, [r6, #0]
 800a95c:	e601      	b.n	800a562 <tcp_receive+0x43a>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800a95e:	4279      	negs	r1, r7
 800a960:	b209      	sxth	r1, r1
 800a962:	f7fd fc03 	bl	800816c <pbuf_header>
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f ae8e 	beq.w	800a688 <tcp_receive+0x560>
          LWIP_ASSERT("pbuf_header failed", 0);
 800a96c:	4b49      	ldr	r3, [pc, #292]	; (800aa94 <tcp_receive+0x96c>)
 800a96e:	494a      	ldr	r1, [pc, #296]	; (800aa98 <tcp_receive+0x970>)
 800a970:	4845      	ldr	r0, [pc, #276]	; (800aa88 <tcp_receive+0x960>)
 800a972:	f240 5251 	movw	r2, #1361	; 0x551
 800a976:	f003 fb31 	bl	800dfdc <iprintf>
 800a97a:	e685      	b.n	800a688 <tcp_receive+0x560>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800a97c:	4b45      	ldr	r3, [pc, #276]	; (800aa94 <tcp_receive+0x96c>)
 800a97e:	4947      	ldr	r1, [pc, #284]	; (800aa9c <tcp_receive+0x974>)
 800a980:	4841      	ldr	r0, [pc, #260]	; (800aa88 <tcp_receive+0x960>)
 800a982:	f240 523d 	movw	r2, #1341	; 0x53d
 800a986:	f003 fb29 	bl	800dfdc <iprintf>
 800a98a:	e65e      	b.n	800a64a <tcp_receive+0x522>
                  cseg = tcp_seg_copy(&inseg);
 800a98c:	4840      	ldr	r0, [pc, #256]	; (800aa90 <tcp_receive+0x968>)
 800a98e:	f7fe fc3b 	bl	8009208 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a992:	4604      	mov	r4, r0
 800a994:	2800      	cmp	r0, #0
 800a996:	f43f abee 	beq.w	800a176 <tcp_receive+0x4e>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a99a:	68f3      	ldr	r3, [r6, #12]
 800a99c:	8932      	ldrh	r2, [r6, #8]
 800a99e:	6859      	ldr	r1, [r3, #4]
 800a9a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a4:	440a      	add	r2, r1
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	dd05      	ble.n	800a9b8 <tcp_receive+0x890>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a9ac:	1a5b      	subs	r3, r3, r1
 800a9ae:	b299      	uxth	r1, r3
 800a9b0:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a9b2:	6870      	ldr	r0, [r6, #4]
 800a9b4:	f7fd fe24 	bl	8008600 <pbuf_realloc>
                    prev->next = cseg;
 800a9b8:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4620      	mov	r0, r4
 800a9be:	e5d1      	b.n	800a564 <tcp_receive+0x43c>
        tcp_ack(pcb);
 800a9c0:	f043 0301 	orr.w	r3, r3, #1
 800a9c4:	76a3      	strb	r3, [r4, #26]
 800a9c6:	f7ff bbd6 	b.w	800a176 <tcp_receive+0x4e>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a9ca:	4b32      	ldr	r3, [pc, #200]	; (800aa94 <tcp_receive+0x96c>)
 800a9cc:	4934      	ldr	r1, [pc, #208]	; (800aaa0 <tcp_receive+0x978>)
 800a9ce:	482e      	ldr	r0, [pc, #184]	; (800aa88 <tcp_receive+0x960>)
 800a9d0:	f240 523f 	movw	r2, #1343	; 0x53f
 800a9d4:	f003 fb02 	bl	800dfdc <iprintf>
 800a9d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a9dc:	891a      	ldrh	r2, [r3, #8]
 800a9de:	e63e      	b.n	800a65e <tcp_receive+0x536>
          LWIP_ASSERT("pbuf_header failed", 0);
 800a9e0:	4b2c      	ldr	r3, [pc, #176]	; (800aa94 <tcp_receive+0x96c>)
 800a9e2:	492d      	ldr	r1, [pc, #180]	; (800aa98 <tcp_receive+0x970>)
 800a9e4:	4828      	ldr	r0, [pc, #160]	; (800aa88 <tcp_receive+0x960>)
 800a9e6:	f240 524c 	movw	r2, #1356	; 0x54c
 800a9ea:	f003 faf7 	bl	800dfdc <iprintf>
 800a9ee:	e64b      	b.n	800a688 <tcp_receive+0x560>
            while (next &&
 800a9f0:	4635      	mov	r5, r6
            if (next &&
 800a9f2:	f1be 0f00 	cmp.w	lr, #0
 800a9f6:	dd36      	ble.n	800aa66 <tcp_receive+0x93e>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9f8:	ebac 0707 	sub.w	r7, ip, r7
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a9fc:	f8da 300c 	ldr.w	r3, [sl, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aa00:	f8aa 7008 	strh.w	r7, [sl, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa04:	8998      	ldrh	r0, [r3, #12]
 800aa06:	f7fa ff53 	bl	80058b0 <lwip_htons>
 800aa0a:	0786      	lsls	r6, r0, #30
                inseg.len -= 1;
 800aa0c:	f8ba 1008 	ldrh.w	r1, [sl, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa10:	d503      	bpl.n	800aa1a <tcp_receive+0x8f2>
                inseg.len -= 1;
 800aa12:	3901      	subs	r1, #1
 800aa14:	b289      	uxth	r1, r1
 800aa16:	f8aa 1008 	strh.w	r1, [sl, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800aa1a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800aa1e:	f7fd fdef 	bl	8008600 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aa22:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aa26:	f8ba 6008 	ldrh.w	r6, [sl, #8]
 800aa2a:	8998      	ldrh	r0, [r3, #12]
 800aa2c:	f7fa ff40 	bl	80058b0 <lwip_htons>
 800aa30:	f010 0303 	ands.w	r3, r0, #3
 800aa34:	bf18      	it	ne
 800aa36:	2301      	movne	r3, #1
 800aa38:	4433      	add	r3, r6
 800aa3a:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa3c:	68e9      	ldr	r1, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800aa3e:	f8a9 3000 	strh.w	r3, [r9]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa42:	f8d8 2000 	ldr.w	r2, [r8]
 800aa46:	6849      	ldr	r1, [r1, #4]
 800aa48:	441a      	add	r2, r3
 800aa4a:	428a      	cmp	r2, r1
 800aa4c:	d00b      	beq.n	800aa66 <tcp_receive+0x93e>
 800aa4e:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <tcp_receive+0x96c>)
 800aa50:	4914      	ldr	r1, [pc, #80]	; (800aaa4 <tcp_receive+0x97c>)
 800aa52:	480d      	ldr	r0, [pc, #52]	; (800aa88 <tcp_receive+0x960>)
 800aa54:	f240 52af 	movw	r2, #1455	; 0x5af
 800aa58:	f003 fac0 	bl	800dfdc <iprintf>
 800aa5c:	f8b9 3000 	ldrh.w	r3, [r9]
 800aa60:	f8d8 1000 	ldr.w	r1, [r8]
 800aa64:	4419      	add	r1, r3
            pcb->ooseq = next;
 800aa66:	6725      	str	r5, [r4, #112]	; 0x70
 800aa68:	e6ad      	b.n	800a7c6 <tcp_receive+0x69e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <tcp_receive+0x96c>)
 800aa6c:	490e      	ldr	r1, [pc, #56]	; (800aaa8 <tcp_receive+0x980>)
 800aa6e:	4806      	ldr	r0, [pc, #24]	; (800aa88 <tcp_receive+0x960>)
 800aa70:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800aa74:	f003 fab2 	bl	800dfdc <iprintf>
 800aa78:	f8b9 3000 	ldrh.w	r3, [r9]
 800aa7c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aa7e:	e6a7      	b.n	800a7d0 <tcp_receive+0x6a8>
 800aa80:	20003ef8 	.word	0x20003ef8
 800aa84:	20003efc 	.word	0x20003efc
 800aa88:	0800e670 	.word	0x0800e670
 800aa8c:	20003ef4 	.word	0x20003ef4
 800aa90:	20003ee4 	.word	0x20003ee4
 800aa94:	080120ac 	.word	0x080120ac
 800aa98:	08012174 	.word	0x08012174
 800aa9c:	08012154 	.word	0x08012154
 800aaa0:	08012164 	.word	0x08012164
 800aaa4:	080121c0 	.word	0x080121c0
 800aaa8:	080121fc 	.word	0x080121fc
 800aaac:	0801221c 	.word	0x0801221c
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aab0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aab4:	8998      	ldrh	r0, [r3, #12]
 800aab6:	f7fa fefb 	bl	80058b0 <lwip_htons>
 800aaba:	07c5      	lsls	r5, r0, #31
 800aabc:	d446      	bmi.n	800ab4c <tcp_receive+0xa24>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aabe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aac0:	f8da 300c 	ldr.w	r3, [sl, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aac4:	f8aa 2008 	strh.w	r2, [sl, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aac8:	8998      	ldrh	r0, [r3, #12]
 800aaca:	f7fa fef1 	bl	80058b0 <lwip_htons>
 800aace:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800aad0:	f8ba 1008 	ldrh.w	r1, [sl, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aad4:	d503      	bpl.n	800aade <tcp_receive+0x9b6>
            inseg.len -= 1;
 800aad6:	3901      	subs	r1, #1
 800aad8:	b289      	uxth	r1, r1
 800aada:	f8aa 1008 	strh.w	r1, [sl, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800aade:	f8da 0004 	ldr.w	r0, [sl, #4]
 800aae2:	f7fd fd8d 	bl	8008600 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aae6:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aaea:	f8ba 5008 	ldrh.w	r5, [sl, #8]
 800aaee:	8998      	ldrh	r0, [r3, #12]
 800aaf0:	f7fa fede 	bl	80058b0 <lwip_htons>
 800aaf4:	f010 0303 	ands.w	r3, r0, #3
 800aaf8:	bf18      	it	ne
 800aafa:	2301      	movne	r3, #1
 800aafc:	442b      	add	r3, r5
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aafe:	f8d8 1000 	ldr.w	r1, [r8]
 800ab02:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800ab04:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800ab06:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ab08:	4419      	add	r1, r3
 800ab0a:	4402      	add	r2, r0
 800ab0c:	4291      	cmp	r1, r2
          tcplen = TCP_TCPLEN(&inseg);
 800ab0e:	f8a9 3000 	strh.w	r3, [r9]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ab12:	f43f addf 	beq.w	800a6d4 <tcp_receive+0x5ac>
 800ab16:	4b25      	ldr	r3, [pc, #148]	; (800abac <tcp_receive+0xa84>)
 800ab18:	4925      	ldr	r1, [pc, #148]	; (800abb0 <tcp_receive+0xa88>)
 800ab1a:	4826      	ldr	r0, [pc, #152]	; (800abb4 <tcp_receive+0xa8c>)
 800ab1c:	f240 527f 	movw	r2, #1407	; 0x57f
 800ab20:	f003 fa5c 	bl	800dfdc <iprintf>
 800ab24:	e5d6      	b.n	800a6d4 <tcp_receive+0x5ac>
 800ab26:	f8df a094 	ldr.w	sl, [pc, #148]	; 800abbc <tcp_receive+0xa94>
 800ab2a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ab2e:	e5c0      	b.n	800a6b2 <tcp_receive+0x58a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ab30:	4b1e      	ldr	r3, [pc, #120]	; (800abac <tcp_receive+0xa84>)
 800ab32:	4921      	ldr	r1, [pc, #132]	; (800abb8 <tcp_receive+0xa90>)
 800ab34:	481f      	ldr	r0, [pc, #124]	; (800abb4 <tcp_receive+0xa8c>)
 800ab36:	f240 523c 	movw	r2, #1340	; 0x53c
 800ab3a:	f003 fa4f 	bl	800dfdc <iprintf>
 800ab3e:	e57f      	b.n	800a640 <tcp_receive+0x518>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab40:	481e      	ldr	r0, [pc, #120]	; (800abbc <tcp_receive+0xa94>)
 800ab42:	f7fe fb61 	bl	8009208 <tcp_seg_copy>
 800ab46:	6720      	str	r0, [r4, #112]	; 0x70
 800ab48:	f7ff bb15 	b.w	800a176 <tcp_receive+0x4e>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ab4c:	f8da 600c 	ldr.w	r6, [sl, #12]
 800ab50:	89b5      	ldrh	r5, [r6, #12]
 800ab52:	4628      	mov	r0, r5
 800ab54:	f7fa feac 	bl	80058b0 <lwip_htons>
 800ab58:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ab5c:	f7fa fea8 	bl	80058b0 <lwip_htons>
 800ab60:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800ab64:	4305      	orrs	r5, r0
 800ab66:	81b5      	strh	r5, [r6, #12]
 800ab68:	e7a9      	b.n	800aabe <tcp_receive+0x996>
              } else if (pcb->dupacks == 3) {
 800ab6a:	f47f ab2a 	bne.w	800a1c2 <tcp_receive+0x9a>
                tcp_rexmit_fast(pcb);
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f001 febc 	bl	800c8ec <tcp_rexmit_fast>
 800ab74:	4e12      	ldr	r6, [pc, #72]	; (800abc0 <tcp_receive+0xa98>)
 800ab76:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ab78:	f7ff bb25 	b.w	800a1c6 <tcp_receive+0x9e>
                    pcb->ooseq = cseg;
 800ab7c:	6720      	str	r0, [r4, #112]	; 0x70
 800ab7e:	e4f0      	b.n	800a562 <tcp_receive+0x43a>
 800ab80:	f8b9 3000 	ldrh.w	r3, [r9]
 800ab84:	f8d8 1000 	ldr.w	r1, [r8]
            while (next &&
 800ab88:	4635      	mov	r5, r6
 800ab8a:	4419      	add	r1, r3
 800ab8c:	e76b      	b.n	800aa66 <tcp_receive+0x93e>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	68df      	ldr	r7, [r3, #12]
 800ab92:	89be      	ldrh	r6, [r7, #12]
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7fa fe8b 	bl	80058b0 <lwip_htons>
 800ab9a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ab9e:	f7fa fe87 	bl	80058b0 <lwip_htons>
 800aba2:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800aba6:	4306      	orrs	r6, r0
 800aba8:	81be      	strh	r6, [r7, #12]
 800abaa:	e514      	b.n	800a5d6 <tcp_receive+0x4ae>
 800abac:	080120ac 	.word	0x080120ac
 800abb0:	08012188 	.word	0x08012188
 800abb4:	0800e670 	.word	0x0800e670
 800abb8:	08012144 	.word	0x08012144
 800abbc:	20003ee4 	.word	0x20003ee4
 800abc0:	20003ef4 	.word	0x20003ef4

0800abc4 <tcp_input_delayed_close.part.3>:
tcp_input_delayed_close(struct tcp_pcb *pcb)
 800abc4:	b510      	push	{r4, lr}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800abc6:	7e83      	ldrb	r3, [r0, #26]
 800abc8:	06db      	lsls	r3, r3, #27
tcp_input_delayed_close(struct tcp_pcb *pcb)
 800abca:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 800abcc:	d406      	bmi.n	800abdc <tcp_input_delayed_close.part.3+0x18>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800abce:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800abd2:	b11b      	cbz	r3, 800abdc <tcp_input_delayed_close.part.3+0x18>
 800abd4:	f06f 010e 	mvn.w	r1, #14
 800abd8:	6900      	ldr	r0, [r0, #16]
 800abda:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800abdc:	4621      	mov	r1, r4
 800abde:	4804      	ldr	r0, [pc, #16]	; (800abf0 <tcp_input_delayed_close.part.3+0x2c>)
 800abe0:	f7fe fba6 	bl	8009330 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800abe4:	4621      	mov	r1, r4
 800abe6:	2001      	movs	r0, #1
 800abe8:	f7fd f994 	bl	8007f14 <memp_free>
}
 800abec:	2001      	movs	r0, #1
 800abee:	bd10      	pop	{r4, pc}
 800abf0:	2000889c 	.word	0x2000889c

0800abf4 <tcp_parseopt.isra.1.part.2>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800abf4:	4b4c      	ldr	r3, [pc, #304]	; (800ad28 <tcp_parseopt.isra.1.part.2+0x134>)
 800abf6:	4a4d      	ldr	r2, [pc, #308]	; (800ad2c <tcp_parseopt.isra.1.part.2+0x138>)
 800abf8:	494d      	ldr	r1, [pc, #308]	; (800ad30 <tcp_parseopt.isra.1.part.2+0x13c>)
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800abfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800abfe:	881e      	ldrh	r6, [r3, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ac00:	4b4c      	ldr	r3, [pc, #304]	; (800ad34 <tcp_parseopt.isra.1.part.2+0x140>)
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac02:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800ad38 <tcp_parseopt.isra.1.part.2+0x144>
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ac06:	6815      	ldr	r5, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ac08:	f8d3 c000 	ldr.w	ip, [r3]
 800ac0c:	f8b1 e000 	ldrh.w	lr, [r1]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac10:	2300      	movs	r3, #0
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ac12:	4698      	mov	r8, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac14:	b2f7      	uxtb	r7, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac16:	f8a9 3000 	strh.w	r3, [r9]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	d037      	beq.n	800ac90 <tcp_parseopt.isra.1.part.2+0x9c>
 800ac20:	1c53      	adds	r3, r2, #1
 800ac22:	f102 0414 	add.w	r4, r2, #20
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	4464      	add	r4, ip
    return tcphdr_opt2[idx];
 800ac2a:	1bd1      	subs	r1, r2, r7
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac2c:	4572      	cmp	r2, lr
    return tcphdr_opt2[idx];
 800ac2e:	b2c9      	uxtb	r1, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac30:	d275      	bcs.n	800ad1e <tcp_parseopt.isra.1.part.2+0x12a>
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ac32:	4296      	cmp	r6, r2
 800ac34:	d840      	bhi.n	800acb8 <tcp_parseopt.isra.1.part.2+0xc4>
    return tcphdr_opt2[idx];
 800ac36:	5c69      	ldrb	r1, [r5, r1]
      u8_t opt = tcp_getoptbyte();
      switch (opt) {
 800ac38:	2901      	cmp	r1, #1
 800ac3a:	d040      	beq.n	800acbe <tcp_parseopt.isra.1.part.2+0xca>
 800ac3c:	d346      	bcc.n	800accc <tcp_parseopt.isra.1.part.2+0xd8>
 800ac3e:	2902      	cmp	r1, #2
 800ac40:	d148      	bne.n	800acd4 <tcp_parseopt.isra.1.part.2+0xe0>
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ac42:	429e      	cmp	r6, r3
 800ac44:	d832      	bhi.n	800acac <tcp_parseopt.isra.1.part.2+0xb8>
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac46:	1bda      	subs	r2, r3, r7
    return tcphdr_opt2[idx];
 800ac48:	b2d2      	uxtb	r2, r2
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac4a:	3301      	adds	r3, #1
    return tcphdr_opt2[idx];
 800ac4c:	5caa      	ldrb	r2, [r5, r2]
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac4e:	b29b      	uxth	r3, r3
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ac50:	2a04      	cmp	r2, #4
 800ac52:	d13b      	bne.n	800accc <tcp_parseopt.isra.1.part.2+0xd8>
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	4572      	cmp	r2, lr
 800ac58:	da38      	bge.n	800accc <tcp_parseopt.isra.1.part.2+0xd8>
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ac5a:	2d00      	cmp	r5, #0
 800ac5c:	d04d      	beq.n	800acfa <tcp_parseopt.isra.1.part.2+0x106>
 800ac5e:	429e      	cmp	r6, r3
 800ac60:	d855      	bhi.n	800ad0e <tcp_parseopt.isra.1.part.2+0x11a>
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac62:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800ac64:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac66:	b292      	uxth	r2, r2
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800ac68:	5ceb      	ldrb	r3, [r5, r3]
 800ac6a:	0219      	lsls	r1, r3, #8
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ac6c:	42b2      	cmp	r2, r6
 800ac6e:	d348      	bcc.n	800ad02 <tcp_parseopt.isra.1.part.2+0x10e>
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac70:	1bd3      	subs	r3, r2, r7
    return tcphdr_opt2[idx];
 800ac72:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac74:	3201      	adds	r2, #1
    return tcphdr_opt2[idx];
 800ac76:	5ceb      	ldrb	r3, [r5, r3]
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ac78:	b292      	uxth	r2, r2
        mss |= tcp_getoptbyte();
 800ac7a:	430b      	orrs	r3, r1
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ac7c:	1e59      	subs	r1, r3, #1
 800ac7e:	f5b1 7f34 	cmp.w	r1, #720	; 0x2d0
 800ac82:	bf28      	it	cs
 800ac84:	f44f 7334 	movcs.w	r3, #720	; 0x2d0
 800ac88:	8003      	strh	r3, [r0, #0]
 800ac8a:	4690      	mov	r8, r2
 800ac8c:	2d00      	cmp	r5, #0
 800ac8e:	d1c7      	bne.n	800ac20 <tcp_parseopt.isra.1.part.2+0x2c>
 800ac90:	f102 0113 	add.w	r1, r2, #19
 800ac94:	4461      	add	r1, ip
    return opts[tcp_optidx++];
 800ac96:	1c53      	adds	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac98:	4572      	cmp	r2, lr
    return opts[tcp_optidx++];
 800ac9a:	b29b      	uxth	r3, r3
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac9c:	d23f      	bcs.n	800ad1e <tcp_parseopt.isra.1.part.2+0x12a>
      switch (opt) {
 800ac9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aca2:	2c01      	cmp	r4, #1
 800aca4:	d038      	beq.n	800ad18 <tcp_parseopt.isra.1.part.2+0x124>
 800aca6:	d311      	bcc.n	800accc <tcp_parseopt.isra.1.part.2+0xd8>
 800aca8:	2c02      	cmp	r4, #2
 800acaa:	d120      	bne.n	800acee <tcp_parseopt.isra.1.part.2+0xfa>
    return opts[tcp_optidx++];
 800acac:	eb0c 0203 	add.w	r2, ip, r3
 800acb0:	3301      	adds	r3, #1
 800acb2:	7d12      	ldrb	r2, [r2, #20]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	e7cb      	b.n	800ac50 <tcp_parseopt.isra.1.part.2+0x5c>
 800acb8:	7821      	ldrb	r1, [r4, #0]
      switch (opt) {
 800acba:	2901      	cmp	r1, #1
 800acbc:	d1be      	bne.n	800ac3c <tcp_parseopt.isra.1.part.2+0x48>
 800acbe:	3201      	adds	r2, #1
 800acc0:	1c59      	adds	r1, r3, #1
 800acc2:	4698      	mov	r8, r3
 800acc4:	b292      	uxth	r2, r2
 800acc6:	3401      	adds	r4, #1
 800acc8:	b28b      	uxth	r3, r1
 800acca:	e7ae      	b.n	800ac2a <tcp_parseopt.isra.1.part.2+0x36>
 800accc:	f8a9 3000 	strh.w	r3, [r9]
 800acd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800acd4:	429e      	cmp	r6, r3
 800acd6:	d80a      	bhi.n	800acee <tcp_parseopt.isra.1.part.2+0xfa>
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800acd8:	1bd9      	subs	r1, r3, r7
    return tcphdr_opt2[idx];
 800acda:	b2c9      	uxtb	r1, r1
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800acdc:	3301      	adds	r3, #1
    return tcphdr_opt2[idx];
 800acde:	5c69      	ldrb	r1, [r5, r1]
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ace0:	b29b      	uxth	r3, r3
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
        if (data < 2) {
 800ace2:	2901      	cmp	r1, #1
 800ace4:	d9f2      	bls.n	800accc <tcp_parseopt.isra.1.part.2+0xd8>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800ace6:	440a      	add	r2, r1
 800ace8:	b292      	uxth	r2, r2
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800acea:	4690      	mov	r8, r2
 800acec:	e7ce      	b.n	800ac8c <tcp_parseopt.isra.1.part.2+0x98>
    return opts[tcp_optidx++];
 800acee:	eb0c 0103 	add.w	r1, ip, r3
 800acf2:	3301      	adds	r3, #1
 800acf4:	7d09      	ldrb	r1, [r1, #20]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	e7f3      	b.n	800ace2 <tcp_parseopt.isra.1.part.2+0xee>
 800acfa:	4463      	add	r3, ip
 800acfc:	b292      	uxth	r2, r2
        mss = (tcp_getoptbyte() << 8);
 800acfe:	7d1b      	ldrb	r3, [r3, #20]
 800ad00:	0219      	lsls	r1, r3, #8
    return opts[tcp_optidx++];
 800ad02:	eb0c 0302 	add.w	r3, ip, r2
 800ad06:	3201      	adds	r2, #1
 800ad08:	7d1b      	ldrb	r3, [r3, #20]
 800ad0a:	b292      	uxth	r2, r2
 800ad0c:	e7b5      	b.n	800ac7a <tcp_parseopt.isra.1.part.2+0x86>
 800ad0e:	4463      	add	r3, ip
 800ad10:	b292      	uxth	r2, r2
        mss = (tcp_getoptbyte() << 8);
 800ad12:	7d1b      	ldrb	r3, [r3, #20]
 800ad14:	0219      	lsls	r1, r3, #8
 800ad16:	e7a9      	b.n	800ac6c <tcp_parseopt.isra.1.part.2+0x78>
      switch (opt) {
 800ad18:	4698      	mov	r8, r3
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	e7bb      	b.n	800ac96 <tcp_parseopt.isra.1.part.2+0xa2>
 800ad1e:	f8a9 8000 	strh.w	r8, [r9]
 800ad22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad26:	bf00      	nop
 800ad28:	20003f0c 	.word	0x20003f0c
 800ad2c:	20003f10 	.word	0x20003f10
 800ad30:	20003f14 	.word	0x20003f14
 800ad34:	20003f08 	.word	0x20003f08
 800ad38:	20003f04 	.word	0x20003f04

0800ad3c <tcp_input>:
{
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (p->len < TCP_HLEN) {
 800ad40:	8943      	ldrh	r3, [r0, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800ad42:	4db2      	ldr	r5, [pc, #712]	; (800b00c <tcp_input+0x2d0>)
 800ad44:	6842      	ldr	r2, [r0, #4]
 800ad46:	602a      	str	r2, [r5, #0]
  if (p->len < TCP_HLEN) {
 800ad48:	2b13      	cmp	r3, #19
{
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	4604      	mov	r4, r0
  if (p->len < TCP_HLEN) {
 800ad4e:	d906      	bls.n	800ad5e <tcp_input+0x22>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ad50:	4eaf      	ldr	r6, [pc, #700]	; (800b010 <tcp_input+0x2d4>)
 800ad52:	6831      	ldr	r1, [r6, #0]
 800ad54:	6970      	ldr	r0, [r6, #20]
 800ad56:	f7fc f989 	bl	800706c <ip4_addr_isbroadcast_u32>
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	b128      	cbz	r0, 800ad6a <tcp_input+0x2e>
  pbuf_free(p);
 800ad5e:	4620      	mov	r0, r4
}
 800ad60:	b005      	add	sp, #20
 800ad62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800ad66:	f7fd bab5 	b.w	80082d4 <pbuf_free>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ad6a:	6973      	ldr	r3, [r6, #20]
 800ad6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ad70:	2be0      	cmp	r3, #224	; 0xe0
 800ad72:	d0f4      	beq.n	800ad5e <tcp_input+0x22>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	8998      	ldrh	r0, [r3, #12]
 800ad78:	f7fa fd9a 	bl	80058b0 <lwip_htons>
 800ad7c:	0a80      	lsrs	r0, r0, #10
 800ad7e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ad82:	2813      	cmp	r0, #19
 800ad84:	d9eb      	bls.n	800ad5e <tcp_input+0x22>
 800ad86:	8923      	ldrh	r3, [r4, #8]
 800ad88:	b280      	uxth	r0, r0
 800ad8a:	4283      	cmp	r3, r0
 800ad8c:	d3e7      	bcc.n	800ad5e <tcp_input+0x22>
  if (p->len >= hdrlen_bytes) {
 800ad8e:	8962      	ldrh	r2, [r4, #10]
  tcphdr_opt2 = NULL;
 800ad90:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800b050 <tcp_input+0x314>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800ad94:	499f      	ldr	r1, [pc, #636]	; (800b014 <tcp_input+0x2d8>)
  tcphdr_opt2 = NULL;
 800ad96:	f8c8 7000 	str.w	r7, [r8]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800ad9a:	f1a0 0314 	sub.w	r3, r0, #20
 800ad9e:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800ada0:	4282      	cmp	r2, r0
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800ada2:	800b      	strh	r3, [r1, #0]
  if (p->len >= hdrlen_bytes) {
 800ada4:	f080 819f 	bcs.w	800b0e6 <tcp_input+0x3aa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 83ac 	beq.w	800b508 <tcp_input+0x7cc>
    pbuf_header(p, -TCP_HLEN);
 800adb0:	f06f 0113 	mvn.w	r1, #19
 800adb4:	4620      	mov	r0, r4
 800adb6:	f7fd f9d9 	bl	800816c <pbuf_header>
    tcphdr_opt1len = p->len;
 800adba:	8963      	ldrh	r3, [r4, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800adbc:	4a95      	ldr	r2, [pc, #596]	; (800b014 <tcp_input+0x2d8>)
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800adbe:	4259      	negs	r1, r3
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800adc0:	8817      	ldrh	r7, [r2, #0]
    tcphdr_opt1len = p->len;
 800adc2:	4a95      	ldr	r2, [pc, #596]	; (800b018 <tcp_input+0x2dc>)
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800adc4:	b209      	sxth	r1, r1
 800adc6:	4620      	mov	r0, r4
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800adc8:	1aff      	subs	r7, r7, r3
    tcphdr_opt1len = p->len;
 800adca:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800adcc:	f7fd f9ce 	bl	800816c <pbuf_header>
    if (opt2len > p->next->len) {
 800add0:	6820      	ldr	r0, [r4, #0]
 800add2:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800add4:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800add6:	42bb      	cmp	r3, r7
 800add8:	d3c1      	bcc.n	800ad5e <tcp_input+0x22>
    pbuf_header(p->next, -(s16_t)opt2len);
 800adda:	4279      	negs	r1, r7
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800addc:	6843      	ldr	r3, [r0, #4]
 800adde:	f8c8 3000 	str.w	r3, [r8]
    pbuf_header(p->next, -(s16_t)opt2len);
 800ade2:	b209      	sxth	r1, r1
 800ade4:	f7fd f9c2 	bl	800816c <pbuf_header>
    p->tot_len -= opt2len;
 800ade8:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800adea:	8962      	ldrh	r2, [r4, #10]
    p->tot_len -= opt2len;
 800adec:	1bdb      	subs	r3, r3, r7
 800adee:	b29b      	uxth	r3, r3
 800adf0:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	f040 8380 	bne.w	800b4f8 <tcp_input+0x7bc>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	8912      	ldrh	r2, [r2, #8]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d005      	beq.n	800ae0c <tcp_input+0xd0>
 800ae00:	4b86      	ldr	r3, [pc, #536]	; (800b01c <tcp_input+0x2e0>)
 800ae02:	4987      	ldr	r1, [pc, #540]	; (800b020 <tcp_input+0x2e4>)
 800ae04:	4887      	ldr	r0, [pc, #540]	; (800b024 <tcp_input+0x2e8>)
 800ae06:	22d0      	movs	r2, #208	; 0xd0
 800ae08:	f003 f8e8 	bl	800dfdc <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ae0c:	682f      	ldr	r7, [r5, #0]
 800ae0e:	8838      	ldrh	r0, [r7, #0]
 800ae10:	f7fa fd4e 	bl	80058b0 <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae14:	f8d5 8000 	ldr.w	r8, [r5]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ae18:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae1a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800ae1e:	f7fa fd47 	bl	80058b0 <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae22:	682f      	ldr	r7, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ae24:	f8a8 0002 	strh.w	r0, [r8, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fa fd45 	bl	80058b8 <lwip_htonl>
 800ae2e:	4b7e      	ldr	r3, [pc, #504]	; (800b028 <tcp_input+0x2ec>)
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae30:	f8d5 8000 	ldr.w	r8, [r5]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae38:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ae3c:	f7fa fd3c 	bl	80058b8 <lwip_htonl>
 800ae40:	4b7a      	ldr	r3, [pc, #488]	; (800b02c <tcp_input+0x2f0>)
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ae42:	682f      	ldr	r7, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ae44:	6018      	str	r0, [r3, #0]
 800ae46:	f8c8 0008 	str.w	r0, [r8, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ae4a:	89f8      	ldrh	r0, [r7, #14]
 800ae4c:	f7fa fd30 	bl	80058b0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800ae50:	682b      	ldr	r3, [r5, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ae52:	81f8      	strh	r0, [r7, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ae54:	8998      	ldrh	r0, [r3, #12]
 800ae56:	f7fa fd2b 	bl	80058b0 <lwip_htons>
 800ae5a:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800ae5c:	f010 0303 	ands.w	r3, r0, #3
 800ae60:	8922      	ldrh	r2, [r4, #8]
 800ae62:	bf18      	it	ne
 800ae64:	2301      	movne	r3, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	4a71      	ldr	r2, [pc, #452]	; (800b030 <tcp_input+0x2f4>)
 800ae6a:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae6c:	4b71      	ldr	r3, [pc, #452]	; (800b034 <tcp_input+0x2f8>)
 800ae6e:	681f      	ldr	r7, [r3, #0]
  flags = TCPH_FLAGS(tcphdr);
 800ae70:	4b71      	ldr	r3, [pc, #452]	; (800b038 <tcp_input+0x2fc>)
 800ae72:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ae76:	7018      	strb	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae78:	2f00      	cmp	r7, #0
 800ae7a:	f000 80ba 	beq.w	800aff2 <tcp_input+0x2b6>
 800ae7e:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ae82:	f8df a198 	ldr.w	sl, [pc, #408]	; 800b01c <tcp_input+0x2e0>
 800ae86:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800b054 <tcp_input+0x318>
 800ae8a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800b024 <tcp_input+0x2e8>
 800ae8e:	e010      	b.n	800aeb2 <tcp_input+0x176>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ae90:	2b0a      	cmp	r3, #10
 800ae92:	f000 80a6 	beq.w	800afe2 <tcp_input+0x2a6>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	f000 809c 	beq.w	800afd4 <tcp_input+0x298>
    if (pcb->remote_port == tcphdr->src &&
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	8b39      	ldrh	r1, [r7, #24]
 800aea0:	881a      	ldrh	r2, [r3, #0]
 800aea2:	4291      	cmp	r1, r2
 800aea4:	d010      	beq.n	800aec8 <tcp_input+0x18c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	46b8      	mov	r8, r7
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 80a1 	beq.w	800aff2 <tcp_input+0x2b6>
 800aeb0:	461f      	mov	r7, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aeb2:	7d3b      	ldrb	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1eb      	bne.n	800ae90 <tcp_input+0x154>
 800aeb8:	4653      	mov	r3, sl
 800aeba:	22e2      	movs	r2, #226	; 0xe2
 800aebc:	4659      	mov	r1, fp
 800aebe:	4648      	mov	r0, r9
 800aec0:	f003 f88c 	bl	800dfdc <iprintf>
 800aec4:	7d3b      	ldrb	r3, [r7, #20]
 800aec6:	e7e3      	b.n	800ae90 <tcp_input+0x154>
    if (pcb->remote_port == tcphdr->src &&
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	8afa      	ldrh	r2, [r7, #22]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d1ea      	bne.n	800aea6 <tcp_input+0x16a>
        pcb->local_port == tcphdr->dest &&
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6933      	ldr	r3, [r6, #16]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d1e6      	bne.n	800aea6 <tcp_input+0x16a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	6973      	ldr	r3, [r6, #20]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d1e2      	bne.n	800aea6 <tcp_input+0x16a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	42bb      	cmp	r3, r7
 800aee4:	f000 8432 	beq.w	800b74c <tcp_input+0xa10>
      if (prev != NULL) {
 800aee8:	f1b8 0f00 	cmp.w	r8, #0
 800aeec:	d00a      	beq.n	800af04 <tcp_input+0x1c8>
        pcb->next = tcp_active_pcbs;
 800aeee:	4a51      	ldr	r2, [pc, #324]	; (800b034 <tcp_input+0x2f8>)
        prev->next = pcb->next;
 800aef0:	f8c8 300c 	str.w	r3, [r8, #12]
        tcp_active_pcbs = pcb;
 800aef4:	4b4f      	ldr	r3, [pc, #316]	; (800b034 <tcp_input+0x2f8>)
        pcb->next = tcp_active_pcbs;
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	60fa      	str	r2, [r7, #12]
        tcp_active_pcbs = pcb;
 800aefa:	601f      	str	r7, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	42bb      	cmp	r3, r7
 800af00:	f000 8431 	beq.w	800b766 <tcp_input+0xa2a>
    if (flags & TCP_PSH) {
 800af04:	4b4c      	ldr	r3, [pc, #304]	; (800b038 <tcp_input+0x2fc>)
    inseg.next = NULL;
 800af06:	4e4d      	ldr	r6, [pc, #308]	; (800b03c <tcp_input+0x300>)
    if (flags & TCP_PSH) {
 800af08:	f893 b000 	ldrb.w	fp, [r3]
    inseg.len = p->tot_len;
 800af0c:	8923      	ldrh	r3, [r4, #8]
    recv_data = NULL;
 800af0e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 800b058 <tcp_input+0x31c>
    recv_flags = 0;
 800af12:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800b05c <tcp_input+0x320>
    recv_acked = 0;
 800af16:	f8df a148 	ldr.w	sl, [pc, #328]	; 800b060 <tcp_input+0x324>
    inseg.len = p->tot_len;
 800af1a:	8133      	strh	r3, [r6, #8]
    inseg.tcphdr = tcphdr;
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	60f3      	str	r3, [r6, #12]
    if (flags & TCP_PSH) {
 800af20:	f01b 0f08 	tst.w	fp, #8
    inseg.next = NULL;
 800af24:	f04f 0300 	mov.w	r3, #0
    inseg.p = p;
 800af28:	6074      	str	r4, [r6, #4]
    inseg.next = NULL;
 800af2a:	6033      	str	r3, [r6, #0]
    recv_data = NULL;
 800af2c:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800af30:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800af34:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800af38:	d003      	beq.n	800af42 <tcp_input+0x206>
      p->flags |= PBUF_FLAG_PUSH;
 800af3a:	7b63      	ldrb	r3, [r4, #13]
 800af3c:	f043 0301 	orr.w	r3, r3, #1
 800af40:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 800af42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af44:	b17b      	cbz	r3, 800af66 <tcp_input+0x22a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800af46:	4638      	mov	r0, r7
 800af48:	f7fe fbae 	bl	80096a8 <tcp_process_refused_data>
 800af4c:	300d      	adds	r0, #13
 800af4e:	f000 80d1 	beq.w	800b0f4 <tcp_input+0x3b8>
 800af52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af54:	b123      	cbz	r3, 800af60 <tcp_input+0x224>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800af56:	4b36      	ldr	r3, [pc, #216]	; (800b030 <tcp_input+0x2f4>)
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f040 80ca 	bne.w	800b0f4 <tcp_input+0x3b8>
 800af60:	4b35      	ldr	r3, [pc, #212]	; (800b038 <tcp_input+0x2fc>)
 800af62:	f893 b000 	ldrb.w	fp, [r3]
    tcp_input_pcb = pcb;
 800af66:	4c36      	ldr	r4, [pc, #216]	; (800b040 <tcp_input+0x304>)
  if (flags & TCP_RST) {
 800af68:	f01b 0f04 	tst.w	fp, #4
    tcp_input_pcb = pcb;
 800af6c:	6027      	str	r7, [r4, #0]
  if (flags & TCP_RST) {
 800af6e:	f000 80c7 	beq.w	800b100 <tcp_input+0x3c4>
    if (pcb->state == SYN_SENT) {
 800af72:	7d3a      	ldrb	r2, [r7, #20]
 800af74:	2a02      	cmp	r2, #2
 800af76:	f000 82e6 	beq.w	800b546 <tcp_input+0x80a>
      if (seqno == pcb->rcv_nxt) {
 800af7a:	4b2b      	ldr	r3, [pc, #172]	; (800b028 <tcp_input+0x2ec>)
 800af7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4299      	cmp	r1, r3
 800af82:	f000 82f8 	beq.w	800b576 <tcp_input+0x83a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af86:	1a5b      	subs	r3, r3, r1
 800af88:	d404      	bmi.n	800af94 <tcp_input+0x258>
 800af8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af8c:	1a9b      	subs	r3, r3, r2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f340 80bf 	ble.w	800b112 <tcp_input+0x3d6>
      if (recv_flags & TF_RESET) {
 800af94:	f899 3000 	ldrb.w	r3, [r9]
 800af98:	071d      	lsls	r5, r3, #28
 800af9a:	f140 80bf 	bpl.w	800b11c <tcp_input+0x3e0>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800af9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa2:	b11b      	cbz	r3, 800afac <tcp_input+0x270>
 800afa4:	f06f 010d 	mvn.w	r1, #13
 800afa8:	6938      	ldr	r0, [r7, #16]
 800afaa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800afac:	4639      	mov	r1, r7
 800afae:	4821      	ldr	r0, [pc, #132]	; (800b034 <tcp_input+0x2f8>)
 800afb0:	f7fe f9be 	bl	8009330 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800afb4:	4639      	mov	r1, r7
 800afb6:	2001      	movs	r0, #1
 800afb8:	f7fc ffac 	bl	8007f14 <memp_free>
    if (inseg.p != NULL)
 800afbc:	6870      	ldr	r0, [r6, #4]
    tcp_input_pcb = NULL;
 800afbe:	2500      	movs	r5, #0
 800afc0:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800afc2:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL)
 800afc6:	b110      	cbz	r0, 800afce <tcp_input+0x292>
      pbuf_free(inseg.p);
 800afc8:	f7fd f984 	bl	80082d4 <pbuf_free>
      inseg.p = NULL;
 800afcc:	6075      	str	r5, [r6, #4]
}
 800afce:	b005      	add	sp, #20
 800afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800afd4:	4653      	mov	r3, sl
 800afd6:	22e4      	movs	r2, #228	; 0xe4
 800afd8:	491a      	ldr	r1, [pc, #104]	; (800b044 <tcp_input+0x308>)
 800afda:	4648      	mov	r0, r9
 800afdc:	f002 fffe 	bl	800dfdc <iprintf>
 800afe0:	e75c      	b.n	800ae9c <tcp_input+0x160>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800afe2:	4653      	mov	r3, sl
 800afe4:	22e3      	movs	r2, #227	; 0xe3
 800afe6:	4918      	ldr	r1, [pc, #96]	; (800b048 <tcp_input+0x30c>)
 800afe8:	4648      	mov	r0, r9
 800afea:	f002 fff7 	bl	800dfdc <iprintf>
 800afee:	7d3b      	ldrb	r3, [r7, #20]
 800aff0:	e751      	b.n	800ae96 <tcp_input+0x15a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aff2:	4b16      	ldr	r3, [pc, #88]	; (800b04c <tcp_input+0x310>)
 800aff4:	681f      	ldr	r7, [r3, #0]
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	f000 80dd 	beq.w	800b1b6 <tcp_input+0x47a>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800affc:	f8df a01c 	ldr.w	sl, [pc, #28]	; 800b01c <tcp_input+0x2e0>
 800b000:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800b064 <tcp_input+0x328>
 800b004:	f8df 801c 	ldr.w	r8, [pc, #28]	; 800b024 <tcp_input+0x2e8>
 800b008:	e032      	b.n	800b070 <tcp_input+0x334>
 800b00a:	bf00      	nop
 800b00c:	20003f08 	.word	0x20003f08
 800b010:	20004274 	.word	0x20004274
 800b014:	20003f14 	.word	0x20003f14
 800b018:	20003f0c 	.word	0x20003f0c
 800b01c:	080120ac 	.word	0x080120ac
 800b020:	08011f00 	.word	0x08011f00
 800b024:	0800e670 	.word	0x0800e670
 800b028:	20003f00 	.word	0x20003f00
 800b02c:	20003edc 	.word	0x20003edc
 800b030:	20003f16 	.word	0x20003f16
 800b034:	2000889c 	.word	0x2000889c
 800b038:	20003ee0 	.word	0x20003ee0
 800b03c:	20003ee4 	.word	0x20003ee4
 800b040:	200088b0 	.word	0x200088b0
 800b044:	08011f74 	.word	0x08011f74
 800b048:	08011f48 	.word	0x08011f48
 800b04c:	200088ac 	.word	0x200088ac
 800b050:	20003f10 	.word	0x20003f10
 800b054:	08011f20 	.word	0x08011f20
 800b058:	20003ef8 	.word	0x20003ef8
 800b05c:	20003efc 	.word	0x20003efc
 800b060:	20003ef4 	.word	0x20003ef4
 800b064:	08011ff4 	.word	0x08011ff4
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b068:	68ff      	ldr	r7, [r7, #12]
 800b06a:	2f00      	cmp	r7, #0
 800b06c:	f000 80a4 	beq.w	800b1b8 <tcp_input+0x47c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b070:	7d3b      	ldrb	r3, [r7, #20]
 800b072:	2b0a      	cmp	r3, #10
 800b074:	f04f 02fe 	mov.w	r2, #254	; 0xfe
 800b078:	4653      	mov	r3, sl
 800b07a:	4649      	mov	r1, r9
 800b07c:	4640      	mov	r0, r8
 800b07e:	d001      	beq.n	800b084 <tcp_input+0x348>
 800b080:	f002 ffac 	bl	800dfdc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800b084:	682a      	ldr	r2, [r5, #0]
 800b086:	8b3b      	ldrh	r3, [r7, #24]
 800b088:	8810      	ldrh	r0, [r2, #0]
 800b08a:	4298      	cmp	r0, r3
 800b08c:	d1ec      	bne.n	800b068 <tcp_input+0x32c>
          pcb->local_port == tcphdr->dest &&
 800b08e:	8afb      	ldrh	r3, [r7, #22]
      if (pcb->remote_port == tcphdr->src &&
 800b090:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800b094:	459e      	cmp	lr, r3
 800b096:	d1e7      	bne.n	800b068 <tcp_input+0x32c>
          pcb->local_port == tcphdr->dest &&
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	6933      	ldr	r3, [r6, #16]
 800b09c:	4299      	cmp	r1, r3
 800b09e:	d1e3      	bne.n	800b068 <tcp_input+0x32c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6973      	ldr	r3, [r6, #20]
 800b0a4:	4299      	cmp	r1, r3
 800b0a6:	d1df      	bne.n	800b068 <tcp_input+0x32c>
  if (flags & TCP_RST) {
 800b0a8:	4ba7      	ldr	r3, [pc, #668]	; (800b348 <tcp_input+0x60c>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	075e      	lsls	r6, r3, #29
 800b0ae:	f53f ae56 	bmi.w	800ad5e <tcp_input+0x22>
  if (flags & TCP_SYN) {
 800b0b2:	079d      	lsls	r5, r3, #30
 800b0b4:	f140 8334 	bpl.w	800b720 <tcp_input+0x9e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b0b8:	4ba4      	ldr	r3, [pc, #656]	; (800b34c <tcp_input+0x610>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	d404      	bmi.n	800b0cc <tcp_input+0x390>
 800b0c2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800b0c4:	1a5b      	subs	r3, r3, r1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f340 8355 	ble.w	800b776 <tcp_input+0xa3a>
  if ((tcplen > 0)) {
 800b0cc:	4ba0      	ldr	r3, [pc, #640]	; (800b350 <tcp_input+0x614>)
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f43f ae44 	beq.w	800ad5e <tcp_input+0x22>
    pcb->flags |= TF_ACK_NOW;
 800b0d6:	7ebb      	ldrb	r3, [r7, #26]
 800b0d8:	f043 0302 	orr.w	r3, r3, #2
 800b0dc:	76bb      	strb	r3, [r7, #26]
    tcp_output(pcb);
 800b0de:	4638      	mov	r0, r7
 800b0e0:	f001 f9aa 	bl	800c438 <tcp_output>
 800b0e4:	e63b      	b.n	800ad5e <tcp_input+0x22>
    tcphdr_opt1len = tcphdr_optlen;
 800b0e6:	4a9b      	ldr	r2, [pc, #620]	; (800b354 <tcp_input+0x618>)
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b0e8:	4241      	negs	r1, r0
 800b0ea:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800b0ec:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b0ee:	f7fd f83d 	bl	800816c <pbuf_header>
 800b0f2:	e68b      	b.n	800ae0c <tcp_input+0xd0>
        if (pcb->rcv_ann_wnd == 0) {
 800b0f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 81fa 	beq.w	800b4f0 <tcp_input+0x7b4>
 800b0fc:	4c96      	ldr	r4, [pc, #600]	; (800b358 <tcp_input+0x61c>)
 800b0fe:	e75d      	b.n	800afbc <tcp_input+0x280>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b100:	f01b 0202 	ands.w	r2, fp, #2
 800b104:	f000 80ea 	beq.w	800b2dc <tcp_input+0x5a0>
 800b108:	7d3b      	ldrb	r3, [r7, #20]
 800b10a:	3b02      	subs	r3, #2
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	f240 80e5 	bls.w	800b2dc <tcp_input+0x5a0>
      tcp_ack_now(pcb);
 800b112:	7ebb      	ldrb	r3, [r7, #26]
 800b114:	f043 0302 	orr.w	r3, r3, #2
 800b118:	76bb      	strb	r3, [r7, #26]
 800b11a:	e73b      	b.n	800af94 <tcp_input+0x258>
        if (recv_acked > 0) {
 800b11c:	f8ba 2000 	ldrh.w	r2, [sl]
 800b120:	b162      	cbz	r2, 800b13c <tcp_input+0x400>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b124:	b12b      	cbz	r3, 800b132 <tcp_input+0x3f6>
 800b126:	4639      	mov	r1, r7
 800b128:	6938      	ldr	r0, [r7, #16]
 800b12a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b12c:	300d      	adds	r0, #13
 800b12e:	f43f af45 	beq.w	800afbc <tcp_input+0x280>
          recv_acked = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	f8aa 3000 	strh.w	r3, [sl]
 800b138:	f899 3000 	ldrb.w	r3, [r9]
  if (recv_flags & TF_CLOSED) {
 800b13c:	06d8      	lsls	r0, r3, #27
 800b13e:	f100 8224 	bmi.w	800b58a <tcp_input+0x84e>
        if (recv_data != NULL) {
 800b142:	f8d8 3000 	ldr.w	r3, [r8]
 800b146:	b1fb      	cbz	r3, 800b188 <tcp_input+0x44c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b14a:	b133      	cbz	r3, 800b15a <tcp_input+0x41e>
 800b14c:	4b83      	ldr	r3, [pc, #524]	; (800b35c <tcp_input+0x620>)
 800b14e:	4984      	ldr	r1, [pc, #528]	; (800b360 <tcp_input+0x624>)
 800b150:	4884      	ldr	r0, [pc, #528]	; (800b364 <tcp_input+0x628>)
 800b152:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b156:	f002 ff41 	bl	800dfdc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b15a:	7ebb      	ldrb	r3, [r7, #26]
 800b15c:	f013 0310 	ands.w	r3, r3, #16
 800b160:	f040 822a 	bne.w	800b5b8 <tcp_input+0x87c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b164:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800b168:	2d00      	cmp	r5, #0
 800b16a:	f000 8234 	beq.w	800b5d6 <tcp_input+0x89a>
 800b16e:	f8d8 2000 	ldr.w	r2, [r8]
 800b172:	6938      	ldr	r0, [r7, #16]
 800b174:	4639      	mov	r1, r7
 800b176:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800b178:	f110 0f0d 	cmn.w	r0, #13
 800b17c:	f43f af1e 	beq.w	800afbc <tcp_input+0x280>
          if (err != ERR_OK) {
 800b180:	b110      	cbz	r0, 800b188 <tcp_input+0x44c>
            pcb->refused_data = recv_data;
 800b182:	f8d8 3000 	ldr.w	r3, [r8]
 800b186:	677b      	str	r3, [r7, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800b188:	f899 3000 	ldrb.w	r3, [r9]
 800b18c:	0699      	lsls	r1, r3, #26
 800b18e:	d507      	bpl.n	800b1a0 <tcp_input+0x464>
          if (pcb->refused_data != NULL) {
 800b190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8330 	beq.w	800b7f8 <tcp_input+0xabc>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b198:	7b5a      	ldrb	r2, [r3, #13]
 800b19a:	f042 0220 	orr.w	r2, r2, #32
 800b19e:	735a      	strb	r2, [r3, #13]
  if (recv_flags & TF_CLOSED) {
 800b1a0:	f899 3000 	ldrb.w	r3, [r9]
        tcp_input_pcb = NULL;
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	6022      	str	r2, [r4, #0]
  if (recv_flags & TF_CLOSED) {
 800b1a8:	06da      	lsls	r2, r3, #27
 800b1aa:	f100 820d 	bmi.w	800b5c8 <tcp_input+0x88c>
        tcp_output(pcb);
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f001 f942 	bl	800c438 <tcp_output>
 800b1b4:	e702      	b.n	800afbc <tcp_input+0x280>
 800b1b6:	682a      	ldr	r2, [r5, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b1b8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800b37c <tcp_input+0x640>
 800b1bc:	f8d9 8000 	ldr.w	r8, [r9]
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	f000 81a8 	beq.w	800b518 <tcp_input+0x7dc>
 800b1c8:	8851      	ldrh	r1, [r2, #2]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b1ca:	f8d6 c014 	ldr.w	ip, [r6, #20]
 800b1ce:	4647      	mov	r7, r8
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4696      	mov	lr, r2
 800b1d4:	e005      	b.n	800b1e2 <tcp_input+0x4a6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	463b      	mov	r3, r7
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f000 819b 	beq.w	800b516 <tcp_input+0x7da>
 800b1e0:	4607      	mov	r7, r0
      if (lpcb->local_port == tcphdr->dest) {
 800b1e2:	8af8      	ldrh	r0, [r7, #22]
 800b1e4:	4288      	cmp	r0, r1
 800b1e6:	d1f6      	bne.n	800b1d6 <tcp_input+0x49a>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	4562      	cmp	r2, ip
 800b1ec:	d001      	beq.n	800b1f2 <tcp_input+0x4b6>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	d1f1      	bne.n	800b1d6 <tcp_input+0x49a>
 800b1f2:	4672      	mov	r2, lr
      if (prev != NULL) {
 800b1f4:	b12b      	cbz	r3, 800b202 <tcp_input+0x4c6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b1f6:	68f9      	ldr	r1, [r7, #12]
 800b1f8:	60d9      	str	r1, [r3, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b1fa:	f8c9 7000 	str.w	r7, [r9]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b1fe:	f8c7 800c 	str.w	r8, [r7, #12]
  if (flags & TCP_RST) {
 800b202:	4b51      	ldr	r3, [pc, #324]	; (800b348 <tcp_input+0x60c>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	0759      	lsls	r1, r3, #29
 800b208:	f53f ada9 	bmi.w	800ad5e <tcp_input+0x22>
  if (flags & TCP_ACK) {
 800b20c:	06d9      	lsls	r1, r3, #27
 800b20e:	f100 81c3 	bmi.w	800b598 <tcp_input+0x85c>
  } else if (flags & TCP_SYN) {
 800b212:	0798      	lsls	r0, r3, #30
 800b214:	f57f ada3 	bpl.w	800ad5e <tcp_input+0x22>
    npcb = tcp_alloc(pcb->prio);
 800b218:	7d78      	ldrb	r0, [r7, #21]
 800b21a:	f7fe fc11 	bl	8009a40 <tcp_alloc>
    if (npcb == NULL) {
 800b21e:	4680      	mov	r8, r0
 800b220:	2800      	cmp	r0, #0
 800b222:	f000 824e 	beq.w	800b6c2 <tcp_input+0x986>
    npcb->remote_port = tcphdr->src;
 800b226:	6829      	ldr	r1, [r5, #0]
    npcb->rcv_nxt = seqno + 1;
 800b228:	4b48      	ldr	r3, [pc, #288]	; (800b34c <tcp_input+0x610>)
    npcb->remote_port = tcphdr->src;
 800b22a:	f891 e001 	ldrb.w	lr, [r1, #1]
 800b22e:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800b230:	681b      	ldr	r3, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b232:	6931      	ldr	r1, [r6, #16]
    npcb->remote_port = tcphdr->src;
 800b234:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
    npcb->rcv_nxt = seqno + 1;
 800b238:	3301      	adds	r3, #1
    npcb->local_port = pcb->local_port;
 800b23a:	f8b7 e016 	ldrh.w	lr, [r7, #22]
    npcb->remote_port = tcphdr->src;
 800b23e:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b240:	6972      	ldr	r2, [r6, #20]
 800b242:	6002      	str	r2, [r0, #0]
    npcb->state = SYN_RCVD;
 800b244:	2603      	movs	r6, #3
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b246:	6041      	str	r1, [r0, #4]
    npcb->local_port = pcb->local_port;
 800b248:	f8a0 e016 	strh.w	lr, [r0, #22]
    npcb->rcv_nxt = seqno + 1;
 800b24c:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b24e:	62c3      	str	r3, [r0, #44]	; 0x2c
    npcb->state = SYN_RCVD;
 800b250:	7506      	strb	r6, [r0, #20]
    iss = tcp_next_iss(npcb);
 800b252:	f7fe feaf 	bl	8009fb4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b256:	4b3d      	ldr	r3, [pc, #244]	; (800b34c <tcp_input+0x610>)
 800b258:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f8c8 3010 	str.w	r3, [r8, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b260:	3a01      	subs	r2, #1
 800b262:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
    npcb->snd_wl2 = iss;
 800b266:	f8c8 0054 	str.w	r0, [r8, #84]	; 0x54
    npcb->snd_nxt = iss;
 800b26a:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
    npcb->lastack = iss;
 800b26e:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b272:	f8c8 0058 	str.w	r0, [r8, #88]	; 0x58
    npcb->listener = pcb;
 800b276:	f8c8 7078 	str.w	r7, [r8, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b27a:	7a3b      	ldrb	r3, [r7, #8]
    TCP_REG_ACTIVE(npcb);
 800b27c:	4a3a      	ldr	r2, [pc, #232]	; (800b368 <tcp_input+0x62c>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b27e:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 800b282:	6812      	ldr	r2, [r2, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b284:	f888 3008 	strb.w	r3, [r8, #8]
    TCP_REG_ACTIVE(npcb);
 800b288:	4b37      	ldr	r3, [pc, #220]	; (800b368 <tcp_input+0x62c>)
 800b28a:	f8c8 200c 	str.w	r2, [r8, #12]
 800b28e:	f8c3 8000 	str.w	r8, [r3]
 800b292:	f001 fd3d 	bl	800cd10 <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 800b296:	4b35      	ldr	r3, [pc, #212]	; (800b36c <tcp_input+0x630>)
    TCP_REG_ACTIVE(npcb);
 800b298:	4a35      	ldr	r2, [pc, #212]	; (800b370 <tcp_input+0x634>)
  if (tcphdr_optlen != 0) {
 800b29a:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 800b29c:	2101      	movs	r1, #1
 800b29e:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 800b2a0:	b11b      	cbz	r3, 800b2aa <tcp_input+0x56e>
 800b2a2:	f108 0032 	add.w	r0, r8, #50	; 0x32
 800b2a6:	f7ff fca5 	bl	800abf4 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 800b2aa:	682b      	ldr	r3, [r5, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2ac:	f8b8 0032 	ldrh.w	r0, [r8, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800b2b0:	89db      	ldrh	r3, [r3, #14]
 800b2b2:	f8a8 305c 	strh.w	r3, [r8, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2b6:	f108 0104 	add.w	r1, r8, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b2ba:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2be:	f7fe fe85 	bl	8009fcc <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b2c2:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2c4:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	f000 ff43 	bl	800c154 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f040 8220 	bne.w	800b714 <tcp_input+0x9d8>
    tcp_output(npcb);
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	f001 f8af 	bl	800c438 <tcp_output>
 800b2da:	e540      	b.n	800ad5e <tcp_input+0x22>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b2dc:	7ebb      	ldrb	r3, [r7, #26]
 800b2de:	06d9      	lsls	r1, r3, #27
 800b2e0:	d402      	bmi.n	800b2e8 <tcp_input+0x5ac>
    pcb->tmr = tcp_ticks;
 800b2e2:	4b24      	ldr	r3, [pc, #144]	; (800b374 <tcp_input+0x638>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	623b      	str	r3, [r7, #32]
  if (tcphdr_optlen != 0) {
 800b2e8:	4b20      	ldr	r3, [pc, #128]	; (800b36c <tcp_input+0x630>)
 800b2ea:	881b      	ldrh	r3, [r3, #0]
  pcb->keep_cnt_sent = 0;
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	f887 1096 	strb.w	r1, [r7, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f040 8138 	bne.w	800b568 <tcp_input+0x82c>
  switch (pcb->state) {
 800b2f8:	7d3b      	ldrb	r3, [r7, #20]
 800b2fa:	3b02      	subs	r3, #2
 800b2fc:	2b07      	cmp	r3, #7
 800b2fe:	f63f ae49 	bhi.w	800af94 <tcp_input+0x258>
 800b302:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b306:	00d1      	.short	0x00d1
 800b308:	00a400b3 	.word	0x00a400b3
 800b30c:	005e008a 	.word	0x005e008a
 800b310:	003d00a4 	.word	0x003d00a4
 800b314:	0008      	.short	0x0008
    tcp_receive(pcb);
 800b316:	4638      	mov	r0, r7
 800b318:	f7fe ff06 	bl	800a128 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b31c:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <tcp_input+0x60c>)
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	06db      	lsls	r3, r3, #27
 800b322:	f57f ae37 	bpl.w	800af94 <tcp_input+0x258>
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <tcp_input+0x63c>)
 800b328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	f47f ae31 	bne.w	800af94 <tcp_input+0x258>
 800b332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b334:	2b00      	cmp	r3, #0
 800b336:	f47f ae2d 	bne.w	800af94 <tcp_input+0x258>
      recv_flags |= TF_CLOSED;
 800b33a:	f899 3000 	ldrb.w	r3, [r9]
 800b33e:	f043 0310 	orr.w	r3, r3, #16
 800b342:	f889 3000 	strb.w	r3, [r9]
 800b346:	e625      	b.n	800af94 <tcp_input+0x258>
 800b348:	20003ee0 	.word	0x20003ee0
 800b34c:	20003f00 	.word	0x20003f00
 800b350:	20003f16 	.word	0x20003f16
 800b354:	20003f0c 	.word	0x20003f0c
 800b358:	200088b0 	.word	0x200088b0
 800b35c:	080120ac 	.word	0x080120ac
 800b360:	08012090 	.word	0x08012090
 800b364:	0800e670 	.word	0x0800e670
 800b368:	2000889c 	.word	0x2000889c
 800b36c:	20003f14 	.word	0x20003f14
 800b370:	20008898 	.word	0x20008898
 800b374:	200088a0 	.word	0x200088a0
 800b378:	20003edc 	.word	0x20003edc
 800b37c:	200088a4 	.word	0x200088a4
    tcp_receive(pcb);
 800b380:	4638      	mov	r0, r7
 800b382:	f7fe fed1 	bl	800a128 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b386:	4b98      	ldr	r3, [pc, #608]	; (800b5e8 <tcp_input+0x8ac>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	06da      	lsls	r2, r3, #27
 800b38c:	f57f ae02 	bpl.w	800af94 <tcp_input+0x258>
 800b390:	4b96      	ldr	r3, [pc, #600]	; (800b5ec <tcp_input+0x8b0>)
 800b392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	f47f adfc 	bne.w	800af94 <tcp_input+0x258>
 800b39c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f47f adf8 	bne.w	800af94 <tcp_input+0x258>
      tcp_pcb_purge(pcb);
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7fd ffbb 	bl	8009320 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b3aa:	4b91      	ldr	r3, [pc, #580]	; (800b5f0 <tcp_input+0x8b4>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	42bb      	cmp	r3, r7
 800b3b0:	f000 821e 	beq.w	800b7f0 <tcp_input+0xab4>
 800b3b4:	b32b      	cbz	r3, 800b402 <tcp_input+0x6c6>
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	42ba      	cmp	r2, r7
 800b3ba:	f000 81ea 	beq.w	800b792 <tcp_input+0xa56>
 800b3be:	4613      	mov	r3, r2
 800b3c0:	e7f8      	b.n	800b3b4 <tcp_input+0x678>
    tcp_receive(pcb);
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	f7fe feb0 	bl	800a128 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b3c8:	f899 3000 	ldrb.w	r3, [r9]
 800b3cc:	0699      	lsls	r1, r3, #26
 800b3ce:	f57f ade1 	bpl.w	800af94 <tcp_input+0x258>
      tcp_ack_now(pcb);
 800b3d2:	7ebb      	ldrb	r3, [r7, #26]
 800b3d4:	f043 0302 	orr.w	r3, r3, #2
 800b3d8:	76bb      	strb	r3, [r7, #26]
      tcp_pcb_purge(pcb);
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f7fd ffa0 	bl	8009320 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b3e0:	4b83      	ldr	r3, [pc, #524]	; (800b5f0 <tcp_input+0x8b4>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	42bb      	cmp	r3, r7
 800b3e6:	f000 8203 	beq.w	800b7f0 <tcp_input+0xab4>
 800b3ea:	b153      	cbz	r3, 800b402 <tcp_input+0x6c6>
 800b3ec:	68da      	ldr	r2, [r3, #12]
 800b3ee:	4297      	cmp	r7, r2
 800b3f0:	d104      	bne.n	800b3fc <tcp_input+0x6c0>
 800b3f2:	e1ce      	b.n	800b792 <tcp_input+0xa56>
 800b3f4:	68da      	ldr	r2, [r3, #12]
 800b3f6:	42ba      	cmp	r2, r7
 800b3f8:	f000 81cb 	beq.w	800b792 <tcp_input+0xa56>
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	d1f8      	bne.n	800b3f4 <tcp_input+0x6b8>
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b402:	4b7c      	ldr	r3, [pc, #496]	; (800b5f4 <tcp_input+0x8b8>)
      TCP_RMV_ACTIVE(pcb);
 800b404:	4a7c      	ldr	r2, [pc, #496]	; (800b5f8 <tcp_input+0x8bc>)
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b406:	6819      	ldr	r1, [r3, #0]
 800b408:	60f9      	str	r1, [r7, #12]
      pcb->state = TIME_WAIT;
 800b40a:	210a      	movs	r1, #10
 800b40c:	7539      	strb	r1, [r7, #20]
      TCP_RMV_ACTIVE(pcb);
 800b40e:	2101      	movs	r1, #1
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b410:	601f      	str	r7, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800b412:	7011      	strb	r1, [r2, #0]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800b414:	f001 fc7c 	bl	800cd10 <tcp_timer_needed>
 800b418:	e5bc      	b.n	800af94 <tcp_input+0x258>
    tcp_receive(pcb);
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7fe fe84 	bl	800a128 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800b420:	f899 3000 	ldrb.w	r3, [r9]
 800b424:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b428:	4b6f      	ldr	r3, [pc, #444]	; (800b5e8 <tcp_input+0x8ac>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800b42c:	f000 8162 	beq.w	800b6f4 <tcp_input+0x9b8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b430:	06dd      	lsls	r5, r3, #27
 800b432:	d505      	bpl.n	800b440 <tcp_input+0x704>
 800b434:	4b6d      	ldr	r3, [pc, #436]	; (800b5ec <tcp_input+0x8b0>)
 800b436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	f000 81c1 	beq.w	800b7c2 <tcp_input+0xa86>
        tcp_ack_now(pcb);
 800b440:	7ebb      	ldrb	r3, [r7, #26]
        pcb->state = CLOSING;
 800b442:	2208      	movs	r2, #8
        tcp_ack_now(pcb);
 800b444:	f043 0302 	orr.w	r3, r3, #2
 800b448:	76bb      	strb	r3, [r7, #26]
        pcb->state = CLOSING;
 800b44a:	753a      	strb	r2, [r7, #20]
 800b44c:	e5a2      	b.n	800af94 <tcp_input+0x258>
    tcp_receive(pcb);
 800b44e:	4638      	mov	r0, r7
 800b450:	f7fe fe6a 	bl	800a128 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b454:	f899 3000 	ldrb.w	r3, [r9]
 800b458:	069b      	lsls	r3, r3, #26
 800b45a:	f57f ad9b 	bpl.w	800af94 <tcp_input+0x258>
      tcp_ack_now(pcb);
 800b45e:	7ebb      	ldrb	r3, [r7, #26]
      pcb->state = CLOSE_WAIT;
 800b460:	2207      	movs	r2, #7
      tcp_ack_now(pcb);
 800b462:	f043 0302 	orr.w	r3, r3, #2
 800b466:	76bb      	strb	r3, [r7, #26]
      pcb->state = CLOSE_WAIT;
 800b468:	753a      	strb	r2, [r7, #20]
 800b46a:	e593      	b.n	800af94 <tcp_input+0x258>
    if (flags & TCP_ACK) {
 800b46c:	f01b 0f10 	tst.w	fp, #16
 800b470:	f000 8132 	beq.w	800b6d8 <tcp_input+0x99c>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b474:	4a5d      	ldr	r2, [pc, #372]	; (800b5ec <tcp_input+0x8b0>)
 800b476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b478:	6810      	ldr	r0, [r2, #0]
 800b47a:	43db      	mvns	r3, r3
 800b47c:	42c3      	cmn	r3, r0
 800b47e:	d404      	bmi.n	800b48a <tcp_input+0x74e>
 800b480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b482:	1ac3      	subs	r3, r0, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	f340 8187 	ble.w	800b798 <tcp_input+0xa5c>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b48a:	682a      	ldr	r2, [r5, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b48c:	4b5b      	ldr	r3, [pc, #364]	; (800b5fc <tcp_input+0x8c0>)
 800b48e:	495c      	ldr	r1, [pc, #368]	; (800b600 <tcp_input+0x8c4>)
 800b490:	881d      	ldrh	r5, [r3, #0]
 800b492:	8813      	ldrh	r3, [r2, #0]
 800b494:	6809      	ldr	r1, [r1, #0]
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	4b5a      	ldr	r3, [pc, #360]	; (800b604 <tcp_input+0x8c8>)
 800b49a:	8852      	ldrh	r2, [r2, #2]
 800b49c:	9200      	str	r2, [sp, #0]
 800b49e:	4429      	add	r1, r5
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	f001 f981 	bl	800c7a8 <tcp_rst>
 800b4a6:	e575      	b.n	800af94 <tcp_input+0x258>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b4a8:	f00b 0312 	and.w	r3, fp, #18
 800b4ac:	2b12      	cmp	r3, #18
 800b4ae:	f000 80b5 	beq.w	800b61c <tcp_input+0x8e0>
    else if (flags & TCP_ACK) {
 800b4b2:	f01b 0f10 	tst.w	fp, #16
 800b4b6:	f43f ad6d 	beq.w	800af94 <tcp_input+0x258>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4ba:	682a      	ldr	r2, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4bc:	4b4f      	ldr	r3, [pc, #316]	; (800b5fc <tcp_input+0x8c0>)
 800b4be:	4950      	ldr	r1, [pc, #320]	; (800b600 <tcp_input+0x8c4>)
 800b4c0:	881d      	ldrh	r5, [r3, #0]
 800b4c2:	8813      	ldrh	r3, [r2, #0]
 800b4c4:	6809      	ldr	r1, [r1, #0]
 800b4c6:	4849      	ldr	r0, [pc, #292]	; (800b5ec <tcp_input+0x8b0>)
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	4b4e      	ldr	r3, [pc, #312]	; (800b604 <tcp_input+0x8c8>)
 800b4cc:	8852      	ldrh	r2, [r2, #2]
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	9200      	str	r2, [sp, #0]
 800b4d2:	4429      	add	r1, r5
 800b4d4:	1d1a      	adds	r2, r3, #4
 800b4d6:	f001 f967 	bl	800c7a8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b4da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	f63f ad58 	bhi.w	800af94 <tcp_input+0x258>
        pcb->rtime = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	863b      	strh	r3, [r7, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	f001 f9b7 	bl	800c85c <tcp_rexmit_rto>
 800b4ee:	e551      	b.n	800af94 <tcp_input+0x258>
          tcp_send_empty_ack(pcb);
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f000 ff31 	bl	800c358 <tcp_send_empty_ack>
 800b4f6:	e601      	b.n	800b0fc <tcp_input+0x3c0>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b4f8:	4b43      	ldr	r3, [pc, #268]	; (800b608 <tcp_input+0x8cc>)
 800b4fa:	4944      	ldr	r1, [pc, #272]	; (800b60c <tcp_input+0x8d0>)
 800b4fc:	4844      	ldr	r0, [pc, #272]	; (800b610 <tcp_input+0x8d4>)
 800b4fe:	22cf      	movs	r2, #207	; 0xcf
 800b500:	f002 fd6c 	bl	800dfdc <iprintf>
 800b504:	8923      	ldrh	r3, [r4, #8]
 800b506:	e477      	b.n	800adf8 <tcp_input+0xbc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b508:	4b3f      	ldr	r3, [pc, #252]	; (800b608 <tcp_input+0x8cc>)
 800b50a:	4942      	ldr	r1, [pc, #264]	; (800b614 <tcp_input+0x8d8>)
 800b50c:	4840      	ldr	r0, [pc, #256]	; (800b610 <tcp_input+0x8d4>)
 800b50e:	22b2      	movs	r2, #178	; 0xb2
 800b510:	f002 fd64 	bl	800dfdc <iprintf>
 800b514:	e44c      	b.n	800adb0 <tcp_input+0x74>
 800b516:	4672      	mov	r2, lr
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b518:	8990      	ldrh	r0, [r2, #12]
 800b51a:	f7fa f9c9 	bl	80058b0 <lwip_htons>
 800b51e:	0743      	lsls	r3, r0, #29
 800b520:	f53f ac1d 	bmi.w	800ad5e <tcp_input+0x22>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b524:	682a      	ldr	r2, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b526:	4b35      	ldr	r3, [pc, #212]	; (800b5fc <tcp_input+0x8c0>)
 800b528:	4935      	ldr	r1, [pc, #212]	; (800b600 <tcp_input+0x8c4>)
 800b52a:	881d      	ldrh	r5, [r3, #0]
 800b52c:	8813      	ldrh	r3, [r2, #0]
 800b52e:	6809      	ldr	r1, [r1, #0]
 800b530:	482e      	ldr	r0, [pc, #184]	; (800b5ec <tcp_input+0x8b0>)
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	4b33      	ldr	r3, [pc, #204]	; (800b604 <tcp_input+0x8c8>)
 800b536:	8852      	ldrh	r2, [r2, #2]
 800b538:	6800      	ldr	r0, [r0, #0]
 800b53a:	9200      	str	r2, [sp, #0]
 800b53c:	4429      	add	r1, r5
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	f001 f932 	bl	800c7a8 <tcp_rst>
 800b544:	e40b      	b.n	800ad5e <tcp_input+0x22>
      if (ackno == pcb->snd_nxt) {
 800b546:	4b29      	ldr	r3, [pc, #164]	; (800b5ec <tcp_input+0x8b0>)
 800b548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	f47f ad21 	bne.w	800af94 <tcp_input+0x258>
      recv_flags |= TF_RESET;
 800b552:	f899 2000 	ldrb.w	r2, [r9]
      pcb->flags &= ~TF_ACK_DELAY;
 800b556:	7ebb      	ldrb	r3, [r7, #26]
      recv_flags |= TF_RESET;
 800b558:	f042 0208 	orr.w	r2, r2, #8
      pcb->flags &= ~TF_ACK_DELAY;
 800b55c:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 800b560:	f889 2000 	strb.w	r2, [r9]
      pcb->flags &= ~TF_ACK_DELAY;
 800b564:	76bb      	strb	r3, [r7, #26]
 800b566:	e515      	b.n	800af94 <tcp_input+0x258>
 800b568:	f107 0032 	add.w	r0, r7, #50	; 0x32
 800b56c:	9203      	str	r2, [sp, #12]
 800b56e:	f7ff fb41 	bl	800abf4 <tcp_parseopt.isra.1.part.2>
 800b572:	9a03      	ldr	r2, [sp, #12]
 800b574:	e6c0      	b.n	800b2f8 <tcp_input+0x5bc>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b576:	2a00      	cmp	r2, #0
 800b578:	d1eb      	bne.n	800b552 <tcp_input+0x816>
 800b57a:	4b23      	ldr	r3, [pc, #140]	; (800b608 <tcp_input+0x8cc>)
 800b57c:	4926      	ldr	r1, [pc, #152]	; (800b618 <tcp_input+0x8dc>)
 800b57e:	4824      	ldr	r0, [pc, #144]	; (800b610 <tcp_input+0x8d4>)
 800b580:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b584:	f002 fd2a 	bl	800dfdc <iprintf>
 800b588:	e7e3      	b.n	800b552 <tcp_input+0x816>
 800b58a:	4638      	mov	r0, r7
 800b58c:	f7ff fb1a 	bl	800abc4 <tcp_input_delayed_close.part.3>
        if (tcp_input_delayed_close(pcb)) {
 800b590:	2800      	cmp	r0, #0
 800b592:	f47f ad13 	bne.w	800afbc <tcp_input+0x280>
 800b596:	e5d4      	b.n	800b142 <tcp_input+0x406>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b598:	4b18      	ldr	r3, [pc, #96]	; (800b5fc <tcp_input+0x8c0>)
 800b59a:	8812      	ldrh	r2, [r2, #0]
 800b59c:	881d      	ldrh	r5, [r3, #0]
 800b59e:	4b18      	ldr	r3, [pc, #96]	; (800b600 <tcp_input+0x8c4>)
 800b5a0:	6819      	ldr	r1, [r3, #0]
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	4b17      	ldr	r3, [pc, #92]	; (800b604 <tcp_input+0x8c8>)
 800b5a6:	4a11      	ldr	r2, [pc, #68]	; (800b5ec <tcp_input+0x8b0>)
 800b5a8:	9000      	str	r0, [sp, #0]
 800b5aa:	6810      	ldr	r0, [r2, #0]
 800b5ac:	4429      	add	r1, r5
 800b5ae:	1d1a      	adds	r2, r3, #4
 800b5b0:	f001 f8fa 	bl	800c7a8 <tcp_rst>
 800b5b4:	f7ff bbd3 	b.w	800ad5e <tcp_input+0x22>
            pbuf_free(recv_data);
 800b5b8:	f8d8 0000 	ldr.w	r0, [r8]
 800b5bc:	f7fc fe8a 	bl	80082d4 <pbuf_free>
            tcp_abort(pcb);
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7fe f9fd 	bl	80099c0 <tcp_abort>
            goto aborted;
 800b5c6:	e4f9      	b.n	800afbc <tcp_input+0x280>
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7ff fafb 	bl	800abc4 <tcp_input_delayed_close.part.3>
        if (tcp_input_delayed_close(pcb)) {
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f47f acf4 	bne.w	800afbc <tcp_input+0x280>
 800b5d4:	e5eb      	b.n	800b1ae <tcp_input+0x472>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f8d8 2000 	ldr.w	r2, [r8]
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7fd ffec 	bl	80095bc <tcp_recv_null>
 800b5e4:	e5c8      	b.n	800b178 <tcp_input+0x43c>
 800b5e6:	bf00      	nop
 800b5e8:	20003ee0 	.word	0x20003ee0
 800b5ec:	20003edc 	.word	0x20003edc
 800b5f0:	2000889c 	.word	0x2000889c
 800b5f4:	200088ac 	.word	0x200088ac
 800b5f8:	20008898 	.word	0x20008898
 800b5fc:	20003f16 	.word	0x20003f16
 800b600:	20003f00 	.word	0x20003f00
 800b604:	20004284 	.word	0x20004284
 800b608:	080120ac 	.word	0x080120ac
 800b60c:	08011ef4 	.word	0x08011ef4
 800b610:	0800e670 	.word	0x0800e670
 800b614:	08011ee4 	.word	0x08011ee4
 800b618:	08012024 	.word	0x08012024
        && (ackno == pcb->lastack + 1)) {
 800b61c:	4b96      	ldr	r3, [pc, #600]	; (800b878 <tcp_input+0xb3c>)
 800b61e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3201      	adds	r2, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	f47f af44 	bne.w	800b4b2 <tcp_input+0x776>
      pcb->rcv_nxt = seqno + 1;
 800b62a:	4b94      	ldr	r3, [pc, #592]	; (800b87c <tcp_input+0xb40>)
      pcb->snd_wnd = tcphdr->wnd;
 800b62c:	6829      	ldr	r1, [r5, #0]
      pcb->rcv_nxt = seqno + 1;
 800b62e:	681b      	ldr	r3, [r3, #0]
      pcb->lastack = ackno;
 800b630:	647a      	str	r2, [r7, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	627a      	str	r2, [r7, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b636:	62fa      	str	r2, [r7, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 800b638:	89ca      	ldrh	r2, [r1, #14]
 800b63a:	f8a7 205c 	strh.w	r2, [r7, #92]	; 0x5c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b63e:	3b01      	subs	r3, #1
      pcb->state = ESTABLISHED;
 800b640:	2104      	movs	r1, #4
      pcb->snd_wnd_max = pcb->snd_wnd;
 800b642:	f8a7 205e 	strh.w	r2, [r7, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b646:	653b      	str	r3, [r7, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800b648:	7539      	strb	r1, [r7, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b64a:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 800b64c:	1879      	adds	r1, r7, r1
 800b64e:	f7fe fcbd 	bl	8009fcc <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b652:	f241 121c 	movw	r2, #4380	; 0x111c
 800b656:	0043      	lsls	r3, r0, #1
 800b658:	4293      	cmp	r3, r2
 800b65a:	bf38      	it	cc
 800b65c:	4613      	movcc	r3, r2
 800b65e:	0081      	lsls	r1, r0, #2
 800b660:	428b      	cmp	r3, r1
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b662:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b666:	8678      	strh	r0, [r7, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b668:	bf28      	it	cs
 800b66a:	460b      	movcs	r3, r1
 800b66c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b670:	b932      	cbnz	r2, 800b680 <tcp_input+0x944>
 800b672:	4b83      	ldr	r3, [pc, #524]	; (800b880 <tcp_input+0xb44>)
 800b674:	4983      	ldr	r1, [pc, #524]	; (800b884 <tcp_input+0xb48>)
 800b676:	4884      	ldr	r0, [pc, #528]	; (800b888 <tcp_input+0xb4c>)
 800b678:	f240 321a 	movw	r2, #794	; 0x31a
 800b67c:	f002 fcae 	bl	800dfdc <iprintf>
      --pcb->snd_queuelen;
 800b680:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
      rseg = pcb->unacked;
 800b684:	6efd      	ldr	r5, [r7, #108]	; 0x6c
      --pcb->snd_queuelen;
 800b686:	3b01      	subs	r3, #1
 800b688:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      if (rseg == NULL) {
 800b68c:	2d00      	cmp	r5, #0
 800b68e:	d051      	beq.n	800b734 <tcp_input+0x9f8>
        pcb->unacked = rseg->next;
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	66fb      	str	r3, [r7, #108]	; 0x6c
      tcp_seg_free(rseg);
 800b694:	4628      	mov	r0, r5
 800b696:	f7fd fda9 	bl	80091ec <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800b69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d046      	beq.n	800b72e <tcp_input+0x9f2>
        pcb->nrtx = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b6a6:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
 800b6aa:	863b      	strh	r3, [r7, #48]	; 0x30
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	f43f ad30 	beq.w	800b112 <tcp_input+0x3d6>
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	6938      	ldr	r0, [r7, #16]
 800b6b8:	47a8      	blx	r5
      if (err == ERR_ABRT) {
 800b6ba:	300d      	adds	r0, #13
 800b6bc:	f47f ad29 	bne.w	800b112 <tcp_input+0x3d6>
 800b6c0:	e47c      	b.n	800afbc <tcp_input+0x280>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f43f ab4a 	beq.w	800ad5e <tcp_input+0x22>
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d0:	6938      	ldr	r0, [r7, #16]
 800b6d2:	4798      	blx	r3
 800b6d4:	f7ff bb43 	b.w	800ad5e <tcp_input+0x22>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b6d8:	2a00      	cmp	r2, #0
 800b6da:	f43f ac5b 	beq.w	800af94 <tcp_input+0x258>
 800b6de:	4a67      	ldr	r2, [pc, #412]	; (800b87c <tcp_input+0xb40>)
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	6812      	ldr	r2, [r2, #0]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	f47f ac54 	bne.w	800af94 <tcp_input+0x258>
      tcp_rexmit(pcb);
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f001 f8d1 	bl	800c894 <tcp_rexmit>
 800b6f2:	e44f      	b.n	800af94 <tcp_input+0x258>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6f4:	06d8      	lsls	r0, r3, #27
 800b6f6:	f57f ac4d 	bpl.w	800af94 <tcp_input+0x258>
 800b6fa:	4b5f      	ldr	r3, [pc, #380]	; (800b878 <tcp_input+0xb3c>)
 800b6fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	429a      	cmp	r2, r3
 800b702:	f47f ac47 	bne.w	800af94 <tcp_input+0x258>
 800b706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f47f ac43 	bne.w	800af94 <tcp_input+0x258>
      pcb->state = FIN_WAIT_2;
 800b70e:	2306      	movs	r3, #6
 800b710:	753b      	strb	r3, [r7, #20]
 800b712:	e43f      	b.n	800af94 <tcp_input+0x258>
      tcp_abandon(npcb, 0);
 800b714:	4640      	mov	r0, r8
 800b716:	2100      	movs	r1, #0
 800b718:	f7fe f89a 	bl	8009850 <tcp_abandon>
 800b71c:	f7ff bb1f 	b.w	800ad5e <tcp_input+0x22>
  } else if (flags & TCP_FIN) {
 800b720:	07d8      	lsls	r0, r3, #31
 800b722:	f57f acd3 	bpl.w	800b0cc <tcp_input+0x390>
    pcb->tmr = tcp_ticks;
 800b726:	4b59      	ldr	r3, [pc, #356]	; (800b88c <tcp_input+0xb50>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	623b      	str	r3, [r7, #32]
 800b72c:	e4ce      	b.n	800b0cc <tcp_input+0x390>
        pcb->rtime = -1;
 800b72e:	f04f 33ff 	mov.w	r3, #4294967295
 800b732:	e7b8      	b.n	800b6a6 <tcp_input+0x96a>
        rseg = pcb->unsent;
 800b734:	6ebd      	ldr	r5, [r7, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800b736:	b935      	cbnz	r5, 800b746 <tcp_input+0xa0a>
 800b738:	4b51      	ldr	r3, [pc, #324]	; (800b880 <tcp_input+0xb44>)
 800b73a:	4955      	ldr	r1, [pc, #340]	; (800b890 <tcp_input+0xb54>)
 800b73c:	4852      	ldr	r0, [pc, #328]	; (800b888 <tcp_input+0xb4c>)
 800b73e:	f240 3222 	movw	r2, #802	; 0x322
 800b742:	f002 fc4b 	bl	800dfdc <iprintf>
        pcb->unsent = rseg->next;
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	66bb      	str	r3, [r7, #104]	; 0x68
 800b74a:	e7a3      	b.n	800b694 <tcp_input+0x958>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b74c:	4b4c      	ldr	r3, [pc, #304]	; (800b880 <tcp_input+0xb44>)
 800b74e:	4951      	ldr	r1, [pc, #324]	; (800b894 <tcp_input+0xb58>)
 800b750:	484d      	ldr	r0, [pc, #308]	; (800b888 <tcp_input+0xb4c>)
 800b752:	22ec      	movs	r2, #236	; 0xec
 800b754:	f002 fc42 	bl	800dfdc <iprintf>
      if (prev != NULL) {
 800b758:	f1b8 0f00 	cmp.w	r8, #0
 800b75c:	f43f abce 	beq.w	800aefc <tcp_input+0x1c0>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f7ff bbc4 	b.w	800aeee <tcp_input+0x1b2>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b766:	4b46      	ldr	r3, [pc, #280]	; (800b880 <tcp_input+0xb44>)
 800b768:	494b      	ldr	r1, [pc, #300]	; (800b898 <tcp_input+0xb5c>)
 800b76a:	4847      	ldr	r0, [pc, #284]	; (800b888 <tcp_input+0xb4c>)
 800b76c:	22f4      	movs	r2, #244	; 0xf4
 800b76e:	f002 fc35 	bl	800dfdc <iprintf>
 800b772:	f7ff bbc7 	b.w	800af04 <tcp_input+0x1c8>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b776:	4b49      	ldr	r3, [pc, #292]	; (800b89c <tcp_input+0xb60>)
 800b778:	8819      	ldrh	r1, [r3, #0]
 800b77a:	4b49      	ldr	r3, [pc, #292]	; (800b8a0 <tcp_input+0xb64>)
 800b77c:	9001      	str	r0, [sp, #4]
 800b77e:	4411      	add	r1, r2
 800b780:	4a3d      	ldr	r2, [pc, #244]	; (800b878 <tcp_input+0xb3c>)
 800b782:	f8cd e000 	str.w	lr, [sp]
 800b786:	6810      	ldr	r0, [r2, #0]
 800b788:	1d1a      	adds	r2, r3, #4
 800b78a:	f001 f80d 	bl	800c7a8 <tcp_rst>
 800b78e:	f7ff bae6 	b.w	800ad5e <tcp_input+0x22>
      TCP_RMV_ACTIVE(pcb);
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	60da      	str	r2, [r3, #12]
 800b796:	e634      	b.n	800b402 <tcp_input+0x6c6>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
        pcb->state = ESTABLISHED;
 800b79a:	2204      	movs	r2, #4
 800b79c:	753a      	strb	r2, [r7, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b79e:	b15b      	cbz	r3, 800b7b8 <tcp_input+0xa7c>
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d05a      	beq.n	800b85c <tcp_input+0xb20>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	6938      	ldr	r0, [r7, #16]
 800b7ac:	4798      	blx	r3
        if (err != ERR_OK) {
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d037      	beq.n	800b822 <tcp_input+0xae6>
          if (err != ERR_ABRT) {
 800b7b2:	300d      	adds	r0, #13
 800b7b4:	f43f ac02 	beq.w	800afbc <tcp_input+0x280>
            tcp_abort(pcb);
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7fe f901 	bl	80099c0 <tcp_abort>
 800b7be:	f7ff bbfd 	b.w	800afbc <tcp_input+0x280>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f47f ae3b 	bne.w	800b440 <tcp_input+0x704>
        tcp_ack_now(pcb);
 800b7ca:	7ebb      	ldrb	r3, [r7, #26]
 800b7cc:	f043 0302 	orr.w	r3, r3, #2
 800b7d0:	76bb      	strb	r3, [r7, #26]
        tcp_pcb_purge(pcb);
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f7fd fda4 	bl	8009320 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b7d8:	4b32      	ldr	r3, [pc, #200]	; (800b8a4 <tcp_input+0xb68>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	42bb      	cmp	r3, r7
 800b7de:	d007      	beq.n	800b7f0 <tcp_input+0xab4>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f43f ae0e 	beq.w	800b402 <tcp_input+0x6c6>
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	42ba      	cmp	r2, r7
 800b7ea:	d0d2      	beq.n	800b792 <tcp_input+0xa56>
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	e7f7      	b.n	800b7e0 <tcp_input+0xaa4>
      TCP_RMV_ACTIVE(pcb);
 800b7f0:	4a2c      	ldr	r2, [pc, #176]	; (800b8a4 <tcp_input+0xb68>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6013      	str	r3, [r2, #0]
 800b7f6:	e604      	b.n	800b402 <tcp_input+0x6c6>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b7f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b7fa:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b7fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
              pcb->rcv_wnd++;
 800b802:	bf1c      	itt	ne
 800b804:	3301      	addne	r3, #1
 800b806:	853b      	strhne	r3, [r7, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b808:	2d00      	cmp	r5, #0
 800b80a:	f43f acc9 	beq.w	800b1a0 <tcp_input+0x464>
 800b80e:	2300      	movs	r3, #0
 800b810:	461a      	mov	r2, r3
 800b812:	4639      	mov	r1, r7
 800b814:	6938      	ldr	r0, [r7, #16]
 800b816:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800b818:	300d      	adds	r0, #13
 800b81a:	f47f acc1 	bne.w	800b1a0 <tcp_input+0x464>
 800b81e:	f7ff bbcd 	b.w	800afbc <tcp_input+0x280>
        tcp_receive(pcb);
 800b822:	4638      	mov	r0, r7
 800b824:	f7fe fc80 	bl	800a128 <tcp_receive>
        if (recv_acked != 0) {
 800b828:	f8ba 3000 	ldrh.w	r3, [sl]
 800b82c:	b113      	cbz	r3, 800b834 <tcp_input+0xaf8>
          recv_acked--;
 800b82e:	3b01      	subs	r3, #1
 800b830:	f8aa 3000 	strh.w	r3, [sl]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b834:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
        if (recv_flags & TF_GOT_FIN) {
 800b836:	f899 1000 	ldrb.w	r1, [r9]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b83a:	0053      	lsls	r3, r2, #1
 800b83c:	f241 101c 	movw	r0, #4380	; 0x111c
 800b840:	4283      	cmp	r3, r0
 800b842:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b846:	bf38      	it	cc
 800b848:	4603      	movcc	r3, r0
 800b84a:	4293      	cmp	r3, r2
 800b84c:	bf28      	it	cs
 800b84e:	4613      	movcs	r3, r2
        if (recv_flags & TF_GOT_FIN) {
 800b850:	068a      	lsls	r2, r1, #26
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b852:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 800b856:	f57f ab9d 	bpl.w	800af94 <tcp_input+0x258>
 800b85a:	e600      	b.n	800b45e <tcp_input+0x722>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b85c:	4b08      	ldr	r3, [pc, #32]	; (800b880 <tcp_input+0xb44>)
 800b85e:	4912      	ldr	r1, [pc, #72]	; (800b8a8 <tcp_input+0xb6c>)
 800b860:	4809      	ldr	r0, [pc, #36]	; (800b888 <tcp_input+0xb4c>)
 800b862:	f240 3251 	movw	r2, #849	; 0x351
 800b866:	f002 fbb9 	bl	800dfdc <iprintf>
        if (pcb->listener == NULL) {
 800b86a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0a3      	beq.n	800b7b8 <tcp_input+0xa7c>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d197      	bne.n	800b7a6 <tcp_input+0xa6a>
 800b876:	e79f      	b.n	800b7b8 <tcp_input+0xa7c>
 800b878:	20003edc 	.word	0x20003edc
 800b87c:	20003f00 	.word	0x20003f00
 800b880:	080120ac 	.word	0x080120ac
 800b884:	08012044 	.word	0x08012044
 800b888:	0800e670 	.word	0x0800e670
 800b88c:	200088a0 	.word	0x200088a0
 800b890:	0801205c 	.word	0x0801205c
 800b894:	08011f9c 	.word	0x08011f9c
 800b898:	08011fc8 	.word	0x08011fc8
 800b89c:	20003f16 	.word	0x20003f16
 800b8a0:	20004284 	.word	0x20004284
 800b8a4:	2000889c 	.word	0x2000889c
 800b8a8:	08012070 	.word	0x08012070

0800b8ac <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b8ac:	4a02      	ldr	r2, [pc, #8]	; (800b8b8 <tcp_trigger_input_pcb_close+0xc>)
 800b8ae:	7813      	ldrb	r3, [r2, #0]
 800b8b0:	f043 0310 	orr.w	r3, r3, #16
 800b8b4:	7013      	strb	r3, [r2, #0]
 800b8b6:	4770      	bx	lr
 800b8b8:	20003efc 	.word	0x20003efc

0800b8bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b8c0:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800b8c2:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800b8c4:	b90c      	cbnz	r4, 800b8ca <tcp_send_fin+0xe>
 800b8c6:	e00a      	b.n	800b8de <tcp_send_fin+0x22>
 800b8c8:	461c      	mov	r4, r3
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1fb      	bne.n	800b8c8 <tcp_send_fin+0xc>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b8d0:	68e3      	ldr	r3, [r4, #12]
 800b8d2:	8998      	ldrh	r0, [r3, #12]
 800b8d4:	f7f9 ffec 	bl	80058b0 <lwip_htons>
 800b8d8:	f010 0607 	ands.w	r6, r0, #7
 800b8dc:	d07a      	beq.n	800b9d4 <tcp_send_fin+0x118>
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f7fc fd64 	bl	80083b0 <pbuf_alloc>
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d056      	beq.n	800b99c <tcp_send_fin+0xe0>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b8ee:	2003      	movs	r0, #3
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b8f0:	f8d5 8058 	ldr.w	r8, [r5, #88]	; 0x58
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b8f4:	f7fc fada 	bl	8007eac <memp_malloc>
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d04b      	beq.n	800b996 <tcp_send_fin+0xda>
  seg->flags = optflags;
 800b8fe:	2300      	movs	r3, #0
 800b900:	7283      	strb	r3, [r0, #10]
  seg->len = p->tot_len - optlen;
 800b902:	8932      	ldrh	r2, [r6, #8]
 800b904:	8102      	strh	r2, [r0, #8]
  seg->next = NULL;
 800b906:	e880 0048 	stmia.w	r0, {r3, r6}
  if (pbuf_header(p, TCP_HLEN)) {
 800b90a:	2114      	movs	r1, #20
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7fc fc2d 	bl	800816c <pbuf_header>
 800b912:	4606      	mov	r6, r0
 800b914:	2800      	cmp	r0, #0
 800b916:	d178      	bne.n	800ba0a <tcp_send_fin+0x14e>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b918:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b91a:	8ae8      	ldrh	r0, [r5, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b91c:	685f      	ldr	r7, [r3, #4]
 800b91e:	60e7      	str	r7, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b920:	f7f9 ffc6 	bl	80058b0 <lwip_htons>
 800b924:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b926:	8b28      	ldrh	r0, [r5, #24]
 800b928:	68e7      	ldr	r7, [r4, #12]
 800b92a:	f7f9 ffc1 	bl	80058b0 <lwip_htons>
 800b92e:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b930:	4640      	mov	r0, r8
 800b932:	68e7      	ldr	r7, [r4, #12]
 800b934:	f7f9 ffc0 	bl	80058b8 <lwip_htonl>
 800b938:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b93a:	f245 0001 	movw	r0, #20481	; 0x5001
 800b93e:	68e7      	ldr	r7, [r4, #12]
 800b940:	f7f9 ffb6 	bl	80058b0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800b944:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b946:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800b948:	749e      	strb	r6, [r3, #18]
 800b94a:	74de      	strb	r6, [r3, #19]
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b94c:	079b      	lsls	r3, r3, #30
 800b94e:	d139      	bne.n	800b9c4 <tcp_send_fin+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b950:	8923      	ldrh	r3, [r4, #8]
 800b952:	bb5b      	cbnz	r3, 800b9ac <tcp_send_fin+0xf0>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b954:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800b956:	b90a      	cbnz	r2, 800b95c <tcp_send_fin+0xa0>
 800b958:	e032      	b.n	800b9c0 <tcp_send_fin+0x104>
    pcb->unsent = seg;
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b95a:	461a      	mov	r2, r3
 800b95c:	6813      	ldr	r3, [r2, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1fb      	bne.n	800b95a <tcp_send_fin+0x9e>
    useg->next = seg;
 800b962:	6014      	str	r4, [r2, #0]
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    pcb->snd_lbb++;
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
    pcb->flags |= TF_FIN;
 800b964:	7eaa      	ldrb	r2, [r5, #26]
    pcb->snd_lbb++;
 800b966:	6dab      	ldr	r3, [r5, #88]	; 0x58
    pcb->flags |= TF_FIN;
 800b968:	f042 0220 	orr.w	r2, r2, #32
    pcb->snd_lbb++;
 800b96c:	3301      	adds	r3, #1
    pcb->flags |= TF_FIN;
 800b96e:	76aa      	strb	r2, [r5, #26]
  pcb->unsent_oversize = 0;
 800b970:	2600      	movs	r6, #0
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b972:	6860      	ldr	r0, [r4, #4]
    pcb->snd_lbb++;
 800b974:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->unsent_oversize = 0;
 800b976:	f8a5 6064 	strh.w	r6, [r5, #100]	; 0x64
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b97a:	f7fc fecb 	bl	8008714 <pbuf_clen>
 800b97e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800b982:	4418      	add	r0, r3
 800b984:	b280      	uxth	r0, r0
 800b986:	f8a5 0062 	strh.w	r0, [r5, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b98a:	b168      	cbz	r0, 800b9a8 <tcp_send_fin+0xec>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b98c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800b98e:	b378      	cbz	r0, 800b9f0 <tcp_send_fin+0x134>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b990:	4630      	mov	r0, r6
 800b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 800b996:	4630      	mov	r0, r6
 800b998:	f7fc fc9c 	bl	80082d4 <pbuf_free>
    pcb->flags |= TF_NAGLEMEMERR;
 800b99c:	7eab      	ldrb	r3, [r5, #26]
 800b99e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9a2:	76ab      	strb	r3, [r5, #26]
    return ERR_MEM;
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b9ac:	f240 324a 	movw	r2, #842	; 0x34a
 800b9b0:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <tcp_send_fin+0x158>)
 800b9b2:	4919      	ldr	r1, [pc, #100]	; (800ba18 <tcp_send_fin+0x15c>)
 800b9b4:	4819      	ldr	r0, [pc, #100]	; (800ba1c <tcp_send_fin+0x160>)
 800b9b6:	f002 fb11 	bl	800dfdc <iprintf>
  if (pcb->unsent == NULL) {
 800b9ba:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	d1cd      	bne.n	800b95c <tcp_send_fin+0xa0>
    pcb->unsent = seg;
 800b9c0:	66ac      	str	r4, [r5, #104]	; 0x68
 800b9c2:	e7cf      	b.n	800b964 <tcp_send_fin+0xa8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b9c4:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <tcp_send_fin+0x158>)
 800b9c6:	4916      	ldr	r1, [pc, #88]	; (800ba20 <tcp_send_fin+0x164>)
 800b9c8:	4814      	ldr	r0, [pc, #80]	; (800ba1c <tcp_send_fin+0x160>)
 800b9ca:	f240 3249 	movw	r2, #841	; 0x349
 800b9ce:	f002 fb05 	bl	800dfdc <iprintf>
 800b9d2:	e7bd      	b.n	800b950 <tcp_send_fin+0x94>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b9d4:	68e7      	ldr	r7, [r4, #12]
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	89bc      	ldrh	r4, [r7, #12]
 800b9da:	f7f9 ff69 	bl	80058b0 <lwip_htons>
 800b9de:	4320      	orrs	r0, r4
 800b9e0:	81b8      	strh	r0, [r7, #12]
      pcb->flags |= TF_FIN;
 800b9e2:	7eab      	ldrb	r3, [r5, #26]
 800b9e4:	f043 0320 	orr.w	r3, r3, #32
 800b9e8:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b9f0:	6eac      	ldr	r4, [r5, #104]	; 0x68
 800b9f2:	2c00      	cmp	r4, #0
 800b9f4:	d1d8      	bne.n	800b9a8 <tcp_send_fin+0xec>
 800b9f6:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <tcp_send_fin+0x158>)
 800b9f8:	490a      	ldr	r1, [pc, #40]	; (800ba24 <tcp_send_fin+0x168>)
 800b9fa:	4808      	ldr	r0, [pc, #32]	; (800ba1c <tcp_send_fin+0x160>)
 800b9fc:	f240 326d 	movw	r2, #877	; 0x36d
 800ba00:	f002 faec 	bl	800dfdc <iprintf>
  return ERR_OK;
 800ba04:	4620      	mov	r0, r4
 800ba06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tcp_seg_free(seg);
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f7fd fbee 	bl	80091ec <tcp_seg_free>
 800ba10:	e7c4      	b.n	800b99c <tcp_send_fin+0xe0>
 800ba12:	bf00      	nop
 800ba14:	08012360 	.word	0x08012360
 800ba18:	080123ac 	.word	0x080123ac
 800ba1c:	0800e670 	.word	0x0800e670
 800ba20:	08012394 	.word	0x08012394
 800ba24:	080123d8 	.word	0x080123d8

0800ba28 <tcp_write>:
{
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	b08f      	sub	sp, #60	; 0x3c
 800ba2e:	4681      	mov	r9, r0
 800ba30:	9201      	str	r2, [sp, #4]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800ba32:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800ba36:	8e40      	ldrh	r0, [r0, #50]	; 0x32
{
 800ba38:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800ba3a:	0852      	lsrs	r2, r2, #1
 800ba3c:	4282      	cmp	r2, r0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	bf28      	it	cs
 800ba42:	4602      	movcs	r2, r0
  mss_local = mss_local ? mss_local : pcb->mss;
 800ba44:	2a00      	cmp	r2, #0
 800ba46:	bf18      	it	ne
 800ba48:	4614      	movne	r4, r2
 800ba4a:	9403      	str	r4, [sp, #12]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ba4c:	9106      	str	r1, [sp, #24]
 800ba4e:	2900      	cmp	r1, #0
 800ba50:	f000 8315 	beq.w	800c07e <tcp_write+0x656>
  if ((pcb->state != ESTABLISHED) &&
 800ba54:	f899 3014 	ldrb.w	r3, [r9, #20]
 800ba58:	2b07      	cmp	r3, #7
 800ba5a:	d007      	beq.n	800ba6c <tcp_write+0x44>
      (pcb->state != CLOSE_WAIT) &&
 800ba5c:	3b02      	subs	r3, #2
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d904      	bls.n	800ba6c <tcp_write+0x44>
    return ERR_CONN;
 800ba62:	f06f 000a 	mvn.w	r0, #10
}
 800ba66:	b00f      	add	sp, #60	; 0x3c
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (len == 0) {
 800ba6c:	9a01      	ldr	r2, [sp, #4]
 800ba6e:	2a00      	cmp	r2, #0
 800ba70:	f000 80a9 	beq.w	800bbc6 <tcp_write+0x19e>
  if (len > pcb->snd_buf) {
 800ba74:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	f0c0 82b3 	bcc.w	800bfe4 <tcp_write+0x5bc>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ba7e:	f8b9 8062 	ldrh.w	r8, [r9, #98]	; 0x62
 800ba82:	f1b8 0f0a 	cmp.w	r8, #10
 800ba86:	f200 82ad 	bhi.w	800bfe4 <tcp_write+0x5bc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ba8a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 800ba8e:	f1b8 0f00 	cmp.w	r8, #0
 800ba92:	d060      	beq.n	800bb56 <tcp_write+0x12e>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 825f 	beq.w	800bf58 <tcp_write+0x530>
  if (pcb->unsent != NULL) {
 800ba9a:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800ba9e:	9308      	str	r3, [sp, #32]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d069      	beq.n	800bb78 <tcp_write+0x150>
 800baa4:	461a      	mov	r2, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1fb      	bne.n	800baa4 <tcp_write+0x7c>
 800baac:	469a      	mov	sl, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800baae:	7a93      	ldrb	r3, [r2, #10]
 800bab0:	9208      	str	r2, [sp, #32]
 800bab2:	07dc      	lsls	r4, r3, #31
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bab4:	9b08      	ldr	r3, [sp, #32]
 800bab6:	9903      	ldr	r1, [sp, #12]
 800bab8:	891b      	ldrh	r3, [r3, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800baba:	bf4a      	itet	mi
 800babc:	2204      	movmi	r2, #4
 800babe:	4652      	movpl	r2, sl
 800bac0:	4614      	movmi	r4, r2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bac2:	441a      	add	r2, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800bac4:	bf58      	it	pl
 800bac6:	4654      	movpl	r4, sl
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bac8:	4291      	cmp	r1, r2
 800baca:	f2c0 822d 	blt.w	800bf28 <tcp_write+0x500>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bace:	1acb      	subs	r3, r1, r3
    oversize = pcb->unsent_oversize;
 800bad0:	f8b9 2064 	ldrh.w	r2, [r9, #100]	; 0x64
 800bad4:	9205      	str	r2, [sp, #20]
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bad6:	1b1c      	subs	r4, r3, r4
 800bad8:	b2a3      	uxth	r3, r4
 800bada:	9309      	str	r3, [sp, #36]	; 0x24
    if (oversize > 0) {
 800badc:	2a00      	cmp	r2, #0
 800bade:	d075      	beq.n	800bbcc <tcp_write+0x1a4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bae0:	4293      	cmp	r3, r2
 800bae2:	f0c0 818d 	bcc.w	800be00 <tcp_write+0x3d8>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bae6:	9801      	ldr	r0, [sp, #4]
 800bae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baea:	4282      	cmp	r2, r0
 800baec:	4613      	mov	r3, r2
 800baee:	bf28      	it	cs
 800baf0:	4603      	movcs	r3, r0
 800baf2:	461c      	mov	r4, r3
 800baf4:	428c      	cmp	r4, r1
 800baf6:	bfa8      	it	ge
 800baf8:	460c      	movge	r4, r1
      oversize -= oversize_used;
 800bafa:	1b13      	subs	r3, r2, r4
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	461a      	mov	r2, r3
 800bb00:	9305      	str	r3, [sp, #20]
      space -= oversize_used;
 800bb02:	1b0b      	subs	r3, r1, r4
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	9309      	str	r3, [sp, #36]	; 0x24
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bb08:	b142      	cbz	r2, 800bb1c <tcp_write+0xf4>
 800bb0a:	42a0      	cmp	r0, r4
 800bb0c:	d009      	beq.n	800bb22 <tcp_write+0xfa>
 800bb0e:	4bb3      	ldr	r3, [pc, #716]	; (800bddc <tcp_write+0x3b4>)
 800bb10:	49b3      	ldr	r1, [pc, #716]	; (800bde0 <tcp_write+0x3b8>)
 800bb12:	48b4      	ldr	r0, [pc, #720]	; (800bde4 <tcp_write+0x3bc>)
 800bb14:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bb18:	f002 fa60 	bl	800dfdc <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	d859      	bhi.n	800bbd6 <tcp_write+0x1ae>
  if (oversize_used > 0) {
 800bb22:	2c00      	cmp	r4, #0
 800bb24:	f000 830d 	beq.w	800c142 <tcp_write+0x71a>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9d08      	ldr	r5, [sp, #32]
 800bb2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb2e:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 800bb30:	686e      	ldr	r6, [r5, #4]
 800bb32:	2e00      	cmp	r6, #0
 800bb34:	f000 817b 	beq.w	800be2e <tcp_write+0x406>
      p->tot_len += oversize_used;
 800bb38:	8933      	ldrh	r3, [r6, #8]
      if (p->next == NULL) {
 800bb3a:	6832      	ldr	r2, [r6, #0]
      p->tot_len += oversize_used;
 800bb3c:	4423      	add	r3, r4
 800bb3e:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	f000 8166 	beq.w	800be12 <tcp_write+0x3ea>
  if (oversize_used > 0) {
 800bb46:	4616      	mov	r6, r2
      p->tot_len += oversize_used;
 800bb48:	8933      	ldrh	r3, [r6, #8]
      if (p->next == NULL) {
 800bb4a:	6832      	ldr	r2, [r6, #0]
      p->tot_len += oversize_used;
 800bb4c:	4423      	add	r3, r4
 800bb4e:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	d1f8      	bne.n	800bb46 <tcp_write+0x11e>
 800bb54:	e15d      	b.n	800be12 <tcp_write+0x3ea>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f000 814c 	beq.w	800bdf4 <tcp_write+0x3cc>
 800bb5c:	4b9f      	ldr	r3, [pc, #636]	; (800bddc <tcp_write+0x3b4>)
 800bb5e:	49a2      	ldr	r1, [pc, #648]	; (800bde8 <tcp_write+0x3c0>)
 800bb60:	48a0      	ldr	r0, [pc, #640]	; (800bde4 <tcp_write+0x3bc>)
 800bb62:	f240 1259 	movw	r2, #345	; 0x159
 800bb66:	f002 fa39 	bl	800dfdc <iprintf>
  if (pcb->unsent != NULL) {
 800bb6a:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bb6e:	f8b9 8062 	ldrh.w	r8, [r9, #98]	; 0x62
 800bb72:	9308      	str	r3, [sp, #32]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d195      	bne.n	800baa4 <tcp_write+0x7c>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bb78:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 800bb7c:	2c00      	cmp	r4, #0
 800bb7e:	f040 8242 	bne.w	800c006 <tcp_write+0x5de>
  u16_t oversize = 0;
 800bb82:	9405      	str	r4, [sp, #20]
  u16_t extendlen = 0;
 800bb84:	9409      	str	r4, [sp, #36]	; 0x24
  u16_t oversize_used = 0;
 800bb86:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bb88:	9408      	str	r4, [sp, #32]
  struct pbuf *concat_p = NULL;
 800bb8a:	940b      	str	r4, [sp, #44]	; 0x2c
  while (pos < len) {
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	42a3      	cmp	r3, r4
 800bb90:	d827      	bhi.n	800bbe2 <tcp_write+0x1ba>
 800bb92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bb94:	9d08      	ldr	r5, [sp, #32]
 800bb96:	f04f 0a00 	mov.w	sl, #0
  if (oversize_used > 0) {
 800bb9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1c7      	bne.n	800bb30 <tcp_write+0x108>
  pcb->unsent_oversize = oversize;
 800bba0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800bba4:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800bba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8296 	beq.w	800c0dc <tcp_write+0x6b4>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	f040 8147 	bne.w	800be44 <tcp_write+0x41c>
 800bbb6:	4b89      	ldr	r3, [pc, #548]	; (800bddc <tcp_write+0x3b4>)
 800bbb8:	498c      	ldr	r1, [pc, #560]	; (800bdec <tcp_write+0x3c4>)
 800bbba:	488a      	ldr	r0, [pc, #552]	; (800bde4 <tcp_write+0x3bc>)
 800bbbc:	f240 22bb 	movw	r2, #699	; 0x2bb
 800bbc0:	f002 fa0c 	bl	800dfdc <iprintf>
 800bbc4:	e13e      	b.n	800be44 <tcp_write+0x41c>
 800bbc6:	f8b9 8062 	ldrh.w	r8, [r9, #98]	; 0x62
 800bbca:	e766      	b.n	800ba9a <tcp_write+0x72>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bbcc:	9b01      	ldr	r3, [sp, #4]
 800bbce:	4614      	mov	r4, r2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 8230 	beq.w	800c036 <tcp_write+0x60e>
 800bbd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbd8:	2a00      	cmp	r2, #0
 800bbda:	f040 80c7 	bne.w	800bd6c <tcp_write+0x344>
 800bbde:	940d      	str	r4, [sp, #52]	; 0x34
 800bbe0:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe4:	f002 0301 	and.w	r3, r2, #1
 800bbe8:	f04f 0a00 	mov.w	sl, #0
 800bbec:	9307      	str	r3, [sp, #28]
 800bbee:	f002 0302 	and.w	r3, r2, #2
 800bbf2:	930c      	str	r3, [sp, #48]	; 0x30
 800bbf4:	46d3      	mov	fp, sl
 800bbf6:	f8cd a010 	str.w	sl, [sp, #16]
 800bbfa:	9b01      	ldr	r3, [sp, #4]
 800bbfc:	e073      	b.n	800bce6 <tcp_write+0x2be>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bbfe:	9b05      	ldr	r3, [sp, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f040 814c 	bne.w	800be9e <tcp_write+0x476>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bc06:	2201      	movs	r2, #1
 800bc08:	4629      	mov	r1, r5
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f7fc fbd0 	bl	80083b0 <pbuf_alloc>
 800bc10:	4606      	mov	r6, r0
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f000 8193 	beq.w	800bf3e <tcp_write+0x516>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800bc18:	9b06      	ldr	r3, [sp, #24]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bc1a:	2200      	movs	r2, #0
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800bc1c:	4423      	add	r3, r4
 800bc1e:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bc20:	4611      	mov	r1, r2
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fc fbc4 	bl	80083b0 <pbuf_alloc>
 800bc28:	4607      	mov	r7, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	f000 818a 	beq.w	800bf44 <tcp_write+0x51c>
      pbuf_cat(p/*header*/, p2/*data*/);
 800bc30:	4631      	mov	r1, r6
 800bc32:	f7fc fd99 	bl	8008768 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7fc fd6c 	bl	8008714 <pbuf_clen>
 800bc3c:	4480      	add	r8, r0
 800bc3e:	fa1f f888 	uxth.w	r8, r8
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800bc42:	f1b8 0f0b 	cmp.w	r8, #11
 800bc46:	f200 8169 	bhi.w	800bf1c <tcp_write+0x4f4>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bc4a:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc4e:	2003      	movs	r0, #3
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bc50:	eb04 0a03 	add.w	sl, r4, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bc54:	f7fc f92a 	bl	8007eac <memp_malloc>
 800bc58:	4606      	mov	r6, r0
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	f000 815e 	beq.w	800bf1c <tcp_write+0x4f4>
  seg->flags = optflags;
 800bc60:	2300      	movs	r3, #0
 800bc62:	7283      	strb	r3, [r0, #10]
  seg->len = p->tot_len - optlen;
 800bc64:	893a      	ldrh	r2, [r7, #8]
 800bc66:	8102      	strh	r2, [r0, #8]
  seg->next = NULL;
 800bc68:	e880 0088 	stmia.w	r0, {r3, r7}
  if (pbuf_header(p, TCP_HLEN)) {
 800bc6c:	2114      	movs	r1, #20
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f7fc fa7c 	bl	800816c <pbuf_header>
 800bc74:	4607      	mov	r7, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	f040 8122 	bne.w	800bec0 <tcp_write+0x498>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc7c:	6873      	ldr	r3, [r6, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc7e:	f8b9 0016 	ldrh.w	r0, [r9, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	60f3      	str	r3, [r6, #12]
 800bc86:	9302      	str	r3, [sp, #8]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bc88:	f7f9 fe12 	bl	80058b0 <lwip_htons>
 800bc8c:	9b02      	ldr	r3, [sp, #8]
 800bc8e:	8018      	strh	r0, [r3, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bc90:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800bc94:	68f3      	ldr	r3, [r6, #12]
 800bc96:	9302      	str	r3, [sp, #8]
 800bc98:	f7f9 fe0a 	bl	80058b0 <lwip_htons>
 800bc9c:	9b02      	ldr	r3, [sp, #8]
 800bc9e:	8058      	strh	r0, [r3, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bca0:	4650      	mov	r0, sl
 800bca2:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800bca6:	f7f9 fe07 	bl	80058b8 <lwip_htonl>
 800bcaa:	f8ca 0004 	str.w	r0, [sl, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800bcae:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800bcb2:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800bcb6:	f7f9 fdfb 	bl	80058b0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800bcba:	68f3      	ldr	r3, [r6, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800bcbc:	f8aa 000c 	strh.w	r0, [sl, #12]
  seg->tcphdr->urgp = 0;
 800bcc0:	749f      	strb	r7, [r3, #18]
 800bcc2:	74df      	strb	r7, [r3, #19]
    if (queue == NULL) {
 800bcc4:	9b04      	ldr	r3, [sp, #16]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 80f8 	beq.w	800bebc <tcp_write+0x494>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bccc:	f1bb 0f00 	cmp.w	fp, #0
 800bcd0:	f000 811c 	beq.w	800bf0c <tcp_write+0x4e4>
      prev_seg->next = seg;
 800bcd4:	f8cb 6000 	str.w	r6, [fp]
    pos += seglen;
 800bcd8:	442c      	add	r4, r5
  while (pos < len) {
 800bcda:	9b01      	ldr	r3, [sp, #4]
    pos += seglen;
 800bcdc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	46b3      	mov	fp, r6
 800bce2:	f240 8228 	bls.w	800c136 <tcp_write+0x70e>
    u16_t left = len - pos;
 800bce6:	1b1d      	subs	r5, r3, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	b2ad      	uxth	r5, r5
 800bcec:	429d      	cmp	r5, r3
 800bcee:	bf28      	it	cs
 800bcf0:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bcf2:	9b07      	ldr	r3, [sp, #28]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bcf4:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d081      	beq.n	800bbfe <tcp_write+0x1d6>
  if (length < max_length) {
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	42ab      	cmp	r3, r5
 800bcfe:	f240 80db 	bls.w	800beb8 <tcp_write+0x490>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bd02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd04:	b95b      	cbnz	r3, 800bd1e <tcp_write+0x2f6>
 800bd06:	f899 301a 	ldrb.w	r3, [r9, #26]
 800bd0a:	065b      	lsls	r3, r3, #25
 800bd0c:	f100 80d4 	bmi.w	800beb8 <tcp_write+0x490>
        (!(pcb->flags & TF_NODELAY) &&
 800bd10:	9b04      	ldr	r3, [sp, #16]
 800bd12:	b923      	cbnz	r3, 800bd1e <tcp_write+0x2f6>
         (!first_seg ||
 800bd14:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 80c8 	beq.w	800beae <tcp_write+0x486>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	f205 21d3 	addw	r1, r5, #723	; 0x2d3
 800bd24:	f021 0103 	bic.w	r1, r1, #3
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	bf28      	it	cs
 800bd2c:	4619      	movcs	r1, r3
 800bd2e:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bd30:	2200      	movs	r2, #0
 800bd32:	4610      	mov	r0, r2
 800bd34:	f7fc fb3c 	bl	80083b0 <pbuf_alloc>
  if (p == NULL) {
 800bd38:	4607      	mov	r7, r0
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f000 80ff 	beq.w	800bf3e <tcp_write+0x516>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bd40:	6803      	ldr	r3, [r0, #0]
 800bd42:	b133      	cbz	r3, 800bd52 <tcp_write+0x32a>
 800bd44:	4b25      	ldr	r3, [pc, #148]	; (800bddc <tcp_write+0x3b4>)
 800bd46:	492a      	ldr	r1, [pc, #168]	; (800bdf0 <tcp_write+0x3c8>)
 800bd48:	4826      	ldr	r0, [pc, #152]	; (800bde4 <tcp_write+0x3bc>)
 800bd4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bd4e:	f002 f945 	bl	800dfdc <iprintf>
  *oversize = p->len - length;
 800bd52:	897b      	ldrh	r3, [r7, #10]
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800bd54:	9906      	ldr	r1, [sp, #24]
  p->len = p->tot_len = length;
 800bd56:	813d      	strh	r5, [r7, #8]
  *oversize = p->len - length;
 800bd58:	1b5b      	subs	r3, r3, r5
 800bd5a:	b29b      	uxth	r3, r3
  p->len = p->tot_len = length;
 800bd5c:	817d      	strh	r5, [r7, #10]
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800bd5e:	462a      	mov	r2, r5
 800bd60:	4421      	add	r1, r4
 800bd62:	6878      	ldr	r0, [r7, #4]
  *oversize = p->len - length;
 800bd64:	9305      	str	r3, [sp, #20]
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800bd66:	f002 fbe4 	bl	800e532 <memcpy>
 800bd6a:	e764      	b.n	800bc36 <tcp_write+0x20e>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	891b      	ldrh	r3, [r3, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80ed 	beq.w	800bf50 <tcp_write+0x528>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	1b1d      	subs	r5, r3, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bd7c:	4295      	cmp	r5, r2
 800bd7e:	bfa8      	it	ge
 800bd80:	4615      	movge	r5, r2
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd82:	07d8      	lsls	r0, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bd84:	b2ae      	uxth	r6, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd86:	f100 80f7 	bmi.w	800bf78 <tcp_write+0x550>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bd8a:	9b08      	ldr	r3, [sp, #32]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	e000      	b.n	800bd92 <tcp_write+0x36a>
 800bd90:	4613      	mov	r3, r2
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	2a00      	cmp	r2, #0
 800bd96:	d1fb      	bne.n	800bd90 <tcp_write+0x368>
 800bd98:	920b      	str	r2, [sp, #44]	; 0x2c
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bd9a:	7b1a      	ldrb	r2, [r3, #12]
 800bd9c:	2a01      	cmp	r2, #1
 800bd9e:	d106      	bne.n	800bdae <tcp_write+0x386>
 800bda0:	895a      	ldrh	r2, [r3, #10]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4413      	add	r3, r2
 800bda6:	9a06      	ldr	r2, [sp, #24]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	f000 8172 	beq.w	800c092 <tcp_write+0x66a>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	2004      	movs	r0, #4
 800bdb4:	f7fc fafc 	bl	80083b0 <pbuf_alloc>
 800bdb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f000 8143 	beq.w	800c046 <tcp_write+0x61e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800bdc0:	9b06      	ldr	r3, [sp, #24]
 800bdc2:	4423      	add	r3, r4
 800bdc4:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800bdc6:	f7fc fca5 	bl	8008714 <pbuf_clen>
  u16_t extendlen = 0;
 800bdca:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 800bdcc:	4480      	add	r8, r0
 800bdce:	fa1f f888 	uxth.w	r8, r8
  u16_t extendlen = 0;
 800bdd2:	9309      	str	r3, [sp, #36]	; 0x24
      pos += seglen;
 800bdd4:	4426      	add	r6, r4
 800bdd6:	940d      	str	r4, [sp, #52]	; 0x34
 800bdd8:	b2b4      	uxth	r4, r6
 800bdda:	e6d7      	b.n	800bb8c <tcp_write+0x164>
 800bddc:	08012360 	.word	0x08012360
 800bde0:	080124dc 	.word	0x080124dc
 800bde4:	0800e670 	.word	0x0800e670
 800bde8:	08012470 	.word	0x08012470
 800bdec:	08012590 	.word	0x08012590
 800bdf0:	080124fc 	.word	0x080124fc
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bdf4:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f47f aeaf 	bne.w	800bb5c <tcp_write+0x134>
 800bdfe:	e6bb      	b.n	800bb78 <tcp_write+0x150>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800be00:	f240 12d9 	movw	r2, #473	; 0x1d9
 800be04:	4ba9      	ldr	r3, [pc, #676]	; (800c0ac <tcp_write+0x684>)
 800be06:	49aa      	ldr	r1, [pc, #680]	; (800c0b0 <tcp_write+0x688>)
 800be08:	48aa      	ldr	r0, [pc, #680]	; (800c0b4 <tcp_write+0x68c>)
 800be0a:	f002 f8e7 	bl	800dfdc <iprintf>
 800be0e:	9a05      	ldr	r2, [sp, #20]
 800be10:	e669      	b.n	800bae6 <tcp_write+0xbe>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800be12:	8973      	ldrh	r3, [r6, #10]
 800be14:	6870      	ldr	r0, [r6, #4]
 800be16:	9906      	ldr	r1, [sp, #24]
 800be18:	4622      	mov	r2, r4
 800be1a:	4418      	add	r0, r3
 800be1c:	f002 fb89 	bl	800e532 <memcpy>
        p->len += oversize_used;
 800be20:	8973      	ldrh	r3, [r6, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800be22:	6832      	ldr	r2, [r6, #0]
        p->len += oversize_used;
 800be24:	4423      	add	r3, r4
 800be26:	8173      	strh	r3, [r6, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800be28:	2a00      	cmp	r2, #0
 800be2a:	f47f ae8c 	bne.w	800bb46 <tcp_write+0x11e>
    last_unsent->len += oversize_used;
 800be2e:	892b      	ldrh	r3, [r5, #8]
 800be30:	441c      	add	r4, r3
  pcb->unsent_oversize = oversize;
 800be32:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    last_unsent->len += oversize_used;
 800be36:	812c      	strh	r4, [r5, #8]
  pcb->unsent_oversize = oversize;
 800be38:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800be3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 814c 	beq.w	800c0dc <tcp_write+0x6b4>
    pbuf_cat(last_unsent->p, concat_p);
 800be44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800be46:	6868      	ldr	r0, [r5, #4]
 800be48:	4621      	mov	r1, r4
 800be4a:	f7fc fc8d 	bl	8008768 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800be4e:	8922      	ldrh	r2, [r4, #8]
 800be50:	892b      	ldrh	r3, [r5, #8]
 800be52:	4413      	add	r3, r2
 800be54:	812b      	strh	r3, [r5, #8]
    last_unsent->next = queue;
 800be56:	f8c5 a000 	str.w	sl, [r5]
  pcb->snd_lbb += len;
 800be5a:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800be5e:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
  pcb->snd_lbb += len;
 800be62:	9801      	ldr	r0, [sp, #4]
  pcb->snd_queuelen = queuelen;
 800be64:	f8a9 8062 	strh.w	r8, [r9, #98]	; 0x62
  pcb->snd_lbb += len;
 800be68:	4402      	add	r2, r0
  pcb->snd_buf -= len;
 800be6a:	1a1b      	subs	r3, r3, r0
  pcb->snd_lbb += len;
 800be6c:	f8c9 2058 	str.w	r2, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800be70:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
  if (pcb->snd_queuelen != 0) {
 800be74:	f1b8 0f00 	cmp.w	r8, #0
 800be78:	d004      	beq.n	800be84 <tcp_write+0x45c>
    LWIP_ASSERT("tcp_write: valid queue length",
 800be7a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 80f0 	beq.w	800c064 <tcp_write+0x63c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800be84:	9b08      	ldr	r3, [sp, #32]
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 80e4 	beq.w	800c054 <tcp_write+0x62c>
 800be8c:	68dd      	ldr	r5, [r3, #12]
 800be8e:	b125      	cbz	r5, 800be9a <tcp_write+0x472>
 800be90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be92:	f013 0402 	ands.w	r4, r3, #2
 800be96:	f000 80ae 	beq.w	800bff6 <tcp_write+0x5ce>
  return ERR_OK;
 800be9a:	2000      	movs	r0, #0
 800be9c:	e5e3      	b.n	800ba66 <tcp_write+0x3e>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800be9e:	4b83      	ldr	r3, [pc, #524]	; (800c0ac <tcp_write+0x684>)
 800bea0:	4985      	ldr	r1, [pc, #532]	; (800c0b8 <tcp_write+0x690>)
 800bea2:	4884      	ldr	r0, [pc, #528]	; (800c0b4 <tcp_write+0x68c>)
 800bea4:	f240 224b 	movw	r2, #587	; 0x24b
 800bea8:	f002 f898 	bl	800dfdc <iprintf>
 800beac:	e6ab      	b.n	800bc06 <tcp_write+0x1de>
          pcb->unsent != NULL ||
 800beae:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f47f af33 	bne.w	800bd1e <tcp_write+0x2f6>
 800beb8:	4629      	mov	r1, r5
 800beba:	e739      	b.n	800bd30 <tcp_write+0x308>
 800bebc:	9604      	str	r6, [sp, #16]
 800bebe:	e70b      	b.n	800bcd8 <tcp_write+0x2b0>
    tcp_seg_free(seg);
 800bec0:	4630      	mov	r0, r6
 800bec2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bec6:	f7fd f991 	bl	80091ec <tcp_seg_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800beca:	f899 301a 	ldrb.w	r3, [r9, #26]
 800bece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bed2:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800bed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bed8:	b113      	cbz	r3, 800bee0 <tcp_write+0x4b8>
    pbuf_free(concat_p);
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fc f9fa 	bl	80082d4 <pbuf_free>
  if (queue != NULL) {
 800bee0:	f1ba 0f00 	cmp.w	sl, #0
 800bee4:	d002      	beq.n	800beec <tcp_write+0x4c4>
    tcp_segs_free(queue);
 800bee6:	4650      	mov	r0, sl
 800bee8:	f7fd f96e 	bl	80091c8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800beec:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 800bef0:	b13b      	cbz	r3, 800bf02 <tcp_write+0x4da>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bef2:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800bef6:	b923      	cbnz	r3, 800bf02 <tcp_write+0x4da>
 800bef8:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 8090 	beq.w	800c022 <tcp_write+0x5fa>
  return ERR_MEM;
 800bf02:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bf06:	b00f      	add	sp, #60	; 0x3c
 800bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bf0c:	4b67      	ldr	r3, [pc, #412]	; (800c0ac <tcp_write+0x684>)
 800bf0e:	496b      	ldr	r1, [pc, #428]	; (800c0bc <tcp_write+0x694>)
 800bf10:	4868      	ldr	r0, [pc, #416]	; (800c0b4 <tcp_write+0x68c>)
 800bf12:	f240 2285 	movw	r2, #645	; 0x285
 800bf16:	f002 f861 	bl	800dfdc <iprintf>
 800bf1a:	e6db      	b.n	800bcd4 <tcp_write+0x2ac>
    pbuf_free(p);
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf22:	f7fc f9d7 	bl	80082d4 <pbuf_free>
 800bf26:	e7d0      	b.n	800beca <tcp_write+0x4a2>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bf28:	4b60      	ldr	r3, [pc, #384]	; (800c0ac <tcp_write+0x684>)
 800bf2a:	4965      	ldr	r1, [pc, #404]	; (800c0c0 <tcp_write+0x698>)
 800bf2c:	4861      	ldr	r0, [pc, #388]	; (800c0b4 <tcp_write+0x68c>)
 800bf2e:	f240 12c7 	movw	r2, #455	; 0x1c7
 800bf32:	f002 f853 	bl	800dfdc <iprintf>
 800bf36:	9b08      	ldr	r3, [sp, #32]
 800bf38:	9903      	ldr	r1, [sp, #12]
 800bf3a:	891b      	ldrh	r3, [r3, #8]
 800bf3c:	e5c7      	b.n	800bace <tcp_write+0xa6>
 800bf3e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf42:	e7c2      	b.n	800beca <tcp_write+0x4a2>
        pbuf_free(p2);
 800bf44:	4630      	mov	r0, r6
 800bf46:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf4a:	f7fc f9c3 	bl	80082d4 <pbuf_free>
        goto memerr;
 800bf4e:	e7bc      	b.n	800beca <tcp_write+0x4a2>
 800bf50:	9309      	str	r3, [sp, #36]	; 0x24
 800bf52:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf54:	940d      	str	r4, [sp, #52]	; 0x34
 800bf56:	e644      	b.n	800bbe2 <tcp_write+0x1ba>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bf58:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bf5c:	9308      	str	r3, [sp, #32]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f47f ada0 	bne.w	800baa4 <tcp_write+0x7c>
 800bf64:	4b51      	ldr	r3, [pc, #324]	; (800c0ac <tcp_write+0x684>)
 800bf66:	4957      	ldr	r1, [pc, #348]	; (800c0c4 <tcp_write+0x69c>)
 800bf68:	4852      	ldr	r0, [pc, #328]	; (800c0b4 <tcp_write+0x68c>)
 800bf6a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800bf6e:	f002 f835 	bl	800dfdc <iprintf>
 800bf72:	f8b9 8062 	ldrh.w	r8, [r9, #98]	; 0x62
 800bf76:	e590      	b.n	800ba9a <tcp_write+0x72>
  if (length < max_length) {
 800bf78:	4296      	cmp	r6, r2
 800bf7a:	d271      	bcs.n	800c060 <tcp_write+0x638>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bf7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7e:	0799      	lsls	r1, r3, #30
 800bf80:	d407      	bmi.n	800bf92 <tcp_write+0x56a>
 800bf82:	f899 301a 	ldrb.w	r3, [r9, #26]
 800bf86:	065a      	lsls	r2, r3, #25
 800bf88:	d46a      	bmi.n	800c060 <tcp_write+0x638>
         (!first_seg ||
 800bf8a:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d062      	beq.n	800c058 <tcp_write+0x630>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bf92:	b2a9      	uxth	r1, r5
 800bf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf96:	f201 21d3 	addw	r1, r1, #723	; 0x2d3
 800bf9a:	f021 0103 	bic.w	r1, r1, #3
 800bf9e:	4299      	cmp	r1, r3
 800bfa0:	bf28      	it	cs
 800bfa2:	4619      	movcs	r1, r3
 800bfa4:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2004      	movs	r0, #4
 800bfaa:	f7fc fa01 	bl	80083b0 <pbuf_alloc>
  if (p == NULL) {
 800bfae:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d048      	beq.n	800c046 <tcp_write+0x61e>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bfb4:	6803      	ldr	r3, [r0, #0]
 800bfb6:	b133      	cbz	r3, 800bfc6 <tcp_write+0x59e>
 800bfb8:	4b3c      	ldr	r3, [pc, #240]	; (800c0ac <tcp_write+0x684>)
 800bfba:	4943      	ldr	r1, [pc, #268]	; (800c0c8 <tcp_write+0x6a0>)
 800bfbc:	483d      	ldr	r0, [pc, #244]	; (800c0b4 <tcp_write+0x68c>)
 800bfbe:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bfc2:	f002 f80b 	bl	800dfdc <iprintf>
  *oversize = p->len - length;
 800bfc6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bfc8:	9906      	ldr	r1, [sp, #24]
  *oversize = p->len - length;
 800bfca:	897b      	ldrh	r3, [r7, #10]
  p->len = p->tot_len = length;
 800bfcc:	813e      	strh	r6, [r7, #8]
  *oversize = p->len - length;
 800bfce:	1b9b      	subs	r3, r3, r6
 800bfd0:	b29b      	uxth	r3, r3
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bfd2:	b2aa      	uxth	r2, r5
  p->len = p->tot_len = length;
 800bfd4:	817e      	strh	r6, [r7, #10]
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bfd6:	4421      	add	r1, r4
 800bfd8:	6878      	ldr	r0, [r7, #4]
  *oversize = p->len - length;
 800bfda:	9305      	str	r3, [sp, #20]
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bfdc:	f002 faa9 	bl	800e532 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	e6f0      	b.n	800bdc6 <tcp_write+0x39e>
    pcb->flags |= TF_NAGLEMEMERR;
 800bfe4:	f899 301a 	ldrb.w	r3, [r9, #26]
 800bfe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bfec:	f889 301a 	strb.w	r3, [r9, #26]
    return ERR_MEM;
 800bff0:	f04f 30ff 	mov.w	r0, #4294967295
 800bff4:	e537      	b.n	800ba66 <tcp_write+0x3e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bff6:	2008      	movs	r0, #8
 800bff8:	89ae      	ldrh	r6, [r5, #12]
 800bffa:	f7f9 fc59 	bl	80058b0 <lwip_htons>
 800bffe:	4330      	orrs	r0, r6
 800c000:	81a8      	strh	r0, [r5, #12]
  return ERR_OK;
 800c002:	4620      	mov	r0, r4
 800c004:	e52f      	b.n	800ba66 <tcp_write+0x3e>
  u16_t oversize = 0;
 800c006:	2400      	movs	r4, #0
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c008:	4b28      	ldr	r3, [pc, #160]	; (800c0ac <tcp_write+0x684>)
 800c00a:	4930      	ldr	r1, [pc, #192]	; (800c0cc <tcp_write+0x6a4>)
 800c00c:	4829      	ldr	r0, [pc, #164]	; (800c0b4 <tcp_write+0x68c>)
  u16_t oversize = 0;
 800c00e:	9405      	str	r4, [sp, #20]
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c010:	f240 2225 	movw	r2, #549	; 0x225
 800c014:	f001 ffe2 	bl	800dfdc <iprintf>
  u16_t extendlen = 0;
 800c018:	9409      	str	r4, [sp, #36]	; 0x24
  u16_t oversize_used = 0;
 800c01a:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c01c:	9408      	str	r4, [sp, #32]
  struct pbuf *concat_p = NULL;
 800c01e:	940b      	str	r4, [sp, #44]	; 0x2c
 800c020:	e5b4      	b.n	800bb8c <tcp_write+0x164>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c022:	4b22      	ldr	r3, [pc, #136]	; (800c0ac <tcp_write+0x684>)
 800c024:	492a      	ldr	r1, [pc, #168]	; (800c0d0 <tcp_write+0x6a8>)
 800c026:	4823      	ldr	r0, [pc, #140]	; (800c0b4 <tcp_write+0x68c>)
 800c028:	f240 3202 	movw	r2, #770	; 0x302
 800c02c:	f001 ffd6 	bl	800dfdc <iprintf>
  return ERR_MEM;
 800c030:	f04f 30ff 	mov.w	r0, #4294967295
 800c034:	e517      	b.n	800ba66 <tcp_write+0x3e>
 800c036:	9d08      	ldr	r5, [sp, #32]
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c038:	9305      	str	r3, [sp, #20]
  pcb->unsent_oversize = oversize;
 800c03a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800c03e:	f8a9 2064 	strh.w	r2, [r9, #100]	; 0x64
 800c042:	9308      	str	r3, [sp, #32]
 800c044:	e707      	b.n	800be56 <tcp_write+0x42e>
  pcb->flags |= TF_NAGLEMEMERR;
 800c046:	f899 301a 	ldrb.w	r3, [r9, #26]
 800c04a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c04e:	f889 301a 	strb.w	r3, [r9, #26]
 800c052:	e74b      	b.n	800beec <tcp_write+0x4c4>
 800c054:	4618      	mov	r0, r3
 800c056:	e506      	b.n	800ba66 <tcp_write+0x3e>
          pcb->unsent != NULL ||
 800c058:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d198      	bne.n	800bf92 <tcp_write+0x56a>
 800c060:	4631      	mov	r1, r6
 800c062:	e7a0      	b.n	800bfa6 <tcp_write+0x57e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c064:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f47f af0b 	bne.w	800be84 <tcp_write+0x45c>
 800c06e:	4b0f      	ldr	r3, [pc, #60]	; (800c0ac <tcp_write+0x684>)
 800c070:	4917      	ldr	r1, [pc, #92]	; (800c0d0 <tcp_write+0x6a8>)
 800c072:	4810      	ldr	r0, [pc, #64]	; (800c0b4 <tcp_write+0x68c>)
 800c074:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c078:	f001 ffb0 	bl	800dfdc <iprintf>
 800c07c:	e702      	b.n	800be84 <tcp_write+0x45c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c07e:	4b0b      	ldr	r3, [pc, #44]	; (800c0ac <tcp_write+0x684>)
 800c080:	4914      	ldr	r1, [pc, #80]	; (800c0d4 <tcp_write+0x6ac>)
 800c082:	480c      	ldr	r0, [pc, #48]	; (800c0b4 <tcp_write+0x68c>)
 800c084:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800c088:	f001 ffa8 	bl	800dfdc <iprintf>
 800c08c:	f06f 000f 	mvn.w	r0, #15
 800c090:	e4e9      	b.n	800ba66 <tcp_write+0x3e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c092:	b90c      	cbnz	r4, 800c098 <tcp_write+0x670>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c094:	9609      	str	r6, [sp, #36]	; 0x24
 800c096:	e69d      	b.n	800bdd4 <tcp_write+0x3ac>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c098:	4b04      	ldr	r3, [pc, #16]	; (800c0ac <tcp_write+0x684>)
 800c09a:	490f      	ldr	r1, [pc, #60]	; (800c0d8 <tcp_write+0x6b0>)
 800c09c:	4805      	ldr	r0, [pc, #20]	; (800c0b4 <tcp_write+0x68c>)
 800c09e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800c0a2:	f001 ff9b 	bl	800dfdc <iprintf>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c0a6:	9609      	str	r6, [sp, #36]	; 0x24
 800c0a8:	e694      	b.n	800bdd4 <tcp_write+0x3ac>
 800c0aa:	bf00      	nop
 800c0ac:	08012360 	.word	0x08012360
 800c0b0:	080124bc 	.word	0x080124bc
 800c0b4:	0800e670 	.word	0x0800e670
 800c0b8:	0801256c 	.word	0x0801256c
 800c0bc:	0801257c 	.word	0x0801257c
 800c0c0:	080124a4 	.word	0x080124a4
 800c0c4:	08012434 	.word	0x08012434
 800c0c8:	080124fc 	.word	0x080124fc
 800c0cc:	0801253c 	.word	0x0801253c
 800c0d0:	08012600 	.word	0x08012600
 800c0d4:	08012400 	.word	0x08012400
 800c0d8:	08012510 	.word	0x08012510
  } else if (extendlen > 0) {
 800c0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0de:	b323      	cbz	r3, 800c12a <tcp_write+0x702>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c0e0:	b1c5      	cbz	r5, 800c114 <tcp_write+0x6ec>
 800c0e2:	6869      	ldr	r1, [r5, #4]
 800c0e4:	b1b1      	cbz	r1, 800c114 <tcp_write+0x6ec>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0e6:	680a      	ldr	r2, [r1, #0]
 800c0e8:	b1ea      	cbz	r2, 800c126 <tcp_write+0x6fe>
 800c0ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c0ec:	e000      	b.n	800c0f0 <tcp_write+0x6c8>
 800c0ee:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800c0f0:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0f2:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800c0f4:	4423      	add	r3, r4
 800c0f6:	810b      	strh	r3, [r1, #8]
 800c0f8:	4611      	mov	r1, r2
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d1f7      	bne.n	800c0ee <tcp_write+0x6c6>
    last_unsent->len += extendlen;
 800c0fe:	892b      	ldrh	r3, [r5, #8]
    p->tot_len += extendlen;
 800c100:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c102:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 800c104:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 800c106:	4430      	add	r0, r6
    p->len += extendlen;
 800c108:	4431      	add	r1, r6
    last_unsent->len += extendlen;
 800c10a:	4433      	add	r3, r6
    p->tot_len += extendlen;
 800c10c:	8110      	strh	r0, [r2, #8]
    p->len += extendlen;
 800c10e:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 800c110:	812b      	strh	r3, [r5, #8]
 800c112:	e6a0      	b.n	800be56 <tcp_write+0x42e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c114:	490c      	ldr	r1, [pc, #48]	; (800c148 <tcp_write+0x720>)
 800c116:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <tcp_write+0x724>)
 800c118:	480d      	ldr	r0, [pc, #52]	; (800c150 <tcp_write+0x728>)
 800c11a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800c11e:	f001 ff5d 	bl	800dfdc <iprintf>
 800c122:	6869      	ldr	r1, [r5, #4]
 800c124:	e7df      	b.n	800c0e6 <tcp_write+0x6be>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c126:	460a      	mov	r2, r1
 800c128:	e7e9      	b.n	800c0fe <tcp_write+0x6d6>
  if (last_unsent == NULL) {
 800c12a:	2d00      	cmp	r5, #0
 800c12c:	f47f ae93 	bne.w	800be56 <tcp_write+0x42e>
    pcb->unsent = queue;
 800c130:	f8c9 a068 	str.w	sl, [r9, #104]	; 0x68
 800c134:	e691      	b.n	800be5a <tcp_write+0x432>
 800c136:	9d08      	ldr	r5, [sp, #32]
 800c138:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c13c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c13e:	9608      	str	r6, [sp, #32]
 800c140:	e52b      	b.n	800bb9a <tcp_write+0x172>
  if (oversize_used > 0) {
 800c142:	9b08      	ldr	r3, [sp, #32]
 800c144:	461d      	mov	r5, r3
 800c146:	e778      	b.n	800c03a <tcp_write+0x612>
 800c148:	080125c8 	.word	0x080125c8
 800c14c:	08012360 	.word	0x08012360
 800c150:	0800e670 	.word	0x0800e670

0800c154 <tcp_enqueue_flags>:
{
 800c154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c158:	f011 0803 	ands.w	r8, r1, #3
{
 800c15c:	460e      	mov	r6, r1
 800c15e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c160:	f000 80b1 	beq.w	800c2c6 <tcp_enqueue_flags+0x172>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800c164:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800c168:	2b0a      	cmp	r3, #10
 800c16a:	d902      	bls.n	800c172 <tcp_enqueue_flags+0x1e>
 800c16c:	07f1      	lsls	r1, r6, #31
 800c16e:	f140 80cd 	bpl.w	800c30c <tcp_enqueue_flags+0x1b8>
  if (flags & TCP_SYN) {
 800c172:	f016 0702 	ands.w	r7, r6, #2
 800c176:	d171      	bne.n	800c25c <tcp_enqueue_flags+0x108>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c178:	463a      	mov	r2, r7
 800c17a:	4639      	mov	r1, r7
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7fc f917 	bl	80083b0 <pbuf_alloc>
 800c182:	4681      	mov	r9, r0
 800c184:	2800      	cmp	r0, #0
 800c186:	f000 80c1 	beq.w	800c30c <tcp_enqueue_flags+0x1b8>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c18a:	2003      	movs	r0, #3
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c18c:	f8d5 a058 	ldr.w	sl, [r5, #88]	; 0x58
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c190:	f7fb fe8c 	bl	8007eac <memp_malloc>
 800c194:	4604      	mov	r4, r0
 800c196:	2800      	cmp	r0, #0
 800c198:	f000 80ca 	beq.w	800c330 <tcp_enqueue_flags+0x1dc>
  seg->flags = optflags;
 800c19c:	72a7      	strb	r7, [r4, #10]
  seg->p = p;
 800c19e:	e884 0280 	stmia.w	r4, {r7, r9}
 800c1a2:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800c1a6:	f44f 4ba0 	mov.w	fp, #20480	; 0x5000
  seg->len = p->tot_len - optlen;
 800c1aa:	1bdf      	subs	r7, r3, r7
 800c1ac:	8127      	strh	r7, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800c1ae:	4648      	mov	r0, r9
 800c1b0:	2114      	movs	r1, #20
 800c1b2:	f7fb ffdb 	bl	800816c <pbuf_header>
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	f040 80a4 	bne.w	800c306 <tcp_enqueue_flags+0x1b2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c1be:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c1c0:	8ae8      	ldrh	r0, [r5, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c1c2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c1c6:	f8c4 900c 	str.w	r9, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c1ca:	f7f9 fb71 	bl	80058b0 <lwip_htons>
 800c1ce:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c1d2:	8b28      	ldrh	r0, [r5, #24]
 800c1d4:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800c1d8:	f7f9 fb6a 	bl	80058b0 <lwip_htons>
 800c1dc:	f8a9 0002 	strh.w	r0, [r9, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800c1e6:	f7f9 fb67 	bl	80058b8 <lwip_htonl>
 800c1ea:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c1ee:	ea4b 0006 	orr.w	r0, fp, r6
 800c1f2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800c1f6:	f7f9 fb5b 	bl	80058b0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800c1fa:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c1fc:	f8a9 000c 	strh.w	r0, [r9, #12]
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c200:	079a      	lsls	r2, r3, #30
  seg->tcphdr->urgp = 0;
 800c202:	749f      	strb	r7, [r3, #18]
 800c204:	74df      	strb	r7, [r3, #19]
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c206:	d172      	bne.n	800c2ee <tcp_enqueue_flags+0x19a>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c208:	8923      	ldrh	r3, [r4, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d163      	bne.n	800c2d6 <tcp_enqueue_flags+0x182>
  if (pcb->unsent == NULL) {
 800c20e:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800c210:	b90a      	cbnz	r2, 800c216 <tcp_enqueue_flags+0xc2>
 800c212:	e06a      	b.n	800c2ea <tcp_enqueue_flags+0x196>
 800c214:	461a      	mov	r2, r3
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c216:	6813      	ldr	r3, [r2, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1fb      	bne.n	800c214 <tcp_enqueue_flags+0xc0>
    useg->next = seg;
 800c21c:	6014      	str	r4, [r2, #0]
  pcb->unsent_oversize = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c224:	f1b8 0f00 	cmp.w	r8, #0
 800c228:	d002      	beq.n	800c230 <tcp_enqueue_flags+0xdc>
    pcb->snd_lbb++;
 800c22a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800c22c:	3301      	adds	r3, #1
 800c22e:	65ab      	str	r3, [r5, #88]	; 0x58
  if (flags & TCP_FIN) {
 800c230:	07f3      	lsls	r3, r6, #31
 800c232:	d503      	bpl.n	800c23c <tcp_enqueue_flags+0xe8>
    pcb->flags |= TF_FIN;
 800c234:	7eab      	ldrb	r3, [r5, #26]
 800c236:	f043 0320 	orr.w	r3, r3, #32
 800c23a:	76ab      	strb	r3, [r5, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c23c:	6860      	ldr	r0, [r4, #4]
 800c23e:	f7fc fa69 	bl	8008714 <pbuf_clen>
 800c242:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800c246:	4418      	add	r0, r3
 800c248:	b280      	uxth	r0, r0
 800c24a:	f8a5 0062 	strh.w	r0, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800c24e:	2800      	cmp	r0, #0
 800c250:	d037      	beq.n	800c2c2 <tcp_enqueue_flags+0x16e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c252:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800c254:	b398      	cbz	r0, 800c2be <tcp_enqueue_flags+0x16a>
  return ERR_OK;
 800c256:	2000      	movs	r0, #0
 800c258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c25c:	2200      	movs	r2, #0
 800c25e:	4610      	mov	r0, r2
 800c260:	2104      	movs	r1, #4
 800c262:	f7fc f8a5 	bl	80083b0 <pbuf_alloc>
 800c266:	4681      	mov	r9, r0
 800c268:	2800      	cmp	r0, #0
 800c26a:	d04f      	beq.n	800c30c <tcp_enqueue_flags+0x1b8>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c26c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800c270:	2b03      	cmp	r3, #3
 800c272:	d806      	bhi.n	800c282 <tcp_enqueue_flags+0x12e>
 800c274:	4b30      	ldr	r3, [pc, #192]	; (800c338 <tcp_enqueue_flags+0x1e4>)
 800c276:	4931      	ldr	r1, [pc, #196]	; (800c33c <tcp_enqueue_flags+0x1e8>)
 800c278:	4831      	ldr	r0, [pc, #196]	; (800c340 <tcp_enqueue_flags+0x1ec>)
 800c27a:	f240 3241 	movw	r2, #833	; 0x341
 800c27e:	f001 fead 	bl	800dfdc <iprintf>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c282:	2003      	movs	r0, #3
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c284:	f8d5 a058 	ldr.w	sl, [r5, #88]	; 0x58
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c288:	f7fb fe10 	bl	8007eac <memp_malloc>
 800c28c:	4604      	mov	r4, r0
 800c28e:	2800      	cmp	r0, #0
 800c290:	d04e      	beq.n	800c330 <tcp_enqueue_flags+0x1dc>
  seg->flags = optflags;
 800c292:	2301      	movs	r3, #1
 800c294:	7283      	strb	r3, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c296:	f8b9 3008 	ldrh.w	r3, [r9, #8]
  seg->p = p;
 800c29a:	f8c0 9004 	str.w	r9, [r0, #4]
  seg->next = NULL;
 800c29e:	2200      	movs	r2, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c2a0:	2b03      	cmp	r3, #3
  seg->next = NULL;
 800c2a2:	6002      	str	r2, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c2a4:	d82b      	bhi.n	800c2fe <tcp_enqueue_flags+0x1aa>
 800c2a6:	4b24      	ldr	r3, [pc, #144]	; (800c338 <tcp_enqueue_flags+0x1e4>)
 800c2a8:	4926      	ldr	r1, [pc, #152]	; (800c344 <tcp_enqueue_flags+0x1f0>)
 800c2aa:	4825      	ldr	r0, [pc, #148]	; (800c340 <tcp_enqueue_flags+0x1ec>)
 800c2ac:	22ba      	movs	r2, #186	; 0xba
 800c2ae:	f001 fe95 	bl	800dfdc <iprintf>
 800c2b2:	f44f 4bc0 	mov.w	fp, #24576	; 0x6000
 800c2b6:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800c2ba:	2704      	movs	r7, #4
 800c2bc:	e775      	b.n	800c1aa <tcp_enqueue_flags+0x56>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c2be:	6eac      	ldr	r4, [r5, #104]	; 0x68
 800c2c0:	b364      	cbz	r4, 800c31c <tcp_enqueue_flags+0x1c8>
}
 800c2c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2c6:	4b1c      	ldr	r3, [pc, #112]	; (800c338 <tcp_enqueue_flags+0x1e4>)
 800c2c8:	491f      	ldr	r1, [pc, #124]	; (800c348 <tcp_enqueue_flags+0x1f4>)
 800c2ca:	481d      	ldr	r0, [pc, #116]	; (800c340 <tcp_enqueue_flags+0x1ec>)
 800c2cc:	f240 321b 	movw	r2, #795	; 0x31b
 800c2d0:	f001 fe84 	bl	800dfdc <iprintf>
 800c2d4:	e746      	b.n	800c164 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c2d6:	f240 324a 	movw	r2, #842	; 0x34a
 800c2da:	4b17      	ldr	r3, [pc, #92]	; (800c338 <tcp_enqueue_flags+0x1e4>)
 800c2dc:	491b      	ldr	r1, [pc, #108]	; (800c34c <tcp_enqueue_flags+0x1f8>)
 800c2de:	4818      	ldr	r0, [pc, #96]	; (800c340 <tcp_enqueue_flags+0x1ec>)
 800c2e0:	f001 fe7c 	bl	800dfdc <iprintf>
  if (pcb->unsent == NULL) {
 800c2e4:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	d195      	bne.n	800c216 <tcp_enqueue_flags+0xc2>
    pcb->unsent = seg;
 800c2ea:	66ac      	str	r4, [r5, #104]	; 0x68
 800c2ec:	e797      	b.n	800c21e <tcp_enqueue_flags+0xca>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c2ee:	4b12      	ldr	r3, [pc, #72]	; (800c338 <tcp_enqueue_flags+0x1e4>)
 800c2f0:	4917      	ldr	r1, [pc, #92]	; (800c350 <tcp_enqueue_flags+0x1fc>)
 800c2f2:	4813      	ldr	r0, [pc, #76]	; (800c340 <tcp_enqueue_flags+0x1ec>)
 800c2f4:	f240 3249 	movw	r2, #841	; 0x349
 800c2f8:	f001 fe70 	bl	800dfdc <iprintf>
 800c2fc:	e784      	b.n	800c208 <tcp_enqueue_flags+0xb4>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c2fe:	f44f 4bc0 	mov.w	fp, #24576	; 0x6000
 800c302:	2704      	movs	r7, #4
 800c304:	e751      	b.n	800c1aa <tcp_enqueue_flags+0x56>
    tcp_seg_free(seg);
 800c306:	4620      	mov	r0, r4
 800c308:	f7fc ff70 	bl	80091ec <tcp_seg_free>
    pcb->flags |= TF_NAGLEMEMERR;
 800c30c:	7eab      	ldrb	r3, [r5, #26]
 800c30e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c312:	76ab      	strb	r3, [r5, #26]
    return ERR_MEM;
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <tcp_enqueue_flags+0x1e4>)
 800c31e:	490d      	ldr	r1, [pc, #52]	; (800c354 <tcp_enqueue_flags+0x200>)
 800c320:	4807      	ldr	r0, [pc, #28]	; (800c340 <tcp_enqueue_flags+0x1ec>)
 800c322:	f240 326d 	movw	r2, #877	; 0x36d
 800c326:	f001 fe59 	bl	800dfdc <iprintf>
  return ERR_OK;
 800c32a:	4620      	mov	r0, r4
 800c32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_free(p);
 800c330:	4648      	mov	r0, r9
 800c332:	f7fb ffcf 	bl	80082d4 <pbuf_free>
 800c336:	e7e9      	b.n	800c30c <tcp_enqueue_flags+0x1b8>
 800c338:	08012360 	.word	0x08012360
 800c33c:	0801229c 	.word	0x0801229c
 800c340:	0800e670 	.word	0x0800e670
 800c344:	080122d8 	.word	0x080122d8
 800c348:	08012244 	.word	0x08012244
 800c34c:	080123ac 	.word	0x080123ac
 800c350:	08012394 	.word	0x08012394
 800c354:	080123d8 	.word	0x080123d8

0800c358 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35a:	4604      	mov	r4, r0
 800c35c:	b085      	sub	sp, #20
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c35e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c360:	f7f9 faaa 	bl	80058b8 <lwip_htonl>
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c364:	2200      	movs	r2, #0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c366:	4607      	mov	r7, r0
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c368:	2114      	movs	r1, #20
 800c36a:	2001      	movs	r0, #1
 800c36c:	f7fc f820 	bl	80083b0 <pbuf_alloc>
  if (p != NULL) {
 800c370:	2800      	cmp	r0, #0
 800c372:	d052      	beq.n	800c41a <tcp_send_empty_ack+0xc2>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c374:	8943      	ldrh	r3, [r0, #10]
 800c376:	2b13      	cmp	r3, #19
 800c378:	4606      	mov	r6, r0
 800c37a:	dd47      	ble.n	800c40c <tcp_send_empty_ack+0xb4>
    tcphdr->src = lwip_htons(pcb->local_port);
 800c37c:	8ae0      	ldrh	r0, [r4, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800c37e:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800c380:	f7f9 fa96 	bl	80058b0 <lwip_htons>
 800c384:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c386:	8b20      	ldrh	r0, [r4, #24]
 800c388:	f7f9 fa92 	bl	80058b0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c38c:	606f      	str	r7, [r5, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c38e:	8068      	strh	r0, [r5, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c390:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c392:	f7f9 fa91 	bl	80058b8 <lwip_htonl>
 800c396:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800c398:	f245 0010 	movw	r0, #20496	; 0x5010
 800c39c:	f7f9 fa88 	bl	80058b0 <lwip_htons>
 800c3a0:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c3a2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800c3a4:	f7f9 fa84 	bl	80058b0 <lwip_htons>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c3aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c3ac:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800c3ae:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3b0:	4411      	add	r1, r2
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c3b2:	1d27      	adds	r7, r4, #4
    tcphdr->chksum = 0;
 800c3b4:	742b      	strb	r3, [r5, #16]
 800c3b6:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800c3b8:	74ab      	strb	r3, [r5, #18]
 800c3ba:	74eb      	strb	r3, [r5, #19]
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c3bc:	4638      	mov	r0, r7
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3be:	62e1      	str	r1, [r4, #44]	; 0x2c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c3c0:	f7fa fcba 	bl	8006d38 <ip4_route>
  if (netif == NULL) {
 800c3c4:	b1b0      	cbz	r0, 800c3f4 <tcp_send_empty_ack+0x9c>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800c3c6:	7a61      	ldrb	r1, [r4, #9]
 800c3c8:	7aa3      	ldrb	r3, [r4, #10]
 800c3ca:	9002      	str	r0, [sp, #8]
 800c3cc:	2006      	movs	r0, #6
 800c3ce:	9001      	str	r0, [sp, #4]
 800c3d0:	9100      	str	r1, [sp, #0]
 800c3d2:	463a      	mov	r2, r7
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7fa fdba 	bl	8006f50 <ip4_output_if>
 800c3dc:	4605      	mov	r5, r0
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7fb ff78 	bl	80082d4 <pbuf_free>

  if (err != ERR_OK) {
 800c3e4:	b95d      	cbnz	r5, 800c3fe <tcp_send_empty_ack+0xa6>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c3e6:	7ea3      	ldrb	r3, [r4, #26]
  }

  return err;
}
 800c3e8:	4628      	mov	r0, r5
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c3ea:	f023 0303 	bic.w	r3, r3, #3
 800c3ee:	76a3      	strb	r3, [r4, #26]
}
 800c3f0:	b005      	add	sp, #20
 800c3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  pbuf_free(p);
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7fb ff6d 	bl	80082d4 <pbuf_free>
    err = ERR_RTE;
 800c3fa:	f06f 0503 	mvn.w	r5, #3
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c3fe:	7ea3      	ldrb	r3, [r4, #26]
}
 800c400:	4628      	mov	r0, r5
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c402:	f043 0303 	orr.w	r3, r3, #3
 800c406:	76a3      	strb	r3, [r4, #26]
}
 800c408:	b005      	add	sp, #20
 800c40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <tcp_send_empty_ack+0xd4>)
 800c40e:	4908      	ldr	r1, [pc, #32]	; (800c430 <tcp_send_empty_ack+0xd8>)
 800c410:	4808      	ldr	r0, [pc, #32]	; (800c434 <tcp_send_empty_ack+0xdc>)
 800c412:	2273      	movs	r2, #115	; 0x73
 800c414:	f001 fde2 	bl	800dfdc <iprintf>
 800c418:	e7b0      	b.n	800c37c <tcp_send_empty_ack+0x24>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c41a:	7ea3      	ldrb	r3, [r4, #26]
    return ERR_BUF;
 800c41c:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c420:	f043 0303 	orr.w	r3, r3, #3
}
 800c424:	4628      	mov	r0, r5
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800c426:	76a3      	strb	r3, [r4, #26]
}
 800c428:	b005      	add	sp, #20
 800c42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c42c:	08012360 	.word	0x08012360
 800c430:	08012330 	.word	0x08012330
 800c434:	0800e670 	.word	0x0800e670

0800c438 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c43c:	7d03      	ldrb	r3, [r0, #20]
 800c43e:	2b01      	cmp	r3, #1
{
 800c440:	b085      	sub	sp, #20
 800c442:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c444:	f000 8193 	beq.w	800c76e <tcp_output+0x336>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c448:	4bb4      	ldr	r3, [pc, #720]	; (800c71c <tcp_output+0x2e4>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	429d      	cmp	r5, r3
 800c44e:	f000 819a 	beq.w	800c786 <tcp_output+0x34e>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c452:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 800c456:	f8b5 2048 	ldrh.w	r2, [r5, #72]	; 0x48
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800c45a:	7eab      	ldrb	r3, [r5, #26]
  seg = pcb->unsent;
 800c45c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c45e:	4297      	cmp	r7, r2
 800c460:	bf28      	it	cs
 800c462:	4617      	movcs	r7, r2
  if (pcb->flags & TF_ACK_NOW &&
 800c464:	0799      	lsls	r1, r3, #30
 800c466:	f100 809e 	bmi.w	800c5a6 <tcp_output+0x16e>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c46a:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800c46c:	b90e      	cbnz	r6, 800c472 <tcp_output+0x3a>
 800c46e:	e003      	b.n	800c478 <tcp_output+0x40>
 800c470:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800c472:	6833      	ldr	r3, [r6, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1fb      	bne.n	800c470 <tcp_output+0x38>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c478:	f105 0804 	add.w	r8, r5, #4
 800c47c:	4640      	mov	r0, r8
 800c47e:	f7fa fc5b 	bl	8006d38 <ip4_route>
  if (netif == NULL) {
 800c482:	4681      	mov	r9, r0
 800c484:	2800      	cmp	r0, #0
 800c486:	f000 8182 	beq.w	800c78e <tcp_output+0x356>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c48a:	b10d      	cbz	r5, 800c490 <tcp_output+0x58>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b913      	cbnz	r3, 800c496 <tcp_output+0x5e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c490:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c494:	602b      	str	r3, [r5, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800c496:	2c00      	cmp	r4, #0
 800c498:	f000 8097 	beq.w	800c5ca <tcp_output+0x192>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c49c:	68e3      	ldr	r3, [r4, #12]
 800c49e:	6858      	ldr	r0, [r3, #4]
 800c4a0:	f7f9 fa0a 	bl	80058b8 <lwip_htonl>
 800c4a4:	8923      	ldrh	r3, [r4, #8]
 800c4a6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800c4a8:	1a9b      	subs	r3, r3, r2
 800c4aa:	4418      	add	r0, r3
  if (seg != NULL &&
 800c4ac:	4287      	cmp	r7, r0
 800c4ae:	d202      	bcs.n	800c4b6 <tcp_output+0x7e>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800c4b0:	2f00      	cmp	r7, #0
 800c4b2:	f040 8146 	bne.w	800c742 <tcp_output+0x30a>
    }
    goto output_done;
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c4b6:	68e3      	ldr	r3, [r4, #12]
 800c4b8:	6858      	ldr	r0, [r3, #4]
 800c4ba:	f7f9 f9fd 	bl	80058b8 <lwip_htonl>
 800c4be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c4c0:	8922      	ldrh	r2, [r4, #8]
 800c4c2:	1ac0      	subs	r0, r0, r3
 800c4c4:	4410      	add	r0, r2
  while (seg != NULL &&
 800c4c6:	4287      	cmp	r7, r0
 800c4c8:	d37f      	bcc.n	800c5ca <tcp_output+0x192>
    LWIP_ASSERT("RST not expected here!",
 800c4ca:	68e3      	ldr	r3, [r4, #12]
 800c4cc:	8998      	ldrh	r0, [r3, #12]
 800c4ce:	f7f9 f9ef 	bl	80058b0 <lwip_htons>
 800c4d2:	0742      	lsls	r2, r0, #29
 800c4d4:	f100 80cc 	bmi.w	800c670 <tcp_output+0x238>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c4d8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c4da:	b15b      	cbz	r3, 800c4f4 <tcp_output+0xbc>
 800c4dc:	7eab      	ldrb	r3, [r5, #26]
 800c4de:	f013 0f44 	tst.w	r3, #68	; 0x44
 800c4e2:	d107      	bne.n	800c4f4 <tcp_output+0xbc>
 800c4e4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	f000 80f7 	beq.w	800c6da <tcp_output+0x2a2>
 800c4ec:	680a      	ldr	r2, [r1, #0]
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	f000 80ee 	beq.w	800c6d0 <tcp_output+0x298>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c4f4:	7d2b      	ldrb	r3, [r5, #20]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d00a      	beq.n	800c510 <tcp_output+0xd8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c4fa:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800c4fe:	2010      	movs	r0, #16
 800c500:	f8bb a00c 	ldrh.w	sl, [fp, #12]
 800c504:	f7f9 f9d4 	bl	80058b0 <lwip_htons>
 800c508:	ea4a 0000 	orr.w	r0, sl, r0
 800c50c:	f8ab 000c 	strh.w	r0, [fp, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c510:	6863      	ldr	r3, [r4, #4]
 800c512:	89db      	ldrh	r3, [r3, #14]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d163      	bne.n	800c5e0 <tcp_output+0x1a8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c518:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c51a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c51e:	f7f9 f9cb 	bl	80058b8 <lwip_htonl>
 800c522:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c526:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800c528:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c52c:	f7f9 f9c0 	bl	80058b0 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c530:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800c532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c534:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c538:	4413      	add	r3, r2
 800c53a:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c53c:	7aa3      	ldrb	r3, [r4, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c53e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c542:	07db      	lsls	r3, r3, #31
 800c544:	f100 80dc 	bmi.w	800c700 <tcp_output+0x2c8>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c548:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800c54c:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c54e:	bfbc      	itt	lt
 800c550:	2300      	movlt	r3, #0
 800c552:	862b      	strhlt	r3, [r5, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c554:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80e8 	beq.w	800c72c <tcp_output+0x2f4>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c55c:	6860      	ldr	r0, [r4, #4]
 800c55e:	6843      	ldr	r3, [r0, #4]
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
  seg->p->tot_len -= len;
 800c560:	8902      	ldrh	r2, [r0, #8]
  seg->p->len -= len;
 800c562:	8941      	ldrh	r1, [r0, #10]

  seg->p->payload = seg->tcphdr;
 800c564:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c568:	ebaa 0303 	sub.w	r3, sl, r3
 800c56c:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c56e:	1ac9      	subs	r1, r1, r3
  seg->p->tot_len -= len;
 800c570:	1ad3      	subs	r3, r2, r3

  seg->tcphdr->chksum = 0;
 800c572:	2200      	movs	r2, #0
  seg->p->len -= len;
 800c574:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800c576:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800c578:	f88a 2010 	strb.w	r2, [sl, #16]
 800c57c:	f88a 2011 	strb.w	r2, [sl, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c580:	7a69      	ldrb	r1, [r5, #9]
 800c582:	7aab      	ldrb	r3, [r5, #10]
 800c584:	f8cd 9008 	str.w	r9, [sp, #8]
 800c588:	2206      	movs	r2, #6
 800c58a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800c58e:	4642      	mov	r2, r8
 800c590:	4629      	mov	r1, r5
 800c592:	f7fa fcdd 	bl	8006f50 <ip4_output_if>
    if (err != ERR_OK) {
 800c596:	b318      	cbz	r0, 800c5e0 <tcp_output+0x1a8>
      pcb->flags |= TF_NAGLEMEMERR;
 800c598:	7eab      	ldrb	r3, [r5, #26]
 800c59a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c59e:	76ab      	strb	r3, [r5, #26]
}
 800c5a0:	b005      	add	sp, #20
 800c5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pcb->flags & TF_ACK_NOW &&
 800c5a6:	b154      	cbz	r4, 800c5be <tcp_output+0x186>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800c5a8:	68e3      	ldr	r3, [r4, #12]
 800c5aa:	6858      	ldr	r0, [r3, #4]
 800c5ac:	f7f9 f984 	bl	80058b8 <lwip_htonl>
 800c5b0:	8923      	ldrh	r3, [r4, #8]
 800c5b2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	4418      	add	r0, r3
     (seg == NULL ||
 800c5b8:	4287      	cmp	r7, r0
 800c5ba:	f4bf af56 	bcs.w	800c46a <tcp_output+0x32>
     return tcp_send_empty_ack(pcb);
 800c5be:	4628      	mov	r0, r5
}
 800c5c0:	b005      	add	sp, #20
 800c5c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800c5c6:	f7ff bec7 	b.w	800c358 <tcp_send_empty_ack>
 800c5ca:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800c5cc:	7eab      	ldrb	r3, [r5, #26]
  if (pcb->unsent == NULL) {
 800c5ce:	2900      	cmp	r1, #0
 800c5d0:	d04a      	beq.n	800c668 <tcp_output+0x230>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800c5d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d6:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800c5d8:	2000      	movs	r0, #0
}
 800c5da:	b005      	add	sp, #20
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->state != SYN_SENT) {
 800c5e0:	7d2b      	ldrb	r3, [r5, #20]
    pcb->unsent = seg->next;
 800c5e2:	6822      	ldr	r2, [r4, #0]
 800c5e4:	66aa      	str	r2, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d003      	beq.n	800c5f2 <tcp_output+0x1ba>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c5ea:	7eab      	ldrb	r3, [r5, #26]
 800c5ec:	f023 0303 	bic.w	r3, r3, #3
 800c5f0:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5f2:	68e3      	ldr	r3, [r4, #12]
 800c5f4:	6858      	ldr	r0, [r3, #4]
 800c5f6:	f7f9 f95f 	bl	80058b8 <lwip_htonl>
 800c5fa:	68e3      	ldr	r3, [r4, #12]
 800c5fc:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 800c600:	4682      	mov	sl, r0
 800c602:	8998      	ldrh	r0, [r3, #12]
 800c604:	f7f9 f954 	bl	80058b0 <lwip_htons>
 800c608:	f010 0003 	ands.w	r0, r0, #3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c60c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c60e:	44da      	add	sl, fp
 800c610:	bf18      	it	ne
 800c612:	2001      	movne	r0, #1
 800c614:	4450      	add	r0, sl
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c616:	1a1b      	subs	r3, r3, r0
 800c618:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800c61a:	68e3      	ldr	r3, [r4, #12]
      pcb->snd_nxt = snd_nxt;
 800c61c:	bfb8      	it	lt
 800c61e:	64e8      	strlt	r0, [r5, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800c620:	8998      	ldrh	r0, [r3, #12]
 800c622:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800c626:	f7f9 f943 	bl	80058b0 <lwip_htons>
 800c62a:	f010 0003 	ands.w	r0, r0, #3
 800c62e:	bf18      	it	ne
 800c630:	2001      	movne	r0, #1
 800c632:	eb10 0f0a 	cmn.w	r0, sl
 800c636:	d023      	beq.n	800c680 <tcp_output+0x248>
      if (pcb->unacked == NULL) {
 800c638:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      seg->next = NULL;
 800c63a:	2200      	movs	r2, #0
 800c63c:	6022      	str	r2, [r4, #0]
      if (pcb->unacked == NULL) {
 800c63e:	b31b      	cbz	r3, 800c688 <tcp_output+0x250>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c640:	68e3      	ldr	r3, [r4, #12]
 800c642:	6858      	ldr	r0, [r3, #4]
 800c644:	f7f9 f938 	bl	80058b8 <lwip_htonl>
 800c648:	68f3      	ldr	r3, [r6, #12]
 800c64a:	4682      	mov	sl, r0
 800c64c:	6858      	ldr	r0, [r3, #4]
 800c64e:	f7f9 f933 	bl	80058b8 <lwip_htonl>
 800c652:	ebaa 0000 	sub.w	r0, sl, r0
 800c656:	2800      	cmp	r0, #0
 800c658:	db19      	blt.n	800c68e <tcp_output+0x256>
          useg->next = seg;
 800c65a:	6034      	str	r4, [r6, #0]
 800c65c:	4626      	mov	r6, r4
    seg = pcb->unsent;
 800c65e:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800c660:	2c00      	cmp	r4, #0
 800c662:	f47f af28 	bne.w	800c4b6 <tcp_output+0x7e>
 800c666:	7eab      	ldrb	r3, [r5, #26]
    pcb->unsent_oversize = 0;
 800c668:	2200      	movs	r2, #0
 800c66a:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
 800c66e:	e7b0      	b.n	800c5d2 <tcp_output+0x19a>
    LWIP_ASSERT("RST not expected here!",
 800c670:	4b2b      	ldr	r3, [pc, #172]	; (800c720 <tcp_output+0x2e8>)
 800c672:	492c      	ldr	r1, [pc, #176]	; (800c724 <tcp_output+0x2ec>)
 800c674:	482c      	ldr	r0, [pc, #176]	; (800c728 <tcp_output+0x2f0>)
 800c676:	f240 4246 	movw	r2, #1094	; 0x446
 800c67a:	f001 fcaf 	bl	800dfdc <iprintf>
 800c67e:	e72b      	b.n	800c4d8 <tcp_output+0xa0>
      tcp_seg_free(seg);
 800c680:	4620      	mov	r0, r4
 800c682:	f7fc fdb3 	bl	80091ec <tcp_seg_free>
 800c686:	e7ea      	b.n	800c65e <tcp_output+0x226>
        pcb->unacked = seg;
 800c688:	66ec      	str	r4, [r5, #108]	; 0x6c
 800c68a:	4626      	mov	r6, r4
 800c68c:	e7e7      	b.n	800c65e <tcp_output+0x226>
          while (*cur_seg &&
 800c68e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c690:	f105 0b6c 	add.w	fp, r5, #108	; 0x6c
          while (*cur_seg &&
 800c694:	b1c3      	cbz	r3, 800c6c8 <tcp_output+0x290>
 800c696:	462a      	mov	r2, r5
 800c698:	465d      	mov	r5, fp
 800c69a:	4693      	mov	fp, r2
 800c69c:	e002      	b.n	800c6a4 <tcp_output+0x26c>
              cur_seg = &((*cur_seg)->next );
 800c69e:	682d      	ldr	r5, [r5, #0]
          while (*cur_seg &&
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	b34b      	cbz	r3, 800c6f8 <tcp_output+0x2c0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	6858      	ldr	r0, [r3, #4]
 800c6a8:	f7f9 f906 	bl	80058b8 <lwip_htonl>
 800c6ac:	68e3      	ldr	r3, [r4, #12]
 800c6ae:	4682      	mov	sl, r0
 800c6b0:	6858      	ldr	r0, [r3, #4]
 800c6b2:	f7f9 f901 	bl	80058b8 <lwip_htonl>
 800c6b6:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	dbef      	blt.n	800c69e <tcp_output+0x266>
 800c6be:	465b      	mov	r3, fp
 800c6c0:	46ab      	mov	fp, r5
 800c6c2:	461d      	mov	r5, r3
 800c6c4:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800c6c8:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800c6ca:	f8cb 4000 	str.w	r4, [fp]
 800c6ce:	e7c6      	b.n	800c65e <tcp_output+0x226>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c6d0:	8908      	ldrh	r0, [r1, #8]
 800c6d2:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800c6d4:	4290      	cmp	r0, r2
 800c6d6:	f4bf af0d 	bcs.w	800c4f4 <tcp_output+0xbc>
 800c6da:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	f43f af08 	beq.w	800c4f4 <tcp_output+0xbc>
 800c6e4:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800c6e8:	2a0a      	cmp	r2, #10
 800c6ea:	f63f af03 	bhi.w	800c4f4 <tcp_output+0xbc>
 800c6ee:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c6f2:	f47f aeff 	bne.w	800c4f4 <tcp_output+0xbc>
 800c6f6:	e76a      	b.n	800c5ce <tcp_output+0x196>
 800c6f8:	465a      	mov	r2, fp
 800c6fa:	46ab      	mov	fp, r5
 800c6fc:	4615      	mov	r5, r2
 800c6fe:	e7e3      	b.n	800c6c8 <tcp_output+0x290>
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c700:	4641      	mov	r1, r8
 800c702:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 800c706:	f7fd fc61 	bl	8009fcc <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c70a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c70e:	f7f9 f8d3 	bl	80058b8 <lwip_htonl>
 800c712:	f8ca 0014 	str.w	r0, [sl, #20]
 800c716:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c71a:	e715      	b.n	800c548 <tcp_output+0x110>
 800c71c:	200088b0 	.word	0x200088b0
 800c720:	08012360 	.word	0x08012360
 800c724:	08012318 	.word	0x08012318
 800c728:	0800e670 	.word	0x0800e670
    pcb->rttest = tcp_ticks;
 800c72c:	4b19      	ldr	r3, [pc, #100]	; (800c794 <tcp_output+0x35c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c732:	f8da 0004 	ldr.w	r0, [sl, #4]
 800c736:	f7f9 f8bf 	bl	80058b8 <lwip_htonl>
 800c73a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c73e:	63a8      	str	r0, [r5, #56]	; 0x38
 800c740:	e70c      	b.n	800c55c <tcp_output+0x124>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800c742:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800c746:	429f      	cmp	r7, r3
 800c748:	f47f aeb5 	bne.w	800c4b6 <tcp_output+0x7e>
 800c74c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f47f aeb1 	bne.w	800c4b6 <tcp_output+0x7e>
    if (pcb->persist_backoff == 0) {
 800c754:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f47f af36 	bne.w	800c5ca <tcp_output+0x192>
      pcb->persist_backoff = 1;
 800c75e:	2201      	movs	r2, #1
      pcb->persist_cnt = 0;
 800c760:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800c764:	f885 2095 	strb.w	r2, [r5, #149]	; 0x95
 800c768:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800c76a:	7eab      	ldrb	r3, [r5, #26]
 800c76c:	e72f      	b.n	800c5ce <tcp_output+0x196>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c76e:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <tcp_output+0x360>)
 800c770:	490a      	ldr	r1, [pc, #40]	; (800c79c <tcp_output+0x364>)
 800c772:	480b      	ldr	r0, [pc, #44]	; (800c7a0 <tcp_output+0x368>)
 800c774:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800c778:	f001 fc30 	bl	800dfdc <iprintf>
  if (tcp_input_pcb == pcb) {
 800c77c:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <tcp_output+0x36c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	429d      	cmp	r5, r3
 800c782:	f47f ae66 	bne.w	800c452 <tcp_output+0x1a>
    return ERR_OK;
 800c786:	2000      	movs	r0, #0
}
 800c788:	b005      	add	sp, #20
 800c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_RTE;
 800c78e:	f06f 0003 	mvn.w	r0, #3
 800c792:	e722      	b.n	800c5da <tcp_output+0x1a2>
 800c794:	200088a0 	.word	0x200088a0
 800c798:	08012360 	.word	0x08012360
 800c79c:	080122f0 	.word	0x080122f0
 800c7a0:	0800e670 	.word	0x0800e670
 800c7a4:	200088b0 	.word	0x200088b0

0800c7a8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	4680      	mov	r8, r0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	4691      	mov	r9, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c7b4:	2114      	movs	r1, #20
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2001      	movs	r0, #1
{
 800c7ba:	461f      	mov	r7, r3
 800c7bc:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c7c0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c7c4:	f7fb fdf4 	bl	80083b0 <pbuf_alloc>
  if (p == NULL) {
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d03d      	beq.n	800c848 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c7cc:	8943      	ldrh	r3, [r0, #10]
 800c7ce:	2b13      	cmp	r3, #19
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	d931      	bls.n	800c838 <tcp_rst+0x90>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 800c7d4:	4620      	mov	r0, r4
  tcphdr = (struct tcp_hdr *)p->payload;
 800c7d6:	6874      	ldr	r4, [r6, #4]
  tcphdr->src = lwip_htons(local_port);
 800c7d8:	f7f9 f86a 	bl	80058b0 <lwip_htons>
 800c7dc:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c7de:	4650      	mov	r0, sl
 800c7e0:	f7f9 f866 	bl	80058b0 <lwip_htons>
 800c7e4:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	f7f9 f866 	bl	80058b8 <lwip_htonl>
 800c7ec:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f7f9 f862 	bl	80058b8 <lwip_htonl>
 800c7f4:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c7f6:	f245 0014 	movw	r0, #20500	; 0x5014
 800c7fa:	f7f9 f859 	bl	80058b0 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c7fe:	2500      	movs	r5, #0
 800c800:	2310      	movs	r3, #16
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c802:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c804:	73a3      	strb	r3, [r4, #14]
 800c806:	73e5      	strb	r5, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800c808:	7425      	strb	r5, [r4, #16]
 800c80a:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 800c80c:	74a5      	strb	r5, [r4, #18]
 800c80e:	74e5      	strb	r5, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c810:	4638      	mov	r0, r7
 800c812:	f7fa fa91 	bl	8006d38 <ip4_route>
  if (netif != NULL) {
 800c816:	b148      	cbz	r0, 800c82c <tcp_rst+0x84>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c818:	2306      	movs	r3, #6
 800c81a:	9002      	str	r0, [sp, #8]
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	9500      	str	r5, [sp, #0]
 800c820:	463a      	mov	r2, r7
 800c822:	4649      	mov	r1, r9
 800c824:	23ff      	movs	r3, #255	; 0xff
 800c826:	4630      	mov	r0, r6
 800c828:	f7fa fb92 	bl	8006f50 <ip4_output_if>
  }
  pbuf_free(p);
 800c82c:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c82e:	b004      	add	sp, #16
 800c830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 800c834:	f7fb bd4e 	b.w	80082d4 <pbuf_free>
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <tcp_rst+0xa8>)
 800c83a:	4906      	ldr	r1, [pc, #24]	; (800c854 <tcp_rst+0xac>)
 800c83c:	4806      	ldr	r0, [pc, #24]	; (800c858 <tcp_rst+0xb0>)
 800c83e:	f240 524d 	movw	r2, #1357	; 0x54d
 800c842:	f001 fbcb 	bl	800dfdc <iprintf>
 800c846:	e7c5      	b.n	800c7d4 <tcp_rst+0x2c>
}
 800c848:	b004      	add	sp, #16
 800c84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84e:	bf00      	nop
 800c850:	08012360 	.word	0x08012360
 800c854:	08012330 	.word	0x08012330
 800c858:	0800e670 	.word	0x0800e670

0800c85c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c85c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800c85e:	b1b9      	cbz	r1, 800c890 <tcp_rexmit_rto+0x34>
{
 800c860:	b410      	push	{r4}
 800c862:	460a      	mov	r2, r1
 800c864:	e000      	b.n	800c868 <tcp_rexmit_rto+0xc>
 800c866:	461a      	mov	r2, r3
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c868:	6813      	ldr	r3, [r2, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1fb      	bne.n	800c866 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c86e:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800c870:	6014      	str	r4, [r2, #0]
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c872:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  pcb->unacked = NULL;
 800c876:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (pcb->nrtx < 0xFF) {
 800c878:	2aff      	cmp	r2, #255	; 0xff
    ++pcb->nrtx;
 800c87a:	bf1c      	itt	ne
 800c87c:	3201      	addne	r2, #1
 800c87e:	f880 2042 	strbne.w	r2, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c882:	2300      	movs	r3, #0
  pcb->unsent = pcb->unacked;
 800c884:	6681      	str	r1, [r0, #104]	; 0x68
  pcb->rttest = 0;
 800c886:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800c888:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800c88c:	f7ff bdd4 	b.w	800c438 <tcp_output>
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop

0800c894 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c896:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800c898:	b326      	cbz	r6, 800c8e4 <tcp_rexmit+0x50>
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800c89a:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pcb->unacked = seg->next;
 800c89c:	6832      	ldr	r2, [r6, #0]
 800c89e:	66c2      	str	r2, [r0, #108]	; 0x6c
 800c8a0:	4607      	mov	r7, r0
  cur_seg = &(pcb->unsent);
 800c8a2:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800c8a6:	b91b      	cbnz	r3, 800c8b0 <tcp_rexmit+0x1c>
 800c8a8:	e00f      	b.n	800c8ca <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c8aa:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b163      	cbz	r3, 800c8ca <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	6858      	ldr	r0, [r3, #4]
 800c8b4:	f7f9 f800 	bl	80058b8 <lwip_htonl>
 800c8b8:	68f3      	ldr	r3, [r6, #12]
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	6858      	ldr	r0, [r3, #4]
 800c8be:	f7f8 fffb 	bl	80058b8 <lwip_htonl>
 800c8c2:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	dbf0      	blt.n	800c8aa <tcp_rexmit+0x16>
 800c8c8:	682b      	ldr	r3, [r5, #0]
  }
  seg->next = *cur_seg;
 800c8ca:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c8cc:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c8ce:	6833      	ldr	r3, [r6, #0]
 800c8d0:	b14b      	cbz	r3, 800c8e6 <tcp_rexmit+0x52>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c8d2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800c8d6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c8d8:	bf1c      	itt	ne
 800c8da:	3301      	addne	r3, #1
 800c8dc:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800c8e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c8ea:	e7f2      	b.n	800c8d2 <tcp_rexmit+0x3e>

0800c8ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c8ee:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800c8f0:	b117      	cbz	r7, 800c8f8 <tcp_rexmit_fast+0xc>
 800c8f2:	7e83      	ldrb	r3, [r0, #26]
 800c8f4:	075b      	lsls	r3, r3, #29
 800c8f6:	d500      	bpl.n	800c8fa <tcp_rexmit_fast+0xe>
 800c8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (*cur_seg &&
 800c8fa:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pcb->unacked = seg->next;
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	66c2      	str	r2, [r0, #108]	; 0x6c
 800c900:	4606      	mov	r6, r0
  cur_seg = &(pcb->unsent);
 800c902:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800c906:	b91b      	cbnz	r3, 800c910 <tcp_rexmit_fast+0x24>
 800c908:	e00f      	b.n	800c92a <tcp_rexmit_fast+0x3e>
      cur_seg = &((*cur_seg)->next );
 800c90a:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b163      	cbz	r3, 800c92a <tcp_rexmit_fast+0x3e>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	6858      	ldr	r0, [r3, #4]
 800c914:	f7f8 ffd0 	bl	80058b8 <lwip_htonl>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	4604      	mov	r4, r0
 800c91c:	6858      	ldr	r0, [r3, #4]
 800c91e:	f7f8 ffcb 	bl	80058b8 <lwip_htonl>
 800c922:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800c924:	2800      	cmp	r0, #0
 800c926:	dbf0      	blt.n	800c90a <tcp_rexmit_fast+0x1e>
 800c928:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800c92a:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
 800c92c:	602f      	str	r7, [r5, #0]
  if (seg->next == NULL) {
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	b32b      	cbz	r3, 800c97e <tcp_rexmit_fast+0x92>
  if (pcb->nrtx < 0xFF) {
 800c932:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c936:	f8b6 2048 	ldrh.w	r2, [r6, #72]	; 0x48
  if (pcb->nrtx < 0xFF) {
 800c93a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c93c:	bf1c      	itt	ne
 800c93e:	3301      	addne	r3, #1
 800c940:	f886 3042 	strbne.w	r3, [r6, #66]	; 0x42
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c944:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 800c948:	429a      	cmp	r2, r3
 800c94a:	bf38      	it	cc
 800c94c:	0853      	lsrcc	r3, r2, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c94e:	8e72      	ldrh	r2, [r6, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c950:	bf28      	it	cs
 800c952:	085b      	lsrcs	r3, r3, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c954:	0050      	lsls	r0, r2, #1
  pcb->rttest = 0;
 800c956:	2100      	movs	r1, #0
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c958:	4283      	cmp	r3, r0
  pcb->rttest = 0;
 800c95a:	6371      	str	r1, [r6, #52]	; 0x34
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    pcb->flags |= TF_INFR;
 800c95c:	7eb1      	ldrb	r1, [r6, #26]
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c95e:	f8a6 304a 	strh.w	r3, [r6, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c962:	4402      	add	r2, r0
      pcb->ssthresh = 2*pcb->mss;
 800c964:	bf3c      	itt	cc
 800c966:	b283      	uxthcc	r3, r0
 800c968:	f8a6 304a 	strhcc.w	r3, [r6, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c96c:	4413      	add	r3, r2
    pcb->flags |= TF_INFR;
 800c96e:	f041 0204 	orr.w	r2, r1, #4
 800c972:	76b2      	strb	r2, [r6, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c974:	2100      	movs	r1, #0
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c976:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
    pcb->rtime = 0;
 800c97a:	8631      	strh	r1, [r6, #48]	; 0x30
 800c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800c97e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
 800c982:	e7d6      	b.n	800c932 <tcp_rexmit_fast+0x46>

0800c984 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c988:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c98a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
 800c98c:	b084      	sub	sp, #16
  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c98e:	3801      	subs	r0, #1
 800c990:	f7f8 ff92 	bl	80058b8 <lwip_htonl>
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c994:	2200      	movs	r2, #0
  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c996:	4606      	mov	r6, r0
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c998:	2114      	movs	r1, #20
 800c99a:	2001      	movs	r0, #1
 800c99c:	f7fb fd08 	bl	80083b0 <pbuf_alloc>
  if (p != NULL) {
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d045      	beq.n	800ca30 <tcp_keepalive+0xac>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c9a4:	8943      	ldrh	r3, [r0, #10]
 800c9a6:	2b13      	cmp	r3, #19
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	dd3a      	ble.n	800ca22 <tcp_keepalive+0x9e>
    tcphdr->src = lwip_htons(pcb->local_port);
 800c9ac:	8ae0      	ldrh	r0, [r4, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800c9ae:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800c9b0:	f7f8 ff7e 	bl	80058b0 <lwip_htons>
 800c9b4:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c9b6:	8b20      	ldrh	r0, [r4, #24]
 800c9b8:	f7f8 ff7a 	bl	80058b0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c9bc:	606e      	str	r6, [r5, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c9be:	8068      	strh	r0, [r5, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c9c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c9c2:	f7f8 ff79 	bl	80058b8 <lwip_htonl>
 800c9c6:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800c9c8:	f245 0010 	movw	r0, #20496	; 0x5010
 800c9cc:	f7f8 ff70 	bl	80058b0 <lwip_htons>
 800c9d0:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c9d2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800c9d4:	f7f8 ff6c 	bl	80058b0 <lwip_htons>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c9d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c9dc:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800c9de:	2600      	movs	r6, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c9e0:	4413      	add	r3, r2
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c9e2:	f104 0804 	add.w	r8, r4, #4
    tcphdr->chksum = 0;
 800c9e6:	742e      	strb	r6, [r5, #16]
 800c9e8:	746e      	strb	r6, [r5, #17]
    tcphdr->urgp = 0;
 800c9ea:	74ae      	strb	r6, [r5, #18]
 800c9ec:	74ee      	strb	r6, [r5, #19]
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c9ee:	4640      	mov	r0, r8
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c9f2:	f7fa f9a1 	bl	8006d38 <ip4_route>
  if (netif == NULL) {
 800c9f6:	b188      	cbz	r0, 800ca1c <tcp_keepalive+0x98>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c9f8:	7aa3      	ldrb	r3, [r4, #10]
 800c9fa:	9002      	str	r0, [sp, #8]
 800c9fc:	2006      	movs	r0, #6
 800c9fe:	4621      	mov	r1, r4
 800ca00:	9001      	str	r0, [sp, #4]
 800ca02:	9600      	str	r6, [sp, #0]
 800ca04:	4642      	mov	r2, r8
 800ca06:	4638      	mov	r0, r7
 800ca08:	f7fa faa2 	bl	8006f50 <ip4_output_if>
 800ca0c:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ca0e:	4638      	mov	r0, r7
 800ca10:	f7fb fc60 	bl	80082d4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ca14:	4620      	mov	r0, r4
 800ca16:	b004      	add	sp, #16
 800ca18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_RTE;
 800ca1c:	f06f 0403 	mvn.w	r4, #3
 800ca20:	e7f5      	b.n	800ca0e <tcp_keepalive+0x8a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ca22:	4b06      	ldr	r3, [pc, #24]	; (800ca3c <tcp_keepalive+0xb8>)
 800ca24:	4906      	ldr	r1, [pc, #24]	; (800ca40 <tcp_keepalive+0xbc>)
 800ca26:	4807      	ldr	r0, [pc, #28]	; (800ca44 <tcp_keepalive+0xc0>)
 800ca28:	2273      	movs	r2, #115	; 0x73
 800ca2a:	f001 fad7 	bl	800dfdc <iprintf>
 800ca2e:	e7bd      	b.n	800c9ac <tcp_keepalive+0x28>
    return ERR_MEM;
 800ca30:	f04f 34ff 	mov.w	r4, #4294967295
}
 800ca34:	4620      	mov	r0, r4
 800ca36:	b004      	add	sp, #16
 800ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3c:	08012360 	.word	0x08012360
 800ca40:	08012330 	.word	0x08012330
 800ca44:	0800e670 	.word	0x0800e670

0800ca48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ca48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800ca4c:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
{
 800ca4e:	b085      	sub	sp, #20

  if (seg == NULL) {
 800ca50:	2e00      	cmp	r6, #0
 800ca52:	f000 8089 	beq.w	800cb68 <tcp_zero_window_probe+0x120>
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ca56:	68f3      	ldr	r3, [r6, #12]
 800ca58:	4604      	mov	r4, r0
 800ca5a:	8998      	ldrh	r0, [r3, #12]
 800ca5c:	f7f8 ff28 	bl	80058b0 <lwip_htons>
 800ca60:	f010 0801 	ands.w	r8, r0, #1
 800ca64:	d161      	bne.n	800cb2a <tcp_zero_window_probe+0xe2>
 800ca66:	2115      	movs	r1, #21
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ca68:	68f3      	ldr	r3, [r6, #12]
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2001      	movs	r0, #1
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ca6e:	f8d3 9004 	ldr.w	r9, [r3, #4]
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ca72:	f7fb fc9d 	bl	80083b0 <pbuf_alloc>
  if (p != NULL) {
 800ca76:	4607      	mov	r7, r0
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d07d      	beq.n	800cb78 <tcp_zero_window_probe+0x130>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ca7c:	8943      	ldrh	r3, [r0, #10]
 800ca7e:	2b13      	cmp	r3, #19
 800ca80:	dd6b      	ble.n	800cb5a <tcp_zero_window_probe+0x112>
    tcphdr->src = lwip_htons(pcb->local_port);
 800ca82:	8ae0      	ldrh	r0, [r4, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800ca84:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800ca86:	f7f8 ff13 	bl	80058b0 <lwip_htons>
 800ca8a:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800ca8c:	8b20      	ldrh	r0, [r4, #24]
 800ca8e:	f7f8 ff0f 	bl	80058b0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ca92:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800ca96:	8068      	strh	r0, [r5, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ca98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca9a:	f7f8 ff0d 	bl	80058b8 <lwip_htonl>
 800ca9e:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800caa0:	f245 0010 	movw	r0, #20496	; 0x5010
 800caa4:	f7f8 ff04 	bl	80058b0 <lwip_htons>
 800caa8:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800caaa:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800caac:	f7f8 ff00 	bl	80058b0 <lwip_htons>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cab0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800cab2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cab4:	f8d7 9004 	ldr.w	r9, [r7, #4]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cab8:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800caba:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cabc:	440a      	add	r2, r1
    tcphdr->chksum = 0;
 800cabe:	742b      	strb	r3, [r5, #16]
 800cac0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800cac2:	74ab      	strb	r3, [r5, #18]
 800cac4:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cac6:	62e2      	str	r2, [r4, #44]	; 0x2c

  if (is_fin) {
 800cac8:	f1b8 0f00 	cmp.w	r8, #0
 800cacc:	d037      	beq.n	800cb3e <tcp_zero_window_probe+0xf6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cace:	f8b9 500c 	ldrh.w	r5, [r9, #12]
 800cad2:	2011      	movs	r0, #17
 800cad4:	f7f8 feec 	bl	80058b0 <lwip_htons>
 800cad8:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800cadc:	b2ad      	uxth	r5, r5
 800cade:	4328      	orrs	r0, r5
 800cae0:	f8a9 000c 	strh.w	r0, [r9, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cae4:	68f3      	ldr	r3, [r6, #12]
 800cae6:	6858      	ldr	r0, [r3, #4]
 800cae8:	f7f8 fee6 	bl	80058b8 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800caec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800caee:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800caf0:	1a1b      	subs	r3, r3, r0
 800caf2:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800caf4:	f104 0504 	add.w	r5, r4, #4
    pcb->snd_nxt = snd_nxt;
 800caf8:	bfb8      	it	lt
 800cafa:	64e0      	strlt	r0, [r4, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cafc:	4628      	mov	r0, r5
 800cafe:	f7fa f91b 	bl	8006d38 <ip4_route>
  if (netif == NULL) {
 800cb02:	b338      	cbz	r0, 800cb54 <tcp_zero_window_probe+0x10c>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cb04:	7aa3      	ldrb	r3, [r4, #10]
 800cb06:	9002      	str	r0, [sp, #8]
 800cb08:	2606      	movs	r6, #6
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e88d 0041 	stmia.w	sp, {r0, r6}
 800cb10:	462a      	mov	r2, r5
 800cb12:	4621      	mov	r1, r4
 800cb14:	4638      	mov	r0, r7
 800cb16:	f7fa fa1b 	bl	8006f50 <ip4_output_if>
 800cb1a:	4606      	mov	r6, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7fb fbd9 	bl	80082d4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cb22:	4630      	mov	r0, r6
 800cb24:	b005      	add	sp, #20
 800cb26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cb2a:	8933      	ldrh	r3, [r6, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bf15      	itete	ne
 800cb30:	2115      	movne	r1, #21
 800cb32:	2114      	moveq	r1, #20
 800cb34:	f04f 0800 	movne.w	r8, #0
 800cb38:	f04f 0801 	moveq.w	r8, #1
 800cb3c:	e794      	b.n	800ca68 <tcp_zero_window_probe+0x20>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cb3e:	6870      	ldr	r0, [r6, #4]
 800cb40:	8932      	ldrh	r2, [r6, #8]
 800cb42:	8903      	ldrh	r3, [r0, #8]
 800cb44:	1a9b      	subs	r3, r3, r2
 800cb46:	f109 0114 	add.w	r1, r9, #20
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f7fb fef1 	bl	8008934 <pbuf_copy_partial>
 800cb52:	e7c7      	b.n	800cae4 <tcp_zero_window_probe+0x9c>
    err = ERR_RTE;
 800cb54:	f06f 0603 	mvn.w	r6, #3
 800cb58:	e7e0      	b.n	800cb1c <tcp_zero_window_probe+0xd4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cb5a:	4b09      	ldr	r3, [pc, #36]	; (800cb80 <tcp_zero_window_probe+0x138>)
 800cb5c:	4909      	ldr	r1, [pc, #36]	; (800cb84 <tcp_zero_window_probe+0x13c>)
 800cb5e:	480a      	ldr	r0, [pc, #40]	; (800cb88 <tcp_zero_window_probe+0x140>)
 800cb60:	2273      	movs	r2, #115	; 0x73
 800cb62:	f001 fa3b 	bl	800dfdc <iprintf>
 800cb66:	e78c      	b.n	800ca82 <tcp_zero_window_probe+0x3a>
    seg = pcb->unsent;
 800cb68:	6e86      	ldr	r6, [r0, #104]	; 0x68
  if (seg == NULL) {
 800cb6a:	2e00      	cmp	r6, #0
 800cb6c:	f47f af73 	bne.w	800ca56 <tcp_zero_window_probe+0xe>
}
 800cb70:	4630      	mov	r0, r6
 800cb72:	b005      	add	sp, #20
 800cb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 800cb78:	f04f 36ff 	mov.w	r6, #4294967295
 800cb7c:	e7d1      	b.n	800cb22 <tcp_zero_window_probe+0xda>
 800cb7e:	bf00      	nop
 800cb80:	08012360 	.word	0x08012360
 800cb84:	08012330 	.word	0x08012330
 800cb88:	0800e670 	.word	0x0800e670

0800cb8c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cb90:	6843      	ldr	r3, [r0, #4]
{
 800cb92:	4605      	mov	r5, r0
  cyclic->handler();
 800cb94:	4798      	blx	r3
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cb96:	200a      	movs	r0, #10
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800cb98:	682e      	ldr	r6, [r5, #0]
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cb9a:	f7fb f987 	bl	8007eac <memp_malloc>
  if (timeout == NULL) {
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d039      	beq.n	800cc16 <cyclic_timer+0x8a>
 800cba2:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  now = sys_now();
 800cba4:	f000 fef2 	bl	800d98c <sys_now>
  if (next_timeout == NULL) {
 800cba8:	491f      	ldr	r1, [pc, #124]	; (800cc28 <cyclic_timer+0x9c>)
 800cbaa:	680f      	ldr	r7, [r1, #0]
 800cbac:	b34f      	cbz	r7, 800cc02 <cyclic_timer+0x76>
    diff = 0;
    timeouts_last_time = now;
  } else {
    diff = now - timeouts_last_time;
 800cbae:	4b1f      	ldr	r3, [pc, #124]	; (800cc2c <cyclic_timer+0xa0>)
  }

  timeout->next = NULL;
  timeout->h = handler;
 800cbb0:	4a1f      	ldr	r2, [pc, #124]	; (800cc30 <cyclic_timer+0xa4>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60a2      	str	r2, [r4, #8]
 800cbb6:	1af3      	subs	r3, r6, r3
  timeout->arg = arg;
  timeout->time = msecs + diff;
 800cbb8:	4418      	add	r0, r3
 800cbba:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 800cbbc:	687a      	ldr	r2, [r7, #4]
  timeout->arg = arg;
 800cbbe:	60e5      	str	r5, [r4, #12]
  timeout->next = NULL;
 800cbc0:	2300      	movs	r3, #0
  if (next_timeout->time > msecs) {
 800cbc2:	4296      	cmp	r6, r2
  timeout->next = NULL;
 800cbc4:	6023      	str	r3, [r4, #0]
  if (next_timeout->time > msecs) {
 800cbc6:	d310      	bcc.n	800cbea <cyclic_timer+0x5e>
 800cbc8:	4639      	mov	r1, r7
 800cbca:	e003      	b.n	800cbd4 <cyclic_timer+0x48>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	4290      	cmp	r0, r2
 800cbd0:	d311      	bcc.n	800cbf6 <cyclic_timer+0x6a>
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	680b      	ldr	r3, [r1, #0]
      timeout->time -= t->time;
 800cbd6:	1a80      	subs	r0, r0, r2
 800cbd8:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1f6      	bne.n	800cbcc <cyclic_timer+0x40>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
        } else if (timeout->time > msecs) {
 800cbde:	4286      	cmp	r6, r0
 800cbe0:	d20b      	bcs.n	800cbfa <cyclic_timer+0x6e>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	4432      	add	r2, r6
 800cbe6:	6062      	str	r2, [r4, #4]
 800cbe8:	e007      	b.n	800cbfa <cyclic_timer+0x6e>
    next_timeout->time -= msecs;
 800cbea:	1b92      	subs	r2, r2, r6
 800cbec:	607a      	str	r2, [r7, #4]
    next_timeout = timeout;
 800cbee:	600c      	str	r4, [r1, #0]
    timeout->next = next_timeout;
 800cbf0:	6027      	str	r7, [r4, #0]
 800cbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          t->next->time -= timeout->time;
 800cbf6:	1a10      	subs	r0, r2, r0
 800cbf8:	6058      	str	r0, [r3, #4]
        }
        timeout->next = t->next;
 800cbfa:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800cbfc:	600c      	str	r4, [r1, #0]
 800cbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800cc02:	4a0a      	ldr	r2, [pc, #40]	; (800cc2c <cyclic_timer+0xa0>)
  timeout->h = handler;
 800cc04:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <cyclic_timer+0xa4>)
  timeout->next = NULL;
 800cc06:	6027      	str	r7, [r4, #0]
  timeout->arg = arg;
 800cc08:	60e5      	str	r5, [r4, #12]
  timeout->time = msecs + diff;
 800cc0a:	6066      	str	r6, [r4, #4]
    next_timeout = timeout;
 800cc0c:	600c      	str	r4, [r1, #0]
    timeouts_last_time = now;
 800cc0e:	6010      	str	r0, [r2, #0]
  timeout->h = handler;
 800cc10:	60a3      	str	r3, [r4, #8]
 800cc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cc16:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <cyclic_timer+0xa8>)
 800cc18:	4907      	ldr	r1, [pc, #28]	; (800cc38 <cyclic_timer+0xac>)
 800cc1a:	4808      	ldr	r0, [pc, #32]	; (800cc3c <cyclic_timer+0xb0>)
 800cc1c:	22d4      	movs	r2, #212	; 0xd4
}
 800cc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cc22:	f001 b9db 	b.w	800dfdc <iprintf>
 800cc26:	bf00      	nop
 800cc28:	20003f18 	.word	0x20003f18
 800cc2c:	20003f20 	.word	0x20003f20
 800cc30:	0800cb8d 	.word	0x0800cb8d
 800cc34:	08012620 	.word	0x08012620
 800cc38:	08012654 	.word	0x08012654
 800cc3c:	0800e670 	.word	0x0800e670

0800cc40 <tcpip_tcp_timer>:
{
 800cc40:	b570      	push	{r4, r5, r6, lr}
  tcp_tmr();
 800cc42:	f7fc fdf3 	bl	800982c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cc46:	4b29      	ldr	r3, [pc, #164]	; (800ccec <tcpip_tcp_timer+0xac>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d02f      	beq.n	800ccae <tcpip_tcp_timer+0x6e>
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cc4e:	200a      	movs	r0, #10
 800cc50:	f7fb f92c 	bl	8007eac <memp_malloc>
  if (timeout == NULL) {
 800cc54:	4604      	mov	r4, r0
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d03f      	beq.n	800ccda <tcpip_tcp_timer+0x9a>
  now = sys_now();
 800cc5a:	f000 fe97 	bl	800d98c <sys_now>
  if (next_timeout == NULL) {
 800cc5e:	4924      	ldr	r1, [pc, #144]	; (800ccf0 <tcpip_tcp_timer+0xb0>)
 800cc60:	680d      	ldr	r5, [r1, #0]
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	d02f      	beq.n	800ccc6 <tcpip_tcp_timer+0x86>
    diff = now - timeouts_last_time;
 800cc66:	4b23      	ldr	r3, [pc, #140]	; (800ccf4 <tcpip_tcp_timer+0xb4>)
  timeout->h = handler;
 800cc68:	4a23      	ldr	r2, [pc, #140]	; (800ccf8 <tcpip_tcp_timer+0xb8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60a2      	str	r2, [r4, #8]
 800cc6e:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
  timeout->time = msecs + diff;
 800cc72:	4418      	add	r0, r3
 800cc74:	6060      	str	r0, [r4, #4]
  if (next_timeout->time > msecs) {
 800cc76:	686a      	ldr	r2, [r5, #4]
  timeout->next = NULL;
 800cc78:	2300      	movs	r3, #0
  if (next_timeout->time > msecs) {
 800cc7a:	2afa      	cmp	r2, #250	; 0xfa
  timeout->next = NULL;
 800cc7c:	6023      	str	r3, [r4, #0]
  timeout->arg = arg;
 800cc7e:	60e3      	str	r3, [r4, #12]
  if (next_timeout->time > msecs) {
 800cc80:	d810      	bhi.n	800cca4 <tcpip_tcp_timer+0x64>
 800cc82:	4629      	mov	r1, r5
 800cc84:	e003      	b.n	800cc8e <tcpip_tcp_timer+0x4e>
      if (t->next == NULL || t->next->time > timeout->time) {
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	4290      	cmp	r0, r2
 800cc8a:	d317      	bcc.n	800ccbc <tcpip_tcp_timer+0x7c>
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	680b      	ldr	r3, [r1, #0]
      timeout->time -= t->time;
 800cc90:	1a80      	subs	r0, r0, r2
 800cc92:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1f6      	bne.n	800cc86 <tcpip_tcp_timer+0x46>
        } else if (timeout->time > msecs) {
 800cc98:	28fa      	cmp	r0, #250	; 0xfa
 800cc9a:	d911      	bls.n	800ccc0 <tcpip_tcp_timer+0x80>
          timeout->time = msecs + next_timeout->time;
 800cc9c:	686a      	ldr	r2, [r5, #4]
 800cc9e:	32fa      	adds	r2, #250	; 0xfa
 800cca0:	6062      	str	r2, [r4, #4]
 800cca2:	e00d      	b.n	800ccc0 <tcpip_tcp_timer+0x80>
    next_timeout->time -= msecs;
 800cca4:	3afa      	subs	r2, #250	; 0xfa
 800cca6:	606a      	str	r2, [r5, #4]
    next_timeout = timeout;
 800cca8:	600c      	str	r4, [r1, #0]
    timeout->next = next_timeout;
 800ccaa:	6025      	str	r5, [r4, #0]
 800ccac:	bd70      	pop	{r4, r5, r6, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ccae:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <tcpip_tcp_timer+0xbc>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1cb      	bne.n	800cc4e <tcpip_tcp_timer+0xe>
    tcpip_tcp_timer_active = 0;
 800ccb6:	4a12      	ldr	r2, [pc, #72]	; (800cd00 <tcpip_tcp_timer+0xc0>)
 800ccb8:	6013      	str	r3, [r2, #0]
}
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
          t->next->time -= timeout->time;
 800ccbc:	1a10      	subs	r0, r2, r0
 800ccbe:	6058      	str	r0, [r3, #4]
        timeout->next = t->next;
 800ccc0:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800ccc2:	600c      	str	r4, [r1, #0]
 800ccc4:	bd70      	pop	{r4, r5, r6, pc}
    timeouts_last_time = now;
 800ccc6:	4e0b      	ldr	r6, [pc, #44]	; (800ccf4 <tcpip_tcp_timer+0xb4>)
  timeout->h = handler;
 800ccc8:	4a0b      	ldr	r2, [pc, #44]	; (800ccf8 <tcpip_tcp_timer+0xb8>)
  timeout->next = NULL;
 800ccca:	6025      	str	r5, [r4, #0]
  timeout->time = msecs + diff;
 800cccc:	23fa      	movs	r3, #250	; 0xfa
  timeout->arg = arg;
 800ccce:	60e5      	str	r5, [r4, #12]
    next_timeout = timeout;
 800ccd0:	600c      	str	r4, [r1, #0]
    timeouts_last_time = now;
 800ccd2:	6030      	str	r0, [r6, #0]
  timeout->h = handler;
 800ccd4:	60a2      	str	r2, [r4, #8]
  timeout->time = msecs + diff;
 800ccd6:	6063      	str	r3, [r4, #4]
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ccda:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <tcpip_tcp_timer+0xc4>)
 800ccdc:	490a      	ldr	r1, [pc, #40]	; (800cd08 <tcpip_tcp_timer+0xc8>)
 800ccde:	480b      	ldr	r0, [pc, #44]	; (800cd0c <tcpip_tcp_timer+0xcc>)
 800cce0:	22d4      	movs	r2, #212	; 0xd4
}
 800cce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cce6:	f001 b979 	b.w	800dfdc <iprintf>
 800ccea:	bf00      	nop
 800ccec:	2000889c 	.word	0x2000889c
 800ccf0:	20003f18 	.word	0x20003f18
 800ccf4:	20003f20 	.word	0x20003f20
 800ccf8:	0800cc41 	.word	0x0800cc41
 800ccfc:	200088ac 	.word	0x200088ac
 800cd00:	20003f1c 	.word	0x20003f1c
 800cd04:	08012620 	.word	0x08012620
 800cd08:	08012654 	.word	0x08012654
 800cd0c:	0800e670 	.word	0x0800e670

0800cd10 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cd10:	4b2b      	ldr	r3, [pc, #172]	; (800cdc0 <tcp_timer_needed+0xb0>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	d136      	bne.n	800cd86 <tcp_timer_needed+0x76>
 800cd18:	4a2a      	ldr	r2, [pc, #168]	; (800cdc4 <tcp_timer_needed+0xb4>)
 800cd1a:	6812      	ldr	r2, [r2, #0]
 800cd1c:	2a00      	cmp	r2, #0
 800cd1e:	d02e      	beq.n	800cd7e <tcp_timer_needed+0x6e>
{
 800cd20:	b570      	push	{r4, r5, r6, lr}
    tcpip_tcp_timer_active = 1;
 800cd22:	2201      	movs	r2, #1
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cd24:	200a      	movs	r0, #10
    tcpip_tcp_timer_active = 1;
 800cd26:	601a      	str	r2, [r3, #0]
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cd28:	f7fb f8c0 	bl	8007eac <memp_malloc>
  if (timeout == NULL) {
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d03e      	beq.n	800cdb0 <tcp_timer_needed+0xa0>
  now = sys_now();
 800cd32:	f000 fe2b 	bl	800d98c <sys_now>
  if (next_timeout == NULL) {
 800cd36:	4924      	ldr	r1, [pc, #144]	; (800cdc8 <tcp_timer_needed+0xb8>)
 800cd38:	680d      	ldr	r5, [r1, #0]
 800cd3a:	b32d      	cbz	r5, 800cd88 <tcp_timer_needed+0x78>
    diff = now - timeouts_last_time;
 800cd3c:	4b23      	ldr	r3, [pc, #140]	; (800cdcc <tcp_timer_needed+0xbc>)
  timeout->h = handler;
 800cd3e:	4a24      	ldr	r2, [pc, #144]	; (800cdd0 <tcp_timer_needed+0xc0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60a2      	str	r2, [r4, #8]
 800cd44:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
  timeout->time = msecs + diff;
 800cd48:	4418      	add	r0, r3
 800cd4a:	6060      	str	r0, [r4, #4]
  if (next_timeout->time > msecs) {
 800cd4c:	686a      	ldr	r2, [r5, #4]
  timeout->next = NULL;
 800cd4e:	2300      	movs	r3, #0
  if (next_timeout->time > msecs) {
 800cd50:	2afa      	cmp	r2, #250	; 0xfa
  timeout->next = NULL;
 800cd52:	6023      	str	r3, [r4, #0]
  timeout->arg = arg;
 800cd54:	60e3      	str	r3, [r4, #12]
  if (next_timeout->time > msecs) {
 800cd56:	d821      	bhi.n	800cd9c <tcp_timer_needed+0x8c>
 800cd58:	4629      	mov	r1, r5
 800cd5a:	e003      	b.n	800cd64 <tcp_timer_needed+0x54>
      if (t->next == NULL || t->next->time > timeout->time) {
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	4290      	cmp	r0, r2
 800cd60:	d321      	bcc.n	800cda6 <tcp_timer_needed+0x96>
 800cd62:	4619      	mov	r1, r3
 800cd64:	680b      	ldr	r3, [r1, #0]
      timeout->time -= t->time;
 800cd66:	1a80      	subs	r0, r0, r2
 800cd68:	6060      	str	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1f6      	bne.n	800cd5c <tcp_timer_needed+0x4c>
        } else if (timeout->time > msecs) {
 800cd6e:	28fa      	cmp	r0, #250	; 0xfa
 800cd70:	d902      	bls.n	800cd78 <tcp_timer_needed+0x68>
          timeout->time = msecs + next_timeout->time;
 800cd72:	686a      	ldr	r2, [r5, #4]
 800cd74:	32fa      	adds	r2, #250	; 0xfa
 800cd76:	6062      	str	r2, [r4, #4]
        timeout->next = t->next;
 800cd78:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800cd7a:	600c      	str	r4, [r1, #0]
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cd7e:	4a15      	ldr	r2, [pc, #84]	; (800cdd4 <tcp_timer_needed+0xc4>)
 800cd80:	6812      	ldr	r2, [r2, #0]
 800cd82:	2a00      	cmp	r2, #0
 800cd84:	d1cc      	bne.n	800cd20 <tcp_timer_needed+0x10>
 800cd86:	4770      	bx	lr
    timeouts_last_time = now;
 800cd88:	4e10      	ldr	r6, [pc, #64]	; (800cdcc <tcp_timer_needed+0xbc>)
  timeout->h = handler;
 800cd8a:	4a11      	ldr	r2, [pc, #68]	; (800cdd0 <tcp_timer_needed+0xc0>)
  timeout->next = NULL;
 800cd8c:	6025      	str	r5, [r4, #0]
  timeout->time = msecs + diff;
 800cd8e:	23fa      	movs	r3, #250	; 0xfa
  timeout->arg = arg;
 800cd90:	60e5      	str	r5, [r4, #12]
    next_timeout = timeout;
 800cd92:	600c      	str	r4, [r1, #0]
    timeouts_last_time = now;
 800cd94:	6030      	str	r0, [r6, #0]
  timeout->h = handler;
 800cd96:	60a2      	str	r2, [r4, #8]
  timeout->time = msecs + diff;
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	bd70      	pop	{r4, r5, r6, pc}
    next_timeout->time -= msecs;
 800cd9c:	3afa      	subs	r2, #250	; 0xfa
 800cd9e:	606a      	str	r2, [r5, #4]
    next_timeout = timeout;
 800cda0:	600c      	str	r4, [r1, #0]
    timeout->next = next_timeout;
 800cda2:	6025      	str	r5, [r4, #0]
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
          t->next->time -= timeout->time;
 800cda6:	1a10      	subs	r0, r2, r0
 800cda8:	6058      	str	r0, [r3, #4]
        timeout->next = t->next;
 800cdaa:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800cdac:	600c      	str	r4, [r1, #0]
 800cdae:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cdb0:	4b09      	ldr	r3, [pc, #36]	; (800cdd8 <tcp_timer_needed+0xc8>)
 800cdb2:	490a      	ldr	r1, [pc, #40]	; (800cddc <tcp_timer_needed+0xcc>)
 800cdb4:	480a      	ldr	r0, [pc, #40]	; (800cde0 <tcp_timer_needed+0xd0>)
 800cdb6:	22d4      	movs	r2, #212	; 0xd4
}
 800cdb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cdbc:	f001 b90e 	b.w	800dfdc <iprintf>
 800cdc0:	20003f1c 	.word	0x20003f1c
 800cdc4:	2000889c 	.word	0x2000889c
 800cdc8:	20003f18 	.word	0x20003f18
 800cdcc:	20003f20 	.word	0x20003f20
 800cdd0:	0800cc41 	.word	0x0800cc41
 800cdd4:	200088ac 	.word	0x200088ac
 800cdd8:	08012620 	.word	0x08012620
 800cddc:	08012654 	.word	0x08012654
 800cde0:	0800e670 	.word	0x0800e670

0800cde4 <sys_timeouts_init>:
{
 800cde4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	4e2f      	ldr	r6, [pc, #188]	; (800cea8 <sys_timeouts_init+0xc4>)
 800cdea:	4f30      	ldr	r7, [pc, #192]	; (800ceac <sys_timeouts_init+0xc8>)
  if (next_timeout == NULL) {
 800cdec:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800cebc <sys_timeouts_init+0xd8>
  timeout->h = handler;
 800cdf0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800cec0 <sys_timeouts_init+0xdc>
{
 800cdf4:	2408      	movs	r4, #8
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cdf6:	200a      	movs	r0, #10
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800cdf8:	5935      	ldr	r5, [r6, r4]
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cdfa:	f7fb f857 	bl	8007eac <memp_malloc>
 800cdfe:	eb06 0a04 	add.w	sl, r6, r4
  if (timeout == NULL) {
 800ce02:	4683      	mov	fp, r0
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d047      	beq.n	800ce98 <sys_timeouts_init+0xb4>
  now = sys_now();
 800ce08:	f000 fdc0 	bl	800d98c <sys_now>
  if (next_timeout == NULL) {
 800ce0c:	f8d8 1000 	ldr.w	r1, [r8]
 800ce10:	2900      	cmp	r1, #0
 800ce12:	d03b      	beq.n	800ce8c <sys_timeouts_init+0xa8>
 800ce14:	683a      	ldr	r2, [r7, #0]
  timeout->h = handler;
 800ce16:	f8cb 9008 	str.w	r9, [fp, #8]
 800ce1a:	1aaa      	subs	r2, r5, r2
  timeout->time = msecs + diff;
 800ce1c:	4410      	add	r0, r2
 800ce1e:	f8cb 0004 	str.w	r0, [fp, #4]
  if (next_timeout->time > msecs) {
 800ce22:	f8d1 e004 	ldr.w	lr, [r1, #4]
  timeout->arg = arg;
 800ce26:	f8cb a00c 	str.w	sl, [fp, #12]
  timeout->next = NULL;
 800ce2a:	2300      	movs	r3, #0
  if (next_timeout->time > msecs) {
 800ce2c:	4575      	cmp	r5, lr
  timeout->next = NULL;
 800ce2e:	f8cb 3000 	str.w	r3, [fp]
  if (next_timeout->time > msecs) {
 800ce32:	d314      	bcc.n	800ce5e <sys_timeouts_init+0x7a>
 800ce34:	460a      	mov	r2, r1
 800ce36:	e004      	b.n	800ce42 <sys_timeouts_init+0x5e>
      if (t->next == NULL || t->next->time > timeout->time) {
 800ce38:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800ce3c:	4570      	cmp	r0, lr
 800ce3e:	d31d      	bcc.n	800ce7c <sys_timeouts_init+0x98>
 800ce40:	461a      	mov	r2, r3
 800ce42:	6813      	ldr	r3, [r2, #0]
      timeout->time -= t->time;
 800ce44:	eba0 000e 	sub.w	r0, r0, lr
 800ce48:	f8cb 0004 	str.w	r0, [fp, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f3      	bne.n	800ce38 <sys_timeouts_init+0x54>
        } else if (timeout->time > msecs) {
 800ce50:	4285      	cmp	r5, r0
 800ce52:	d216      	bcs.n	800ce82 <sys_timeouts_init+0x9e>
          timeout->time = msecs + next_timeout->time;
 800ce54:	6849      	ldr	r1, [r1, #4]
 800ce56:	440d      	add	r5, r1
 800ce58:	f8cb 5004 	str.w	r5, [fp, #4]
 800ce5c:	e011      	b.n	800ce82 <sys_timeouts_init+0x9e>
    next_timeout->time -= msecs;
 800ce5e:	ebae 0505 	sub.w	r5, lr, r5
 800ce62:	604d      	str	r5, [r1, #4]
    next_timeout = timeout;
 800ce64:	f8c8 b000 	str.w	fp, [r8]
    timeout->next = next_timeout;
 800ce68:	f8cb 1000 	str.w	r1, [fp]
 800ce6c:	3408      	adds	r4, #8
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ce6e:	2c18      	cmp	r4, #24
 800ce70:	d1c1      	bne.n	800cdf6 <sys_timeouts_init+0x12>
  timeouts_last_time = sys_now();
 800ce72:	f000 fd8b 	bl	800d98c <sys_now>
 800ce76:	6038      	str	r0, [r7, #0]
}
 800ce78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          t->next->time -= timeout->time;
 800ce7c:	ebae 0000 	sub.w	r0, lr, r0
 800ce80:	6058      	str	r0, [r3, #4]
        timeout->next = t->next;
 800ce82:	f8cb 3000 	str.w	r3, [fp]
        t->next = timeout;
 800ce86:	f8c2 b000 	str.w	fp, [r2]
 800ce8a:	e7ef      	b.n	800ce6c <sys_timeouts_init+0x88>
    timeouts_last_time = now;
 800ce8c:	6038      	str	r0, [r7, #0]
  timeout->time = msecs + diff;
 800ce8e:	e88b 0622 	stmia.w	fp, {r1, r5, r9, sl}
    next_timeout = timeout;
 800ce92:	f8c8 b000 	str.w	fp, [r8]
 800ce96:	e7e9      	b.n	800ce6c <sys_timeouts_init+0x88>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce98:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <sys_timeouts_init+0xcc>)
 800ce9a:	4906      	ldr	r1, [pc, #24]	; (800ceb4 <sys_timeouts_init+0xd0>)
 800ce9c:	4806      	ldr	r0, [pc, #24]	; (800ceb8 <sys_timeouts_init+0xd4>)
 800ce9e:	22d4      	movs	r2, #212	; 0xd4
 800cea0:	f001 f89c 	bl	800dfdc <iprintf>
 800cea4:	e7e2      	b.n	800ce6c <sys_timeouts_init+0x88>
 800cea6:	bf00      	nop
 800cea8:	08012694 	.word	0x08012694
 800ceac:	20003f20 	.word	0x20003f20
 800ceb0:	08012620 	.word	0x08012620
 800ceb4:	08012654 	.word	0x08012654
 800ceb8:	0800e670 	.word	0x0800e670
 800cebc:	20003f18 	.word	0x20003f18
 800cec0:	0800cb8d 	.word	0x0800cb8d

0800cec4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec8:	4e28      	ldr	r6, [pc, #160]	; (800cf6c <sys_timeouts_mbox_fetch+0xa8>)
  diff = sys_now() - timeouts_last_time;
 800ceca:	4f29      	ldr	r7, [pc, #164]	; (800cf70 <sys_timeouts_mbox_fetch+0xac>)
 800cecc:	6832      	ldr	r2, [r6, #0]
          LOCK_TCPIP_CORE();
 800cece:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800cf74 <sys_timeouts_mbox_fetch+0xb0>
{
 800ced2:	b083      	sub	sp, #12
 800ced4:	4681      	mov	r9, r0
 800ced6:	468a      	mov	sl, r1
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800ced8:	b18a      	cbz	r2, 800cefe <sys_timeouts_mbox_fetch+0x3a>
  diff = sys_now() - timeouts_last_time;
 800ceda:	f000 fd57 	bl	800d98c <sys_now>
  if (diff > next_timeout->time) {
 800cede:	6832      	ldr	r2, [r6, #0]
  diff = sys_now() - timeouts_last_time;
 800cee0:	683b      	ldr	r3, [r7, #0]
  if (diff > next_timeout->time) {
 800cee2:	6852      	ldr	r2, [r2, #4]
  diff = sys_now() - timeouts_last_time;
 800cee4:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800cee6:	4290      	cmp	r0, r2
 800cee8:	d811      	bhi.n	800cf0e <sys_timeouts_mbox_fetch+0x4a>
    sys_arch_mbox_fetch(mbox, msg, 0);
    return;
  }

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800ceea:	1a12      	subs	r2, r2, r0
 800ceec:	d00f      	beq.n	800cf0e <sys_timeouts_mbox_fetch+0x4a>
 800ceee:	4651      	mov	r1, sl
 800cef0:	4648      	mov	r0, r9
 800cef2:	f000 fa95 	bl	800d420 <sys_arch_mbox_fetch>
 800cef6:	3001      	adds	r0, #1
 800cef8:	d134      	bne.n	800cf64 <sys_timeouts_mbox_fetch+0xa0>
  if (next_timeout) {
 800cefa:	6833      	ldr	r3, [r6, #0]
 800cefc:	b93b      	cbnz	r3, 800cf0e <sys_timeouts_mbox_fetch+0x4a>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cefe:	4651      	mov	r1, sl
 800cf00:	4648      	mov	r0, r9
 800cf02:	2200      	movs	r2, #0
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800cf04:	b003      	add	sp, #12
 800cf06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cf0a:	f000 ba89 	b.w	800d420 <sys_arch_mbox_fetch>
    now = sys_now();
 800cf0e:	f000 fd3d 	bl	800d98c <sys_now>
    diff = now - timeouts_last_time;
 800cf12:	683c      	ldr	r4, [r7, #0]
 800cf14:	1b04      	subs	r4, r0, r4
      tmptimeout = next_timeout;
 800cf16:	6832      	ldr	r2, [r6, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf18:	200a      	movs	r0, #10
 800cf1a:	4611      	mov	r1, r2
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	d0ee      	beq.n	800cefe <sys_timeouts_mbox_fetch+0x3a>
 800cf20:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800cf24:	45a4      	cmp	ip, r4
 800cf26:	d8d7      	bhi.n	800ced8 <sys_timeouts_mbox_fetch+0x14>
        timeouts_last_time += tmptimeout->time;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	9301      	str	r3, [sp, #4]
        next_timeout = tmptimeout->next;
 800cf2c:	6813      	ldr	r3, [r2, #0]
 800cf2e:	6033      	str	r3, [r6, #0]
        timeouts_last_time += tmptimeout->time;
 800cf30:	9b01      	ldr	r3, [sp, #4]
        handler = tmptimeout->h;
 800cf32:	6895      	ldr	r5, [r2, #8]
        arg = tmptimeout->arg;
 800cf34:	f8d2 b00c 	ldr.w	fp, [r2, #12]
        timeouts_last_time += tmptimeout->time;
 800cf38:	4463      	add	r3, ip
        diff -= tmptimeout->time;
 800cf3a:	eba4 040c 	sub.w	r4, r4, ip
        timeouts_last_time += tmptimeout->time;
 800cf3e:	603b      	str	r3, [r7, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf40:	f7fa ffe8 	bl	8007f14 <memp_free>
          LOCK_TCPIP_CORE();
 800cf44:	4640      	mov	r0, r8
        if (handler != NULL) {
 800cf46:	2d00      	cmp	r5, #0
 800cf48:	d0e5      	beq.n	800cf16 <sys_timeouts_mbox_fetch+0x52>
          LOCK_TCPIP_CORE();
 800cf4a:	f000 fb11 	bl	800d570 <sys_mutex_lock>
          handler(arg);
 800cf4e:	4658      	mov	r0, fp
 800cf50:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 800cf52:	4640      	mov	r0, r8
 800cf54:	f000 fb12 	bl	800d57c <sys_mutex_unlock>
      tmptimeout = next_timeout;
 800cf58:	6832      	ldr	r2, [r6, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf5a:	200a      	movs	r0, #10
 800cf5c:	4611      	mov	r1, r2
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	d1de      	bne.n	800cf20 <sys_timeouts_mbox_fetch+0x5c>
 800cf62:	e7cc      	b.n	800cefe <sys_timeouts_mbox_fetch+0x3a>
}
 800cf64:	b003      	add	sp, #12
 800cf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20003f18 	.word	0x20003f18
 800cf70:	20003f20 	.word	0x20003f20
 800cf74:	20004270 	.word	0x20004270

0800cf78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop

0800cf7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cf80:	8943      	ldrh	r3, [r0, #10]
 800cf82:	2b07      	cmp	r3, #7
{
 800cf84:	b083      	sub	sp, #12
 800cf86:	4606      	mov	r6, r0
  if (p->len < UDP_HLEN) {
 800cf88:	d977      	bls.n	800d07a <udp_input+0xfe>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cf8a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d138 <udp_input+0x1bc>
  udphdr = (struct udp_hdr *)p->payload;
 800cf8e:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cf90:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800cf94:	468a      	mov	sl, r1
 800cf96:	f8d8 1000 	ldr.w	r1, [r8]
 800cf9a:	f7fa f867 	bl	800706c <ip4_addr_isbroadcast_u32>
 800cf9e:	4681      	mov	r9, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cfa0:	8820      	ldrh	r0, [r4, #0]
 800cfa2:	f7f8 fc85 	bl	80058b0 <lwip_htons>
 800cfa6:	4607      	mov	r7, r0
  dest = lwip_ntohs(udphdr->dest);
 800cfa8:	8860      	ldrh	r0, [r4, #2]
 800cfaa:	f7f8 fc81 	bl	80058b0 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfae:	4b5d      	ldr	r3, [pc, #372]	; (800d124 <udp_input+0x1a8>)
 800cfb0:	f8d3 c000 	ldr.w	ip, [r3]
 800cfb4:	f1bc 0f00 	cmp.w	ip, #0
 800cfb8:	d03e      	beq.n	800d038 <udp_input+0xbc>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cfba:	f8d8 e014 	ldr.w	lr, [r8, #20]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cfbe:	f8d8 b010 	ldr.w	fp, [r8, #16]
 800cfc2:	f1b9 0f00 	cmp.w	r9, #0
 800cfc6:	d15e      	bne.n	800d086 <udp_input+0x10a>
 800cfc8:	4664      	mov	r4, ip
 800cfca:	464d      	mov	r5, r9
 800cfcc:	464b      	mov	r3, r9
 800cfce:	e004      	b.n	800cfda <udp_input+0x5e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd0:	68e2      	ldr	r2, [r4, #12]
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	2a00      	cmp	r2, #0
 800cfd6:	d02d      	beq.n	800d034 <udp_input+0xb8>
 800cfd8:	4614      	mov	r4, r2
    if ((pcb->local_port == dest) &&
 800cfda:	8a62      	ldrh	r2, [r4, #18]
 800cfdc:	4282      	cmp	r2, r0
 800cfde:	d1f7      	bne.n	800cfd0 <udp_input+0x54>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	b10a      	cbz	r2, 800cfe8 <udp_input+0x6c>
 800cfe4:	4572      	cmp	r2, lr
 800cfe6:	d1f3      	bne.n	800cfd0 <udp_input+0x54>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800cfe8:	7c22      	ldrb	r2, [r4, #16]
 800cfea:	0752      	lsls	r2, r2, #29
 800cfec:	d402      	bmi.n	800cff4 <udp_input+0x78>
 800cfee:	2d00      	cmp	r5, #0
 800cff0:	bf08      	it	eq
 800cff2:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800cff4:	8aa2      	ldrh	r2, [r4, #20]
 800cff6:	42ba      	cmp	r2, r7
 800cff8:	d1ea      	bne.n	800cfd0 <udp_input+0x54>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cffa:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800cffc:	b10a      	cbz	r2, 800d002 <udp_input+0x86>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cffe:	455a      	cmp	r2, fp
 800d000:	d1e6      	bne.n	800cfd0 <udp_input+0x54>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d002:	b12b      	cbz	r3, 800d010 <udp_input+0x94>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800d004:	4947      	ldr	r1, [pc, #284]	; (800d124 <udp_input+0x1a8>)
          prev->next = pcb->next;
 800d006:	68e2      	ldr	r2, [r4, #12]
 800d008:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d00a:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 800d00c:	f8c4 c00c 	str.w	ip, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800d010:	f06f 0107 	mvn.w	r1, #7
 800d014:	4630      	mov	r0, r6
 800d016:	f7fb f8a9 	bl	800816c <pbuf_header>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d170      	bne.n	800d100 <udp_input+0x184>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d01e:	69a5      	ldr	r5, [r4, #24]
 800d020:	b35d      	cbz	r5, 800d07a <udp_input+0xfe>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d022:	69e0      	ldr	r0, [r4, #28]
 800d024:	4b40      	ldr	r3, [pc, #256]	; (800d128 <udp_input+0x1ac>)
 800d026:	9700      	str	r7, [sp, #0]
 800d028:	4632      	mov	r2, r6
 800d02a:	4621      	mov	r1, r4
 800d02c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d02e:	b003      	add	sp, #12
 800d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pcb != NULL) {
 800d034:	2d00      	cmp	r5, #0
 800d036:	d16b      	bne.n	800d110 <udp_input+0x194>
  if (for_us) {
 800d038:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d03c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d040:	429a      	cmp	r2, r3
 800d042:	d11a      	bne.n	800d07a <udp_input+0xfe>
    if (pbuf_header(p, -UDP_HLEN)) {
 800d044:	f06f 0107 	mvn.w	r1, #7
 800d048:	4630      	mov	r0, r6
 800d04a:	f7fb f88f 	bl	800816c <pbuf_header>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d156      	bne.n	800d100 <udp_input+0x184>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d052:	f1b9 0f00 	cmp.w	r9, #0
 800d056:	d110      	bne.n	800d07a <udp_input+0xfe>
 800d058:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d05c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d060:	2be0      	cmp	r3, #224	; 0xe0
 800d062:	d00a      	beq.n	800d07a <udp_input+0xfe>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d064:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800d068:	3108      	adds	r1, #8
 800d06a:	b209      	sxth	r1, r1
 800d06c:	4630      	mov	r0, r6
 800d06e:	f7fb f8d5 	bl	800821c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d072:	2103      	movs	r1, #3
 800d074:	4630      	mov	r0, r6
 800d076:	f7f9 fdc7 	bl	8006c08 <icmp_dest_unreach>
      pbuf_free(p);
 800d07a:	4630      	mov	r0, r6
}
 800d07c:	b003      	add	sp, #12
 800d07e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800d082:	f7fb b927 	b.w	80082d4 <pbuf_free>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d086:	2500      	movs	r5, #0
 800d088:	f1be 3fff 	cmp.w	lr, #4294967295
 800d08c:	462b      	mov	r3, r5
 800d08e:	4664      	mov	r4, ip
 800d090:	d105      	bne.n	800d09e <udp_input+0x122>
 800d092:	e031      	b.n	800d0f8 <udp_input+0x17c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d094:	68e2      	ldr	r2, [r4, #12]
 800d096:	4623      	mov	r3, r4
 800d098:	2a00      	cmp	r2, #0
 800d09a:	d0cb      	beq.n	800d034 <udp_input+0xb8>
 800d09c:	4614      	mov	r4, r2
    if ((pcb->local_port == dest) &&
 800d09e:	8a62      	ldrh	r2, [r4, #18]
 800d0a0:	4282      	cmp	r2, r0
 800d0a2:	d1f7      	bne.n	800d094 <udp_input+0x118>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0a4:	6821      	ldr	r1, [r4, #0]
 800d0a6:	b129      	cbz	r1, 800d0b4 <udp_input+0x138>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d0a8:	f8da 2008 	ldr.w	r2, [sl, #8]
 800d0ac:	ea8e 0101 	eor.w	r1, lr, r1
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d0b0:	4211      	tst	r1, r2
 800d0b2:	d1ef      	bne.n	800d094 <udp_input+0x118>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800d0b4:	7c22      	ldrb	r2, [r4, #16]
 800d0b6:	0751      	lsls	r1, r2, #29
 800d0b8:	d402      	bmi.n	800d0c0 <udp_input+0x144>
 800d0ba:	2d00      	cmp	r5, #0
 800d0bc:	bf08      	it	eq
 800d0be:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800d0c0:	8aa2      	ldrh	r2, [r4, #20]
 800d0c2:	42ba      	cmp	r2, r7
 800d0c4:	d1e6      	bne.n	800d094 <udp_input+0x118>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0c6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	d09a      	beq.n	800d002 <udp_input+0x86>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0cc:	4593      	cmp	fp, r2
 800d0ce:	d1e1      	bne.n	800d094 <udp_input+0x118>
 800d0d0:	e797      	b.n	800d002 <udp_input+0x86>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800d0d2:	7c22      	ldrb	r2, [r4, #16]
 800d0d4:	0752      	lsls	r2, r2, #29
 800d0d6:	d402      	bmi.n	800d0de <udp_input+0x162>
 800d0d8:	2d00      	cmp	r5, #0
 800d0da:	bf08      	it	eq
 800d0dc:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800d0de:	8aa2      	ldrh	r2, [r4, #20]
 800d0e0:	42ba      	cmp	r2, r7
 800d0e2:	d104      	bne.n	800d0ee <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0e4:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	d08b      	beq.n	800d002 <udp_input+0x86>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0ea:	455a      	cmp	r2, fp
 800d0ec:	d089      	beq.n	800d002 <udp_input+0x86>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ee:	68e2      	ldr	r2, [r4, #12]
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	d09e      	beq.n	800d034 <udp_input+0xb8>
 800d0f6:	4614      	mov	r4, r2
    if ((pcb->local_port == dest) &&
 800d0f8:	8a62      	ldrh	r2, [r4, #18]
 800d0fa:	4282      	cmp	r2, r0
 800d0fc:	d1f7      	bne.n	800d0ee <udp_input+0x172>
 800d0fe:	e7e8      	b.n	800d0d2 <udp_input+0x156>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800d100:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <udp_input+0x1b0>)
 800d102:	490b      	ldr	r1, [pc, #44]	; (800d130 <udp_input+0x1b4>)
 800d104:	480b      	ldr	r0, [pc, #44]	; (800d134 <udp_input+0x1b8>)
 800d106:	f240 1255 	movw	r2, #341	; 0x155
 800d10a:	f000 ff67 	bl	800dfdc <iprintf>
 800d10e:	e7b4      	b.n	800d07a <udp_input+0xfe>
    if (pbuf_header(p, -UDP_HLEN)) {
 800d110:	f06f 0107 	mvn.w	r1, #7
 800d114:	4630      	mov	r0, r6
 800d116:	f7fb f829 	bl	800816c <pbuf_header>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d1f0      	bne.n	800d100 <udp_input+0x184>
 800d11e:	462c      	mov	r4, r5
 800d120:	e77d      	b.n	800d01e <udp_input+0xa2>
 800d122:	bf00      	nop
 800d124:	200088b4 	.word	0x200088b4
 800d128:	20004284 	.word	0x20004284
 800d12c:	080126ac 	.word	0x080126ac
 800d130:	080126dc 	.word	0x080126dc
 800d134:	0800e670 	.word	0x0800e670
 800d138:	20004274 	.word	0x20004274

0800d13c <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800d13c:	4b32      	ldr	r3, [pc, #200]	; (800d208 <udp_bind+0xcc>)
 800d13e:	2900      	cmp	r1, #0
 800d140:	bf08      	it	eq
 800d142:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d144:	2800      	cmp	r0, #0
 800d146:	d05b      	beq.n	800d200 <udp_bind+0xc4>
{
 800d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d14c:	4f2f      	ldr	r7, [pc, #188]	; (800d20c <udp_bind+0xd0>)
 800d14e:	683e      	ldr	r6, [r7, #0]
 800d150:	2e00      	cmp	r6, #0
 800d152:	d04f      	beq.n	800d1f4 <udp_bind+0xb8>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d154:	42b0      	cmp	r0, r6
 800d156:	d041      	beq.n	800d1dc <udp_bind+0xa0>
 800d158:	4634      	mov	r4, r6
 800d15a:	e001      	b.n	800d160 <udp_bind+0x24>
 800d15c:	42a0      	cmp	r0, r4
 800d15e:	d03d      	beq.n	800d1dc <udp_bind+0xa0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d160:	68e4      	ldr	r4, [r4, #12]
 800d162:	2c00      	cmp	r4, #0
 800d164:	d1fa      	bne.n	800d15c <udp_bind+0x20>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d166:	b18a      	cbz	r2, 800d18c <udp_bind+0x50>
 800d168:	680d      	ldr	r5, [r1, #0]
 800d16a:	4633      	mov	r3, r6
 800d16c:	e001      	b.n	800d172 <udp_bind+0x36>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	b34b      	cbz	r3, 800d1c6 <udp_bind+0x8a>
      if (pcb != ipcb) {
 800d172:	4298      	cmp	r0, r3
 800d174:	d0fb      	beq.n	800d16e <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d176:	8a59      	ldrh	r1, [r3, #18]
 800d178:	4291      	cmp	r1, r2
 800d17a:	d1f8      	bne.n	800d16e <udp_bind+0x32>
 800d17c:	6819      	ldr	r1, [r3, #0]
 800d17e:	42a9      	cmp	r1, r5
 800d180:	d1f5      	bne.n	800d16e <udp_bind+0x32>
      return ERR_USE;
 800d182:	f06f 0007 	mvn.w	r0, #7
 800d186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  rebind = 0;
 800d18a:	4634      	mov	r4, r6
 800d18c:	f8df c080 	ldr.w	ip, [pc, #128]	; 800d210 <udp_bind+0xd4>
 800d190:	f8bc 2000 	ldrh.w	r2, [ip]
 800d194:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d198:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800d19c:	4542      	cmp	r2, r8
 800d19e:	bf1a      	itte	ne
 800d1a0:	3201      	addne	r2, #1
 800d1a2:	b292      	uxthne	r2, r2
 800d1a4:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1a8:	b156      	cbz	r6, 800d1c0 <udp_bind+0x84>
    if (pcb->local_port == udp_port) {
 800d1aa:	8a73      	ldrh	r3, [r6, #18]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d017      	beq.n	800d1e0 <udp_bind+0xa4>
 800d1b0:	4633      	mov	r3, r6
 800d1b2:	e002      	b.n	800d1ba <udp_bind+0x7e>
 800d1b4:	8a5d      	ldrh	r5, [r3, #18]
 800d1b6:	4295      	cmp	r5, r2
 800d1b8:	d012      	beq.n	800d1e0 <udp_bind+0xa4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1f9      	bne.n	800d1b4 <udp_bind+0x78>
 800d1c0:	680d      	ldr	r5, [r1, #0]
 800d1c2:	f8ac 2000 	strh.w	r2, [ip]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d1c6:	6005      	str	r5, [r0, #0]

  pcb->local_port = port;
 800d1c8:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d1ca:	b924      	cbnz	r4, 800d1d6 <udp_bind+0x9a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d1cc:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800d1ce:	6038      	str	r0, [r7, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 800d1dc:	2401      	movs	r4, #1
 800d1de:	e7c2      	b.n	800d166 <udp_bind+0x2a>
 800d1e0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800d1e4:	fa1f fe8e 	uxth.w	lr, lr
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d1e8:	f1be 0f00 	cmp.w	lr, #0
 800d1ec:	d1d6      	bne.n	800d19c <udp_bind+0x60>
 800d1ee:	f8ac 2000 	strh.w	r2, [ip]
 800d1f2:	e7c6      	b.n	800d182 <udp_bind+0x46>
  if (port == 0) {
 800d1f4:	2a00      	cmp	r2, #0
 800d1f6:	d0c8      	beq.n	800d18a <udp_bind+0x4e>
 800d1f8:	680b      	ldr	r3, [r1, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d1fa:	6003      	str	r3, [r0, #0]
  pcb->local_port = port;
 800d1fc:	8242      	strh	r2, [r0, #18]
 800d1fe:	e7e5      	b.n	800d1cc <udp_bind+0x90>
    return ERR_VAL;
 800d200:	f06f 0005 	mvn.w	r0, #5
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	08011290 	.word	0x08011290
 800d20c:	200088b4 	.word	0x200088b4
 800d210:	2000000e 	.word	0x2000000e

0800d214 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d214:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800d216:	61c2      	str	r2, [r0, #28]
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop

0800d21c <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d21c:	4a0f      	ldr	r2, [pc, #60]	; (800d25c <udp_remove+0x40>)
 800d21e:	6813      	ldr	r3, [r2, #0]
 800d220:	4283      	cmp	r3, r0
{
 800d222:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800d224:	d014      	beq.n	800d250 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d226:	b153      	cbz	r3, 800d23e <udp_remove+0x22>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d228:	68da      	ldr	r2, [r3, #12]
 800d22a:	b142      	cbz	r2, 800d23e <udp_remove+0x22>
 800d22c:	4290      	cmp	r0, r2
 800d22e:	d103      	bne.n	800d238 <udp_remove+0x1c>
 800d230:	e008      	b.n	800d244 <udp_remove+0x28>
 800d232:	4299      	cmp	r1, r3
 800d234:	d007      	beq.n	800d246 <udp_remove+0x2a>
 800d236:	461a      	mov	r2, r3
 800d238:	68d3      	ldr	r3, [r2, #12]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1f9      	bne.n	800d232 <udp_remove+0x16>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d23e:	2000      	movs	r0, #0
 800d240:	f7fa be68 	b.w	8007f14 <memp_free>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d244:	461a      	mov	r2, r3
        pcb2->next = pcb->next;
 800d246:	68cb      	ldr	r3, [r1, #12]
 800d248:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800d24a:	2000      	movs	r0, #0
 800d24c:	f7fa be62 	b.w	8007f14 <memp_free>
    udp_pcbs = udp_pcbs->next;
 800d250:	68c3      	ldr	r3, [r0, #12]
 800d252:	6013      	str	r3, [r2, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 800d254:	2000      	movs	r0, #0
 800d256:	f7fa be5d 	b.w	8007f14 <memp_free>
 800d25a:	bf00      	nop
 800d25c:	200088b4 	.word	0x200088b4

0800d260 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800d260:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d262:	2000      	movs	r0, #0
 800d264:	f7fa fe22 	bl	8007eac <memp_malloc>
  if (pcb != NULL) {
 800d268:	4604      	mov	r4, r0
 800d26a:	b128      	cbz	r0, 800d278 <udp_new_ip_type+0x18>
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d26c:	2220      	movs	r2, #32
 800d26e:	2100      	movs	r1, #0
 800d270:	f001 f96a 	bl	800e548 <memset>
    pcb->ttl = UDP_TTL;
 800d274:	23ff      	movs	r3, #255	; 0xff
 800d276:	72a3      	strb	r3, [r4, #10]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800d278:	4620      	mov	r0, r4
 800d27a:	bd10      	pop	{r4, pc}

0800d27c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d27c:	b1a0      	cbz	r0, 800d2a8 <udp_netif_ip_addr_changed+0x2c>
 800d27e:	6802      	ldr	r2, [r0, #0]
 800d280:	b192      	cbz	r2, 800d2a8 <udp_netif_ip_addr_changed+0x2c>
 800d282:	b189      	cbz	r1, 800d2a8 <udp_netif_ip_addr_changed+0x2c>
 800d284:	680b      	ldr	r3, [r1, #0]
 800d286:	b17b      	cbz	r3, 800d2a8 <udp_netif_ip_addr_changed+0x2c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d288:	4b08      	ldr	r3, [pc, #32]	; (800d2ac <udp_netif_ip_addr_changed+0x30>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	b163      	cbz	r3, 800d2a8 <udp_netif_ip_addr_changed+0x2c>
{
 800d28e:	b410      	push	{r4}
 800d290:	e000      	b.n	800d294 <udp_netif_ip_addr_changed+0x18>
 800d292:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d294:	681c      	ldr	r4, [r3, #0]
 800d296:	42a2      	cmp	r2, r4
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d298:	bf04      	itt	eq
 800d29a:	680a      	ldreq	r2, [r1, #0]
 800d29c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1f6      	bne.n	800d292 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800d2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	200088b4 	.word	0x200088b4

0800d2b0 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d2b0:	8943      	ldrh	r3, [r0, #10]
 800d2b2:	2b0e      	cmp	r3, #14
{
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 800d2b8:	d919      	bls.n	800d2ee <ethernet_input+0x3e>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d2ba:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d2bc:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800d2be:	8985      	ldrh	r5, [r0, #12]
 800d2c0:	460e      	mov	r6, r1
  if (ethhdr->dest.addr[0] & 1) {
 800d2c2:	07d9      	lsls	r1, r3, #31
 800d2c4:	d50a      	bpl.n	800d2dc <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d032      	beq.n	800d330 <ethernet_input+0x80>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d2ca:	2206      	movs	r2, #6
 800d2cc:	491e      	ldr	r1, [pc, #120]	; (800d348 <ethernet_input+0x98>)
 800d2ce:	f001 f921 	bl	800e514 <memcmp>
 800d2d2:	b918      	cbnz	r0, 800d2dc <ethernet_input+0x2c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d2d4:	7b63      	ldrb	r3, [r4, #13]
 800d2d6:	f043 0308 	orr.w	r3, r3, #8
 800d2da:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800d2dc:	2d08      	cmp	r5, #8
 800d2de:	d00b      	beq.n	800d2f8 <ethernet_input+0x48>
 800d2e0:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 800d2e4:	d103      	bne.n	800d2ee <ethernet_input+0x3e>
        ip4_input(p, netif);
      }
      break;

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d2e6:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800d2ea:	071b      	lsls	r3, r3, #28
 800d2ec:	d414      	bmi.n	800d318 <ethernet_input+0x68>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f7fa fff0 	bl	80082d4 <pbuf_free>
  return ERR_OK;
}
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d2f8:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800d2fc:	071a      	lsls	r2, r3, #28
 800d2fe:	d5f6      	bpl.n	800d2ee <ethernet_input+0x3e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d300:	f06f 010d 	mvn.w	r1, #13
 800d304:	4620      	mov	r0, r4
 800d306:	f7fa ff31 	bl	800816c <pbuf_header>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d1ef      	bne.n	800d2ee <ethernet_input+0x3e>
        ip4_input(p, netif);
 800d30e:	4631      	mov	r1, r6
 800d310:	4620      	mov	r0, r4
 800d312:	f7f9 fd45 	bl	8006da0 <ip4_input>
      break;
 800d316:	e7ed      	b.n	800d2f4 <ethernet_input+0x44>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d318:	f06f 010d 	mvn.w	r1, #13
 800d31c:	4620      	mov	r0, r4
 800d31e:	f7fa ff25 	bl	800816c <pbuf_header>
 800d322:	2800      	cmp	r0, #0
 800d324:	d1e3      	bne.n	800d2ee <ethernet_input+0x3e>
        etharp_input(p, netif);
 800d326:	4631      	mov	r1, r6
 800d328:	4620      	mov	r0, r4
 800d32a:	f7f9 f8f3 	bl	8006514 <etharp_input>
      break;
 800d32e:	e7e1      	b.n	800d2f4 <ethernet_input+0x44>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d330:	7843      	ldrb	r3, [r0, #1]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1d2      	bne.n	800d2dc <ethernet_input+0x2c>
 800d336:	7883      	ldrb	r3, [r0, #2]
 800d338:	2b5e      	cmp	r3, #94	; 0x5e
 800d33a:	d1cf      	bne.n	800d2dc <ethernet_input+0x2c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800d33c:	7b63      	ldrb	r3, [r4, #13]
 800d33e:	f043 0310 	orr.w	r3, r3, #16
 800d342:	7363      	strb	r3, [r4, #13]
 800d344:	e7ca      	b.n	800d2dc <ethernet_input+0x2c>
 800d346:	bf00      	nop
 800d348:	080126f0 	.word	0x080126f0

0800d34c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d350:	4605      	mov	r5, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d352:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800d356:	460c      	mov	r4, r1
 800d358:	4616      	mov	r6, r2
 800d35a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800d35c:	f7f8 faa8 	bl	80058b0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d360:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800d362:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d364:	4620      	mov	r0, r4
 800d366:	f7fa ff01 	bl	800816c <pbuf_header>
 800d36a:	b9e0      	cbnz	r0, 800d3a6 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d36c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800d36e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	600b      	str	r3, [r1, #0]
 800d376:	88bb      	ldrh	r3, [r7, #4]
 800d378:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d37a:	6833      	ldr	r3, [r6, #0]
 800d37c:	f8c1 3006 	str.w	r3, [r1, #6]
 800d380:	88b3      	ldrh	r3, [r6, #4]
 800d382:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d384:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800d388:	2b06      	cmp	r3, #6
 800d38a:	d006      	beq.n	800d39a <ethernet_output+0x4e>
 800d38c:	4b08      	ldr	r3, [pc, #32]	; (800d3b0 <ethernet_output+0x64>)
 800d38e:	4909      	ldr	r1, [pc, #36]	; (800d3b4 <ethernet_output+0x68>)
 800d390:	4809      	ldr	r0, [pc, #36]	; (800d3b8 <ethernet_output+0x6c>)
 800d392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d396:	f000 fe21 	bl	800dfdc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d39a:	4621      	mov	r1, r4
 800d39c:	69ab      	ldr	r3, [r5, #24]
 800d39e:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800d3a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800d3a4:	4718      	bx	r3
}
 800d3a6:	f06f 0001 	mvn.w	r0, #1
 800d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ae:	bf00      	nop
 800d3b0:	080126f8 	.word	0x080126f8
 800d3b4:	08012730 	.word	0x08012730
 800d3b8:	0800e670 	.word	0x0800e670

0800d3bc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800d3c2:	9100      	str	r1, [sp, #0]
 800d3c4:	2304      	movs	r3, #4
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 800d3ca:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d3cc:	f7f4 fef0 	bl	80021b0 <osMessageCreate>
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800d3d0:	fab0 f380 	clz	r3, r0
 800d3d4:	095b      	lsrs	r3, r3, #5
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d3d6:	6020      	str	r0, [r4, #0]
  return ERR_MEM;
 
 return ERR_OK;
}
 800d3d8:	4258      	negs	r0, r3
 800d3da:	b002      	add	sp, #8
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	bf00      	nop

0800d3e0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 800d3e4:	6800      	ldr	r0, [r0, #0]
 800d3e6:	f7f4 ff59 	bl	800229c <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 800d3ea:	6820      	ldr	r0, [r4, #0]

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800d3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osMessageDelete(*mbox);
 800d3f0:	f7f4 bf5c 	b.w	80022ac <osMessageDelete>

0800d3f4 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800d3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d3fe:	4621      	mov	r1, r4
 800d400:	6828      	ldr	r0, [r5, #0]
 800d402:	f7f4 fed9 	bl	80021b8 <osMessagePut>
 800d406:	2800      	cmp	r0, #0
 800d408:	d1f7      	bne.n	800d3fa <sys_mbox_post+0x6>
}
 800d40a:	bd38      	pop	{r3, r4, r5, pc}

0800d40c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800d40c:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800d40e:	2200      	movs	r2, #0
 800d410:	6800      	ldr	r0, [r0, #0]
 800d412:	f7f4 fed1 	bl	80021b8 <osMessagePut>
 800d416:	3000      	adds	r0, #0
 800d418:	bf18      	it	ne
 800d41a:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800d41c:	4240      	negs	r0, r0
 800d41e:	bd08      	pop	{r3, pc}

0800d420 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d422:	b085      	sub	sp, #20
 800d424:	4615      	mov	r5, r2
 800d426:	4606      	mov	r6, r0
 800d428:	460f      	mov	r7, r1
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800d42a:	f7f4 fdd3 	bl	8001fd4 <osKernelSysTick>
 800d42e:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800d430:	b165      	cbz	r5, 800d44c <sys_arch_mbox_fetch+0x2c>
  { 
    event = osMessageGet (*mbox, timeout);
 800d432:	a801      	add	r0, sp, #4
 800d434:	462a      	mov	r2, r5
 800d436:	6831      	ldr	r1, [r6, #0]
 800d438:	f7f4 feea 	bl	8002210 <osMessageGet>
    
    if(event.status == osEventMessage)
 800d43c:	9b01      	ldr	r3, [sp, #4]
 800d43e:	2b10      	cmp	r3, #16
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800d440:	bf18      	it	ne
 800d442:	f04f 30ff 	movne.w	r0, #4294967295
    if(event.status == osEventMessage)
 800d446:	d007      	beq.n	800d458 <sys_arch_mbox_fetch+0x38>
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
  }
}
 800d448:	b005      	add	sp, #20
 800d44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800d44c:	6831      	ldr	r1, [r6, #0]
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	a801      	add	r0, sp, #4
 800d454:	f7f4 fedc 	bl	8002210 <osMessageGet>
    *msg = (void *)event.value.v;
 800d458:	9b02      	ldr	r3, [sp, #8]
 800d45a:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800d45c:	f7f4 fdba 	bl	8001fd4 <osKernelSysTick>
 800d460:	1b00      	subs	r0, r0, r4
}
 800d462:	b005      	add	sp, #20
 800d464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d466:	bf00      	nop

0800d468 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800d468:	b510      	push	{r4, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 800d46e:	2200      	movs	r2, #0
 800d470:	6801      	ldr	r1, [r0, #0]
 800d472:	a801      	add	r0, sp, #4
 800d474:	f7f4 fecc 	bl	8002210 <osMessageGet>
  
  if(event.status == osEventMessage)
 800d478:	9b01      	ldr	r3, [sp, #4]
 800d47a:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800d47c:	bf03      	ittte	eq
 800d47e:	9b02      	ldreq	r3, [sp, #8]
 800d480:	6023      	streq	r3, [r4, #0]
    return ERR_OK;
 800d482:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800d484:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 800d488:	b004      	add	sp, #16
 800d48a:	bd10      	pop	{r4, pc}

0800d48c <sys_mbox_valid>:
 800d48c:	6800      	ldr	r0, [r0, #0]
 800d48e:	3000      	adds	r0, #0
 800d490:	bf18      	it	ne
 800d492:	2001      	movne	r0, #1
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop

0800d498 <sys_mbox_set_invalid>:
 800d498:	2300      	movs	r3, #0
 800d49a:	6003      	str	r3, [r0, #0]
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	b082      	sub	sp, #8
  osSemaphoreDef(SEM);
 800d4a4:	ab02      	add	r3, sp, #8
 800d4a6:	2400      	movs	r4, #0
 800d4a8:	f843 4d04 	str.w	r4, [r3, #-4]!
{
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	460d      	mov	r5, r1

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	2101      	movs	r1, #1
 800d4b4:	f7f4 fe0c 	bl	80020d0 <osSemaphoreCreate>
 800d4b8:	6030      	str	r0, [r6, #0]
	
  if(*sem == NULL)
 800d4ba:	b148      	cbz	r0, 800d4d0 <sys_sem_new+0x30>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 800d4bc:	b115      	cbz	r5, 800d4c4 <sys_sem_new+0x24>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800d4be:	4620      	mov	r0, r4
}
 800d4c0:	b002      	add	sp, #8
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
    osSemaphoreWait(*sem,0);
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f7f4 fe17 	bl	80020f8 <osSemaphoreWait>
	return ERR_OK;
 800d4ca:	4628      	mov	r0, r5
}
 800d4cc:	b002      	add	sp, #8
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	e7f4      	b.n	800d4c0 <sys_sem_new+0x20>
 800d4d6:	bf00      	nop

0800d4d8 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	460e      	mov	r6, r1
 800d4dc:	4604      	mov	r4, r0
  uint32_t starttime = osKernelSysTick();
 800d4de:	f7f4 fd79 	bl	8001fd4 <osKernelSysTick>
 800d4e2:	4605      	mov	r5, r0
  
  if(timeout != 0)
 800d4e4:	b956      	cbnz	r6, 800d4fc <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800d4e6:	f04f 31ff 	mov.w	r1, #4294967295
 800d4ea:	6820      	ldr	r0, [r4, #0]
 800d4ec:	f7f4 fe04 	bl	80020f8 <osSemaphoreWait>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d1f8      	bne.n	800d4e6 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800d4f4:	f7f4 fd6e 	bl	8001fd4 <osKernelSysTick>
 800d4f8:	1b40      	subs	r0, r0, r5
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800d4fc:	4631      	mov	r1, r6
 800d4fe:	6820      	ldr	r0, [r4, #0]
 800d500:	f7f4 fdfa 	bl	80020f8 <osSemaphoreWait>
 800d504:	2800      	cmp	r0, #0
 800d506:	d0f5      	beq.n	800d4f4 <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
 800d50e:	bf00      	nop

0800d510 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800d510:	6800      	ldr	r0, [r0, #0]
 800d512:	f7f4 be1b 	b.w	800214c <osSemaphoreRelease>
 800d516:	bf00      	nop

0800d518 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 800d518:	6800      	ldr	r0, [r0, #0]
 800d51a:	f7f4 be3f 	b.w	800219c <osSemaphoreDelete>
 800d51e:	bf00      	nop

0800d520 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 800d520:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;                                       
}
 800d522:	3000      	adds	r0, #0
 800d524:	bf18      	it	ne
 800d526:	2001      	movne	r0, #1
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop

0800d52c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800d52c:	2300      	movs	r3, #0
 800d52e:	6003      	str	r3, [r0, #0]
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop

0800d534 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800d534:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800d536:	4803      	ldr	r0, [pc, #12]	; (800d544 <sys_init+0x10>)
 800d538:	f7f4 fd74 	bl	8002024 <osMutexCreate>
 800d53c:	4b02      	ldr	r3, [pc, #8]	; (800d548 <sys_init+0x14>)
 800d53e:	6018      	str	r0, [r3, #0]
 800d540:	bd08      	pop	{r3, pc}
 800d542:	bf00      	nop
 800d544:	0801276c 	.word	0x0801276c
 800d548:	200088bc 	.word	0x200088bc

0800d54c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d54c:	b510      	push	{r4, lr}
 800d54e:	b082      	sub	sp, #8
  
  osMutexDef(MUTEX);
 800d550:	ab02      	add	r3, sp, #8
 800d552:	2200      	movs	r2, #0
 800d554:	f843 2d04 	str.w	r2, [r3, #-4]!
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d558:	4604      	mov	r4, r0
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7f4 fd62 	bl	8002024 <osMutexCreate>
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800d560:	fab0 f380 	clz	r3, r0
 800d564:	095b      	lsrs	r3, r3, #5
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d566:	6020      	str	r0, [r4, #0]
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800d568:	4258      	negs	r0, r3
 800d56a:	b002      	add	sp, #8
 800d56c:	bd10      	pop	{r4, pc}
 800d56e:	bf00      	nop

0800d570 <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800d570:	6800      	ldr	r0, [r0, #0]
 800d572:	f04f 31ff 	mov.w	r1, #4294967295
 800d576:	f7f4 bd59 	b.w	800202c <osMutexWait>
 800d57a:	bf00      	nop

0800d57c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800d57c:	6800      	ldr	r0, [r0, #0]
 800d57e:	f7f4 bd7f 	b.w	8002080 <osMutexRelease>
 800d582:	bf00      	nop

0800d584 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d584:	b510      	push	{r4, lr}
 800d586:	b086      	sub	sp, #24
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d588:	9001      	str	r0, [sp, #4]
 800d58a:	9102      	str	r1, [sp, #8]
{
 800d58c:	9c08      	ldr	r4, [sp, #32]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d58e:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800d590:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d592:	2300      	movs	r3, #0
  return osThreadCreate(&os_thread_def, arg);
 800d594:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d596:	f8ad 400c 	strh.w	r4, [sp, #12]
 800d59a:	9304      	str	r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800d59c:	f7f4 fd22 	bl	8001fe4 <osThreadCreate>
}
 800d5a0:	b006      	add	sp, #24
 800d5a2:	bd10      	pop	{r4, pc}

0800d5a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800d5a4:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800d5a6:	4b04      	ldr	r3, [pc, #16]	; (800d5b8 <sys_arch_protect+0x14>)
 800d5a8:	f04f 31ff 	mov.w	r1, #4294967295
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f7f4 fd3d 	bl	800202c <osMutexWait>
  return (sys_prot_t)1;
}
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	bd08      	pop	{r3, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200088bc 	.word	0x200088bc

0800d5bc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800d5bc:	4b01      	ldr	r3, [pc, #4]	; (800d5c4 <sys_arch_unprotect+0x8>)
 800d5be:	6818      	ldr	r0, [r3, #0]
 800d5c0:	f7f4 bd5e 	b.w	8002080 <osMutexRelease>
 800d5c4:	200088bc 	.word	0x200088bc

0800d5c8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d5cc:	4b2f      	ldr	r3, [pc, #188]	; (800d68c <low_level_output+0xc4>)
 800d5ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 800d5d0:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800d5d2:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d5d4:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 800d5d6:	2900      	cmp	r1, #0
 800d5d8:	d051      	beq.n	800d67e <low_level_output+0xb6>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d5da:	6822      	ldr	r2, [r4, #0]
 800d5dc:	2a00      	cmp	r2, #0
 800d5de:	db21      	blt.n	800d624 <low_level_output+0x5c>
 800d5e0:	2700      	movs	r7, #0
 800d5e2:	46b9      	mov	r9, r7
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d5e4:	f240 5af4 	movw	sl, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800d5e8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d5ec:	19d6      	adds	r6, r2, r7
 800d5ee:	4556      	cmp	r6, sl
 800d5f0:	d93f      	bls.n	800d672 <low_level_output+0xaa>
 800d5f2:	f04f 0800 	mov.w	r8, #0
 800d5f6:	e002      	b.n	800d5fe <low_level_output+0x36>
 800d5f8:	4556      	cmp	r6, sl
        {
          errval = ERR_USE;
          goto error;
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d5fa:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d5fc:	d924      	bls.n	800d648 <low_level_output+0x80>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d5fe:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d602:	ebaa 0507 	sub.w	r5, sl, r7
 800d606:	19d8      	adds	r0, r3, r7
 800d608:	4441      	add	r1, r8
 800d60a:	462a      	mov	r2, r5
 800d60c:	f000 ff91 	bl	800e532 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d610:	68e4      	ldr	r4, [r4, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	2b00      	cmp	r3, #0
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d616:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d61a:	44a8      	add	r8, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d61c:	44a9      	add	r9, r5
        bufferoffset = 0;
 800d61e:	f04f 0700 	mov.w	r7, #0
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d622:	dae9      	bge.n	800d5f8 <low_level_output+0x30>
        errval = ERR_USE;
 800d624:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d628:	4b18      	ldr	r3, [pc, #96]	; (800d68c <low_level_output+0xc4>)
 800d62a:	f241 0214 	movw	r2, #4116	; 0x1014
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	5899      	ldr	r1, [r3, r2]
 800d632:	0689      	lsls	r1, r1, #26
 800d634:	d505      	bpl.n	800d642 <low_level_output+0x7a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d636:	f241 0104 	movw	r1, #4100	; 0x1004
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d63a:	2520      	movs	r5, #32
    heth.Instance->DMATPDR = 0;
 800d63c:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d63e:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800d640:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 800d642:	b003      	add	sp, #12
 800d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d648:	4637      	mov	r7, r6
        bufferoffset = 0;
 800d64a:	2000      	movs	r0, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d64c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	4418      	add	r0, r3
 800d654:	4441      	add	r1, r8
 800d656:	4632      	mov	r2, r6
 800d658:	f000 ff6b 	bl	800e532 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800d65c:	f8db b000 	ldr.w	fp, [fp]
 800d660:	9b01      	ldr	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800d662:	44b1      	add	r9, r6
  for(q = p; q != NULL; q = q->next)
 800d664:	f1bb 0f00 	cmp.w	fp, #0
 800d668:	d00a      	beq.n	800d680 <low_level_output+0xb8>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d66a:	6822      	ldr	r2, [r4, #0]
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	dabb      	bge.n	800d5e8 <low_level_output+0x20>
 800d670:	e7d8      	b.n	800d624 <low_level_output+0x5c>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d672:	4638      	mov	r0, r7
      payloadoffset = 0;
 800d674:	f04f 0800 	mov.w	r8, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d678:	4637      	mov	r7, r6
      byteslefttocopy = q->len;
 800d67a:	4616      	mov	r6, r2
 800d67c:	e7e6      	b.n	800d64c <low_level_output+0x84>
  uint32_t framelength = 0;
 800d67e:	4689      	mov	r9, r1
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d680:	4649      	mov	r1, r9
 800d682:	4802      	ldr	r0, [pc, #8]	; (800d68c <low_level_output+0xc4>)
 800d684:	f7f3 fabe 	bl	8000c04 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800d688:	2000      	movs	r0, #0
 800d68a:	e7cd      	b.n	800d628 <low_level_output+0x60>
 800d68c:	2000a190 	.word	0x2000a190

0800d690 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	b085      	sub	sp, #20
 800d696:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800d78c <ethernetif_input+0xfc>
 800d69a:	9003      	str	r0, [sp, #12]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800d69c:	4b3a      	ldr	r3, [pc, #232]	; (800d788 <ethernetif_input+0xf8>)
 800d69e:	f04f 31ff 	mov.w	r1, #4294967295
 800d6a2:	6818      	ldr	r0, [r3, #0]
 800d6a4:	f7f4 fd28 	bl	80020f8 <osSemaphoreWait>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d1f7      	bne.n	800d69c <ethernetif_input+0xc>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d6ac:	4837      	ldr	r0, [pc, #220]	; (800d78c <ethernetif_input+0xfc>)
 800d6ae:	f7f3 fb27 	bl	8000d00 <HAL_ETH_GetReceivedFrame_IT>
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d1f1      	bne.n	800d69c <ethernetif_input+0xc>
  len = heth.RxFrameInfos.length;
 800d6b8:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d6bc:	f8da 8040 	ldr.w	r8, [sl, #64]	; 0x40
  if (len > 0)
 800d6c0:	bb59      	cbnz	r1, 800d71a <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9302      	str	r3, [sp, #8]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d6c6:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d6ca:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	b138      	cbz	r0, 800d6e2 <ethernetif_input+0x52>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d6d2:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d6d4:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d6d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800d6da:	601a      	str	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d6dc:	4288      	cmp	r0, r1
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d6de:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d6e0:	d1f7      	bne.n	800d6d2 <ethernetif_input+0x42>
    heth.RxFrameInfos.SegCount =0;  
 800d6e2:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800d6e4:	f8da 3000 	ldr.w	r3, [sl]
    heth.RxFrameInfos.SegCount =0;  
 800d6e8:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800d6ec:	f241 0214 	movw	r2, #4116	; 0x1014
 800d6f0:	5899      	ldr	r1, [r3, r2]
 800d6f2:	0609      	lsls	r1, r1, #24
 800d6f4:	d505      	bpl.n	800d702 <ethernetif_input+0x72>
    heth.Instance->DMARPDR = 0;
 800d6f6:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d6fa:	2080      	movs	r0, #128	; 0x80
 800d6fc:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800d6fe:	2200      	movs	r2, #0
 800d700:	505a      	str	r2, [r3, r1]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800d702:	9802      	ldr	r0, [sp, #8]
 800d704:	2800      	cmp	r0, #0
 800d706:	d0c9      	beq.n	800d69c <ethernetif_input+0xc>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d708:	9903      	ldr	r1, [sp, #12]
 800d70a:	690b      	ldr	r3, [r1, #16]
 800d70c:	4798      	blx	r3
 800d70e:	2800      	cmp	r0, #0
 800d710:	d0cc      	beq.n	800d6ac <ethernetif_input+0x1c>
          {
            pbuf_free(p);
 800d712:	9802      	ldr	r0, [sp, #8]
 800d714:	f7fa fdde 	bl	80082d4 <pbuf_free>
 800d718:	e7c8      	b.n	800d6ac <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d71a:	2203      	movs	r2, #3
 800d71c:	2004      	movs	r0, #4
 800d71e:	f7fa fe47 	bl	80083b0 <pbuf_alloc>
  if (p != NULL)
 800d722:	9002      	str	r0, [sp, #8]
 800d724:	2800      	cmp	r0, #0
 800d726:	d0cc      	beq.n	800d6c2 <ethernetif_input+0x32>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d728:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 800d72c:	4683      	mov	fp, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d72e:	f240 59f4 	movw	r9, #1524	; 0x5f4
 800d732:	4643      	mov	r3, r8
      byteslefttocopy = q->len;
 800d734:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d738:	1910      	adds	r0, r2, r4
 800d73a:	4548      	cmp	r0, r9
 800d73c:	4621      	mov	r1, r4
 800d73e:	f04f 0500 	mov.w	r5, #0
 800d742:	4604      	mov	r4, r0
 800d744:	d912      	bls.n	800d76c <ethernetif_input+0xdc>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d746:	f8db 0004 	ldr.w	r0, [fp, #4]
 800d74a:	eba9 0701 	sub.w	r7, r9, r1
 800d74e:	4428      	add	r0, r5
 800d750:	4419      	add	r1, r3
 800d752:	463a      	mov	r2, r7
 800d754:	f000 feed 	bl	800e532 <memcpy>
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d758:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d75c:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d75e:	454c      	cmp	r4, r9
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d760:	443d      	add	r5, r7
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d762:	68b3      	ldr	r3, [r6, #8]
        bufferoffset = 0;
 800d764:	f04f 0100 	mov.w	r1, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d768:	d8ed      	bhi.n	800d746 <ethernetif_input+0xb6>
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d76a:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d76c:	f8db 0004 	ldr.w	r0, [fp, #4]
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	4419      	add	r1, r3
 800d774:	4428      	add	r0, r5
 800d776:	f000 fedc 	bl	800e532 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800d77a:	f8db b000 	ldr.w	fp, [fp]
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	f1bb 0f00 	cmp.w	fp, #0
 800d784:	d1d6      	bne.n	800d734 <ethernetif_input+0xa4>
 800d786:	e79e      	b.n	800d6c6 <ethernetif_input+0x36>
 800d788:	20003f24 	.word	0x20003f24
 800d78c:	2000a190 	.word	0x2000a190

0800d790 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800d790:	6802      	ldr	r2, [r0, #0]
 800d792:	4b29      	ldr	r3, [pc, #164]	; (800d838 <HAL_ETH_MspInit+0xa8>)
 800d794:	429a      	cmp	r2, r3
 800d796:	d000      	beq.n	800d79a <HAL_ETH_MspInit+0xa>
 800d798:	4770      	bx	lr
{
 800d79a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d79c:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 800d79e:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800d7a2:	2400      	movs	r4, #0
 800d7a4:	9400      	str	r4, [sp, #0]
 800d7a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7a8:	4824      	ldr	r0, [pc, #144]	; (800d83c <HAL_ETH_MspInit+0xac>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800d7aa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800d7ae:	631a      	str	r2, [r3, #48]	; 0x30
 800d7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7b2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800d7b6:	9200      	str	r2, [sp, #0]
 800d7b8:	9a00      	ldr	r2, [sp, #0]
 800d7ba:	9401      	str	r4, [sp, #4]
 800d7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d7c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7c6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800d7ca:	9201      	str	r2, [sp, #4]
 800d7cc:	9a01      	ldr	r2, [sp, #4]
 800d7ce:	9402      	str	r4, [sp, #8]
 800d7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7d2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d7d6:	631a      	str	r2, [r3, #48]	; 0x30
 800d7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7da:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ETH_CLK_ENABLE();
 800d7dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7e2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7e4:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d7e6:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800d7ea:	233e      	movs	r3, #62	; 0x3e
    __HAL_RCC_ETH_CLK_ENABLE();
 800d7ec:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800d7ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7f0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7f2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d7f4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7f6:	f7f3 fbb1 	bl	8000f5c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800d7fc:	238f      	movs	r3, #143	; 0x8f
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7fe:	4810      	ldr	r0, [pc, #64]	; (800d840 <HAL_ETH_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800d800:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d802:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d804:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d806:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d808:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d80a:	f7f3 fba7 	bl	8000f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800d80e:	f643 5303 	movw	r3, #15619	; 0x3d03
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d812:	a903      	add	r1, sp, #12
 800d814:	480b      	ldr	r0, [pc, #44]	; (800d844 <HAL_ETH_MspInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800d816:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d818:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d81a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d81c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d81e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d820:	f7f3 fb9c 	bl	8000f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d824:	4622      	mov	r2, r4
 800d826:	2105      	movs	r1, #5
 800d828:	203d      	movs	r0, #61	; 0x3d
 800d82a:	f7f2 febb 	bl	80005a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d82e:	203d      	movs	r0, #61	; 0x3d
 800d830:	f7f2 feee 	bl	8000610 <HAL_NVIC_EnableIRQ>
}
 800d834:	b009      	add	sp, #36	; 0x24
 800d836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d838:	40028000 	.word	0x40028000
 800d83c:	40020800 	.word	0x40020800
 800d840:	40020000 	.word	0x40020000
 800d844:	40020400 	.word	0x40020400

0800d848 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800d848:	4b01      	ldr	r3, [pc, #4]	; (800d850 <HAL_ETH_RxCpltCallback+0x8>)
 800d84a:	6818      	ldr	r0, [r3, #0]
 800d84c:	f7f4 bc7e 	b.w	800214c <osSemaphoreRelease>
 800d850:	20003f24 	.word	0x20003f24

0800d854 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d854:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d856:	4604      	mov	r4, r0
{
 800d858:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d074      	beq.n	800d948 <ethernetif_init+0xf4>
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d85e:	4b3e      	ldr	r3, [pc, #248]	; (800d958 <ethernetif_init+0x104>)
  heth.Instance = ETH;
 800d860:	4d3e      	ldr	r5, [pc, #248]	; (800d95c <ethernetif_init+0x108>)
  netif->output = etharp_output;
 800d862:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d864:	493e      	ldr	r1, [pc, #248]	; (800d960 <ethernetif_init+0x10c>)
 800d866:	61a1      	str	r1, [r4, #24]
  netif->name[0] = IFNAME0;
 800d868:	2273      	movs	r2, #115	; 0x73
  netif->name[1] = IFNAME1;
 800d86a:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 800d86c:	4e3d      	ldr	r6, [pc, #244]	; (800d964 <ethernetif_init+0x110>)
  netif->name[0] = IFNAME0;
 800d86e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  heth.Init.MACAddr = &MACAddr[0];
 800d872:	a901      	add	r1, sp, #4
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800d874:	2201      	movs	r2, #1
  netif->name[1] = IFNAME1;
 800d876:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  heth.Init.PhyAddress = PHY_USER_NAME_PHY_ADDRESS;
 800d87a:	2300      	movs	r3, #0
  MACAddr[1] = 0x02;
 800d87c:	2702      	movs	r7, #2
  heth.Instance = ETH;
 800d87e:	602e      	str	r6, [r5, #0]
  heth.Init.MACAddr = &MACAddr[0];
 800d880:	6169      	str	r1, [r5, #20]
  MACAddr[2] = 0xA2;
 800d882:	26a2      	movs	r6, #162	; 0xa2
  MACAddr[3] = 0x42;
 800d884:	2142      	movs	r1, #66	; 0x42
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800d886:	606a      	str	r2, [r5, #4]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800d888:	61aa      	str	r2, [r5, #24]
  heth.Init.PhyAddress = PHY_USER_NAME_PHY_ADDRESS;
 800d88a:	822b      	strh	r3, [r5, #16]
  MACAddr[4] = 0x50;
 800d88c:	2250      	movs	r2, #80	; 0x50
  MACAddr[0] = 0x00;
 800d88e:	f88d 3004 	strb.w	r3, [sp, #4]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800d892:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 800d894:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d896:	4628      	mov	r0, r5
  MACAddr[5] = 0xE4;
 800d898:	23e4      	movs	r3, #228	; 0xe4
  MACAddr[1] = 0x02;
 800d89a:	f88d 7005 	strb.w	r7, [sp, #5]
  MACAddr[2] = 0xA2;
 800d89e:	f88d 6006 	strb.w	r6, [sp, #6]
  MACAddr[3] = 0x42;
 800d8a2:	f88d 1007 	strb.w	r1, [sp, #7]
  MACAddr[4] = 0x50;
 800d8a6:	f88d 2008 	strb.w	r2, [sp, #8]
  MACAddr[5] = 0xE4;
 800d8aa:	f88d 3009 	strb.w	r3, [sp, #9]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d8ae:	f7f2 ffcf 	bl	8000850 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800d8b2:	b928      	cbnz	r0, 800d8c0 <ethernetif_init+0x6c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d8b4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d8b8:	f043 0304 	orr.w	r3, r3, #4
 800d8bc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d8c0:	2304      	movs	r3, #4
 800d8c2:	4a29      	ldr	r2, [pc, #164]	; (800d968 <ethernetif_init+0x114>)
 800d8c4:	4929      	ldr	r1, [pc, #164]	; (800d96c <ethernetif_init+0x118>)
 800d8c6:	4825      	ldr	r0, [pc, #148]	; (800d95c <ethernetif_init+0x108>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d8c8:	4e29      	ldr	r6, [pc, #164]	; (800d970 <ethernetif_init+0x11c>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d8ca:	f7f2 ff3b 	bl	8000744 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d8ce:	2304      	movs	r3, #4
 800d8d0:	4a28      	ldr	r2, [pc, #160]	; (800d974 <ethernetif_init+0x120>)
 800d8d2:	4929      	ldr	r1, [pc, #164]	; (800d978 <ethernetif_init+0x124>)
 800d8d4:	4821      	ldr	r0, [pc, #132]	; (800d95c <ethernetif_init+0x108>)
 800d8d6:	f7f2 ff81 	bl	80007dc <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d8da:	696b      	ldr	r3, [r5, #20]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d8dc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d8e0:	2106      	movs	r1, #6
 800d8e2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d8e6:	7819      	ldrb	r1, [r3, #0]
 800d8e8:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d8ec:	7859      	ldrb	r1, [r3, #1]
 800d8ee:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d8f2:	7899      	ldrb	r1, [r3, #2]
 800d8f4:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d8f8:	78d9      	ldrb	r1, [r3, #3]
 800d8fa:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d8fe:	7919      	ldrb	r1, [r3, #4]
 800d900:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d904:	795b      	ldrb	r3, [r3, #5]
 800d906:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  osSemaphoreDef(SEM);
 800d90a:	a808      	add	r0, sp, #32
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d90c:	f042 030a 	orr.w	r3, r2, #10
  osSemaphoreDef(SEM);
 800d910:	2700      	movs	r7, #0
  netif->mtu = 1500;
 800d912:	f240 52dc 	movw	r2, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d916:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = 1500;
 800d91a:	8462      	strh	r2, [r4, #34]	; 0x22
  osSemaphoreDef(SEM);
 800d91c:	f840 7d20 	str.w	r7, [r0, #-32]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800d920:	2101      	movs	r1, #1
 800d922:	f7f4 fbd5 	bl	80020d0 <osSemaphoreCreate>
 800d926:	4b15      	ldr	r3, [pc, #84]	; (800d97c <ethernetif_init+0x128>)
 800d928:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d92a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d92c:	ad03      	add	r5, sp, #12
 800d92e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d930:	6833      	ldr	r3, [r6, #0]
 800d932:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800d934:	4621      	mov	r1, r4
 800d936:	a803      	add	r0, sp, #12
 800d938:	f7f4 fb54 	bl	8001fe4 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800d93c:	4807      	ldr	r0, [pc, #28]	; (800d95c <ethernetif_init+0x108>)
 800d93e:	f7f3 faaf 	bl	8000ea0 <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800d942:	4638      	mov	r0, r7
 800d944:	b009      	add	sp, #36	; 0x24
 800d946:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d948:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <ethernetif_init+0x12c>)
 800d94a:	490e      	ldr	r1, [pc, #56]	; (800d984 <ethernetif_init+0x130>)
 800d94c:	480e      	ldr	r0, [pc, #56]	; (800d988 <ethernetif_init+0x134>)
 800d94e:	f240 2249 	movw	r2, #585	; 0x249
 800d952:	f000 fb43 	bl	800dfdc <iprintf>
 800d956:	e782      	b.n	800d85e <ethernetif_init+0xa>
 800d958:	080067f9 	.word	0x080067f9
 800d95c:	2000a190 	.word	0x2000a190
 800d960:	0800d5c9 	.word	0x0800d5c9
 800d964:	40028000 	.word	0x40028000
 800d968:	2000a1d8 	.word	0x2000a1d8
 800d96c:	200088c0 	.word	0x200088c0
 800d970:	0800e594 	.word	0x0800e594
 800d974:	20008940 	.word	0x20008940
 800d978:	2000a110 	.word	0x2000a110
 800d97c:	20003f24 	.word	0x20003f24
 800d980:	08012770 	.word	0x08012770
 800d984:	080110c8 	.word	0x080110c8
 800d988:	0800e670 	.word	0x0800e670

0800d98c <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800d98c:	f7f2 bde0 	b.w	8000550 <HAL_GetTick>

0800d990 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800d990:	b530      	push	{r4, r5, lr}
 800d992:	b083      	sub	sp, #12
	/* init code for LWIP */
	MX_LWIP_Init();
 800d994:	f000 f8bc 	bl	800db10 <MX_LWIP_Init>

	/* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 800d998:	4816      	ldr	r0, [pc, #88]	; (800d9f4 <StartDefaultTask+0x64>)
 800d99a:	f000 fbb5 	bl	800e108 <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 800d99e:	2200      	movs	r2, #0
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	2010      	movs	r0, #16
 800d9a4:	f7f6 fa0e 	bl	8003dc4 <netconn_new_with_proto_and_callback>
	if (conn != NULL) {
 800d9a8:	b1c0      	cbz	r0, 800d9dc <StartDefaultTask+0x4c>
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800d9aa:	2250      	movs	r2, #80	; 0x50
 800d9ac:	4912      	ldr	r1, [pc, #72]	; (800d9f8 <StartDefaultTask+0x68>)
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	f7f6 fa8c 	bl	8003ecc <netconn_bind>
		if (err == ERR_OK) {
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	b9a8      	cbnz	r0, 800d9e4 <StartDefaultTask+0x54>
			netconn_listen(conn);
 800d9b8:	21ff      	movs	r1, #255	; 0xff
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f7f6 fab2 	bl	8003f24 <netconn_listen_with_backlog>
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 800d9c0:	4622      	mov	r2, r4
 800d9c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9c6:	490d      	ldr	r1, [pc, #52]	; (800d9fc <StartDefaultTask+0x6c>)
 800d9c8:	9500      	str	r5, [sp, #0]
 800d9ca:	480d      	ldr	r0, [pc, #52]	; (800da00 <StartDefaultTask+0x70>)
 800d9cc:	f7ff fdda 	bl	800d584 <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE / 4, osPriorityNormal);
			printf("Binding ... OK\n");
 800d9d0:	480c      	ldr	r0, [pc, #48]	; (800da04 <StartDefaultTask+0x74>)
 800d9d2:	f000 fb99 	bl	800e108 <puts>
			osDelay(1);
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	f7f4 fb1c 	bl	8002014 <osDelay>
		} else {
			netconn_delete(conn);
			printf("Binding ... Err\n");
			osDelay(1);
 800d9dc:	2001      	movs	r0, #1
 800d9de:	f7f4 fb19 	bl	8002014 <osDelay>
 800d9e2:	e7fb      	b.n	800d9dc <StartDefaultTask+0x4c>
			netconn_delete(conn);
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7f6 fa51 	bl	8003e8c <netconn_delete>
			printf("Binding ... Err\n");
 800d9ea:	4807      	ldr	r0, [pc, #28]	; (800da08 <StartDefaultTask+0x78>)
 800d9ec:	f000 fb8c 	bl	800e108 <puts>
 800d9f0:	e7f4      	b.n	800d9dc <StartDefaultTask+0x4c>
 800d9f2:	bf00      	nop
 800d9f4:	0801278c 	.word	0x0801278c
 800d9f8:	08011290 	.word	0x08011290
 800d9fc:	0800e239 	.word	0x0800e239
 800da00:	080127a4 	.word	0x080127a4
 800da04:	080127b8 	.word	0x080127b8
 800da08:	080127c8 	.word	0x080127c8

0800da0c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800da0c:	b530      	push	{r4, r5, lr}
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800da0e:	4d07      	ldr	r5, [pc, #28]	; (800da2c <MX_FREERTOS_Init+0x20>)
 800da10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800da12:	b087      	sub	sp, #28
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800da14:	ac01      	add	r4, sp, #4
 800da16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da18:	682b      	ldr	r3, [r5, #0]
 800da1a:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800da1c:	2100      	movs	r1, #0
 800da1e:	a801      	add	r0, sp, #4
 800da20:	f7f4 fae0 	bl	8001fe4 <osThreadCreate>
 800da24:	4b02      	ldr	r3, [pc, #8]	; (800da30 <MX_FREERTOS_Init+0x24>)
 800da26:	6018      	str	r0, [r3, #0]
}
 800da28:	b007      	add	sp, #28
 800da2a:	bd30      	pop	{r4, r5, pc}
 800da2c:	0800e5a8 	.word	0x0800e5a8
 800da30:	2000b9a8 	.word	0x2000b9a8

0800da34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da36:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da38:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800da3a:	4b32      	ldr	r3, [pc, #200]	; (800db04 <MX_GPIO_Init+0xd0>)
 800da3c:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da3e:	9408      	str	r4, [sp, #32]
 800da40:	9407      	str	r4, [sp, #28]
 800da42:	9409      	str	r4, [sp, #36]	; 0x24
 800da44:	940a      	str	r4, [sp, #40]	; 0x28
 800da46:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800da48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800da4a:	4f2f      	ldr	r7, [pc, #188]	; (800db08 <MX_GPIO_Init+0xd4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_OUT_GPIO_Port, RE_DE_OUT_Pin, GPIO_PIN_RESET);
 800da4c:	4e2f      	ldr	r6, [pc, #188]	; (800db0c <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800da4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800da52:	631a      	str	r2, [r3, #48]	; 0x30
 800da54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da56:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800da5a:	9201      	str	r2, [sp, #4]
 800da5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800da5e:	9402      	str	r4, [sp, #8]
 800da60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da62:	f042 0204 	orr.w	r2, r2, #4
 800da66:	631a      	str	r2, [r3, #48]	; 0x30
 800da68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da6a:	f002 0204 	and.w	r2, r2, #4
 800da6e:	9202      	str	r2, [sp, #8]
 800da70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800da72:	9403      	str	r4, [sp, #12]
 800da74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da76:	f042 0201 	orr.w	r2, r2, #1
 800da7a:	631a      	str	r2, [r3, #48]	; 0x30
 800da7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da7e:	f002 0201 	and.w	r2, r2, #1
 800da82:	9203      	str	r2, [sp, #12]
 800da84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800da86:	9404      	str	r4, [sp, #16]
 800da88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da8a:	f042 0202 	orr.w	r2, r2, #2
 800da8e:	631a      	str	r2, [r3, #48]	; 0x30
 800da90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da92:	f002 0202 	and.w	r2, r2, #2
 800da96:	9204      	str	r2, [sp, #16]
 800da98:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800da9a:	9405      	str	r4, [sp, #20]
 800da9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da9e:	f042 0208 	orr.w	r2, r2, #8
 800daa2:	631a      	str	r2, [r3, #48]	; 0x30
 800daa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800daa6:	f002 0208 	and.w	r2, r2, #8
 800daaa:	9205      	str	r2, [sp, #20]
 800daac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800daae:	9406      	str	r4, [sp, #24]
 800dab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dab2:	f042 0210 	orr.w	r2, r2, #16
 800dab6:	631a      	str	r2, [r3, #48]	; 0x30
 800dab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daba:	f003 0310 	and.w	r3, r3, #16
 800dabe:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dac0:	4622      	mov	r2, r4
 800dac2:	4638      	mov	r0, r7
 800dac4:	f44f 7100 	mov.w	r1, #512	; 0x200
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800dac8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800daca:	f7f3 fb5d 	bl	8001188 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RE_DE_OUT_GPIO_Port, RE_DE_OUT_Pin, GPIO_PIN_RESET);
 800dace:	4622      	mov	r2, r4
 800dad0:	4630      	mov	r0, r6
 800dad2:	2101      	movs	r1, #1
 800dad4:	f7f3 fb58 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dad8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dada:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dade:	4638      	mov	r0, r7
 800dae0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dae2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dae4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dae6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dae8:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800daea:	f7f3 fa37 	bl	8000f5c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RE_DE_OUT_GPIO_Port, &GPIO_InitStruct);
 800daee:	a907      	add	r1, sp, #28
 800daf0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = RE_DE_OUT_Pin;
 800daf2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800daf4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daf6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800daf8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(RE_DE_OUT_GPIO_Port, &GPIO_InitStruct);
 800dafa:	f7f3 fa2f 	bl	8000f5c <HAL_GPIO_Init>

}
 800dafe:	b00d      	add	sp, #52	; 0x34
 800db00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db02:	bf00      	nop
 800db04:	40023800 	.word	0x40023800
 800db08:	40020400 	.word	0x40020400
 800db0c:	40021000 	.word	0x40021000

0800db10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800db10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800db14:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800dbf4 <MX_LWIP_Init+0xe4>
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 4;
  IP_ADDRESS[3] = 253;
  NETMASK_ADDRESS[0] = 255;
 800db18:	4e2d      	ldr	r6, [pc, #180]	; (800dbd0 <MX_LWIP_Init+0xc0>)
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 0;
 800db1a:	4d2e      	ldr	r5, [pc, #184]	; (800dbd4 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[0] = 192;
 800db1c:	4b2e      	ldr	r3, [pc, #184]	; (800dbd8 <MX_LWIP_Init+0xc8>)
 800db1e:	f8c8 3000 	str.w	r3, [r8]
{
 800db22:	b085      	sub	sp, #20
  GATEWAY_ADDRESS[0] = 0;
 800db24:	2700      	movs	r7, #0
  NETMASK_ADDRESS[0] = 255;
 800db26:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[1] = 0;
  GATEWAY_ADDRESS[2] = 0;
  GATEWAY_ADDRESS[3] = 0;
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800db2a:	4639      	mov	r1, r7
 800db2c:	4638      	mov	r0, r7
  NETMASK_ADDRESS[0] = 255;
 800db2e:	6033      	str	r3, [r6, #0]
  GATEWAY_ADDRESS[0] = 0;
 800db30:	602f      	str	r7, [r5, #0]
  tcpip_init( NULL, NULL );
 800db32:	f7f7 fe55 	bl	80057e0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db36:	7832      	ldrb	r2, [r6, #0]
 800db38:	7870      	ldrb	r0, [r6, #1]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db3a:	786c      	ldrb	r4, [r5, #1]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800db3c:	9700      	str	r7, [sp, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db3e:	782f      	ldrb	r7, [r5, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db40:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db44:	f898 1000 	ldrb.w	r1, [r8]
 800db48:	f898 9003 	ldrb.w	r9, [r8, #3]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db4c:	f896 c002 	ldrb.w	ip, [r6, #2]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db50:	f895 e002 	ldrb.w	lr, [r5, #2]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db54:	0400      	lsls	r0, r0, #16
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db56:	0424      	lsls	r4, r4, #16
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db58:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db5c:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 800db60:	78ea      	ldrb	r2, [r5, #3]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db62:	78f7      	ldrb	r7, [r6, #3]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800db64:	4d1d      	ldr	r5, [pc, #116]	; (800dbdc <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db66:	4e1e      	ldr	r6, [pc, #120]	; (800dbe0 <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db68:	041b      	lsls	r3, r3, #16
 800db6a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800db6e:	f898 1002 	ldrb.w	r1, [r8, #2]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db72:	4338      	orrs	r0, r7
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db74:	4314      	orrs	r4, r2
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db76:	ea43 0309 	orr.w	r3, r3, r9
 800db7a:	4a1a      	ldr	r2, [pc, #104]	; (800dbe4 <MX_LWIP_Init+0xd4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db7c:	4f1a      	ldr	r7, [pc, #104]	; (800dbe8 <MX_LWIP_Init+0xd8>)
 800db7e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800db82:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800db8a:	4918      	ldr	r1, [pc, #96]	; (800dbec <MX_LWIP_Init+0xdc>)
 800db8c:	9102      	str	r1, [sp, #8]
 800db8e:	ba1b      	rev	r3, r3
 800db90:	4917      	ldr	r1, [pc, #92]	; (800dbf0 <MX_LWIP_Init+0xe0>)
 800db92:	9101      	str	r1, [sp, #4]
 800db94:	ba00      	rev	r0, r0
 800db96:	ba24      	rev	r4, r4
 800db98:	4611      	mov	r1, r2
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db9a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800db9c:	6038      	str	r0, [r7, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800db9e:	4633      	mov	r3, r6
 800dba0:	463a      	mov	r2, r7
 800dba2:	4628      	mov	r0, r5
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dba4:	6034      	str	r4, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800dba6:	f7fa f9e5 	bl	8007f74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800dbaa:	4628      	mov	r0, r5
 800dbac:	f7fa fa66 	bl	800807c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800dbb0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800dbb4:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800dbb6:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800dbb8:	d404      	bmi.n	800dbc4 <MX_LWIP_Init+0xb4>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800dbba:	b005      	add	sp, #20
 800dbbc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netif_set_down(&gnetif);
 800dbc0:	f7fa ba76 	b.w	80080b0 <netif_set_down>
}
 800dbc4:	b005      	add	sp, #20
 800dbc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netif_set_up(&gnetif);
 800dbca:	f7fa ba5d 	b.w	8008088 <netif_set_up>
 800dbce:	bf00      	nop
 800dbd0:	2000b9e8 	.word	0x2000b9e8
 800dbd4:	2000b9b0 	.word	0x2000b9b0
 800dbd8:	fd04a8c0 	.word	0xfd04a8c0
 800dbdc:	2000b9b4 	.word	0x2000b9b4
 800dbe0:	2000b9f4 	.word	0x2000b9f4
 800dbe4:	2000b9e4 	.word	0x2000b9e4
 800dbe8:	2000b9f0 	.word	0x2000b9f0
 800dbec:	080056c1 	.word	0x080056c1
 800dbf0:	0800d855 	.word	0x0800d855
 800dbf4:	2000b9ec 	.word	0x2000b9ec

0800dbf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbfa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dbfc:	a808      	add	r0, sp, #32
 800dbfe:	2230      	movs	r2, #48	; 0x30
 800dc00:	2100      	movs	r1, #0
 800dc02:	f000 fca1 	bl	800e548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dc06:	2400      	movs	r4, #0

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dc08:	4a1f      	ldr	r2, [pc, #124]	; (800dc88 <SystemClock_Config+0x90>)
 800dc0a:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dc0c:	9404      	str	r4, [sp, #16]
 800dc0e:	9403      	str	r4, [sp, #12]
 800dc10:	9405      	str	r4, [sp, #20]
 800dc12:	9406      	str	r4, [sp, #24]
 800dc14:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dc16:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dc18:	4b1c      	ldr	r3, [pc, #112]	; (800dc8c <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800dc1a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800dc1e:	6411      	str	r1, [r2, #64]	; 0x40
 800dc20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dc22:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800dc26:	9201      	str	r2, [sp, #4]
 800dc28:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dc2a:	9402      	str	r4, [sp, #8]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc3a:	9302      	str	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dc3c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dc40:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dc42:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dc44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 800dc48:	2219      	movs	r2, #25
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dc4a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dc4c:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800dc4e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800dc52:	2605      	movs	r6, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dc54:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dc56:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800dc58:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800dc5a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800dc5c:	9613      	str	r6, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dc5e:	9f02      	ldr	r7, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dc60:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dc62:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dc64:	f7f3 fa98 	bl	8001198 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dc68:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dc6a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dc6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dc72:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dc74:	260f      	movs	r6, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dc76:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dc78:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dc7a:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dc7c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dc7e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dc80:	f7f3 fc7c 	bl	800157c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800dc84:	b015      	add	sp, #84	; 0x54
 800dc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc88:	40023800 	.word	0x40023800
 800dc8c:	40007000 	.word	0x40007000

0800dc90 <main>:
{
 800dc90:	b508      	push	{r3, lr}
  HAL_Init();
 800dc92:	f7f2 fc37 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 800dc96:	f7ff ffaf 	bl	800dbf8 <SystemClock_Config>
  MX_GPIO_Init();
 800dc9a:	f7ff fecb 	bl	800da34 <MX_GPIO_Init>
  MX_UART5_Init();
 800dc9e:	f000 fa4d 	bl	800e13c <MX_UART5_Init>
  MX_FREERTOS_Init();
 800dca2:	f7ff feb3 	bl	800da0c <MX_FREERTOS_Init>
  osKernelStart();
 800dca6:	f7f4 f98f 	bl	8001fc8 <osKernelStart>
 800dcaa:	e7fe      	b.n	800dcaa <main+0x1a>

0800dcac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800dcac:	6802      	ldr	r2, [r0, #0]
 800dcae:	4b03      	ldr	r3, [pc, #12]	; (800dcbc <HAL_TIM_PeriodElapsedCallback+0x10>)
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d000      	beq.n	800dcb6 <HAL_TIM_PeriodElapsedCallback+0xa>
 800dcb4:	4770      	bx	lr
    HAL_IncTick();
 800dcb6:	f7f2 bc3f 	b.w	8000538 <HAL_IncTick>
 800dcba:	bf00      	nop
 800dcbc:	40010000 	.word	0x40010000

0800dcc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop

0800dcc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dcc4:	b500      	push	{lr}
 800dcc6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dcc8:	4b0e      	ldr	r3, [pc, #56]	; (800dd04 <HAL_MspInit+0x40>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	9200      	str	r2, [sp, #0]
 800dcce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800dcd0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800dcd4:	6459      	str	r1, [r3, #68]	; 0x44
 800dcd6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800dcd8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800dcdc:	9100      	str	r1, [sp, #0]
 800dcde:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dce0:	9201      	str	r2, [sp, #4]
 800dce2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800dce4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800dce8:	6419      	str	r1, [r3, #64]	; 0x40
 800dcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcf0:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800dcf2:	210f      	movs	r1, #15
 800dcf4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800dcf8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800dcfa:	f7f2 fc53 	bl	80005a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dcfe:	b003      	add	sp, #12
 800dd00:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd04:	40023800 	.word	0x40023800

0800dd08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dd08:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800dd0a:	4601      	mov	r1, r0
{
 800dd0c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2019      	movs	r0, #25
 800dd12:	f7f2 fc47 	bl	80005a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800dd16:	2019      	movs	r0, #25
 800dd18:	f7f2 fc7a 	bl	8000610 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800dd1c:	2500      	movs	r5, #0
 800dd1e:	4b15      	ldr	r3, [pc, #84]	; (800dd74 <HAL_InitTick+0x6c>)
 800dd20:	9502      	str	r5, [sp, #8]
 800dd22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800dd24:	4c14      	ldr	r4, [pc, #80]	; (800dd78 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800dd26:	f042 0201 	orr.w	r2, r2, #1
 800dd2a:	645a      	str	r2, [r3, #68]	; 0x44
 800dd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd2e:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800dd32:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800dd34:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800dd36:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800dd38:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800dd3a:	f7f3 fcdf 	bl	80016fc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800dd3e:	f7f3 fccd 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800dd42:	4a0e      	ldr	r2, [pc, #56]	; (800dd7c <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 800dd44:	490e      	ldr	r1, [pc, #56]	; (800dd80 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800dd46:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800dd48:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800dd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4e:	0c9b      	lsrs	r3, r3, #18
 800dd50:	3b01      	subs	r3, #1
  htim1.Init.Period = (1000000 / 1000) - 1;
 800dd52:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800dd56:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800dd58:	e884 002a 	stmia.w	r4, {r1, r3, r5}
  htim1.Init.Period = (1000000 / 1000) - 1;
 800dd5c:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800dd5e:	f7f3 fcf1 	bl	8001744 <HAL_TIM_Base_Init>
 800dd62:	b110      	cbz	r0, 800dd6a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800dd64:	2001      	movs	r0, #1
}
 800dd66:	b009      	add	sp, #36	; 0x24
 800dd68:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f7f3 fd68 	bl	8001840 <HAL_TIM_Base_Start_IT>
}
 800dd70:	b009      	add	sp, #36	; 0x24
 800dd72:	bd30      	pop	{r4, r5, pc}
 800dd74:	40023800 	.word	0x40023800
 800dd78:	2000b9f8 	.word	0x2000b9f8
 800dd7c:	431bde83 	.word	0x431bde83
 800dd80:	40010000 	.word	0x40010000

0800dd84 <NMI_Handler>:
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop

0800dd88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dd88:	e7fe      	b.n	800dd88 <HardFault_Handler>
 800dd8a:	bf00      	nop

0800dd8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dd8c:	e7fe      	b.n	800dd8c <MemManage_Handler>
 800dd8e:	bf00      	nop

0800dd90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dd90:	e7fe      	b.n	800dd90 <BusFault_Handler>
 800dd92:	bf00      	nop

0800dd94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dd94:	e7fe      	b.n	800dd94 <UsageFault_Handler>
 800dd96:	bf00      	nop

0800dd98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop

0800dd9c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800dd9c:	4801      	ldr	r0, [pc, #4]	; (800dda4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800dd9e:	f7f3 bd63 	b.w	8001868 <HAL_TIM_IRQHandler>
 800dda2:	bf00      	nop
 800dda4:	2000b9f8 	.word	0x2000b9f8

0800dda8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800dda8:	4801      	ldr	r0, [pc, #4]	; (800ddb0 <UART5_IRQHandler+0x8>)
 800ddaa:	f7f3 bfc1 	b.w	8001d30 <HAL_UART_IRQHandler>
 800ddae:	bf00      	nop
 800ddb0:	2000ba34 	.word	0x2000ba34

0800ddb4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ddb4:	4801      	ldr	r0, [pc, #4]	; (800ddbc <ETH_IRQHandler+0x8>)
 800ddb6:	f7f3 b83b 	b.w	8000e30 <HAL_ETH_IRQHandler>
 800ddba:	bf00      	nop
 800ddbc:	2000a190 	.word	0x2000a190

0800ddc0 <_write>:
	return len;
}

int _write(int file, char *ptr, int len) {
	int i = 0;
	for (i = 0; i < len; i++)
 800ddc0:	1e10      	subs	r0, r2, #0
 800ddc2:	dd1c      	ble.n	800ddfe <_write+0x3e>
int _write(int file, char *ptr, int len) {
 800ddc4:	b430      	push	{r4, r5}
 800ddc6:	180d      	adds	r5, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ddc8:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 800ddcc:	e001      	b.n	800ddd2 <_write+0x12>
	for (i = 0; i < len; i++)
 800ddce:	428d      	cmp	r5, r1
 800ddd0:	d014      	beq.n	800ddfc <_write+0x3c>
 800ddd2:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
 800ddd6:	07da      	lsls	r2, r3, #31
		ITM_SendChar((*ptr++));
 800ddd8:	f101 0101 	add.w	r1, r1, #1
 800dddc:	d5f7      	bpl.n	800ddce <_write+0xe>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800ddde:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800dde2:	07db      	lsls	r3, r3, #31
 800dde4:	d5f3      	bpl.n	800ddce <_write+0xe>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	b91b      	cbnz	r3, 800ddf2 <_write+0x32>
  __ASM volatile ("nop");
 800ddea:	bf00      	nop
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0fb      	beq.n	800ddea <_write+0x2a>
 800ddf2:	f811 3c01 	ldrb.w	r3, [r1, #-1]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800ddf6:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800ddf8:	428d      	cmp	r5, r1
 800ddfa:	d1ea      	bne.n	800ddd2 <_write+0x12>
	return len;
}
 800ddfc:	bc30      	pop	{r4, r5}
 800ddfe:	4770      	bx	lr

0800de00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800de00:	4910      	ldr	r1, [pc, #64]	; (800de44 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800de02:	4b11      	ldr	r3, [pc, #68]	; (800de48 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800de04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800de08:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800de0c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800de0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800de12:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800de14:	4c0d      	ldr	r4, [pc, #52]	; (800de4c <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 800de16:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800de18:	f042 0201 	orr.w	r2, r2, #1
 800de1c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800de1e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800de26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800de2a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800de2c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800de2e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800de30:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800de34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800de38:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800de3a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800de3c:	608c      	str	r4, [r1, #8]
#endif
}
 800de3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	e000ed00 	.word	0xe000ed00
 800de48:	40023800 	.word	0x40023800
 800de4c:	24003010 	.word	0x24003010

0800de50 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800de50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		div /= base;
 800de54:	4f59      	ldr	r7, [pc, #356]	; (800dfbc <ts_formatstring+0x16c>)
	char *start_buf = buf;
	while(*fmt)
 800de56:	4603      	mov	r3, r0
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 800de58:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
	while(*fmt)
 800de5c:	780c      	ldrb	r4, [r1, #0]
 800de5e:	b13c      	cbz	r4, 800de70 <ts_formatstring+0x20>
		if (*fmt == '%')
 800de60:	2c25      	cmp	r4, #37	; 0x25
 800de62:	d009      	beq.n	800de78 <ts_formatstring+0x28>
			fmt++;
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800de64:	3101      	adds	r1, #1
 800de66:	701c      	strb	r4, [r3, #0]
	while(*fmt)
 800de68:	780c      	ldrb	r4, [r1, #0]
			*buf++ = *fmt++;
 800de6a:	3301      	adds	r3, #1
	while(*fmt)
 800de6c:	2c00      	cmp	r4, #0
 800de6e:	d1f7      	bne.n	800de60 <ts_formatstring+0x10>
		}
	}
	*buf = 0;
 800de70:	701c      	strb	r4, [r3, #0]

	return (int)(buf - start_buf);
}
 800de72:	1a18      	subs	r0, r3, r0
 800de74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			switch (*(++fmt))
 800de78:	784c      	ldrb	r4, [r1, #1]
 800de7a:	2c64      	cmp	r4, #100	; 0x64
 800de7c:	d06f      	beq.n	800df5e <ts_formatstring+0x10e>
 800de7e:	d92a      	bls.n	800ded6 <ts_formatstring+0x86>
 800de80:	2c73      	cmp	r4, #115	; 0x73
 800de82:	d05d      	beq.n	800df40 <ts_formatstring+0xf0>
 800de84:	d969      	bls.n	800df5a <ts_formatstring+0x10a>
 800de86:	2c75      	cmp	r4, #117	; 0x75
 800de88:	d12f      	bne.n	800deea <ts_formatstring+0x9a>
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800de8a:	6816      	ldr	r6, [r2, #0]
	while (d/div >= base)
 800de8c:	2e09      	cmp	r6, #9
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800de8e:	f102 0204 	add.w	r2, r2, #4
	while (d/div >= base)
 800de92:	f04f 0401 	mov.w	r4, #1
 800de96:	d906      	bls.n	800dea6 <ts_formatstring+0x56>
		div *= base;
 800de98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800de9c:	0064      	lsls	r4, r4, #1
	while (d/div >= base)
 800de9e:	fbb6 f5f4 	udiv	r5, r6, r4
 800dea2:	2d09      	cmp	r5, #9
 800dea4:	d8f8      	bhi.n	800de98 <ts_formatstring+0x48>
		int num = d/div;
 800dea6:	fbb6 f8f4 	udiv	r8, r6, r4
			*((*buf)++) = (num-10) + 'A';
 800deaa:	fa5f f588 	uxtb.w	r5, r8
 800deae:	f105 0c37 	add.w	ip, r5, #55	; 0x37
			*((*buf)++) = num + '0';
 800deb2:	3530      	adds	r5, #48	; 0x30
 800deb4:	f1b8 0f09 	cmp.w	r8, #9
 800deb8:	bfc8      	it	gt
 800deba:	4665      	movgt	r5, ip
		div /= base;
 800debc:	fb87 c904 	smull	ip, r9, r7, r4
 800dec0:	ea4f 7ce4 	mov.w	ip, r4, asr #31
		d = d%div;
 800dec4:	fb04 6618 	mls	r6, r4, r8, r6
	while (div != 0)
 800dec8:	ebdc 04a9 	rsbs	r4, ip, r9, asr #2
 800decc:	f803 5b01 	strb.w	r5, [r3], #1
 800ded0:	d1e9      	bne.n	800dea6 <ts_formatstring+0x56>
			fmt++;
 800ded2:	3102      	adds	r1, #2
 800ded4:	e7c2      	b.n	800de5c <ts_formatstring+0xc>
			switch (*(++fmt))
 800ded6:	2c58      	cmp	r4, #88	; 0x58
 800ded8:	d009      	beq.n	800deee <ts_formatstring+0x9e>
 800deda:	2c63      	cmp	r4, #99	; 0x63
 800dedc:	d02a      	beq.n	800df34 <ts_formatstring+0xe4>
 800dede:	2c25      	cmp	r4, #37	; 0x25
 800dee0:	d1f7      	bne.n	800ded2 <ts_formatstring+0x82>
				  *buf++ = '%';
 800dee2:	701c      	strb	r4, [r3, #0]
			fmt++;
 800dee4:	3102      	adds	r1, #2
				  *buf++ = '%';
 800dee6:	3301      	adds	r3, #1
 800dee8:	e7b8      	b.n	800de5c <ts_formatstring+0xc>
			switch (*(++fmt))
 800deea:	2c78      	cmp	r4, #120	; 0x78
 800deec:	d1f1      	bne.n	800ded2 <ts_formatstring+0x82>
					ts_itoa(&buf, va_arg(va, int), 16);
 800deee:	f8d2 c000 	ldr.w	ip, [r2]
	while (d/div >= base)
 800def2:	f1bc 0f0f 	cmp.w	ip, #15
					ts_itoa(&buf, va_arg(va, int), 16);
 800def6:	f102 0204 	add.w	r2, r2, #4
	while (d/div >= base)
 800defa:	f04f 0401 	mov.w	r4, #1
 800defe:	d95a      	bls.n	800dfb6 <ts_formatstring+0x166>
		div *= base;
 800df00:	0124      	lsls	r4, r4, #4
	while (d/div >= base)
 800df02:	fbbc f5f4 	udiv	r5, ip, r4
 800df06:	2d0f      	cmp	r5, #15
 800df08:	d8fa      	bhi.n	800df00 <ts_formatstring+0xb0>
 800df0a:	e001      	b.n	800df10 <ts_formatstring+0xc0>
 800df0c:	fbbc f5f4 	udiv	r5, ip, r4
			*((*buf)++) = (num-10) + 'A';
 800df10:	b2ee      	uxtb	r6, r5
		d = d%div;
 800df12:	fb04 cc15 	mls	ip, r4, r5, ip
		div /= base;
 800df16:	2c00      	cmp	r4, #0
			*((*buf)++) = (num-10) + 'A';
 800df18:	f106 0837 	add.w	r8, r6, #55	; 0x37
		div /= base;
 800df1c:	bfb8      	it	lt
 800df1e:	340f      	addlt	r4, #15
			*((*buf)++) = num + '0';
 800df20:	3630      	adds	r6, #48	; 0x30
 800df22:	2d09      	cmp	r5, #9
 800df24:	bfc8      	it	gt
 800df26:	4646      	movgt	r6, r8
	while (div != 0)
 800df28:	1124      	asrs	r4, r4, #4
 800df2a:	f803 6b01 	strb.w	r6, [r3], #1
 800df2e:	d1ed      	bne.n	800df0c <ts_formatstring+0xbc>
			fmt++;
 800df30:	3102      	adds	r1, #2
 800df32:	e793      	b.n	800de5c <ts_formatstring+0xc>
				*buf++ = va_arg(va, int);
 800df34:	6814      	ldr	r4, [r2, #0]
 800df36:	701c      	strb	r4, [r3, #0]
 800df38:	3204      	adds	r2, #4
 800df3a:	3301      	adds	r3, #1
			fmt++;
 800df3c:	3102      	adds	r1, #2
 800df3e:	e78d      	b.n	800de5c <ts_formatstring+0xc>
					char * arg = va_arg(va, char *);
 800df40:	6815      	ldr	r5, [r2, #0]
					while (*arg)
 800df42:	782c      	ldrb	r4, [r5, #0]
					char * arg = va_arg(va, char *);
 800df44:	3204      	adds	r2, #4
					while (*arg)
 800df46:	2c00      	cmp	r4, #0
 800df48:	d0c3      	beq.n	800ded2 <ts_formatstring+0x82>
						*buf++ = *arg++;
 800df4a:	f803 4b01 	strb.w	r4, [r3], #1
					while (*arg)
 800df4e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800df52:	2c00      	cmp	r4, #0
 800df54:	d1f9      	bne.n	800df4a <ts_formatstring+0xfa>
			fmt++;
 800df56:	3102      	adds	r1, #2
 800df58:	e780      	b.n	800de5c <ts_formatstring+0xc>
			switch (*(++fmt))
 800df5a:	2c69      	cmp	r4, #105	; 0x69
 800df5c:	d1b9      	bne.n	800ded2 <ts_formatstring+0x82>
					signed int val = va_arg(va, signed int);
 800df5e:	6816      	ldr	r6, [r2, #0]
					if (val < 0)
 800df60:	2e00      	cmp	r6, #0
					signed int val = va_arg(va, signed int);
 800df62:	f102 0204 	add.w	r2, r2, #4
					if (val < 0)
 800df66:	db21      	blt.n	800dfac <ts_formatstring+0x15c>
	while (d/div >= base)
 800df68:	2e09      	cmp	r6, #9
					ts_itoa(&buf, val, 10);
 800df6a:	46b0      	mov	r8, r6
	while (d/div >= base)
 800df6c:	f04f 0401 	mov.w	r4, #1
 800df70:	dd06      	ble.n	800df80 <ts_formatstring+0x130>
		div *= base;
 800df72:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800df76:	0064      	lsls	r4, r4, #1
	while (d/div >= base)
 800df78:	fbb6 f5f4 	udiv	r5, r6, r4
 800df7c:	2d09      	cmp	r5, #9
 800df7e:	d8f8      	bhi.n	800df72 <ts_formatstring+0x122>
		int num = d/div;
 800df80:	fbb8 fcf4 	udiv	ip, r8, r4
			*((*buf)++) = (num-10) + 'A';
 800df84:	fa5f f58c 	uxtb.w	r5, ip
 800df88:	f105 0637 	add.w	r6, r5, #55	; 0x37
			*((*buf)++) = num + '0';
 800df8c:	3530      	adds	r5, #48	; 0x30
 800df8e:	f1bc 0f09 	cmp.w	ip, #9
 800df92:	bfc8      	it	gt
 800df94:	4635      	movgt	r5, r6
		div /= base;
 800df96:	fb87 6904 	smull	r6, r9, r7, r4
 800df9a:	17e6      	asrs	r6, r4, #31
		d = d%div;
 800df9c:	fb04 881c 	mls	r8, r4, ip, r8
	while (div != 0)
 800dfa0:	ebd6 04a9 	rsbs	r4, r6, r9, asr #2
 800dfa4:	f803 5b01 	strb.w	r5, [r3], #1
 800dfa8:	d1ea      	bne.n	800df80 <ts_formatstring+0x130>
 800dfaa:	e792      	b.n	800ded2 <ts_formatstring+0x82>
						*buf++ = '-';
 800dfac:	f883 e000 	strb.w	lr, [r3]
						val *= -1;
 800dfb0:	4276      	negs	r6, r6
						*buf++ = '-';
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	e7d8      	b.n	800df68 <ts_formatstring+0x118>
 800dfb6:	4665      	mov	r5, ip
 800dfb8:	e7aa      	b.n	800df10 <ts_formatstring+0xc0>
 800dfba:	bf00      	nop
 800dfbc:	66666667 	.word	0x66666667

0800dfc0 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800dfc0:	b40e      	push	{r1, r2, r3}
 800dfc2:	b500      	push	{lr}
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	aa03      	add	r2, sp, #12
 800dfc8:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 800dfcc:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 800dfce:	f7ff ff3f 	bl	800de50 <ts_formatstring>
	va_end(va);
	return length;
}
 800dfd2:	b002      	add	sp, #8
 800dfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfd8:	b003      	add	sp, #12
 800dfda:	4770      	bx	lr

0800dfdc <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800dfdc:	b40f      	push	{r0, r1, r2, r3}
 800dfde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	f107 0420 	add.w	r4, r7, #32
 800dfe8:	f854 1b04 	ldr.w	r1, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800dfec:	607c      	str	r4, [r7, #4]
	while (*fmt)
 800dfee:	7808      	ldrb	r0, [r1, #0]
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f000 8087 	beq.w	800e104 <iprintf+0x128>
 800dff6:	4625      	mov	r5, r4
 800dff8:	460b      	mov	r3, r1
 800dffa:	2200      	movs	r2, #0
 800dffc:	e004      	b.n	800e008 <iprintf+0x2c>
			++length;
 800dffe:	3201      	adds	r2, #1
	while (*fmt)
 800e000:	7858      	ldrb	r0, [r3, #1]
		++fmt;
 800e002:	3301      	adds	r3, #1
	while (*fmt)
 800e004:	2800      	cmp	r0, #0
 800e006:	d05f      	beq.n	800e0c8 <iprintf+0xec>
		if (*fmt == '%')
 800e008:	2825      	cmp	r0, #37	; 0x25
 800e00a:	d1f8      	bne.n	800dffe <iprintf+0x22>
			switch (*fmt)
 800e00c:	7858      	ldrb	r0, [r3, #1]
 800e00e:	3858      	subs	r0, #88	; 0x58
			++fmt;
 800e010:	3301      	adds	r3, #1
			switch (*fmt)
 800e012:	2820      	cmp	r0, #32
 800e014:	d8f3      	bhi.n	800dffe <iprintf+0x22>
 800e016:	a601      	add	r6, pc, #4	; (adr r6, 800e01c <iprintf+0x40>)
 800e018:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 800e01c:	0800e0f9 	.word	0x0800e0f9
 800e020:	0800dfff 	.word	0x0800dfff
 800e024:	0800dfff 	.word	0x0800dfff
 800e028:	0800dfff 	.word	0x0800dfff
 800e02c:	0800dfff 	.word	0x0800dfff
 800e030:	0800dfff 	.word	0x0800dfff
 800e034:	0800dfff 	.word	0x0800dfff
 800e038:	0800dfff 	.word	0x0800dfff
 800e03c:	0800dfff 	.word	0x0800dfff
 800e040:	0800dfff 	.word	0x0800dfff
 800e044:	0800dfff 	.word	0x0800dfff
 800e048:	0800e0ff 	.word	0x0800e0ff
 800e04c:	0800e0f3 	.word	0x0800e0f3
 800e050:	0800dfff 	.word	0x0800dfff
 800e054:	0800dfff 	.word	0x0800dfff
 800e058:	0800dfff 	.word	0x0800dfff
 800e05c:	0800dfff 	.word	0x0800dfff
 800e060:	0800e0f3 	.word	0x0800e0f3
 800e064:	0800dfff 	.word	0x0800dfff
 800e068:	0800dfff 	.word	0x0800dfff
 800e06c:	0800dfff 	.word	0x0800dfff
 800e070:	0800dfff 	.word	0x0800dfff
 800e074:	0800dfff 	.word	0x0800dfff
 800e078:	0800dfff 	.word	0x0800dfff
 800e07c:	0800dfff 	.word	0x0800dfff
 800e080:	0800dfff 	.word	0x0800dfff
 800e084:	0800dfff 	.word	0x0800dfff
 800e088:	0800e0a1 	.word	0x0800e0a1
 800e08c:	0800dfff 	.word	0x0800dfff
 800e090:	0800e0f3 	.word	0x0800e0f3
 800e094:	0800dfff 	.word	0x0800dfff
 800e098:	0800dfff 	.word	0x0800dfff
 800e09c:	0800e0f9 	.word	0x0800e0f9
			  		  char * str = va_arg(va, char *);
 800e0a0:	682e      	ldr	r6, [r5, #0]
			  		  while (*str++)
 800e0a2:	f896 c000 	ldrb.w	ip, [r6]
			  		  char * str = va_arg(va, char *);
 800e0a6:	f105 0e04 	add.w	lr, r5, #4
			  		  while (*str++)
 800e0aa:	1c70      	adds	r0, r6, #1
 800e0ac:	f1bc 0f00 	cmp.w	ip, #0
 800e0b0:	d005      	beq.n	800e0be <iprintf+0xe2>
 800e0b2:	1b96      	subs	r6, r2, r6
 800e0b4:	1982      	adds	r2, r0, r6
 800e0b6:	f810 5b01 	ldrb.w	r5, [r0], #1
 800e0ba:	2d00      	cmp	r5, #0
 800e0bc:	d1fa      	bne.n	800e0b4 <iprintf+0xd8>
	while (*fmt)
 800e0be:	7858      	ldrb	r0, [r3, #1]
			  		  char * str = va_arg(va, char *);
 800e0c0:	4675      	mov	r5, lr
		++fmt;
 800e0c2:	3301      	adds	r3, #1
	while (*fmt)
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d19f      	bne.n	800e008 <iprintf+0x2c>
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
 800e0c8:	3207      	adds	r2, #7
 800e0ca:	f022 0207 	bic.w	r2, r2, #7
 800e0ce:	ebad 0d02 	sub.w	sp, sp, r2
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 800e0d2:	4668      	mov	r0, sp
 800e0d4:	4622      	mov	r2, r4
		va_start(va, fmt);
 800e0d6:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800e0d8:	f7ff feba 	bl	800de50 <ts_formatstring>
		length = _write(1, buf, length);
 800e0dc:	4669      	mov	r1, sp
 800e0de:	4602      	mov	r2, r0
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	f7ff fe6d 	bl	800ddc0 <_write>
		va_end(va);
	}
	return length;
}
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e0ee:	b004      	add	sp, #16
 800e0f0:	4770      	bx	lr
				  length += 11;
 800e0f2:	320b      	adds	r2, #11
				  va_arg(va, int);
 800e0f4:	3504      	adds	r5, #4
 800e0f6:	e783      	b.n	800e000 <iprintf+0x24>
				  length += 8;
 800e0f8:	3208      	adds	r2, #8
				  va_arg(va, unsigned int);
 800e0fa:	3504      	adds	r5, #4
 800e0fc:	e780      	b.n	800e000 <iprintf+0x24>
		  		  va_arg(va, int);
 800e0fe:	3504      	adds	r5, #4
				  ++length;
 800e100:	3201      	adds	r2, #1
 800e102:	e77d      	b.n	800e000 <iprintf+0x24>
	while (*fmt)
 800e104:	4602      	mov	r2, r0
 800e106:	e7df      	b.n	800e0c8 <iprintf+0xec>

0800e108 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4605      	mov	r5, r0
	int length = strlen(s);
 800e10c:	f7f2 f86a 	bl	80001e4 <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 800e110:	4629      	mov	r1, r5
 800e112:	4602      	mov	r2, r0
	int length = strlen(s);
 800e114:	4604      	mov	r4, r0
	numbytes = _write(1, (char*)s, length);
 800e116:	2001      	movs	r0, #1
 800e118:	f7ff fe52 	bl	800ddc0 <_write>
	numbytes += _write(1, "\n", 1);
 800e11c:	2201      	movs	r2, #1
	numbytes = _write(1, (char*)s, length);
 800e11e:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800e120:	4905      	ldr	r1, [pc, #20]	; (800e138 <puts+0x30>)
 800e122:	4610      	mov	r0, r2
 800e124:	f7ff fe4c 	bl	800ddc0 <_write>

	if (numbytes == (length+1))
 800e128:	3401      	adds	r4, #1
	numbytes += _write(1, "\n", 1);
 800e12a:	4428      	add	r0, r5
	{
		res = EOF;
	}

	return res;
}
 800e12c:	1b00      	subs	r0, r0, r4
 800e12e:	bf18      	it	ne
 800e130:	f04f 30ff 	movne.w	r0, #4294967295
 800e134:	bd38      	pop	{r3, r4, r5, pc}
 800e136:	bf00      	nop
 800e138:	08011d90 	.word	0x08011d90

0800e13c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800e13c:	b538      	push	{r3, r4, r5, lr}

  huart5.Instance = UART5;
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <MX_UART5_Init+0x34>)
 800e140:	4a0c      	ldr	r2, [pc, #48]	; (800e174 <MX_UART5_Init+0x38>)
  huart5.Init.BaudRate = 187500;
 800e142:	4d0d      	ldr	r5, [pc, #52]	; (800e178 <MX_UART5_Init+0x3c>)
  huart5.Instance = UART5;
 800e144:	601a      	str	r2, [r3, #0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_EVEN;
 800e146:	f44f 6480 	mov.w	r4, #1024	; 0x400
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e14a:	2200      	movs	r2, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e14c:	210c      	movs	r1, #12
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800e14e:	4618      	mov	r0, r3
  huart5.Init.BaudRate = 187500;
 800e150:	605d      	str	r5, [r3, #4]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800e152:	611c      	str	r4, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e154:	6159      	str	r1, [r3, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e156:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e158:	60da      	str	r2, [r3, #12]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e15a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e15c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800e15e:	f7f3 fdb1 	bl	8001cc4 <HAL_UART_Init>
 800e162:	b900      	cbnz	r0, 800e166 <MX_UART5_Init+0x2a>
 800e164:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 800e166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800e16a:	f7ff bda9 	b.w	800dcc0 <Error_Handler>
 800e16e:	bf00      	nop
 800e170:	2000ba34 	.word	0x2000ba34
 800e174:	40005000 	.word	0x40005000
 800e178:	0002dc6c 	.word	0x0002dc6c

0800e17c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART5)
 800e180:	6802      	ldr	r2, [r0, #0]
 800e182:	4b2a      	ldr	r3, [pc, #168]	; (800e22c <HAL_UART_MspInit+0xb0>)
{
 800e184:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e186:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART5)
 800e188:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e18a:	9404      	str	r4, [sp, #16]
 800e18c:	9403      	str	r4, [sp, #12]
 800e18e:	9405      	str	r4, [sp, #20]
 800e190:	9406      	str	r4, [sp, #24]
 800e192:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==UART5)
 800e194:	d002      	beq.n	800e19c <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800e196:	b008      	add	sp, #32
 800e198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 800e19c:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800e1a0:	9400      	str	r4, [sp, #0]
 800e1a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1a4:	4822      	ldr	r0, [pc, #136]	; (800e230 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800e1a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e1aa:	641a      	str	r2, [r3, #64]	; 0x40
 800e1ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e1b2:	9200      	str	r2, [sp, #0]
 800e1b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1b6:	9401      	str	r4, [sp, #4]
 800e1b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1ba:	f042 0204 	orr.w	r2, r2, #4
 800e1be:	631a      	str	r2, [r3, #48]	; 0x30
 800e1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1c2:	f002 0204 	and.w	r2, r2, #4
 800e1c6:	9201      	str	r2, [sp, #4]
 800e1c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e1ca:	9402      	str	r4, [sp, #8]
 800e1cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1ce:	f042 0208 	orr.w	r2, r2, #8
 800e1d2:	631a      	str	r2, [r3, #48]	; 0x30
 800e1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d6:	f003 0308 	and.w	r3, r3, #8
 800e1da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1dc:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e1e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e1e4:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1e6:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800e1e8:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1ea:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e1ec:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e1ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1f0:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e1f4:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1f6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800e1f8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1fa:	f7f2 feaf 	bl	8000f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e1fe:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e200:	a903      	add	r1, sp, #12
 800e202:	480c      	ldr	r0, [pc, #48]	; (800e234 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e204:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e206:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e20a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e20c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800e20e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e210:	f7f2 fea4 	bl	8000f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800e214:	4622      	mov	r2, r4
 800e216:	2105      	movs	r1, #5
 800e218:	2035      	movs	r0, #53	; 0x35
 800e21a:	f7f2 f9c3 	bl	80005a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800e21e:	2035      	movs	r0, #53	; 0x35
 800e220:	f7f2 f9f6 	bl	8000610 <HAL_NVIC_EnableIRQ>
}
 800e224:	b008      	add	sp, #32
 800e226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e22a:	bf00      	nop
 800e22c:	40005000 	.word	0x40005000
 800e230:	40020800 	.word	0x40020800
 800e234:	40020c00 	.word	0x40020c00

0800e238 <web_server_thread>:

static void get_query_parser(char * in_query) {

}

void web_server_thread(void *arg) {
 800e238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e23c:	4604      	mov	r4, r0
 800e23e:	b08d      	sub	sp, #52	; 0x34
	struct fs_file file;

	//sprintf(PAGE_BODY,"%s%s%s%s",PAGE_HEADER_200_OK,PAGE_HEADER_SERVER,PAGE_HEADER_CONTENT_TEXT,ip4addr_ntoa(&gnetif.ip_addr));
	//sprintf(PAGE_BODY,"%s%s",PAGE_HEADER,ip4addr_ntoa(&gnetif.ip_addr));

	printf("Net task created.\n");
 800e240:	4875      	ldr	r0, [pc, #468]	; (800e418 <web_server_thread+0x1e0>)
			}
			netconn_close(newconn);
			netbuf_delete(inbuf);
			netconn_delete(newconn);
		} else {
			printf("Accept failed.\n");
 800e242:	4e76      	ldr	r6, [pc, #472]	; (800e41c <web_server_thread+0x1e4>)
			printf("Accept.\n");
 800e244:	4d76      	ldr	r5, [pc, #472]	; (800e420 <web_server_thread+0x1e8>)
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800e246:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800e474 <web_server_thread+0x23c>
	printf("Net task created.\n");
 800e24a:	f7ff ff5d 	bl	800e108 <puts>
	osDelay(1);
 800e24e:	2001      	movs	r0, #1
 800e250:	f7f3 fee0 	bl	8002014 <osDelay>
		err = netconn_accept(arg_conn, &newconn);
 800e254:	a905      	add	r1, sp, #20
 800e256:	4620      	mov	r0, r4
 800e258:	f7f5 fe88 	bl	8003f6c <netconn_accept>
		if (err == ERR_OK) {
 800e25c:	b9d8      	cbnz	r0, 800e296 <web_server_thread+0x5e>
			printf("Accept.\n");
 800e25e:	4628      	mov	r0, r5
 800e260:	f7ff ff52 	bl	800e108 <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 800e264:	a904      	add	r1, sp, #16
 800e266:	9805      	ldr	r0, [sp, #20]
 800e268:	f7f5 fede 	bl	8004028 <netconn_recv>
			if (recv_err == ERR_OK) {
 800e26c:	2800      	cmp	r0, #0
 800e26e:	f040 8083 	bne.w	800e378 <web_server_thread+0x140>
				if (netconn_err(newconn) == ERR_OK) {
 800e272:	9805      	ldr	r0, [sp, #20]
 800e274:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e278:	b1ab      	cbz	r3, 800e2a6 <web_server_thread+0x6e>
			netconn_close(newconn);
 800e27a:	f7f6 f869 	bl	8004350 <netconn_close>
			netbuf_delete(inbuf);
 800e27e:	9804      	ldr	r0, [sp, #16]
 800e280:	f7f7 f982 	bl	8005588 <netbuf_delete>
			netconn_delete(newconn);
 800e284:	9805      	ldr	r0, [sp, #20]
 800e286:	f7f5 fe01 	bl	8003e8c <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 800e28a:	a905      	add	r1, sp, #20
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7f5 fe6d 	bl	8003f6c <netconn_accept>
		if (err == ERR_OK) {
 800e292:	2800      	cmp	r0, #0
 800e294:	d0e3      	beq.n	800e25e <web_server_thread+0x26>
			printf("Accept failed.\n");
 800e296:	4630      	mov	r0, r6
 800e298:	f7ff ff36 	bl	800e108 <puts>
			osDelay(1000);
 800e29c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e2a0:	f7f3 feb8 	bl	8002014 <osDelay>
 800e2a4:	e7d6      	b.n	800e254 <web_server_thread+0x1c>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 800e2a6:	f10d 020e 	add.w	r2, sp, #14
 800e2aa:	a906      	add	r1, sp, #24
 800e2ac:	9804      	ldr	r0, [sp, #16]
 800e2ae:	f7f7 f97d 	bl	80055ac <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 800e2b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	d95e      	bls.n	800e378 <web_server_thread+0x140>
 800e2ba:	9f06      	ldr	r7, [sp, #24]
 800e2bc:	4959      	ldr	r1, [pc, #356]	; (800e424 <web_server_thread+0x1ec>)
 800e2be:	4638      	mov	r0, r7
 800e2c0:	2205      	movs	r2, #5
 800e2c2:	f000 f949 	bl	800e558 <strncmp>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d156      	bne.n	800e378 <web_server_thread+0x140>
						if ((strncmp((char const *) buf, " ", 1) == 0)
 800e2ca:	797b      	ldrb	r3, [r7, #5]
						buf+=5;
 800e2cc:	3705      	adds	r7, #5
						if ((strncmp((char const *) buf, " ", 1) == 0)
 800e2ce:	2b20      	cmp	r3, #32
						buf+=5;
 800e2d0:	9706      	str	r7, [sp, #24]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 800e2d2:	d053      	beq.n	800e37c <web_server_thread+0x144>
								|| (strncmp((char const *) buf,
 800e2d4:	220b      	movs	r2, #11
 800e2d6:	4954      	ldr	r1, [pc, #336]	; (800e428 <web_server_thread+0x1f0>)
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f000 f93d 	bl	800e558 <strncmp>
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d04c      	beq.n	800e37c <web_server_thread+0x144>
						} else if (strncmp((char const *) buf,
 800e2e2:	220c      	movs	r2, #12
 800e2e4:	4951      	ldr	r1, [pc, #324]	; (800e42c <web_server_thread+0x1f4>)
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f000 f936 	bl	800e558 <strncmp>
 800e2ec:	4681      	mov	r9, r0
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d053      	beq.n	800e39a <web_server_thread+0x162>
						} else if (strncmp((char const *) buf,
 800e2f2:	220c      	movs	r2, #12
 800e2f4:	494e      	ldr	r1, [pc, #312]	; (800e430 <web_server_thread+0x1f8>)
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	f000 f92e 	bl	800e558 <strncmp>
 800e2fc:	4681      	mov	r9, r0
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d05b      	beq.n	800e3ba <web_server_thread+0x182>
						} else if (strncmp((char const *) buf, "style.css",
 800e302:	2209      	movs	r2, #9
 800e304:	494b      	ldr	r1, [pc, #300]	; (800e434 <web_server_thread+0x1fc>)
 800e306:	4638      	mov	r0, r7
 800e308:	f000 f926 	bl	800e558 <strncmp>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d056      	beq.n	800e3be <web_server_thread+0x186>
						} else if (strncmp((char const *) buf,
 800e310:	220e      	movs	r2, #14
 800e312:	4949      	ldr	r1, [pc, #292]	; (800e438 <web_server_thread+0x200>)
 800e314:	4638      	mov	r0, r7
 800e316:	f000 f91f 	bl	800e558 <strncmp>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d051      	beq.n	800e3c2 <web_server_thread+0x18a>
						} else if (strncmp((char const *) buf,
 800e31e:	220c      	movs	r2, #12
 800e320:	4946      	ldr	r1, [pc, #280]	; (800e43c <web_server_thread+0x204>)
 800e322:	4638      	mov	r0, r7
 800e324:	f000 f918 	bl	800e558 <strncmp>
 800e328:	4681      	mov	r9, r0
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d064      	beq.n	800e3f8 <web_server_thread+0x1c0>
						} else if (strncmp((char const *) buf,
 800e32e:	4638      	mov	r0, r7
 800e330:	220c      	movs	r2, #12
 800e332:	4943      	ldr	r1, [pc, #268]	; (800e440 <web_server_thread+0x208>)
 800e334:	f000 f910 	bl	800e558 <strncmp>
 800e338:	4607      	mov	r7, r0
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d147      	bne.n	800e3ce <web_server_thread+0x196>
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER, "187500");
 800e33e:	4941      	ldr	r1, [pc, #260]	; (800e444 <web_server_thread+0x20c>)
 800e340:	4b41      	ldr	r3, [pc, #260]	; (800e448 <web_server_thread+0x210>)
 800e342:	4a42      	ldr	r2, [pc, #264]	; (800e44c <web_server_thread+0x214>)
 800e344:	4842      	ldr	r0, [pc, #264]	; (800e450 <web_server_thread+0x218>)
 800e346:	f7ff fe3b 	bl	800dfc0 <siprintf>
							netconn_write(newconn, PAGE_BODY,
 800e34a:	4841      	ldr	r0, [pc, #260]	; (800e450 <web_server_thread+0x218>)
 800e34c:	f7f1 ff4a 	bl	80001e4 <strlen>
 800e350:	9905      	ldr	r1, [sp, #20]
 800e352:	9700      	str	r7, [sp, #0]
 800e354:	4602      	mov	r2, r0
 800e356:	2301      	movs	r3, #1
 800e358:	4608      	mov	r0, r1
 800e35a:	493d      	ldr	r1, [pc, #244]	; (800e450 <web_server_thread+0x218>)
 800e35c:	f7f5 ffa6 	bl	80042ac <netconn_write_partly>
						buf[buflen] = 0;
 800e360:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e364:	9a06      	ldr	r2, [sp, #24]
						printf("-> %s\n", buf);
 800e366:	483b      	ldr	r0, [pc, #236]	; (800e454 <web_server_thread+0x21c>)
						buf[buflen] = 0;
 800e368:	2100      	movs	r1, #0
 800e36a:	54d1      	strb	r1, [r2, r3]
						printf("-> %s\n", buf);
 800e36c:	9906      	ldr	r1, [sp, #24]
 800e36e:	f7ff fe35 	bl	800dfdc <iprintf>
						osDelay(1);
 800e372:	2001      	movs	r0, #1
 800e374:	f7f3 fe4e 	bl	8002014 <osDelay>
 800e378:	9805      	ldr	r0, [sp, #20]
 800e37a:	e77e      	b.n	800e27a <web_server_thread+0x42>
							fs_open(&file, "/index.shtml");
 800e37c:	4936      	ldr	r1, [pc, #216]	; (800e458 <web_server_thread+0x220>)
							fs_open(&file, "/style.css");
 800e37e:	a807      	add	r0, sp, #28
 800e380:	f7f7 fa70 	bl	8005864 <fs_open>
							netconn_write(newconn,
 800e384:	2300      	movs	r3, #0
 800e386:	9a08      	ldr	r2, [sp, #32]
 800e388:	9907      	ldr	r1, [sp, #28]
 800e38a:	9805      	ldr	r0, [sp, #20]
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	f7f5 ff8d 	bl	80042ac <netconn_write_partly>
							fs_close(&file);
 800e392:	a807      	add	r0, sp, #28
 800e394:	f7f7 fa8a 	bl	80058ac <fs_close>
 800e398:	e7e2      	b.n	800e360 <web_server_thread+0x128>
							fs_open(&file, "/img/logo.png");
 800e39a:	4930      	ldr	r1, [pc, #192]	; (800e45c <web_server_thread+0x224>)
							fs_open(&file, "/img/icon.png");
 800e39c:	a807      	add	r0, sp, #28
 800e39e:	f7f7 fa61 	bl	8005864 <fs_open>
							netconn_write(newconn,
 800e3a2:	9a08      	ldr	r2, [sp, #32]
 800e3a4:	9907      	ldr	r1, [sp, #28]
 800e3a6:	9805      	ldr	r0, [sp, #20]
 800e3a8:	f8cd 9000 	str.w	r9, [sp]
 800e3ac:	464b      	mov	r3, r9
 800e3ae:	f7f5 ff7d 	bl	80042ac <netconn_write_partly>
							fs_close(&file);
 800e3b2:	a807      	add	r0, sp, #28
 800e3b4:	f7f7 fa7a 	bl	80058ac <fs_close>
 800e3b8:	e7d2      	b.n	800e360 <web_server_thread+0x128>
							fs_open(&file, "/img/icon.png");
 800e3ba:	4929      	ldr	r1, [pc, #164]	; (800e460 <web_server_thread+0x228>)
 800e3bc:	e7ee      	b.n	800e39c <web_server_thread+0x164>
							fs_open(&file, "/style.css");
 800e3be:	4929      	ldr	r1, [pc, #164]	; (800e464 <web_server_thread+0x22c>)
 800e3c0:	e7dd      	b.n	800e37e <web_server_thread+0x146>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800e3c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	f7f2 fee2 	bl	8001190 <HAL_GPIO_TogglePin>
 800e3cc:	e7c8      	b.n	800e360 <web_server_thread+0x128>
							fs_open(&file, "/404.html");
 800e3ce:	4926      	ldr	r1, [pc, #152]	; (800e468 <web_server_thread+0x230>)
 800e3d0:	a807      	add	r0, sp, #28
 800e3d2:	f7f7 fa47 	bl	8005864 <fs_open>
							netconn_write(newconn,
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9a08      	ldr	r2, [sp, #32]
 800e3da:	9907      	ldr	r1, [sp, #28]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	9805      	ldr	r0, [sp, #20]
 800e3e0:	f7f5 ff64 	bl	80042ac <netconn_write_partly>
							fs_close(&file);
 800e3e4:	a807      	add	r0, sp, #28
 800e3e6:	f7f7 fa61 	bl	80058ac <fs_close>
							printf("File not found\n");
 800e3ea:	4820      	ldr	r0, [pc, #128]	; (800e46c <web_server_thread+0x234>)
 800e3ec:	f7ff fe8c 	bl	800e108 <puts>
							osDelay(1);
 800e3f0:	2001      	movs	r0, #1
 800e3f2:	f7f3 fe0f 	bl	8002014 <osDelay>
 800e3f6:	e7b3      	b.n	800e360 <web_server_thread+0x128>
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 800e3f8:	481d      	ldr	r0, [pc, #116]	; (800e470 <web_server_thread+0x238>)
 800e3fa:	f7f8 fe51 	bl	80070a0 <ip4addr_ntoa>
 800e3fe:	4911      	ldr	r1, [pc, #68]	; (800e444 <web_server_thread+0x20c>)
 800e400:	4a12      	ldr	r2, [pc, #72]	; (800e44c <web_server_thread+0x214>)
 800e402:	4603      	mov	r3, r0
 800e404:	4812      	ldr	r0, [pc, #72]	; (800e450 <web_server_thread+0x218>)
 800e406:	f7ff fddb 	bl	800dfc0 <siprintf>
							netconn_write(newconn, PAGE_BODY,
 800e40a:	4811      	ldr	r0, [pc, #68]	; (800e450 <web_server_thread+0x218>)
 800e40c:	f7f1 feea 	bl	80001e4 <strlen>
 800e410:	9905      	ldr	r1, [sp, #20]
 800e412:	f8cd 9000 	str.w	r9, [sp]
 800e416:	e79d      	b.n	800e354 <web_server_thread+0x11c>
 800e418:	08012868 	.word	0x08012868
 800e41c:	08012964 	.word	0x08012964
 800e420:	0801287c 	.word	0x0801287c
 800e424:	08012884 	.word	0x08012884
 800e428:	0801288c 	.word	0x0801288c
 800e42c:	080128a8 	.word	0x080128a8
 800e430:	080128c8 	.word	0x080128c8
 800e434:	080128e8 	.word	0x080128e8
 800e438:	08012900 	.word	0x08012900
 800e43c:	08012910 	.word	0x08012910
 800e440:	08012928 	.word	0x08012928
 800e444:	08012920 	.word	0x08012920
 800e448:	08012938 	.word	0x08012938
 800e44c:	080127fc 	.word	0x080127fc
 800e450:	20003f28 	.word	0x20003f28
 800e454:	0801295c 	.word	0x0801295c
 800e458:	08012898 	.word	0x08012898
 800e45c:	080128b8 	.word	0x080128b8
 800e460:	080128d8 	.word	0x080128d8
 800e464:	080128f4 	.word	0x080128f4
 800e468:	08012940 	.word	0x08012940
 800e46c:	0801294c 	.word	0x0801294c
 800e470:	2000b9b8 	.word	0x2000b9b8
 800e474:	40020400 	.word	0x40020400

0800e478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e478:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e4b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e47c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e47e:	e003      	b.n	800e488 <LoopCopyDataInit>

0800e480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e480:	4b0c      	ldr	r3, [pc, #48]	; (800e4b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e486:	3104      	adds	r1, #4

0800e488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e488:	480b      	ldr	r0, [pc, #44]	; (800e4b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e48a:	4b0c      	ldr	r3, [pc, #48]	; (800e4bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e48c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e48e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e490:	d3f6      	bcc.n	800e480 <CopyDataInit>
  ldr  r2, =_sbss
 800e492:	4a0b      	ldr	r2, [pc, #44]	; (800e4c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e494:	e002      	b.n	800e49c <LoopFillZerobss>

0800e496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e498:	f842 3b04 	str.w	r3, [r2], #4

0800e49c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e49c:	4b09      	ldr	r3, [pc, #36]	; (800e4c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e49e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e4a0:	d3f9      	bcc.n	800e496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e4a2:	f7ff fcad 	bl	800de00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e4a6:	f000 f811 	bl	800e4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e4aa:	f7ff fbf1 	bl	800dc90 <main>
  bx  lr    
 800e4ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e4b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e4b4:	08012984 	.word	0x08012984
  ldr  r0, =_sdata
 800e4b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e4bc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800e4c0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800e4c4:	2000ba74 	.word	0x2000ba74

0800e4c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e4c8:	e7fe      	b.n	800e4c8 <ADC_IRQHandler>
	...

0800e4cc <__libc_init_array>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	4e0d      	ldr	r6, [pc, #52]	; (800e504 <__libc_init_array+0x38>)
 800e4d0:	4c0d      	ldr	r4, [pc, #52]	; (800e508 <__libc_init_array+0x3c>)
 800e4d2:	1ba4      	subs	r4, r4, r6
 800e4d4:	10a4      	asrs	r4, r4, #2
 800e4d6:	2500      	movs	r5, #0
 800e4d8:	42a5      	cmp	r5, r4
 800e4da:	d109      	bne.n	800e4f0 <__libc_init_array+0x24>
 800e4dc:	4e0b      	ldr	r6, [pc, #44]	; (800e50c <__libc_init_array+0x40>)
 800e4de:	4c0c      	ldr	r4, [pc, #48]	; (800e510 <__libc_init_array+0x44>)
 800e4e0:	f000 f84c 	bl	800e57c <_init>
 800e4e4:	1ba4      	subs	r4, r4, r6
 800e4e6:	10a4      	asrs	r4, r4, #2
 800e4e8:	2500      	movs	r5, #0
 800e4ea:	42a5      	cmp	r5, r4
 800e4ec:	d105      	bne.n	800e4fa <__libc_init_array+0x2e>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}
 800e4f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4f4:	4798      	blx	r3
 800e4f6:	3501      	adds	r5, #1
 800e4f8:	e7ee      	b.n	800e4d8 <__libc_init_array+0xc>
 800e4fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4fe:	4798      	blx	r3
 800e500:	3501      	adds	r5, #1
 800e502:	e7f2      	b.n	800e4ea <__libc_init_array+0x1e>
 800e504:	0801297c 	.word	0x0801297c
 800e508:	0801297c 	.word	0x0801297c
 800e50c:	0801297c 	.word	0x0801297c
 800e510:	08012980 	.word	0x08012980

0800e514 <memcmp>:
 800e514:	b510      	push	{r4, lr}
 800e516:	3901      	subs	r1, #1
 800e518:	4402      	add	r2, r0
 800e51a:	4290      	cmp	r0, r2
 800e51c:	d101      	bne.n	800e522 <memcmp+0xe>
 800e51e:	2000      	movs	r0, #0
 800e520:	bd10      	pop	{r4, pc}
 800e522:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e526:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e52a:	42a3      	cmp	r3, r4
 800e52c:	d0f5      	beq.n	800e51a <memcmp+0x6>
 800e52e:	1b18      	subs	r0, r3, r4
 800e530:	bd10      	pop	{r4, pc}

0800e532 <memcpy>:
 800e532:	b510      	push	{r4, lr}
 800e534:	1e43      	subs	r3, r0, #1
 800e536:	440a      	add	r2, r1
 800e538:	4291      	cmp	r1, r2
 800e53a:	d100      	bne.n	800e53e <memcpy+0xc>
 800e53c:	bd10      	pop	{r4, pc}
 800e53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e542:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e546:	e7f7      	b.n	800e538 <memcpy+0x6>

0800e548 <memset>:
 800e548:	4402      	add	r2, r0
 800e54a:	4603      	mov	r3, r0
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d100      	bne.n	800e552 <memset+0xa>
 800e550:	4770      	bx	lr
 800e552:	f803 1b01 	strb.w	r1, [r3], #1
 800e556:	e7f9      	b.n	800e54c <memset+0x4>

0800e558 <strncmp>:
 800e558:	b510      	push	{r4, lr}
 800e55a:	b16a      	cbz	r2, 800e578 <strncmp+0x20>
 800e55c:	3901      	subs	r1, #1
 800e55e:	1884      	adds	r4, r0, r2
 800e560:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e564:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e568:	4293      	cmp	r3, r2
 800e56a:	d103      	bne.n	800e574 <strncmp+0x1c>
 800e56c:	42a0      	cmp	r0, r4
 800e56e:	d001      	beq.n	800e574 <strncmp+0x1c>
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1f5      	bne.n	800e560 <strncmp+0x8>
 800e574:	1a98      	subs	r0, r3, r2
 800e576:	bd10      	pop	{r4, pc}
 800e578:	4610      	mov	r0, r2
 800e57a:	bd10      	pop	{r4, pc}

0800e57c <_init>:
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57e:	bf00      	nop
 800e580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e582:	bc08      	pop	{r3}
 800e584:	469e      	mov	lr, r3
 800e586:	4770      	bx	lr

0800e588 <_fini>:
 800e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58a:	bf00      	nop
 800e58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58e:	bc08      	pop	{r3}
 800e590:	469e      	mov	lr, r3
 800e592:	4770      	bx	lr
